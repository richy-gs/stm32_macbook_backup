
EntregaFinal_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d58c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  0800d6a0  0800d6a0  0000e6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e558  0800e558  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e558  0800e558  0000f558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e560  0800e560  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e560  0800e560  0000f560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e564  0800e564  0000f564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e568  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002abc  200001e8  0800e750  000101e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002ca4  0800e750  00010ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164fc  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1c  00000000  00000000  0002670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0002a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f77  00000000  00000000  0002b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b446  00000000  00000000  0002c7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017652  00000000  00000000  00047c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096794  00000000  00000000  0005f277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5a0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac4  00000000  00000000  000f5a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000fc514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d684 	.word	0x0800d684

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800d684 	.word	0x0800d684

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b092      	sub	sp, #72	@ 0x48
 8001094:	af00      	add	r7, sp, #0
 8001096:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800109a:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800109e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a8:	f7ff fc92 	bl	80009d0 <__aeabi_dcmple>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d020      	beq.n	80010f4 <look2_binlxpw+0x64>
    iLeft = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 80010b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010ce:	3308      	adds	r3, #8
 80010d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff f845 	bl	8000168 <__aeabi_dsub>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff fb21 	bl	800072c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80010f2:	e08e      	b.n	8001212 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80010f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010fc:	4413      	add	r3, r2
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001106:	f7ff fc59 	bl	80009bc <__aeabi_dcmplt>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d04d      	beq.n	80011ac <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8001110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[0U];
 800111c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 8001122:	e016      	b.n	8001152 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 8001124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800112a:	4413      	add	r3, r2
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001134:	f7ff fc42 	bl	80009bc <__aeabi_dcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 800113e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001142:	e001      	b.n	8001148 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 8001144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001148:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800114a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114c:	4413      	add	r3, r2
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 8001152:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d8e3      	bhi.n	8001124 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800115c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001162:	4413      	add	r3, r2
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4614      	mov	r4, r2
 8001176:	461d      	mov	r5, r3
 8001178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800117a:	3301      	adds	r3, #1
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001180:	4413      	add	r3, r2
 8001182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800118c:	4413      	add	r3, r2
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7fe ffe9 	bl	8000168 <__aeabi_dsub>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff fac5 	bl	800072c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80011aa:	e032      	b.n	8001212 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 80011ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 80011b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80011bc:	3b01      	subs	r3, #1
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011cc:	f7fe ffcc 	bl	8000168 <__aeabi_dsub>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	461d      	mov	r5, r3
 80011d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011e0:	4413      	add	r3, r2
 80011e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80011ee:	3b01      	subs	r3, #1
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011f4:	4413      	add	r3, r2
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7fe ffb5 	bl	8000168 <__aeabi_dsub>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff fa91 	bl	800072c <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 8001212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001216:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 800121a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121c:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 800121e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001228:	f7ff fbd2 	bl	80009d0 <__aeabi_dcmple>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d020      	beq.n	8001274 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8001236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001240:	f7fe ff92 	bl	8000168 <__aeabi_dsub>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800124e:	3308      	adds	r3, #8
 8001250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7fe ff85 	bl	8000168 <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff fa61 	bl	800072c <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001272:	e095      	b.n	80013a0 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001276:	3304      	adds	r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800127e:	4413      	add	r3, r2
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001288:	f7ff fb98 	bl	80009bc <__aeabi_dcmplt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04f      	beq.n	8001332 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001294:	3304      	adds	r3, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[1U];
 80012a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 80012a8:	e016      	b.n	80012d8 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 80012aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012b0:	4413      	add	r3, r2
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ba:	f7ff fb7f 	bl	80009bc <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <look2_binlxpw+0x23a>
        iRght = bpIdx;
 80012c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012c8:	e001      	b.n	80012ce <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 80012ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80012ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d2:	4413      	add	r3, r2
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 80012d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d8e3      	bhi.n	80012aa <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 80012e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012e8:	4413      	add	r3, r2
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012f2:	f7fe ff39 	bl	8000168 <__aeabi_dsub>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	3301      	adds	r3, #1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001306:	4413      	add	r3, r2
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001312:	4413      	add	r3, r2
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7fe ff26 	bl	8000168 <__aeabi_dsub>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff fa02 	bl	800072c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001330:	e036      	b.n	80013a0 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8001332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001334:	3304      	adds	r3, #4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 800133c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001346:	3b01      	subs	r3, #1
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800134c:	4413      	add	r3, r2
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001356:	f7fe ff07 	bl	8000168 <__aeabi_dsub>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4614      	mov	r4, r2
 8001360:	461d      	mov	r5, r3
 8001362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001364:	3304      	adds	r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800137c:	3b01      	subs	r3, #1
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001382:	4413      	add	r3, r2
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7fe feee 	bl	8000168 <__aeabi_dsub>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f7ff f9ca 	bl	800072c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 80013a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80013a4:	fb03 f202 	mul.w	r2, r3, r2
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	4413      	add	r3, r2
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 80013ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b0:	3301      	adds	r3, #1
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013b6:	4413      	add	r3, r2
 80013b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013c2:	4413      	add	r3, r2
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7fe fece 	bl	8000168 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013d8:	f7ff f87e 	bl	80004d8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013ea:	4413      	add	r3, r2
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe febc 	bl	800016c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  bpIdx += stride;
 80013fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001400:	4413      	add	r3, r2
 8001402:	63bb      	str	r3, [r7, #56]	@ 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 8001404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001406:	3301      	adds	r3, #1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800140c:	4413      	add	r3, r2
 800140e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001418:	4413      	add	r3, r2
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7fe fea3 	bl	8000168 <__aeabi_dsub>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800142e:	f7ff f853 	bl	80004d8 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001440:	4413      	add	r3, r2
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7fe fe91 	bl	800016c <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001456:	f7fe fe87 	bl	8000168 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001466:	f7ff f837 	bl	80004d8 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001476:	f7fe fe79 	bl	800016c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
}
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	3748      	adds	r7, #72	@ 0x48
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}

08001488 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a0:	f7ff fa96 	bl	80009d0 <__aeabi_dcmple>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d020      	beq.n	80014ec <look1_binlxpw+0x64>
    iLeft = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b8:	f7fe fe56 	bl	8000168 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4614      	mov	r4, r2
 80014c2:	461d      	mov	r5, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3308      	adds	r3, #8
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fe49 	bl	8000168 <__aeabi_dsub>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7ff f925 	bl	800072c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80014ea:	e087      	b.n	80015fc <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80014ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014fc:	f7ff fa5e 	bl	80009bc <__aeabi_dcmplt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d04b      	beq.n	800159e <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8001506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 8001510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001512:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 8001514:	e016      	b.n	8001544 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001526:	f7ff fa49 	bl	80009bc <__aeabi_dcmplt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <look1_binlxpw+0xae>
        iRght = bpIdx;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e001      	b.n	800153a <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4413      	add	r3, r2
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d8e3      	bhi.n	8001516 <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800155e:	f7fe fe03 	bl	8000168 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	461d      	mov	r5, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	3301      	adds	r3, #1
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fdf0 	bl	8000168 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800159c:	e02e      	b.n	80015fc <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 800159e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a0:	3b01      	subs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 80015a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80015aa:	3b01      	subs	r3, #1
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ba:	f7fe fdd5 	bl	8000168 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80015d8:	3b01      	subs	r3, #1
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fdc0 	bl	8000168 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7ff f89c 	bl	800072c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fda7 	bl	8000168 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001626:	f7fe ff57 	bl	80004d8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fd95 	bl	800016c <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
}
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bdb0      	pop	{r4, r5, r7, pc}

08001650 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 8001658:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800165e:	3b01      	subs	r3, #1
 8001660:	2b03      	cmp	r3, #3
 8001662:	d86c      	bhi.n	800173e <EngTrModel_gear_state+0xee>
 8001664:	a201      	add	r2, pc, #4	@ (adr r2, 800166c <EngTrModel_gear_state+0x1c>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	0800167d 	.word	0x0800167d
 8001670:	0800169d 	.word	0x0800169d
 8001674:	080016bb 	.word	0x080016bb
 8001678:	080016f5 	.word	0x080016f5
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d155      	bne.n	8001730 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001684:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 8001686:	2203      	movs	r2, #3
 8001688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 800168c:	492f      	ldr	r1, [pc, #188]	@ (800174c <EngTrModel_gear_state+0xfc>)
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001696:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 800169a:	e049      	b.n	8001730 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d147      	bne.n	8001734 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 80016a4:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 80016ac:	4927      	ldr	r1, [pc, #156]	@ (800174c <EngTrModel_gear_state+0xfc>)
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <EngTrModel_gear_state+0x100>)
 80016b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 80016b8:	e03c      	b.n	8001734 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <EngTrModel_gear_state+0x8c>
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d138      	bne.n	8001738 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 80016ce:	491f      	ldr	r1, [pc, #124]	@ (800174c <EngTrModel_gear_state+0xfc>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <EngTrModel_gear_state+0x100>)
 80016d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80016da:	e00a      	b.n	80016f2 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 1.0;
 80016e4:	4919      	ldr	r1, [pc, #100]	@ (800174c <EngTrModel_gear_state+0xfc>)
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <EngTrModel_gear_state+0x104>)
 80016ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80016f0:	bf00      	nop
    }
    break;
 80016f2:	e021      	b.n	8001738 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <EngTrModel_gear_state+0xc6>
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d11d      	bne.n	800173c <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 8001702:	2202      	movs	r2, #2
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 4.0;
 8001708:	4910      	ldr	r1, [pc, #64]	@ (800174c <EngTrModel_gear_state+0xfc>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <EngTrModel_gear_state+0x108>)
 8001710:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 8001714:	e00b      	b.n	800172e <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <EngTrModel_gear_state+0xf8>)
 8001718:	2203      	movs	r2, #3
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 800171e:	490b      	ldr	r1, [pc, #44]	@ (800174c <EngTrModel_gear_state+0xfc>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001728:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 800172c:	bf00      	nop
    }
    break;
 800172e:	e005      	b.n	800173c <EngTrModel_gear_state+0xec>
    break;
 8001730:	bf00      	nop
 8001732:	e004      	b.n	800173e <EngTrModel_gear_state+0xee>
    break;
 8001734:	bf00      	nop
 8001736:	e002      	b.n	800173e <EngTrModel_gear_state+0xee>
    break;
 8001738:	bf00      	nop
 800173a:	e000      	b.n	800173e <EngTrModel_gear_state+0xee>
    break;
 800173c:	bf00      	nop
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000238 	.word	0x20000238
 800174c:	20000208 	.word	0x20000208
 8001750:	40080000 	.word	0x40080000
 8001754:	3ff00000 	.word	0x3ff00000
 8001758:	40100000 	.word	0x40100000

0800175c <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001766:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800176a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800176e:	f001 fec9 	bl	8003504 <rtIsNaN>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <rt_powd_snf+0x2a>
 8001778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800177c:	f001 fec2 	bl	8003504 <rtIsNaN>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <rt_powd_snf+0x36>
    y = (rtNaN);
 8001786:	4b7e      	ldr	r3, [pc, #504]	@ (8001980 <rt_powd_snf+0x224>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001790:	e0ef      	b.n	8001972 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 80017a6:	68bc      	ldr	r4, [r7, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80017ae:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 80017b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b6:	f001 fe81 	bl	80034bc <rtIsInf>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d049      	beq.n	8001854 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <rt_powd_snf+0x228>)
 80017c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ca:	f7ff f8ed 	bl	80009a8 <__aeabi_dcmpeq>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <rt_powd_snf+0x84>
        y = 1.0;
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <rt_powd_snf+0x228>)
 80017da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017de:	e0c8      	b.n	8001972 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <rt_powd_snf+0x228>)
 80017e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ea:	f7ff f905 	bl	80009f8 <__aeabi_dcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d017      	beq.n	8001824 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001800:	f7ff f8fa 	bl	80009f8 <__aeabi_dcmpgt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <rt_powd_snf+0xba>
          y = (rtInf);
 800180a:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <rt_powd_snf+0x22c>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001814:	e0ad      	b.n	8001972 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001822:	e0a6      	b.n	8001972 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001830:	f7ff f8e2 	bl	80009f8 <__aeabi_dcmpgt>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <rt_powd_snf+0xec>
        y = 0.0;
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001846:	e094      	b.n	8001972 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 8001848:	4b4f      	ldr	r3, [pc, #316]	@ (8001988 <rt_powd_snf+0x22c>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001852:	e08e      	b.n	8001972 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001860:	f7ff f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <rt_powd_snf+0x11a>
      y = 1.0;
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b45      	ldr	r3, [pc, #276]	@ (8001984 <rt_powd_snf+0x228>)
 8001870:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001874:	e07d      	b.n	8001972 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b42      	ldr	r3, [pc, #264]	@ (8001984 <rt_powd_snf+0x228>)
 800187c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001880:	f7ff f892 	bl	80009a8 <__aeabi_dcmpeq>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01b      	beq.n	80018c2 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001896:	f7ff f8af 	bl	80009f8 <__aeabi_dcmpgt>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <rt_powd_snf+0x14e>
        y = u0;
 80018a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018a8:	e063      	b.n	8001972 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 80018aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	4934      	ldr	r1, [pc, #208]	@ (8001984 <rt_powd_snf+0x228>)
 80018b4:	f7fe ff3a 	bl	800072c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018c0:	e057      	b.n	8001972 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ce:	f7ff f86b 	bl	80009a8 <__aeabi_dcmpeq>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00a      	beq.n	80018ee <rt_powd_snf+0x192>
      y = u0 * u0;
 80018d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e0:	f7fe fdfa 	bl	80004d8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018ec:	e041      	b.n	8001972 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <rt_powd_snf+0x230>)
 80018f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f8:	f7ff f856 	bl	80009a8 <__aeabi_dcmpeq>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d011      	beq.n	8001926 <rt_powd_snf+0x1ca>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800190e:	f7ff f869 	bl	80009e4 <__aeabi_dcmpge>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8001918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191c:	f00a fea2 	bl	800c664 <sqrt>
 8001920:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001924:	e025      	b.n	8001972 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001932:	f7ff f843 	bl	80009bc <__aeabi_dcmplt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <rt_powd_snf+0x206>
 800193c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001940:	f00b f80e 	bl	800c960 <floor>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800194c:	f7ff f854 	bl	80009f8 <__aeabi_dcmpgt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <rt_powd_snf+0x206>
      y = (rtNaN);
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <rt_powd_snf+0x224>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001960:	e007      	b.n	8001972 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001966:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196a:	f00a fe13 	bl	800c594 <pow>
 800196e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    }
  }

  return y;
 8001972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	3730      	adds	r7, #48	@ 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	200005a8 	.word	0x200005a8
 8001984:	3ff00000 	.word	0x3ff00000
 8001988:	20000598 	.word	0x20000598
 800198c:	3fe00000 	.word	0x3fe00000

08001990 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001996:	4b8c      	ldr	r3, [pc, #560]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	498b      	ldr	r1, [pc, #556]	@ (8001bcc <EngTrModel_step+0x23c>)
 800199e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 80019a2:	4b8a      	ldr	r3, [pc, #552]	@ (8001bcc <EngTrModel_step+0x23c>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	4989      	ldr	r1, [pc, #548]	@ (8001bd0 <EngTrModel_step+0x240>)
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80019ae:	4b86      	ldr	r3, [pc, #536]	@ (8001bc8 <EngTrModel_step+0x238>)
 80019b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80019b4:	a380      	add	r3, pc, #512	@ (adr r3, 8001bb8 <EngTrModel_step+0x228>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fd8d 	bl	80004d8 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80019c6:	a37e      	add	r3, pc, #504	@ (adr r3, 8001bc0 <EngTrModel_step+0x230>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fd84 	bl	80004d8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80019d4:	497d      	ldr	r1, [pc, #500]	@ (8001bcc <EngTrModel_step+0x23c>)
 80019d6:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019de:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 80019e0:	4b79      	ldr	r3, [pc, #484]	@ (8001bc8 <EngTrModel_step+0x238>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019e8:	d004      	beq.n	80019f4 <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80019ea:	4b77      	ldr	r3, [pc, #476]	@ (8001bc8 <EngTrModel_step+0x238>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a75      	ldr	r2, [pc, #468]	@ (8001bc8 <EngTrModel_step+0x238>)
 80019f2:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80019f4:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <EngTrModel_step+0x238>)
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11a      	bne.n	8001a34 <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80019fe:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001a06:	4b70      	ldr	r3, [pc, #448]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    EngTrModel_B.Gear = 1.0;
 8001a16:	496d      	ldr	r1, [pc, #436]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <EngTrModel_step+0x244>)
 8001a1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001a22:	4b69      	ldr	r3, [pc, #420]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001a2a:	4b67      	ldr	r3, [pc, #412]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001a32:	e0e4      	b.n	8001bfe <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001a34:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a36:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fe05 	bl	8001650 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80d6 	beq.w	8001bfe <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a52:	4b61      	ldr	r3, [pc, #388]	@ (8001bd8 <EngTrModel_step+0x248>)
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001a5a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a5e:	2406      	movs	r4, #6
 8001a60:	9404      	str	r4, [sp, #16]
 8001a62:	4c5e      	ldr	r4, [pc, #376]	@ (8001bdc <EngTrModel_step+0x24c>)
 8001a64:	9403      	str	r4, [sp, #12]
 8001a66:	4c5e      	ldr	r4, [pc, #376]	@ (8001be0 <EngTrModel_step+0x250>)
 8001a68:	9402      	str	r4, [sp, #8]
 8001a6a:	4c5e      	ldr	r4, [pc, #376]	@ (8001be4 <EngTrModel_step+0x254>)
 8001a6c:	9401      	str	r4, [sp, #4]
 8001a6e:	4c5e      	ldr	r4, [pc, #376]	@ (8001be8 <EngTrModel_step+0x258>)
 8001a70:	9400      	str	r4, [sp, #0]
 8001a72:	f7ff fb0d 	bl	8001090 <look2_binlxpw>
 8001a76:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <EngTrModel_step+0x248>)
 8001a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001a82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a86:	2406      	movs	r4, #6
 8001a88:	9404      	str	r4, [sp, #16]
 8001a8a:	4c54      	ldr	r4, [pc, #336]	@ (8001bdc <EngTrModel_step+0x24c>)
 8001a8c:	9403      	str	r4, [sp, #12]
 8001a8e:	4c57      	ldr	r4, [pc, #348]	@ (8001bec <EngTrModel_step+0x25c>)
 8001a90:	9402      	str	r4, [sp, #8]
 8001a92:	4c54      	ldr	r4, [pc, #336]	@ (8001be4 <EngTrModel_step+0x254>)
 8001a94:	9401      	str	r4, [sp, #4]
 8001a96:	4c56      	ldr	r4, [pc, #344]	@ (8001bf0 <EngTrModel_step+0x260>)
 8001a98:	9400      	str	r4, [sp, #0]
 8001a9a:	f7ff faf9 	bl	8001090 <look2_binlxpw>
 8001a9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001aa2:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001aa4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d05a      	beq.n	8001b62 <EngTrModel_step+0x1d2>
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	f300 80a6 	bgt.w	8001bfe <EngTrModel_step+0x26e>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <EngTrModel_step+0x12c>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d02e      	beq.n	8001b18 <EngTrModel_step+0x188>
 8001aba:	e0a0      	b.n	8001bfe <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001abc:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d919      	bls.n	8001af8 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001ac4:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001ac6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ace:	f7fe ff89 	bl	80009e4 <__aeabi_dcmpge>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00f      	beq.n	8001af8 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001adc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001ade:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fdb1 	bl	8001650 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001aee:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001af6:	e082      	b.n	8001bfe <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001afa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b02:	f7fe ff5b 	bl	80009bc <__aeabi_dcmplt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <EngTrModel_step+0x17e>
        break;
 8001b0c:	e077      	b.n	8001bfe <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001b16:	e072      	b.n	8001bfe <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001b18:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001b1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b22:	f7fe ff4b 	bl	80009bc <__aeabi_dcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b2e:	2203      	movs	r2, #3
 8001b30:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001b3a:	e060      	b.n	8001bfe <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001b3c:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001b3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b46:	f7fe ff57 	bl	80009f8 <__aeabi_dcmpgt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <EngTrModel_step+0x1c2>
        break;
 8001b50:	e055      	b.n	8001bfe <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
        break;
 8001b60:	e04d      	b.n	8001bfe <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d919      	bls.n	8001b9e <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b74:	f7fe ff2c 	bl	80009d0 <__aeabi_dcmple>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00f      	beq.n	8001b9e <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b84:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fd5e 	bl	8001650 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <EngTrModel_step+0x238>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001b9c:	e02e      	b.n	8001bfc <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <EngTrModel_step+0x23c>)
 8001ba0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba8:	f7fe ff26 	bl	80009f8 <__aeabi_dcmpgt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d120      	bne.n	8001bf4 <EngTrModel_step+0x264>
        break;
 8001bb2:	e023      	b.n	8001bfc <EngTrModel_step+0x26c>
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	54442d18 	.word	0x54442d18
 8001bbc:	401921fb 	.word	0x401921fb
 8001bc0:	745d1746 	.word	0x745d1746
 8001bc4:	3f8745d1 	.word	0x3f8745d1
 8001bc8:	20000238 	.word	0x20000238
 8001bcc:	20000208 	.word	0x20000208
 8001bd0:	20000270 	.word	0x20000270
 8001bd4:	3ff00000 	.word	0x3ff00000
 8001bd8:	20000260 	.word	0x20000260
 8001bdc:	0800e080 	.word	0x0800e080
 8001be0:	0800d850 	.word	0x0800d850
 8001be4:	0800d940 	.word	0x0800d940
 8001be8:	0800d910 	.word	0x0800d910
 8001bec:	0800d960 	.word	0x0800d960
 8001bf0:	0800da20 	.word	0x0800da20
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bf4:	4b84      	ldr	r3, [pc, #528]	@ (8001e08 <EngTrModel_step+0x478>)
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001bfc:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001bfe:	4b83      	ldr	r3, [pc, #524]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c00:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c04:	2303      	movs	r3, #3
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4b81      	ldr	r3, [pc, #516]	@ (8001e10 <EngTrModel_step+0x480>)
 8001c0a:	4a82      	ldr	r2, [pc, #520]	@ (8001e14 <EngTrModel_step+0x484>)
 8001c0c:	f7ff fc3c 	bl	8001488 <look1_binlxpw>
 8001c10:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <EngTrModel_step+0x478>)
 8001c16:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c1a:	a375      	add	r3, pc, #468	@ (adr r3, 8001df0 <EngTrModel_step+0x460>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fc5a 	bl	80004d8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4978      	ldr	r1, [pc, #480]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c2a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001c2e:	4b77      	ldr	r3, [pc, #476]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d114      	bne.n	8001c70 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001c46:	4b71      	ldr	r3, [pc, #452]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c50:	f7fe fc42 	bl	80004d8 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fd63 	bl	800072c <__aeabi_ddiv>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c6e:	e005      	b.n	8001c7c <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c7c:	4b63      	ldr	r3, [pc, #396]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001c7e:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c82:	2314      	movs	r3, #20
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <EngTrModel_step+0x488>)
 8001c88:	4a64      	ldr	r2, [pc, #400]	@ (8001e1c <EngTrModel_step+0x48c>)
 8001c8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c8e:	f7ff fbfb 	bl	8001488 <look1_binlxpw>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fd47 	bl	800072c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cae:	f7ff fd55 	bl	800175c <rt_powd_snf>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4955      	ldr	r1, [pc, #340]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001cb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <EngTrModel_step+0x490>)
 8001cc2:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <EngTrModel_step+0x48c>)
 8001cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc8:	f7ff fbde 	bl	8001488 <look1_binlxpw>
 8001ccc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001cd2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cda:	f7fe fbfd 	bl	80004d8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cea:	f7fe fbf5 	bl	80004d8 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4946      	ldr	r1, [pc, #280]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001cf4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001cf8:	4b44      	ldr	r3, [pc, #272]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001cfa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cfe:	4949      	ldr	r1, [pc, #292]	@ (8001e24 <EngTrModel_step+0x494>)
 8001d00:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001d04:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001d06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d0a:	4946      	ldr	r1, [pc, #280]	@ (8001e24 <EngTrModel_step+0x494>)
 8001d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001d10:	4b45      	ldr	r3, [pc, #276]	@ (8001e28 <EngTrModel_step+0x498>)
 8001d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	240a      	movs	r4, #10
 8001d1e:	9404      	str	r4, [sp, #16]
 8001d20:	4c42      	ldr	r4, [pc, #264]	@ (8001e2c <EngTrModel_step+0x49c>)
 8001d22:	9403      	str	r4, [sp, #12]
 8001d24:	4c42      	ldr	r4, [pc, #264]	@ (8001e30 <EngTrModel_step+0x4a0>)
 8001d26:	9402      	str	r4, [sp, #8]
 8001d28:	4c42      	ldr	r4, [pc, #264]	@ (8001e34 <EngTrModel_step+0x4a4>)
 8001d2a:	9401      	str	r4, [sp, #4]
 8001d2c:	4c42      	ldr	r4, [pc, #264]	@ (8001e38 <EngTrModel_step+0x4a8>)
 8001d2e:	9400      	str	r4, [sp, #0]
 8001d30:	f7ff f9ae 	bl	8001090 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001d34:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001d36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d3a:	f7fe fa15 	bl	8000168 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001d46:	a32c      	add	r3, pc, #176	@ (adr r3, 8001df8 <EngTrModel_step+0x468>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fbc4 	bl	80004d8 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	a329      	add	r3, pc, #164	@ (adr r3, 8001e00 <EngTrModel_step+0x470>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fbbb 	bl	80004d8 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <EngTrModel_step+0x478>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe f9fc 	bl	800016c <__adddf3>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4923      	ldr	r1, [pc, #140]	@ (8001e08 <EngTrModel_step+0x478>)
 8001d7a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001d80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	f7fe fe16 	bl	80009bc <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <EngTrModel_step+0x4ac>)
 8001d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001da0:	e055      	b.n	8001e4e <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001da4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	f7fe fe22 	bl	80009f8 <__aeabi_dcmpgt>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <EngTrModel_step+0x4b0>)
 8001dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001dc4:	e043      	b.n	8001e4e <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <EngTrModel_step+0x47c>)
 8001dc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f7fe fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d032      	beq.n	8001e44 <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001dea:	e030      	b.n	8001e4e <EngTrModel_step+0x4be>
 8001dec:	f3af 8000 	nop.w
 8001df0:	3d70a3d7 	.word	0x3d70a3d7
 8001df4:	4009d70a 	.word	0x4009d70a
 8001df8:	0865b653 	.word	0x0865b653
 8001dfc:	4046bc6f 	.word	0x4046bc6f
 8001e00:	47ae147b 	.word	0x47ae147b
 8001e04:	3fa47ae1 	.word	0x3fa47ae1
 8001e08:	20000238 	.word	0x20000238
 8001e0c:	20000208 	.word	0x20000208
 8001e10:	0800de68 	.word	0x0800de68
 8001e14:	0800d940 	.word	0x0800d940
 8001e18:	0800de88 	.word	0x0800de88
 8001e1c:	0800df30 	.word	0x0800df30
 8001e20:	0800dfd8 	.word	0x0800dfd8
 8001e24:	20000270 	.word	0x20000270
 8001e28:	20000260 	.word	0x20000260
 8001e2c:	0800e088 	.word	0x0800e088
 8001e30:	0800da50 	.word	0x0800da50
 8001e34:	0800de10 	.word	0x0800de10
 8001e38:	0800ddc0 	.word	0x0800ddc0
 8001e3c:	bff00000 	.word	0xbff00000
 8001e40:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001e44:	4b3a      	ldr	r3, [pc, #232]	@ (8001f30 <EngTrModel_step+0x5a0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e4e:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <EngTrModel_step+0x5a4>)
 8001e50:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e54:	a32e      	add	r3, pc, #184	@ (adr r3, 8001f10 <EngTrModel_step+0x580>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fb3d 	bl	80004d8 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <EngTrModel_step+0x5a4>)
 8001e68:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e74:	f7ff fc72 	bl	800175c <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e78:	a327      	add	r3, pc, #156	@ (adr r3, 8001f18 <EngTrModel_step+0x588>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fb2b 	bl	80004d8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <EngTrModel_step+0x5a8>)
 8001e90:	f7fe f96c 	bl	800016c <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <EngTrModel_step+0x5ac>)
 8001e9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001ea2:	f7fe f963 	bl	800016c <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb2:	f7fe fb11 	bl	80004d8 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe f953 	bl	8000168 <__aeabi_dsub>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001eca:	a315      	add	r3, pc, #84	@ (adr r3, 8001f20 <EngTrModel_step+0x590>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fb02 	bl	80004d8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	a312      	add	r3, pc, #72	@ (adr r3, 8001f28 <EngTrModel_step+0x598>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe faf9 	bl	80004d8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <EngTrModel_step+0x5b0>)
 8001ef0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ef4:	f7fe f93a 	bl	800016c <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <EngTrModel_step+0x5b0>)
 8001efe:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w
 8001f10:	3d70a3d7 	.word	0x3d70a3d7
 8001f14:	4009d70a 	.word	0x4009d70a
 8001f18:	47ae147b 	.word	0x47ae147b
 8001f1c:	3f947ae1 	.word	0x3f947ae1
 8001f20:	b3bfa695 	.word	0xb3bfa695
 8001f24:	3fb52ad1 	.word	0x3fb52ad1
 8001f28:	47ae147b 	.word	0x47ae147b
 8001f2c:	3fa47ae1 	.word	0x3fa47ae1
 8001f30:	200005a8 	.word	0x200005a8
 8001f34:	20000208 	.word	0x20000208
 8001f38:	40440000 	.word	0x40440000
 8001f3c:	20000260 	.word	0x20000260
 8001f40:	20000238 	.word	0x20000238

08001f44 <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f48:	2008      	movs	r0, #8
 8001f4a:	f001 fa7f 	bl	800344c <rt_InitInfAndNaN>
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <tim2_get_prescaler>:

#include <delay.h>
#include "main.h"
#include <math.h>

uint16_t tim2_get_prescaler(float time) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    return (uint16_t)(ceil((time / (T_HCLK * ((65535 + 1) - 0))) - 1));
 8001f5c:	490f      	ldr	r1, [pc, #60]	@ (8001f9c <tim2_get_prescaler+0x48>)
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe ffc4 	bl	8000eec <__aeabi_fdiv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fe00 	bl	8000b70 <__aeabi_fsub>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fa58 	bl	8000428 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f00a fc72 	bl	800c868 <ceil>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fd7c 	bl	8000a88 <__aeabi_d2uiz>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	3a8637bd 	.word	0x3a8637bd

08001fa0 <tim2_get_init_count>:

uint16_t tim2_get_init_count(float time, uint16_t prescaler) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
    return (uint16_t)((65535 + 1) - (round(time / (T_HCLK * (prescaler + 1)))));
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fe93 	bl	8000cdc <__aeabi_i2f>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4912      	ldr	r1, [pc, #72]	@ (8002004 <tim2_get_init_count+0x64>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fee2 	bl	8000d84 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7fe ff91 	bl	8000eec <__aeabi_fdiv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa2b 	bl	8000428 <__aeabi_f2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f00a fd41 	bl	800ca60 <round>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <tim2_get_init_count+0x68>)
 8001fe8:	f7fe f8be 	bl	8000168 <__aeabi_dsub>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fd48 	bl	8000a88 <__aeabi_d2uiz>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29b      	uxth	r3, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	328637bd 	.word	0x328637bd
 8002008:	40f00000 	.word	0x40f00000

0800200c <tim2_delay>:

void tim2_delay(float time) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    uint16_t prescaler = tim2_get_prescaler(time);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff9d 	bl	8001f54 <tim2_get_prescaler>
 800201a:	4603      	mov	r3, r0
 800201c:	81fb      	strh	r3, [r7, #14]
    uint16_t init_count = tim2_get_init_count(time, prescaler);
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffbc 	bl	8001fa0 <tim2_get_init_count>
 8002028:	4603      	mov	r3, r0
 800202a:	81bb      	strh	r3, [r7, #12]

    // Enable Timer 2 clock
    RCC->APB1ENR |= (0x1 << 0U);
 800202c:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <tim2_delay+0x9c>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <tim2_delay+0x9c>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	61d3      	str	r3, [r2, #28]

    RCC->APB2ENR    |=  ( 0x1UL <<  4U );
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <tim2_delay+0x9c>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <tim2_delay+0x9c>)
 800203e:	f043 0310 	orr.w	r3, r3, #16
 8002042:	6193      	str	r3, [r2, #24]

    // Clear control register 1 of Timer 2 to reset configuration
    TIM2->CR1 &= ~(0x72);
 8002044:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204e:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8002052:	6013      	str	r3, [r2, #0]

    // Clear status register of Timer 2 to reset any pending flags
    TIM2->SR &= ~(0x1UL << 0U);
 8002054:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6113      	str	r3, [r2, #16]

    // Set auto-reload register of Timer 2 to maximum value for longest delay
    TIM2->ARR = 65535;
 8002064:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002068:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800206c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set counter register of Timer 2 to initial value for desired delay
    TIM2->CNT = init_count;
 800206e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002072:	89bb      	ldrh	r3, [r7, #12]
 8002074:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set prescaler register of Timer 2 for desired time base
    TIM2->PSC = prescaler;
 8002076:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	6293      	str	r3, [r2, #40]	@ 0x28

    // Start Timer 2 by setting control register 1
    TIM2->CR1 |= (0x1 << 0U);
 800207e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6013      	str	r3, [r2, #0]

    // Wait until Timer 2 update event occurs
    while ((TIM2->SR & (0x1UL << 0U)) == 0);
 800208e:	bf00      	nop
 8002090:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f8      	beq.n	8002090 <tim2_delay+0x84>

}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a06      	ldr	r2, [pc, #24]	@ (80020d4 <vApplicationGetIdleTaskMemory+0x28>)
 80020bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80020c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000288 	.word	0x20000288
 80020d8:	20000328 	.word	0x20000328

080020dc <KEYPAD_Init>:
    {'7', '8', '9'},  // Tercera fila
    {'*', '0', '#'}   // Cuarta fila
};

void KEYPAD_Init(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
    // Configura PA5 (fila 1) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 20U);  // Limpia la configuración anterior de PA5
 80020e0:	4b34      	ldr	r3, [pc, #208]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a33      	ldr	r2, [pc, #204]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80020ea:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 20U);   // Entrada con pull-down
 80020ec:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020f6:	6013      	str	r3, [r2, #0]

    // Configura PA8 (fila 2) como entrada con resistencia pull-down
    GPIOA->CRH &= ~(0xFUL << 0U);  // Limpia la configuración anterior de PA8
 80020f8:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80020fe:	f023 030f 	bic.w	r3, r3, #15
 8002102:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x8UL << 0U);   // Entrada con pull-down
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a2a      	ldr	r2, [pc, #168]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6053      	str	r3, [r2, #4]

    // Configura PA1 (fila 3) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 4U);  // Limpia la configuración anterior de PA1
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800211a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 4U);   // Entrada con pull-down
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002126:	6013      	str	r3, [r2, #0]

    // Configura PA4 (fila 4) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 16U);  // Limpia la configuración anterior de PA4
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800212e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8002132:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 16U);   // Entrada con pull-down
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800213a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800213e:	6013      	str	r3, [r2, #0]

    // Configura PA6 (columna 1) como salida push-pull
    GPIOA->CRL &= ~(0xFUL << 24U);  // Limpia la configuración anterior de PA6
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002146:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800214a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x1UL << 24U);   // Salida push-pull
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a18      	ldr	r2, [pc, #96]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

    // Configura PA7 (columna 2) como salida push-pull
    GPIOA->CRL &= ~(0xFUL << 28U);  // Limpia la configuración anterior de PA7
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800215e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002162:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x1UL << 28U);   // Salida push-pull
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216e:	6013      	str	r3, [r2, #0]

    // Configura PA10 (columna 3) como salida push-pull
    GPIOA->CRH &= ~(0xFUL << 8U);  // Limpia la configuración anterior de PA10
 8002170:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002176:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800217a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x1UL << 8U);   // Salida push-pull
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6053      	str	r3, [r2, #4]

    // Inicializa todas las columnas (PA6, PA7 y PA10) en estado LOW (desactivadas)
    GPIOA->ODR &= ~(0x1UL << 6);
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800218e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002192:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR &= ~(0x1UL << 7);
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <KEYPAD_Init+0xd8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a06      	ldr	r2, [pc, #24]	@ (80021b4 <KEYPAD_Init+0xd8>)
 800219a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800219e:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR &= ~(0x1UL << 10);
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a03      	ldr	r2, [pc, #12]	@ (80021b4 <KEYPAD_Init+0xd8>)
 80021a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40010800 	.word	0x40010800

080021b8 <KEYPAD_ReadKey>:

char KEYPAD_ReadKey(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b08f      	sub	sp, #60	@ 0x3c
 80021bc:	af00      	add	r7, sp, #0
    char key = '\0';  // Inicializa sin carácter presionado
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Activa PA6 (columna 1) en HIGH
    GPIOA->ODR |= (0x1UL << 6);
 80021c4:	4b91      	ldr	r3, [pc, #580]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a90      	ldr	r2, [pc, #576]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80021ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ce:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 80021d0:	4b8e      	ldr	r3, [pc, #568]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <KEYPAD_ReadKey+0x42>
    {
        for (volatile int i = 0; i < 10000; i++);
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e0:	e002      	b.n	80021e8 <KEYPAD_ReadKey+0x30>
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	3301      	adds	r3, #1
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021ee:	4293      	cmp	r3, r2
 80021f0:	ddf7      	ble.n	80021e2 <KEYPAD_ReadKey+0x2a>
        key = KEYPAD_MAP[0][0];  // Retorna '1'
 80021f2:	2331      	movs	r3, #49	@ 0x31
 80021f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021f8:	e03d      	b.n	8002276 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 80021fa:	4b84      	ldr	r3, [pc, #528]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <KEYPAD_ReadKey+0x6c>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220a:	e002      	b.n	8002212 <KEYPAD_ReadKey+0x5a>
 800220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220e:	3301      	adds	r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002214:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002218:	4293      	cmp	r3, r2
 800221a:	ddf7      	ble.n	800220c <KEYPAD_ReadKey+0x54>
        key = KEYPAD_MAP[1][0];  // Retorna '4'
 800221c:	2334      	movs	r3, #52	@ 0x34
 800221e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002222:	e028      	b.n	8002276 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 8002224:	4b79      	ldr	r3, [pc, #484]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <KEYPAD_ReadKey+0x96>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002234:	e002      	b.n	800223c <KEYPAD_ReadKey+0x84>
 8002236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002238:	3301      	adds	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002242:	4293      	cmp	r3, r2
 8002244:	ddf7      	ble.n	8002236 <KEYPAD_ReadKey+0x7e>
        key = KEYPAD_MAP[2][0];  // Retorna '7'
 8002246:	2337      	movs	r3, #55	@ 0x37
 8002248:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800224c:	e013      	b.n	8002276 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 800224e:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <KEYPAD_ReadKey+0xbe>
    {
        for (volatile int i = 0; i < 10000; i++);
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
 800225e:	e002      	b.n	8002266 <KEYPAD_ReadKey+0xae>
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f242 720f 	movw	r2, #9999	@ 0x270f
 800226c:	4293      	cmp	r3, r2
 800226e:	ddf7      	ble.n	8002260 <KEYPAD_ReadKey+0xa8>
        key = KEYPAD_MAP[3][0];  // Retorna 'A'
 8002270:	232a      	movs	r3, #42	@ 0x2a
 8002272:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA6 (columna 1) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 6);
 8002276:	4b65      	ldr	r3, [pc, #404]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a64      	ldr	r2, [pc, #400]	@ (800240c <KEYPAD_ReadKey+0x254>)
 800227c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002280:	60d3      	str	r3, [r2, #12]

    // Activa PA7 (columna 2) en HIGH
    GPIOA->ODR |= (0x1UL << 7);
 8002282:	4b62      	ldr	r3, [pc, #392]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4a61      	ldr	r2, [pc, #388]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228c:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 800228e:	4b5f      	ldr	r3, [pc, #380]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <KEYPAD_ReadKey+0x100>
    {
        for (volatile int i = 0; i < 10000; i++);
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	e002      	b.n	80022a6 <KEYPAD_ReadKey+0xee>
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	3301      	adds	r3, #1
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022ac:	4293      	cmp	r3, r2
 80022ae:	ddf7      	ble.n	80022a0 <KEYPAD_ReadKey+0xe8>
        key = KEYPAD_MAP[0][1];  // Retorna '2'
 80022b0:	2332      	movs	r3, #50	@ 0x32
 80022b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80022b6:	e03d      	b.n	8002334 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 80022b8:	4b54      	ldr	r3, [pc, #336]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <KEYPAD_ReadKey+0x12a>
    {
        for (volatile int i = 0; i < 10000; i++);
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	e002      	b.n	80022d0 <KEYPAD_ReadKey+0x118>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022d6:	4293      	cmp	r3, r2
 80022d8:	ddf7      	ble.n	80022ca <KEYPAD_ReadKey+0x112>
        key = KEYPAD_MAP[1][1];  // Retorna '5'
 80022da:	2335      	movs	r3, #53	@ 0x35
 80022dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80022e0:	e028      	b.n	8002334 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 80022e2:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <KEYPAD_ReadKey+0x154>
    {
        for (volatile int i = 0; i < 10000; i++);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e002      	b.n	80022fa <KEYPAD_ReadKey+0x142>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002300:	4293      	cmp	r3, r2
 8002302:	ddf7      	ble.n	80022f4 <KEYPAD_ReadKey+0x13c>
        key = KEYPAD_MAP[2][1];  // Retorna '8'
 8002304:	2338      	movs	r3, #56	@ 0x38
 8002306:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800230a:	e013      	b.n	8002334 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 800230c:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <KEYPAD_ReadKey+0x254>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <KEYPAD_ReadKey+0x17c>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e002      	b.n	8002324 <KEYPAD_ReadKey+0x16c>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f242 720f 	movw	r2, #9999	@ 0x270f
 800232a:	4293      	cmp	r3, r2
 800232c:	ddf7      	ble.n	800231e <KEYPAD_ReadKey+0x166>
        key = KEYPAD_MAP[3][1];  // Retorna 'B'
 800232e:	2330      	movs	r3, #48	@ 0x30
 8002330:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA7 (columna 2) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 7);
 8002334:	4b35      	ldr	r3, [pc, #212]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a34      	ldr	r2, [pc, #208]	@ (800240c <KEYPAD_ReadKey+0x254>)
 800233a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800233e:	60d3      	str	r3, [r2, #12]

    // Activa PA10 (columna 3) en HIGH
    GPIOA->ODR |= (0x1UL << 10);
 8002340:	4b32      	ldr	r3, [pc, #200]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a31      	ldr	r2, [pc, #196]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234a:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 800234c:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <KEYPAD_ReadKey+0x254>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <KEYPAD_ReadKey+0x1be>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e002      	b.n	8002364 <KEYPAD_ReadKey+0x1ac>
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3301      	adds	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f242 720f 	movw	r2, #9999	@ 0x270f
 800236a:	4293      	cmp	r3, r2
 800236c:	ddf7      	ble.n	800235e <KEYPAD_ReadKey+0x1a6>
        key = KEYPAD_MAP[0][2];  // Retorna '3'
 800236e:	2333      	movs	r3, #51	@ 0x33
 8002370:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002374:	e03d      	b.n	80023f2 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 8002376:	4b25      	ldr	r3, [pc, #148]	@ (800240c <KEYPAD_ReadKey+0x254>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00e      	beq.n	80023a0 <KEYPAD_ReadKey+0x1e8>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e002      	b.n	800238e <KEYPAD_ReadKey+0x1d6>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3301      	adds	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002394:	4293      	cmp	r3, r2
 8002396:	ddf7      	ble.n	8002388 <KEYPAD_ReadKey+0x1d0>
        key = KEYPAD_MAP[1][2];  // Retorna '6'
 8002398:	2336      	movs	r3, #54	@ 0x36
 800239a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800239e:	e028      	b.n	80023f2 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00e      	beq.n	80023ca <KEYPAD_ReadKey+0x212>
    {
        for (volatile int i = 0; i < 10000; i++);
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	e002      	b.n	80023b8 <KEYPAD_ReadKey+0x200>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023be:	4293      	cmp	r3, r2
 80023c0:	ddf7      	ble.n	80023b2 <KEYPAD_ReadKey+0x1fa>
        key = KEYPAD_MAP[2][2];  // Retorna '9'
 80023c2:	2339      	movs	r3, #57	@ 0x39
 80023c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80023c8:	e013      	b.n	80023f2 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <KEYPAD_ReadKey+0x23a>
    {
        for (volatile int i = 0; i < 10000; i++);
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	e002      	b.n	80023e2 <KEYPAD_ReadKey+0x22a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023e8:	4293      	cmp	r3, r2
 80023ea:	ddf7      	ble.n	80023dc <KEYPAD_ReadKey+0x224>
        key = KEYPAD_MAP[3][2];  // Retorna 'C'
 80023ec:	2323      	movs	r3, #35	@ 0x23
 80023ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA10 (columna 3) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 10);
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <KEYPAD_ReadKey+0x254>)
 80023f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023fc:	60d3      	str	r3, [r2, #12]

    return key;
 80023fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002402:	4618      	mov	r0, r3
 8002404:	373c      	adds	r7, #60	@ 0x3c
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40010800 	.word	0x40010800

08002410 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Configuracion de todos los pines hacia el LCD general purpose output push-pull, 10 MHz speed
  */
	RCC->APB2ENR	|=	 ( 0x1UL <<  4U );//			IO port C clock enable
 8002416:	4b62      	ldr	r3, [pc, #392]	@ (80025a0 <LCD_Init+0x190>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	4a61      	ldr	r2, [pc, #388]	@ (80025a0 <LCD_Init+0x190>)
 800241c:	f043 0310 	orr.w	r3, r3, #16
 8002420:	6193      	str	r3, [r2, #24]
	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8002422:	4b60      	ldr	r3, [pc, #384]	@ (80025a4 <LCD_Init+0x194>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5f      	ldr	r2, [pc, #380]	@ (80025a4 <LCD_Init+0x194>)
 8002428:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800242c:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 800242e:	4b5d      	ldr	r3, [pc, #372]	@ (80025a4 <LCD_Init+0x194>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5c      	ldr	r2, [pc, #368]	@ (80025a4 <LCD_Init+0x194>)
 8002434:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 8002438:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 800243a:	4b5a      	ldr	r3, [pc, #360]	@ (80025a4 <LCD_Init+0x194>)
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4959      	ldr	r1, [pc, #356]	@ (80025a4 <LCD_Init+0x194>)
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <LCD_Init+0x198>)
 8002442:	4013      	ands	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 8002446:	4b57      	ldr	r3, [pc, #348]	@ (80025a4 <LCD_Init+0x194>)
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4956      	ldr	r1, [pc, #344]	@ (80025a4 <LCD_Init+0x194>)
 800244c:	4b57      	ldr	r3, [pc, #348]	@ (80025ac <LCD_Init+0x19c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <LCD_Init+0x194>)
 8002454:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002458:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 800245a:	4b52      	ldr	r3, [pc, #328]	@ (80025a4 <LCD_Init+0x194>)
 800245c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002460:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 8002462:	4b50      	ldr	r3, [pc, #320]	@ (80025a4 <LCD_Init+0x194>)
 8002464:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002468:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <LCD_Init+0x194>)
 800246c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002470:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 8002472:	4b4c      	ldr	r3, [pc, #304]	@ (80025a4 <LCD_Init+0x194>)
 8002474:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002478:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <LCD_Init+0x194>)
 800247c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002480:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002482:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <LCD_Init+0x194>)
 8002484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002488:	611a      	str	r2, [r3, #16]

	tim2_delay(TIM2_TIME_50MS);//  50ms
 800248a:	4849      	ldr	r0, [pc, #292]	@ (80025b0 <LCD_Init+0x1a0>)
 800248c:	f7ff fdbe 	bl	800200c <tim2_delay>

	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002490:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <LCD_Init+0x194>)
 8002492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002496:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002498:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <LCD_Init+0x194>)
 800249a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80024a0:	4b40      	ldr	r3, [pc, #256]	@ (80025a4 <LCD_Init+0x194>)
 80024a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80024a8:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <LCD_Init+0x194>)
 80024aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ae:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80024b0:	f000 fa24 	bl	80028fc <LCD_Pulse_EN>
	tim2_delay(TIM2_TIME_5MS);//	5ms
 80024b4:	483f      	ldr	r0, [pc, #252]	@ (80025b4 <LCD_Init+0x1a4>)
 80024b6:	f7ff fda9 	bl	800200c <tim2_delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <LCD_Init+0x194>)
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <LCD_Init+0x194>)
 80024c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80024ca:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <LCD_Init+0x194>)
 80024cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024d0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80024d2:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <LCD_Init+0x194>)
 80024d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d8:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80024da:	f000 fa0f 	bl	80028fc <LCD_Pulse_EN>
	tim2_delay(TIM2_TIME_100uS);//	100us
 80024de:	4836      	ldr	r0, [pc, #216]	@ (80025b8 <LCD_Init+0x1a8>)
 80024e0:	f7ff fd94 	bl	800200c <tim2_delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80024e4:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <LCD_Init+0x194>)
 80024e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ea:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <LCD_Init+0x194>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f2:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <LCD_Init+0x194>)
 80024f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024fa:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <LCD_Init+0x194>)
 80024fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002502:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002504:	f000 f9fa 	bl	80028fc <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 8002508:	bf00      	nop
 800250a:	f000 f9a3 	bl	8002854 <LCD_Busy>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1fa      	bne.n	800250a <LCD_Init+0xfa>
	/* Initial 'Function Set' to change 4-bit mode 			*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <LCD_Init+0x194>)
 8002516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <LCD_Init+0x194>)
 800251e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002522:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <LCD_Init+0x194>)
 8002526:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800252a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <LCD_Init+0x194>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002532:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002534:	f000 f9e2 	bl	80028fc <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 8002538:	bf00      	nop
 800253a:	f000 f98b 	bl	8002854 <LCD_Busy>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1fa      	bne.n	800253a <LCD_Init+0x12a>
	/* 'Function Set' (I=1, N and F as required)			*/
	LCD_Write_Cmd( 0x28U );//					2-line display, 5x7 dot
 8002544:	2028      	movs	r0, #40	@ 0x28
 8002546:	f000 f8a1 	bl	800268c <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)			*/
	LCD_Write_Cmd( 0x08U );//					display, cursor and blinking off
 800254a:	2008      	movs	r0, #8
 800254c:	f000 f89e 	bl	800268c <LCD_Write_Cmd>
	/* 'Clear Display'						*/
	LCD_Write_Cmd( 0x01U );//
 8002550:	2001      	movs	r0, #1
 8002552:	f000 f89b 	bl	800268c <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)			*/
	LCD_Write_Cmd( 0x06U );//					cursor increment by 1, shift off
 8002556:	2006      	movs	r0, #6
 8002558:	f000 f898 	bl	800268c <LCD_Write_Cmd>
	/* Initialization Ends						*/
	LCD_Write_Cmd( 0x0FU );//					display, cursor and blinking on
 800255c:	200f      	movs	r0, #15
 800255e:	f000 f895 	bl	800268c <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 8002562:	2040      	movs	r0, #64	@ 0x40
 8002564:	f000 f892 	bl	800268c <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <LCD_Init+0x1ac>)
 800256a:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800256c:	2300      	movs	r3, #0
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	e00c      	b.n	800258c <LCD_Init+0x17c>
		LCD_Put_Char( *p );
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f993 3000 	ldrsb.w	r3, [r3]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f89a 	bl	80026b4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3301      	adds	r3, #1
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002590:	d9ef      	bls.n	8002572 <LCD_Init+0x162>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8002592:	2080      	movs	r0, #128	@ 0x80
 8002594:	f000 f87a 	bl	800268c <LCD_Write_Cmd>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40011000 	.word	0x40011000
 80025a8:	fff11111 	.word	0xfff11111
 80025ac:	00011111 	.word	0x00011111
 80025b0:	3d4ccccd 	.word	0x3d4ccccd
 80025b4:	3ba3d70a 	.word	0x3ba3d70a
 80025b8:	38d1b717 	.word	0x38d1b717
 80025bc:	0800e090 	.word	0x0800e090

080025c0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//				Bit[0]
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <LCD_Out_Data4+0x84>)
 80025d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025da:	611a      	str	r2, [r3, #16]
 80025dc:	e003      	b.n	80025e6 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <LCD_Out_Data4+0x84>)
 80025e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e4:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//				Bit[1]
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <LCD_Out_Data4+0x84>)
 80025f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025f6:	611a      	str	r2, [r3, #16]
 80025f8:	e003      	b.n	8002602 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <LCD_Out_Data4+0x84>)
 80025fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002600:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//				Bit[2]
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <LCD_Out_Data4+0x84>)
 800260e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002612:	611a      	str	r2, [r3, #16]
 8002614:	e003      	b.n	800261e <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <LCD_Out_Data4+0x84>)
 8002618:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800261c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//				Bit[3]
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <LCD_Out_Data4+0x84>)
 800262a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800262e:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 8002630:	e003      	b.n	800263a <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <LCD_Out_Data4+0x84>)
 8002634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40011000 	.word	0x40011000

08002648 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ffb1 	bl	80025c0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800265e:	f000 f94d 	bl	80028fc <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffa8 	bl	80025c0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002670:	f000 f944 	bl	80028fc <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8002674:	bf00      	nop
 8002676:	f000 f8ed 	bl	8002854 <LCD_Busy>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1fa      	bne.n	8002676 <LCD_Write_Byte+0x2e>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;//			RS=0 (seleccion de comando)
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <LCD_Write_Cmd+0x24>)
 8002698:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800269c:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ffd1 	bl	8002648 <LCD_Write_Byte>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40011000 	.word	0x40011000

080026b4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;//			RS=1 (seleccion de caracteres)
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <LCD_Put_Char+0x20>)
 80026c0:	2240      	movs	r2, #64	@ 0x40
 80026c2:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffbe 	bl	8002648 <LCD_Write_Byte>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40011000 	.word	0x40011000

080026d8 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	460a      	mov	r2, r1
 80026e2:	71fb      	strb	r3, [r7, #7]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 80026e8:	79bb      	ldrb	r3, [r7, #6]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	71bb      	strb	r3, [r7, #6]
	line--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	4413      	add	r3, r2
 80026fe:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3b80      	subs	r3, #128	@ 0x80
 800270a:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffbc 	bl	800268c <LCD_Write_Cmd>
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8002724:	2300      	movs	r3, #0
 8002726:	81fb      	strh	r3, [r7, #14]
 8002728:	e00d      	b.n	8002746 <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );//				envia 1 byte al LCD
 800272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ffbd 	bl	80026b4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 800273a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800273e:	b29b      	uxth	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	81fb      	strh	r3, [r7, #14]
 8002746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	dc06      	bgt.n	800275c <LCD_Put_Str+0x40>
 800274e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e6      	bne.n	800272a <LCD_Put_Str+0xe>
}
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
	int16_t p;
	int16_t f = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	82bb      	strh	r3, [r7, #20]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 8002772:	2300      	movs	r3, #0
 8002774:	827b      	strh	r3, [r7, #18]
 8002776:	e064      	b.n	8002842 <LCD_Put_Num+0xde>
		p = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 800277c:	8a7b      	ldrh	r3, [r7, #18]
 800277e:	f1c3 0304 	rsb	r3, r3, #4
 8002782:	b29b      	uxth	r3, r3
 8002784:	823b      	strh	r3, [r7, #16]
 8002786:	e00c      	b.n	80027a2 <LCD_Put_Num+0x3e>
			p = p * 10;
 8002788:	8afb      	ldrh	r3, [r7, #22]
 800278a:	461a      	mov	r2, r3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 8002796:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	823b      	strh	r3, [r7, #16]
 80027a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	dcee      	bgt.n	8002788 <LCD_Put_Num+0x24>
		ch[ i ] = ( num / p );
 80027aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80027b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027ba:	b252      	sxtb	r2, r2
 80027bc:	3318      	adds	r3, #24
 80027be:	443b      	add	r3, r7
 80027c0:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( num >= p && !f )
 80027c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	db05      	blt.n	80027dc <LCD_Put_Num+0x78>
 80027d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <LCD_Put_Num+0x78>
			f = 1;
 80027d8:	2301      	movs	r3, #1
 80027da:	82bb      	strh	r3, [r7, #20]
		num = num - ch[ i ] * p;
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027e2:	3318      	adds	r3, #24
 80027e4:	443b      	add	r3, r7
 80027e6:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8af9      	ldrh	r1, [r7, #22]
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	80fb      	strh	r3, [r7, #6]
		ch[ i ] = ch[ i ] + 48;
 80027fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027fe:	3318      	adds	r3, #24
 8002800:	443b      	add	r3, r7
 8002802:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3330      	adds	r3, #48	@ 0x30
 800280a:	b2da      	uxtb	r2, r3
 800280c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002810:	b252      	sxtb	r2, r2
 8002812:	3318      	adds	r3, #24
 8002814:	443b      	add	r3, r7
 8002816:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( f )
 800281a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <LCD_Put_Num+0xd2>
			LCD_Put_Char( ch[ i ] );
 8002822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002826:	3318      	adds	r3, #24
 8002828:	443b      	add	r3, r7
 800282a:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff3f 	bl	80026b4 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 8002836:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800283a:	b29b      	uxth	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	827b      	strh	r3, [r7, #18]
 8002842:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002846:	2b04      	cmp	r3, #4
 8002848:	dd96      	ble.n	8002778 <LCD_Put_Num+0x14>
	}
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 8002858:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <LCD_Busy+0xa0>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a25      	ldr	r2, [pc, #148]	@ (80028f4 <LCD_Busy+0xa0>)
 800285e:	f423 2330 	bic.w	r3, r3, #720896	@ 0xb0000
 8002862:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 8002864:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <LCD_Busy+0xa0>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a22      	ldr	r2, [pc, #136]	@ (80028f4 <LCD_Busy+0xa0>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286e:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002870:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <LCD_Busy+0xa0>)
 8002872:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002876:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 8002878:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <LCD_Busy+0xa0>)
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 800287e:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <LCD_Busy+0xa0>)
 8002880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002884:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_100uS) ;//	100us
 8002886:	481c      	ldr	r0, [pc, #112]	@ (80028f8 <LCD_Busy+0xa4>)
 8002888:	f7ff fbc0 	bl	800200c <tim2_delay>
	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) {//			if D7 is set, then
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <LCD_Busy+0xa0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d015      	beq.n	80028c4 <LCD_Busy+0x70>
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <LCD_Busy+0xa0>)
 800289a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800289e:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <LCD_Busy+0xa0>)
 80028a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028a6:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <LCD_Busy+0xa0>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <LCD_Busy+0xa0>)
 80028ae:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80028b2:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <LCD_Busy+0xa0>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <LCD_Busy+0xa0>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028be:	6053      	str	r3, [r2, #4]
		return 1;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e014      	b.n	80028ee <LCD_Busy+0x9a>
	} else {
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <LCD_Busy+0xa0>)
 80028c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ca:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <LCD_Busy+0xa0>)
 80028ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028d2:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <LCD_Busy+0xa0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a06      	ldr	r2, [pc, #24]	@ (80028f4 <LCD_Busy+0xa0>)
 80028da:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80028de:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <LCD_Busy+0xa0>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a03      	ldr	r2, [pc, #12]	@ (80028f4 <LCD_Busy+0xa0>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ea:	6053      	str	r3, [r2, #4]
		return 0;
 80028ec:	2300      	movs	r3, #0
	}
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40011000 	.word	0x40011000
 80028f8:	38d1b717 	.word	0x38d1b717

080028fc <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <LCD_Pulse_EN+0x34>)
 8002902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002906:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_10uS) ;//	10us
 8002908:	480a      	ldr	r0, [pc, #40]	@ (8002934 <LCD_Pulse_EN+0x38>)
 800290a:	f7ff fb7f 	bl	800200c <tim2_delay>
	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;//			habilita pin EN ON
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <LCD_Pulse_EN+0x34>)
 8002910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002914:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_10uS) ;//	10us
 8002916:	4807      	ldr	r0, [pc, #28]	@ (8002934 <LCD_Pulse_EN+0x38>)
 8002918:	f7ff fb78 	bl	800200c <tim2_delay>
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//			habilita pin EN OFF
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <LCD_Pulse_EN+0x34>)
 800291e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002922:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_1MS) ;//	1ms
 8002924:	4804      	ldr	r0, [pc, #16]	@ (8002938 <LCD_Pulse_EN+0x3c>)
 8002926:	f7ff fb71 	bl	800200c <tim2_delay>
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40011000 	.word	0x40011000
 8002934:	3727c5ac 	.word	0x3727c5ac
 8002938:	3a83126f 	.word	0x3a83126f

0800293c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b0a6      	sub	sp, #152	@ 0x98
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002942:	f001 f8bf 	bl	8003ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002946:	f000 f8a3 	bl	8002a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800294a:	f000 f90d 	bl	8002b68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800294e:	f000 f8e1 	bl	8002b14 <MX_USART1_UART_Init>
  USER_USART1_Init();
 8002952:	f001 f853 	bl	80039fc <USER_USART1_Init>

  // Redirecciona stdout a UART
  setvbuf(stdout, NULL, _IONBF, 0);
 8002956:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <main+0x120>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	2300      	movs	r3, #0
 800295e:	2202      	movs	r2, #2
 8002960:	2100      	movs	r1, #0
 8002962:	f005 ffaf 	bl	80088c4 <setvbuf>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  osMutexDef(mutex1);
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  mutex1Handle = osMutexCreate(osMutex(mutex1));
 8002972:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fb7b 	bl	8005072 <osMutexCreate>
 800297c:	4603      	mov	r3, r0
 800297e:	4a38      	ldr	r2, [pc, #224]	@ (8002a60 <main+0x124>)
 8002980:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
//  osMessageQDef(Queue1, 100, uint16_t);
  osMessageQDef(Queue1, 100, DataRasp);
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <main+0x128>)
 8002984:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8002988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800298a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue1Handle = osMessageCreate(osMessageQ(Queue1), NULL);
 800298e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fc09 	bl	80051ac <osMessageCreate>
 800299a:	4603      	mov	r3, r0
 800299c:	4a32      	ldr	r2, [pc, #200]	@ (8002a68 <main+0x12c>)
 800299e:	6013      	str	r3, [r2, #0]

  osMessageQDef(Queue2, 100, DataMotorUART);
 80029a0:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <main+0x128>)
 80029a2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80029a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue2Handle = osMessageCreate(osMessageQ(Queue2), NULL);
 80029ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fbfa 	bl	80051ac <osMessageCreate>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a2c      	ldr	r2, [pc, #176]	@ (8002a6c <main+0x130>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 384);
 80029be:	4b2c      	ldr	r3, [pc, #176]	@ (8002a70 <main+0x134>)
 80029c0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80029c4:	461d      	mov	r5, r3
 80029c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80029d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 faea 	bl	8004fb2 <osThreadCreate>
 80029de:	4603      	mov	r3, r0
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <main+0x138>)
 80029e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of Task2 */

  osThreadDef(Task1, StartTask1, osPriorityHigh, 0, 384);
 80029e4:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <main+0x13c>)
 80029e6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80029ea:	461d      	mov	r5, r3
 80029ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80029f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fad7 	bl	8004fb2 <osThreadCreate>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <main+0x140>)
 8002a08:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, StartTask2, osPriorityAboveNormal, 0, 384);
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <main+0x144>)
 8002a0c:	f107 041c 	add.w	r4, r7, #28
 8002a10:	461d      	mov	r5, r3
 8002a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fac4 	bl	8004fb2 <osThreadCreate>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <main+0x148>)
 8002a2e:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, StartTask3, osPriorityBelowNormal, 0, 384);
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <main+0x14c>)
 8002a32:	463c      	mov	r4, r7
 8002a34:	461d      	mov	r5, r3
 8002a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8002a42:	463b      	mov	r3, r7
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fab3 	bl	8004fb2 <osThreadCreate>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <main+0x150>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002a52:	f002 fa97 	bl	8004f84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <main+0x11a>
 8002a5a:	bf00      	nop
 8002a5c:	20000188 	.word	0x20000188
 8002a60:	20000588 	.word	0x20000588
 8002a64:	0800d6a0 	.word	0x0800d6a0
 8002a68:	20000580 	.word	0x20000580
 8002a6c:	20000584 	.word	0x20000584
 8002a70:	0800d6bc 	.word	0x0800d6bc
 8002a74:	20000570 	.word	0x20000570
 8002a78:	0800d6e0 	.word	0x0800d6e0
 8002a7c:	20000574 	.word	0x20000574
 8002a80:	0800d704 	.word	0x0800d704
 8002a84:	20000578 	.word	0x20000578
 8002a88:	0800d728 	.word	0x0800d728
 8002a8c:	2000057c 	.word	0x2000057c

08002a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b090      	sub	sp, #64	@ 0x40
 8002a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a96:	f107 0318 	add.w	r3, r7, #24
 8002a9a:	2228      	movs	r2, #40	@ 0x28
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f007 f806 	bl	8009ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aba:	2310      	movs	r3, #16
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ac6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fac7 	bl	8004064 <HAL_RCC_OscConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002adc:	f000 fb9c 	bl	8003218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 fd34 	bl	8004568 <HAL_RCC_ClockConfig>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002b06:	f000 fb87 	bl	8003218 <Error_Handler>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3740      	adds	r7, #64	@ 0x40
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <MX_USART1_UART_Init+0x50>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b4c:	f002 f914 	bl	8004d78 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b56:	f000 fb5f 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000528 	.word	0x20000528
 8002b64:	40013800 	.word	0x40013800

08002b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4a2c      	ldr	r2, [pc, #176]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002b82:	f043 0310 	orr.w	r3, r3, #16
 8002b86:	6193      	str	r3, [r2, #24]
 8002b88:	4b2a      	ldr	r3, [pc, #168]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b94:	4b27      	ldr	r3, [pc, #156]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bca:	f043 0308 	orr.w	r3, r3, #8
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <MX_GPIO_Init+0xcc>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2120      	movs	r1, #32
 8002be0:	4815      	ldr	r0, [pc, #84]	@ (8002c38 <MX_GPIO_Init+0xd0>)
 8002be2:	f001 fa05 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <MX_GPIO_Init+0xd4>)
 8002bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4811      	ldr	r0, [pc, #68]	@ (8002c40 <MX_GPIO_Init+0xd8>)
 8002bfc:	f001 f874 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c00:	2320      	movs	r3, #32
 8002c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	4808      	ldr	r0, [pc, #32]	@ (8002c38 <MX_GPIO_Init+0xd0>)
 8002c18:	f001 f866 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2105      	movs	r1, #5
 8002c20:	2028      	movs	r0, #40	@ 0x28
 8002c22:	f001 f836 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c26:	2028      	movs	r0, #40	@ 0x28
 8002c28:	f001 f84f 	bl	8003cca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010800 	.word	0x40010800
 8002c3c:	10110000 	.word	0x10110000
 8002c40:	40011000 	.word	0x40011000

08002c44 <StartTask1>:

/* USER CODE BEGIN 4 */
void StartTask1(void const * argument){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	Init_Task1();
 8002c4c:	f000 f9c0 	bl	8002fd0 <Init_Task1>
//    uint32_t counter = 0;
    uint16_t readValue = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	82fb      	strh	r3, [r7, #22]
    uint8_t characterRasp;

    for(;;){
        startTick = osKernelSysTick();
 8002c54:	f002 f99d 	bl	8004f92 <osKernelSysTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <StartTask1+0x88>)
 8002c5c:	6013      	str	r3, [r2, #0]

    	readValue = USE_ADC1_MODULE();
 8002c5e:	f000 fa77 	bl	8003150 <USE_ADC1_MODULE>
 8002c62:	4603      	mov	r3, r0
 8002c64:	82fb      	strh	r3, [r7, #22]
    	characterRasp = USER_USART1_Receive();
 8002c66:	f000 fef3 	bl	8003a50 <USER_USART1_Receive>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	757b      	strb	r3, [r7, #21]
    	DataRasp Rasp;
    	Rasp.analogicValue = readValue;
 8002c6e:	8afb      	ldrh	r3, [r7, #22]
 8002c70:	813b      	strh	r3, [r7, #8]
    	Rasp.character = characterRasp;
 8002c72:	7d7b      	ldrb	r3, [r7, #21]
 8002c74:	72bb      	strb	r3, [r7, #10]

    	/* Send the value to Queue */
//    	osStatus status = osMessagePut(Queue1Handle, (uint16_t) readValue, osWaitForever);
    	osStatus status = osMessagePut(Queue1Handle, (uint32_t) &Rasp, osWaitForever);
 8002c76:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <StartTask1+0x8c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f107 0108 	add.w	r1, r7, #8
 8002c7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 faba 	bl	80051fc <osMessagePut>
 8002c88:	6138      	str	r0, [r7, #16]
    	if (status != osOK) {
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <StartTask1+0x60>
    	    if (status == osErrorTimeoutResource) {
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2bc1      	cmp	r3, #193	@ 0xc1
 8002c94:	d103      	bne.n	8002c9e <StartTask1+0x5a>
    	        printf("Error: Queue is full\r\n");
 8002c96:	480f      	ldr	r0, [pc, #60]	@ (8002cd4 <StartTask1+0x90>)
 8002c98:	f006 fef0 	bl	8009a7c <puts>
 8002c9c:	e002      	b.n	8002ca4 <StartTask1+0x60>
    	    } else {
    	    	printf("Error in osMessagePut Task 1\r\n");
 8002c9e:	480e      	ldr	r0, [pc, #56]	@ (8002cd8 <StartTask1+0x94>)
 8002ca0:	f006 feec 	bl	8009a7c <puts>
    	    }
    	}

//        /* Record the end tick */
        endTick = osKernelSysTick();
 8002ca4:	f002 f975 	bl	8004f92 <osKernelSysTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a0c      	ldr	r2, [pc, #48]	@ (8002cdc <StartTask1+0x98>)
 8002cac:	6013      	str	r3, [r2, #0]
//        /* Calculate the time difference */
        uint32_t executionTime = endTick - startTick + 1;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <StartTask1+0x98>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <StartTask1+0x88>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
//        /* Print or log the execution time */
//        printf("Task 1 Execution Time: %lu ticks\r\n", executionTime);

    	osDelay(PERIOD_T1 - executionTime);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f1c3 031e 	rsb	r3, r3, #30
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 f9c1 	bl	800504a <osDelay>
    for(;;){
 8002cc8:	e7c4      	b.n	8002c54 <StartTask1+0x10>
 8002cca:	bf00      	nop
 8002ccc:	2000058c 	.word	0x2000058c
 8002cd0:	20000580 	.word	0x20000580
 8002cd4:	0800d744 	.word	0x0800d744
 8002cd8:	0800d75c 	.word	0x0800d75c
 8002cdc:	20000590 	.word	0x20000590

08002ce0 <StartTask2>:
//    	osDelay(29);
    }
}

void StartTask2(void const * argument){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

//	uint32_t counter = 0;
	uint16_T readValue = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int ThrottleValue = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	volatile char pressedButton;
	char *direccion = "Front";
 8002cf0:	4b56      	ldr	r3, [pc, #344]	@ (8002e4c <StartTask2+0x16c>)
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t character;
	DataMotorUART M1;

	for(;;){
        startTick = osKernelSysTick();
 8002cf4:	f002 f94d 	bl	8004f92 <osKernelSysTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a55      	ldr	r2, [pc, #340]	@ (8002e50 <StartTask2+0x170>)
 8002cfc:	6013      	str	r3, [r2, #0]

        /*Recieve value from Queue*/
		osEvent analogicValue = osMessageGet(Queue1Handle, 0);
 8002cfe:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <StartTask2+0x174>)
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	2200      	movs	r2, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fab7 	bl	800527c <osMessageGet>
        if (analogicValue.status != osEventMessage) {
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d002      	beq.n	8002d1a <StartTask2+0x3a>
        	printf("Error in osMessageGet Task 2 \r\n");
 8002d14:	4850      	ldr	r0, [pc, #320]	@ (8002e58 <StartTask2+0x178>)
 8002d16:	f006 feb1 	bl	8009a7c <puts>
        }

		readValue = ((DataRasp *)analogicValue.value.p)->analogicValue;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		character = ((DataRasp *)analogicValue.value.p)->character;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	789b      	ldrb	r3, [r3, #2]
 8002d24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		ThrottleValue = ((readValue*100)/4095);
 8002d28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d2a:	2264      	movs	r2, #100	@ 0x64
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	4a4a      	ldr	r2, [pc, #296]	@ (8002e5c <StartTask2+0x17c>)
 8002d32:	fb82 1203 	smull	r1, r2, r2, r3
 8002d36:	441a      	add	r2, r3
 8002d38:	12d2      	asrs	r2, r2, #11
 8002d3a:	17db      	asrs	r3, r3, #31
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (ThrottleValue < 5){
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	dc01      	bgt.n	8002d4a <StartTask2+0x6a>
			ThrottleValue = 5;
 8002d46:	2305      	movs	r3, #5
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

		EngTrModel_U.Throttle = ThrottleValue;
 8002d4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d4c:	f7fd fb5a 	bl	8000404 <__aeabi_i2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4942      	ldr	r1, [pc, #264]	@ (8002e60 <StartTask2+0x180>)
 8002d56:	e9c1 2300 	strd	r2, r3, [r1]

		pressedButton = KEYPAD_ReadKey();
 8002d5a:	f7ff fa2d 	bl	80021b8 <KEYPAD_ReadKey>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	76fb      	strb	r3, [r7, #27]
		direccion = "Front";
 8002d62:	4b3a      	ldr	r3, [pc, #232]	@ (8002e4c <StartTask2+0x16c>)
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(pressedButton == '2' || character == 'B')
 8002d66:	7efb      	ldrb	r3, [r7, #27]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b32      	cmp	r3, #50	@ 0x32
 8002d6c:	d003      	beq.n	8002d76 <StartTask2+0x96>
 8002d6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d72:	2b42      	cmp	r3, #66	@ 0x42
 8002d74:	d10e      	bne.n	8002d94 <StartTask2+0xb4>
		{
			EngTrModel_U.BrakeTorque = 100.0;
 8002d76:	493a      	ldr	r1, [pc, #232]	@ (8002e60 <StartTask2+0x180>)
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b39      	ldr	r3, [pc, #228]	@ (8002e64 <StartTask2+0x184>)
 8002d7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			direccion = "Break";
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <StartTask2+0x188>)
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
			turnOnLED(11);
 8002d86:	200b      	movs	r0, #11
 8002d88:	f000 f9fe 	bl	8003188 <turnOnLED>
			turnOnLED(12);
 8002d8c:	200c      	movs	r0, #12
 8002d8e:	f000 f9fb 	bl	8003188 <turnOnLED>
 8002d92:	e02e      	b.n	8002df2 <StartTask2+0x112>
		}
		else if(pressedButton == '1' || character == 'L')
 8002d94:	7efb      	ldrb	r3, [r7, #27]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b31      	cmp	r3, #49	@ 0x31
 8002d9a:	d003      	beq.n	8002da4 <StartTask2+0xc4>
 8002d9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002da0:	2b4c      	cmp	r3, #76	@ 0x4c
 8002da2:	d108      	bne.n	8002db6 <StartTask2+0xd6>
		{
			direccion = "Left";
 8002da4:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <StartTask2+0x18c>)
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
			turnOnLED(11);
 8002da8:	200b      	movs	r0, #11
 8002daa:	f000 f9ed 	bl	8003188 <turnOnLED>
			turnOffLED(12);
 8002dae:	200c      	movs	r0, #12
 8002db0:	f000 fa00 	bl	80031b4 <turnOffLED>
 8002db4:	e01d      	b.n	8002df2 <StartTask2+0x112>
		}
		else if(pressedButton == '3' || character == 'R')
 8002db6:	7efb      	ldrb	r3, [r7, #27]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b33      	cmp	r3, #51	@ 0x33
 8002dbc:	d003      	beq.n	8002dc6 <StartTask2+0xe6>
 8002dbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002dc2:	2b52      	cmp	r3, #82	@ 0x52
 8002dc4:	d108      	bne.n	8002dd8 <StartTask2+0xf8>
		{
			direccion = "Right";
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <StartTask2+0x190>)
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	    	turnOnLED(12);
 8002dca:	200c      	movs	r0, #12
 8002dcc:	f000 f9dc 	bl	8003188 <turnOnLED>
	    	turnOffLED(11);
 8002dd0:	200b      	movs	r0, #11
 8002dd2:	f000 f9ef 	bl	80031b4 <turnOffLED>
 8002dd6:	e00c      	b.n	8002df2 <StartTask2+0x112>
		}
		else
		{
	    	turnOffLED(11);
 8002dd8:	200b      	movs	r0, #11
 8002dda:	f000 f9eb 	bl	80031b4 <turnOffLED>
	    	turnOffLED(12);
 8002dde:	200c      	movs	r0, #12
 8002de0:	f000 f9e8 	bl	80031b4 <turnOffLED>
			EngTrModel_U.BrakeTorque = 0.0;
 8002de4:	491e      	ldr	r1, [pc, #120]	@ (8002e60 <StartTask2+0x180>)
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		// Update the values into the vehicle model
		EngTrModel_step();
 8002df2:	f7fe fdcd 	bl	8001990 <EngTrModel_step>

//		/* Send Data to TASK 3*/
//		M1.eS = EngTrModel_Y.EngineSpeed;
//		M1.gear = EngTrModel_Y.Gear;
//		M1.vS = EngTrModel_Y.VehicleSpeed;
		M1.direccion = direccion;
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	617b      	str	r3, [r7, #20]
//		M2.eS = EngTrModel_Y.EngineSpeed;
//		M2.gear = EngTrModel_Y.Gear;
//		M2.vS = EngTrModel_Y.VehicleSpeed;

		osStatus status1;
		status1 = osMessagePut(Queue2Handle,(uint32_t) &M1, osWaitForever);
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <StartTask2+0x194>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f107 0114 	add.w	r1, r7, #20
 8002e02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 f9f8 	bl	80051fc <osMessagePut>
 8002e0c:	6238      	str	r0, [r7, #32]
		if (status1 != osOK) {
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <StartTask2+0x148>
			if (status1 == osErrorTimeoutResource) {
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	2bc1      	cmp	r3, #193	@ 0xc1
 8002e18:	d103      	bne.n	8002e22 <StartTask2+0x142>
				printf("Error: Queue is full\r\n");
 8002e1a:	4817      	ldr	r0, [pc, #92]	@ (8002e78 <StartTask2+0x198>)
 8002e1c:	f006 fe2e 	bl	8009a7c <puts>
 8002e20:	e002      	b.n	8002e28 <StartTask2+0x148>
			} else {
				printf("Error in osMessagePut Task 2\r\n");
 8002e22:	4816      	ldr	r0, [pc, #88]	@ (8002e7c <StartTask2+0x19c>)
 8002e24:	f006 fe2a 	bl	8009a7c <puts>
			}
		}


//		/* Record the end tick */
		endTick = osKernelSysTick();
 8002e28:	f002 f8b3 	bl	8004f92 <osKernelSysTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4a14      	ldr	r2, [pc, #80]	@ (8002e80 <StartTask2+0x1a0>)
 8002e30:	6013      	str	r3, [r2, #0]
//		/* Calculate the time difference */
		uint32_t executionTime = endTick - startTick;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <StartTask2+0x1a0>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <StartTask2+0x170>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
//		/* Print or log the execution time */
//		printf("Task 2 Execution Time: %lu ticks\r\n", executionTime);

//		osDelay(PERIOD_T2 - TICK_DIFF_T2);
		osDelay(PERIOD_T2 - executionTime);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 f900 	bl	800504a <osDelay>
	for(;;){
 8002e4a:	e753      	b.n	8002cf4 <StartTask2+0x14>
 8002e4c:	0800d77c 	.word	0x0800d77c
 8002e50:	2000058c 	.word	0x2000058c
 8002e54:	20000580 	.word	0x20000580
 8002e58:	0800d784 	.word	0x0800d784
 8002e5c:	80080081 	.word	0x80080081
 8002e60:	20000260 	.word	0x20000260
 8002e64:	40590000 	.word	0x40590000
 8002e68:	0800d7a4 	.word	0x0800d7a4
 8002e6c:	0800d7ac 	.word	0x0800d7ac
 8002e70:	0800d7b4 	.word	0x0800d7b4
 8002e74:	20000584 	.word	0x20000584
 8002e78:	0800d744 	.word	0x0800d744
 8002e7c:	0800d7bc 	.word	0x0800d7bc
 8002e80:	20000590 	.word	0x20000590

08002e84 <StartTask3>:
//		osDelay(59);
	}
}

void StartTask3(void const * argument){
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	b08f      	sub	sp, #60	@ 0x3c
 8002e88:	af06      	add	r7, sp, #24
 8002e8a:	6078      	str	r0, [r7, #4]
//	uint32_t counter = 0;
	char *direccion  = "";
 8002e8c:	4b43      	ldr	r3, [pc, #268]	@ (8002f9c <StartTask3+0x118>)
 8002e8e:	61fb      	str	r3, [r7, #28]

	for(;;){
		startTick = osKernelSysTick();
 8002e90:	f002 f87f 	bl	8004f92 <osKernelSysTick>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a42      	ldr	r2, [pc, #264]	@ (8002fa0 <StartTask3+0x11c>)
 8002e98:	6013      	str	r3, [r2, #0]

		/*Receive value from Queue*/
		osEvent valuesMotor = osMessageGet(Queue2Handle, 0);
 8002e9a:	4b42      	ldr	r3, [pc, #264]	@ (8002fa4 <StartTask3+0x120>)
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 f9e9 	bl	800527c <osMessageGet>
		if (valuesMotor.status != osEventMessage) {
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d002      	beq.n	8002eb6 <StartTask3+0x32>
			printf("Error in osMessageGet Task 3\r\n");
 8002eb0:	483d      	ldr	r0, [pc, #244]	@ (8002fa8 <StartTask3+0x124>)
 8002eb2:	f006 fde3 	bl	8009a7c <puts>
		}

		direccion = ((DataMotorUART *)valuesMotor.value.p)->direccion;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61fb      	str	r3, [r7, #28]

		// Send the output values
		osMutexWait(mutex1Handle, osWaitForever);
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <StartTask3+0x128>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 f8ed 	bl	80050a4 <osMutexWait>

		printf("%f,%f,%f,%s\n\r", EngTrModel_Y.VehicleSpeed, EngTrModel_Y.Gear ,EngTrModel_Y.EngineSpeed, direccion);
 8002eca:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <StartTask3+0x12c>)
 8002ecc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <StartTask3+0x12c>)
 8002ed2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ed6:	4936      	ldr	r1, [pc, #216]	@ (8002fb0 <StartTask3+0x12c>)
 8002ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002edc:	69fe      	ldr	r6, [r7, #28]
 8002ede:	9604      	str	r6, [sp, #16]
 8002ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ee8:	4622      	mov	r2, r4
 8002eea:	462b      	mov	r3, r5
 8002eec:	4831      	ldr	r0, [pc, #196]	@ (8002fb4 <StartTask3+0x130>)
 8002eee:	f006 fd5d 	bl	80099ac <iprintf>
		tim2_delay(TIM2_TIME_50MS);
 8002ef2:	4831      	ldr	r0, [pc, #196]	@ (8002fb8 <StartTask3+0x134>)
 8002ef4:	f7ff f88a 	bl	800200c <tim2_delay>

		LCD_Clear();
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7ff fbc7 	bl	800268c <LCD_Write_Cmd>
		LCD_Set_Cursor( 1, 1 );
 8002efe:	2101      	movs	r1, #1
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7ff fbe9 	bl	80026d8 <LCD_Set_Cursor>
		LCD_Put_Str( "VS:" );
 8002f06:	482d      	ldr	r0, [pc, #180]	@ (8002fbc <StartTask3+0x138>)
 8002f08:	f7ff fc08 	bl	800271c <LCD_Put_Str>
		LCD_Put_Num( EngTrModel_Y.VehicleSpeed );
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <StartTask3+0x12c>)
 8002f0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fd8f 	bl	8000a38 <__aeabi_d2iz>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fc20 	bl	8002764 <LCD_Put_Num>
		LCD_Put_Str( "   G:");
 8002f24:	4826      	ldr	r0, [pc, #152]	@ (8002fc0 <StartTask3+0x13c>)
 8002f26:	f7ff fbf9 	bl	800271c <LCD_Put_Str>
		LCD_Put_Num( EngTrModel_Y.Gear );
 8002f2a:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <StartTask3+0x12c>)
 8002f2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7fd fd80 	bl	8000a38 <__aeabi_d2iz>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	b21b      	sxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fc11 	bl	8002764 <LCD_Put_Num>
		LCD_Set_Cursor( 2, 1 );
 8002f42:	2101      	movs	r1, #1
 8002f44:	2002      	movs	r0, #2
 8002f46:	f7ff fbc7 	bl	80026d8 <LCD_Set_Cursor>
		LCD_Put_Str( "ES:");
 8002f4a:	481e      	ldr	r0, [pc, #120]	@ (8002fc4 <StartTask3+0x140>)
 8002f4c:	f7ff fbe6 	bl	800271c <LCD_Put_Str>
		LCD_Put_Num( EngTrModel_Y.EngineSpeed );
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <StartTask3+0x12c>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fd6d 	bl	8000a38 <__aeabi_d2iz>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fbfe 	bl	8002764 <LCD_Put_Num>
		tim2_delay(TIM2_TIME_100MS);
 8002f68:	4817      	ldr	r0, [pc, #92]	@ (8002fc8 <StartTask3+0x144>)
 8002f6a:	f7ff f84f 	bl	800200c <tim2_delay>

		osMutexRelease(mutex1Handle);
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <StartTask3+0x128>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 f8e4 	bl	8005140 <osMutexRelease>

//		/* Record the end tick */
		endTick = osKernelSysTick();
 8002f78:	f002 f80b 	bl	8004f92 <osKernelSysTick>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <StartTask3+0x148>)
 8002f80:	6013      	str	r3, [r2, #0]
//		/* Calculate the time difference */
		uint32_t executionTime = endTick - startTick;
 8002f82:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <StartTask3+0x148>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <StartTask3+0x11c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	61bb      	str	r3, [r7, #24]
//		/* Print or log the execution time */
//		printf("Task 3 Execution Time: %lu ticks\r\n", executionTime);

//		osDelay(PERIOD_T3 - TICK_DIFF_T3);
		osDelay(PERIOD_T3 - executionTime);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 f858 	bl	800504a <osDelay>
	for(;;){
 8002f9a:	e779      	b.n	8002e90 <StartTask3+0xc>
 8002f9c:	0800d7dc 	.word	0x0800d7dc
 8002fa0:	2000058c 	.word	0x2000058c
 8002fa4:	20000584 	.word	0x20000584
 8002fa8:	0800d7e0 	.word	0x0800d7e0
 8002fac:	20000588 	.word	0x20000588
 8002fb0:	20000270 	.word	0x20000270
 8002fb4:	0800d800 	.word	0x0800d800
 8002fb8:	3d4ccccd 	.word	0x3d4ccccd
 8002fbc:	0800d810 	.word	0x0800d810
 8002fc0:	0800d814 	.word	0x0800d814
 8002fc4:	0800d81c 	.word	0x0800d81c
 8002fc8:	3dcccccd 	.word	0x3dcccccd
 8002fcc:	20000590 	.word	0x20000590

08002fd0 <Init_Task1>:
//		osDelay(128);
	}
}

void Init_Task1 (void){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	/*System Clock (SYSCLK) Configuration or */
	FLASH->ACR		&=	~( 0X5UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
 8002fd4:	4b59      	ldr	r3, [pc, #356]	@ (800313c <Init_Task1+0x16c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	@ (800313c <Init_Task1+0x16c>)
 8002fda:	f023 0305 	bic.w	r3, r3, #5
 8002fde:	6013      	str	r3, [r2, #0]
	FLASH->ACR		|=	 ( 0X2UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
 8002fe0:	4b56      	ldr	r3, [pc, #344]	@ (800313c <Init_Task1+0x16c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a55      	ldr	r2, [pc, #340]	@ (800313c <Init_Task1+0x16c>)
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	6013      	str	r3, [r2, #0]
	RCC->CFGR		&=	~( 0x1UL << 16U)  // PLL HSI Clock /2 selected as PLL input clock
 8002fec:	4b54      	ldr	r3, [pc, #336]	@ (8003140 <Init_Task1+0x170>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a53      	ldr	r2, [pc, #332]	@ (8003140 <Init_Task1+0x170>)
 8002ff2:	f423 339d 	bic.w	r3, r3, #80384	@ 0x13a00
 8002ff6:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8002ffa:	6053      	str	r3, [r2, #4]
					&	~( 0x7UL << 11U)  // APB2 prescaler /1
					&	~( 0x3UL <<  8U)  // APB1 prescaler /2 (APB1 must not exceeed 36Mhz)
					&	~( 0xFUL <<  4U); // AHB perscaler /1
	RCC->CFGR		|=	 ( 0xFUL << 18U)  // PLL input clock x 16 (PLLMUL bits)
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <Init_Task1+0x170>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	@ (8003140 <Init_Task1+0x170>)
 8003002:	f443 1370 	orr.w	r3, r3, #3932160	@ 0x3c0000
 8003006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300a:	6053      	str	r3, [r2, #4]
					|	 ( 0x4UL <<  8U); // APB1 Prescaler /2
	RCC->CR			|= 	 ( 0x1UL << 24U); // PLL2 ON
 800300c:	4b4c      	ldr	r3, [pc, #304]	@ (8003140 <Init_Task1+0x170>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <Init_Task1+0x170>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003016:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & ~(0x1UL << 25U )));// Wait until PLL is locked
 8003018:	bf00      	nop
 800301a:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <Init_Task1+0x170>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f9      	beq.n	800301a <Init_Task1+0x4a>
	RCC->CFGR 		&=  ~( 0x1UL <<  0U); // PLL used as system clock (SW bits)
 8003026:	4b46      	ldr	r3, [pc, #280]	@ (8003140 <Init_Task1+0x170>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4a45      	ldr	r2, [pc, #276]	@ (8003140 <Init_Task1+0x170>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6053      	str	r3, [r2, #4]
	RCC->CFGR		|=	 ( 0x2UL <<  0U); // PLL used as system clock (SW bits)
 8003032:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <Init_Task1+0x170>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <Init_Task1+0x170>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6053      	str	r3, [r2, #4]
	while( 0x8UL != (RCC->CFGR & 0xCUL)); // wait until PLL is switched
 800303e:	bf00      	nop
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <Init_Task1+0x170>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d1f9      	bne.n	8003040 <Init_Task1+0x70>

//-------------------------------------------------------------------------------

	// Enable clock for required peripherals
	RCC->APB2ENR    |=  ( 0x1UL <<  2U )    // IO port A clock enable
 800304c:	4b3c      	ldr	r3, [pc, #240]	@ (8003140 <Init_Task1+0x170>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <Init_Task1+0x170>)
 8003052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6193      	str	r3, [r2, #24]
					|   ( 0x1UL << 14U ); 	// USART 1 clock enable
	RCC->APB2ENR    |=  ( 0x1UL <<  4U );   // IO port C clock enable
 800305c:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <Init_Task1+0x170>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a37      	ldr	r2, [pc, #220]	@ (8003140 <Init_Task1+0x170>)
 8003062:	f043 0310 	orr.w	r3, r3, #16
 8003066:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR    |=  ( 0x1UL <<  9U );   // ADC1 clock enable
 8003068:	4b35      	ldr	r3, [pc, #212]	@ (8003140 <Init_Task1+0x170>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a34      	ldr	r2, [pc, #208]	@ (8003140 <Init_Task1+0x170>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003072:	6193      	str	r3, [r2, #24]

//-------------------------------------------------------------------------------

	// Configure ADC1 clock peripheral
	RCC->CFGR		|= 	( 0x3  <<  14);	// PCLK2 divided by 8
 8003074:	4b32      	ldr	r3, [pc, #200]	@ (8003140 <Init_Task1+0x170>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <Init_Task1+0x170>)
 800307a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800307e:	6053      	str	r3, [r2, #4]


    // CONFIGURE THE ADC1 PIN3 TO INPUT THE VOLTAGE
    // GPIOx_BSRR modified to reset pin 0 of port A
	GPIOA->BSRR |= (0x1UL << 16U); // Immediate value
 8003080:	4b30      	ldr	r3, [pc, #192]	@ (8003144 <Init_Task1+0x174>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4a2f      	ldr	r2, [pc, #188]	@ (8003144 <Init_Task1+0x174>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308a:	6113      	str	r3, [r2, #16]
	// GPIOx_CRL modified to configure pin 0 as input analog
	GPIOA->CRL  &=  ~(0x3UL << 2U) & ~(0x3UL << 0U);
 800308c:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <Init_Task1+0x174>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <Init_Task1+0x174>)
 8003092:	f023 030f 	bic.w	r3, r3, #15
 8003096:	6013      	str	r3, [r2, #0]


	// INITIALIZE AND ENABLE THE ADC1 PERIPHERAL
	ADC1->CR1		&=	~(0xF << 16UL);
 8003098:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <Init_Task1+0x178>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <Init_Task1+0x178>)
 800309e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80030a2:	6053      	str	r3, [r2, #4]
	// DETERMINE THE RESULT FORMAT
	ADC1->CR2		&= ~(0x1  << 11UL)  // Right Alignment
 80030a4:	4b28      	ldr	r3, [pc, #160]	@ (8003148 <Init_Task1+0x178>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <Init_Task1+0x178>)
 80030aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ae:	6093      	str	r3, [r2, #8]
					|	(0x1  <<  1UL); // Continuos conversion mode

	// DETERMINE THE SAMPLE TIME
	// ¿Cómo se determina el Sample time adecuado?
	ADC1->SMPR2		&= ~(0x7  <<  0UL); // 1.5 Cycles
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <Init_Task1+0x178>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a24      	ldr	r2, [pc, #144]	@ (8003148 <Init_Task1+0x178>)
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	6113      	str	r3, [r2, #16]
	// THE SECUENCES AND/OR THE NUMBER OF CONVERSACIONS FOR THE ADC REGULAR CHANNELS
	ADC1->SQR1		&= ~(0xF  <<  20UL);// 1 Conversion for regular channels
 80030bc:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <Init_Task1+0x178>)
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <Init_Task1+0x178>)
 80030c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80030c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	// SELECT THE CHANNEL FOR THE FIRST ADC CONVERSATION
	ADC1->SQR3		&= ~(0x1F  << 0UL);// first conversion in channel 0
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <Init_Task1+0x178>)
 80030ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <Init_Task1+0x178>)
 80030ce:	f023 031f 	bic.w	r3, r3, #31
 80030d2:	6353      	str	r3, [r2, #52]	@ 0x34

	// ENABLE THE ADC MODULE
	ADC1->CR2		|=  (0x1  <<  0UL); // ADC Enable and start conversion
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <Init_Task1+0x178>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <Init_Task1+0x178>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6093      	str	r3, [r2, #8]
	// ADC Calibration
	ADC1->CR2		|=  (0x1  <<  2UL); // Start the calibration
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <Init_Task1+0x178>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <Init_Task1+0x178>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6093      	str	r3, [r2, #8]
    // Wait until after calibration is complete
    while((ADC1->CR2 & (0x1UL << 2U)) == 0){}
 80030ec:	bf00      	nop
 80030ee:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <Init_Task1+0x178>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f9      	beq.n	80030ee <Init_Task1+0x11e>

//-------------------------------------------------------------------------------

    //	Configuración del PIN PB11 como salida push-pull
	GPIOB->CRH &= ~((0xF << 12));  // Limpiar bits de configuración para el PIN 11
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <Init_Task1+0x17c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <Init_Task1+0x17c>)
 8003100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003104:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |=  (0x1 << 12);    // Configurar como salida de 10 MHz (MODE11[1:0] = 01, CNF11[1:0] = 00)
 8003106:	4b11      	ldr	r3, [pc, #68]	@ (800314c <Init_Task1+0x17c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a10      	ldr	r2, [pc, #64]	@ (800314c <Init_Task1+0x17c>)
 800310c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003110:	6053      	str	r3, [r2, #4]

	// Configuración del PIN PB12 como salida push-pull
	GPIOB->CRH &= ~((0xF << 16));  // Limpiar bits de configuración para el PIN 12
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <Init_Task1+0x17c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <Init_Task1+0x17c>)
 8003118:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800311c:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |=  (0x1 << 16);    // Configurar como salida de 10 MHz (MODE12[1:0] = 01, CNF12[1:0] = 00)
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <Init_Task1+0x17c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <Init_Task1+0x17c>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6053      	str	r3, [r2, #4]

//-------------------------------------------------------------------------------

	KEYPAD_Init();
 800312a:	f7fe ffd7 	bl	80020dc <KEYPAD_Init>
	EngTrModel_initialize();
 800312e:	f7fe ff09 	bl	8001f44 <EngTrModel_initialize>
	LCD_Init();
 8003132:	f7ff f96d 	bl	8002410 <LCD_Init>
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000
 8003140:	40021000 	.word	0x40021000
 8003144:	40010800 	.word	0x40010800
 8003148:	40012400 	.word	0x40012400
 800314c:	40010c00 	.word	0x40010c00

08003150 <USE_ADC1_MODULE>:

uint16_t USE_ADC1_MODULE(void){
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
	ADC1->CR2	|=  (0x1  <<  0UL); // ADC Enable and start conversion
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <USE_ADC1_MODULE+0x34>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <USE_ADC1_MODULE+0x34>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6093      	str	r3, [r2, #8]
	// Wait until conversation is done (SR reg EOC bit)
    while ((ADC1->SR & (0x1UL << 1U)) == 0);
 8003162:	bf00      	nop
 8003164:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <USE_ADC1_MODULE+0x34>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f9      	beq.n	8003164 <USE_ADC1_MODULE+0x14>
    // Read the value in DR(15:0) of ADC1
    uint16_t readValue = ADC1->DR & 0xFFFF;
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <USE_ADC1_MODULE+0x34>)
 8003172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003174:	80fb      	strh	r3, [r7, #6]
    return readValue;
 8003176:	88fb      	ldrh	r3, [r7, #6]
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40012400 	.word	0x40012400

08003188 <turnOnLED>:

void turnOnLED(uint16_t pin) {
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
    GPIOB->ODR |= (1 << pin);  // Establecer el pin correspondiente (alta)
 8003192:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <turnOnLED+0x28>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4a03      	ldr	r2, [pc, #12]	@ (80031b0 <turnOnLED+0x28>)
 80031a2:	430b      	orrs	r3, r1
 80031a4:	60d3      	str	r3, [r2, #12]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	40010c00 	.word	0x40010c00

080031b4 <turnOffLED>:

void turnOffLED(uint16_t pin) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
    GPIOB->ODR &= ~(1 << pin);  // Restablecer el pin correspondiente (baja)
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <turnOffLED+0x2c>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	43d2      	mvns	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <turnOffLED+0x2c>)
 80031d0:	400b      	ands	r3, r1
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40010c00 	.word	0x40010c00

080031e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031ec:	2001      	movs	r0, #1
 80031ee:	f001 ff2c 	bl	800504a <osDelay>
 80031f2:	e7fb      	b.n	80031ec <StartDefaultTask+0x8>

080031f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003206:	f000 fc73 	bl	8003af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40000800 	.word	0x40000800

08003218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800321c:	b672      	cpsid	i
}
 800321e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <Error_Handler+0x8>

08003224 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800322a:	2340      	movs	r3, #64	@ 0x40
 800322c:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b20      	cmp	r3, #32
 800323e:	d10a      	bne.n	8003256 <rtGetInf+0x32>
    inf = rtGetInfF();
 8003240:	f000 f836 	bl	80032b0 <rtGetInfF>
 8003244:	4603      	mov	r3, r0
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f8ee 	bl	8000428 <__aeabi_f2d>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003254:	e022      	b.n	800329c <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8003256:	2301      	movs	r3, #1
 8003258:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <rtGetInf+0x54>
 8003272:	2b01      	cmp	r3, #1
 8003274:	d009      	beq.n	800328a <rtGetInf+0x66>
 8003276:	e011      	b.n	800329c <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <rtGetInf+0x88>)
 800327a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8003280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003284:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003288:	e008      	b.n	800329c <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <rtGetInf+0x88>)
 800328c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8003292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003296:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800329a:	bf00      	nop
      }
    }
  }

  return inf;
 800329c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	7ff00000 	.word	0x7ff00000

080032b0 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 80032b6:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 80032ba:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80032ce:	2340      	movs	r3, #64	@ 0x40
 80032d0:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d10a      	bne.n	80032fa <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 80032e4:	f000 f836 	bl	8003354 <rtGetMinusInfF>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f89c 	bl	8000428 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80032f8:	e022      	b.n	8003340 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 80032fa:	2301      	movs	r3, #1
 80032fc:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <rtGetMinusInf+0x54>
 8003316:	2b01      	cmp	r3, #1
 8003318:	d009      	beq.n	800332e <rtGetMinusInf+0x66>
 800331a:	e011      	b.n	8003340 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <rtGetMinusInf+0x88>)
 800331e:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8003324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003328:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800332c:	e008      	b.n	8003340 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <rtGetMinusInf+0x88>)
 8003330:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8003336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800333a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800333e:	bf00      	nop
      }
    }
  }

  return minf;
 8003340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	fff00000 	.word	0xfff00000

08003354 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800335a:	4b04      	ldr	r3, [pc, #16]	@ (800336c <rtGetMinusInfF+0x18>)
 800335c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800335e:	687b      	ldr	r3, [r7, #4]
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	ff800000 	.word	0xff800000

08003370 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003376:	2340      	movs	r3, #64	@ 0x40
 8003378:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b20      	cmp	r3, #32
 800338a:	d10a      	bne.n	80033a2 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 800338c:	f000 f838 	bl	8003400 <rtGetNaNF>
 8003390:	4603      	mov	r3, r0
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd f848 	bl	8000428 <__aeabi_f2d>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80033a0:	e024      	b.n	80033ec <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 80033a2:	2301      	movs	r3, #1
 80033a4:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <rtGetNaN+0x54>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d009      	beq.n	80033d6 <rtGetNaN+0x66>
 80033c2:	e013      	b.n	80033ec <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80033c4:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <rtGetNaN+0x8c>)
 80033c6:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 80033cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80033d4:	e00a      	b.n	80033ec <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 80033d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80033da:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033e0:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 80033e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80033ea:	bf00      	nop
      }
    }
  }

  return nan;
 80033ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	fff80000 	.word	0xfff80000

08003400 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 800340c:	2301      	movs	r3, #1
 800340e:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <rtGetNaNF+0x2c>
 8003426:	2b01      	cmp	r3, #1
 8003428:	d003      	beq.n	8003432 <rtGetNaNF+0x32>
 800342a:	e006      	b.n	800343a <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <rtGetNaNF+0x48>)
 800342e:	60bb      	str	r3, [r7, #8]
      break;
 8003430:	e003      	b.n	800343a <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 8003432:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003436:	60bb      	str	r3, [r7, #8]
      break;
 8003438:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	ffc00000 	.word	0xffc00000

0800344c <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8003454:	f7ff ff8c 	bl	8003370 <rtGetNaN>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4911      	ldr	r1, [pc, #68]	@ (80034a4 <rt_InitInfAndNaN+0x58>)
 800345e:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8003462:	f7ff ffcd 	bl	8003400 <rtGetNaNF>
 8003466:	4603      	mov	r3, r0
 8003468:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <rt_InitInfAndNaN+0x5c>)
 800346a:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 800346c:	f7ff feda 	bl	8003224 <rtGetInf>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	490d      	ldr	r1, [pc, #52]	@ (80034ac <rt_InitInfAndNaN+0x60>)
 8003476:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 800347a:	f7ff ff19 	bl	80032b0 <rtGetInfF>
 800347e:	4603      	mov	r3, r0
 8003480:	4a0b      	ldr	r2, [pc, #44]	@ (80034b0 <rt_InitInfAndNaN+0x64>)
 8003482:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8003484:	f7ff ff20 	bl	80032c8 <rtGetMinusInf>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4909      	ldr	r1, [pc, #36]	@ (80034b4 <rt_InitInfAndNaN+0x68>)
 800348e:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 8003492:	f7ff ff5f 	bl	8003354 <rtGetMinusInfF>
 8003496:	4603      	mov	r3, r0
 8003498:	4a07      	ldr	r2, [pc, #28]	@ (80034b8 <rt_InitInfAndNaN+0x6c>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200005a8 	.word	0x200005a8
 80034a8:	200005b8 	.word	0x200005b8
 80034ac:	20000598 	.word	0x20000598
 80034b0:	200005b0 	.word	0x200005b0
 80034b4:	200005a0 	.word	0x200005a0
 80034b8:	200005b4 	.word	0x200005b4

080034bc <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <rtIsInf+0x40>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034d0:	f7fd fa6a 	bl	80009a8 <__aeabi_dcmpeq>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <rtIsInf+0x32>
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <rtIsInf+0x44>)
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e4:	f7fd fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <rtIsInf+0x36>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <rtIsInf+0x38>
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000598 	.word	0x20000598
 8003500:	200005a0 	.word	0x200005a0

08003504 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	@ 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003514:	2340      	movs	r3, #64	@ 0x40
 8003516:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b20      	cmp	r3, #32
 800351c:	d10b      	bne.n	8003536 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 800351e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003522:	f7fd fad1 	bl	8000ac8 <__aeabi_d2f>
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f84d 	bl	80035c8 <rtIsNaNF>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003534:	e040      	b.n	80035b8 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8003536:	2301      	movs	r3, #1
 8003538:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <rtIsNaN+0x54>
 8003552:	2b01      	cmp	r3, #1
 8003554:	d018      	beq.n	8003588 <rtIsNaN+0x84>
 8003556:	e02f      	b.n	80035b8 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800355c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <rtIsNaN+0xc0>)
 8003564:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8003566:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <rtIsNaN+0xc0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d109      	bne.n	8003580 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8003576:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <rtIsNaN+0x7e>
 8003580:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8003586:	e017      	b.n	80035b8 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800358c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <rtIsNaN+0xc0>)
 8003594:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8003596:	4a0b      	ldr	r2, [pc, #44]	@ (80035c4 <rtIsNaN+0xc0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80035a6:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <rtIsNaN+0xac>
                             0x7FF00000 &&
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <rtIsNaN+0xae>
 80035b0:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80035b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80035b6:	bf00      	nop
      }
    }
  }

  return result;
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	@ 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	7ff00000 	.word	0x7ff00000

080035c8 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 80035da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80035de:	d106      	bne.n	80035ee <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <rtIsNaNF+0x26>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <rtIsNaNF+0x28>
 80035ee:	2300      	movs	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_MspInit+0x68>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_MspInit+0x68>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6193      	str	r3, [r2, #24]
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_MspInit+0x68>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_MspInit+0x68>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <HAL_MspInit+0x68>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_MspInit+0x68>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	210f      	movs	r1, #15
 8003636:	f06f 0001 	mvn.w	r0, #1
 800363a:	f000 fb2a 	bl	8003c92 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800363e:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <HAL_MspInit+0x6c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <HAL_MspInit+0x6c>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000

0800366c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_UART_MspInit+0x8c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d131      	bne.n	80036f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_UART_MspInit+0x90>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_UART_MspInit+0x90>)
 8003692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <HAL_UART_MspInit+0x90>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_UART_MspInit+0x90>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_UART_MspInit+0x90>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	6193      	str	r3, [r2, #24]
 80036b0:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_UART_MspInit+0x90>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ca:	f107 0310 	add.w	r3, r7, #16
 80036ce:	4619      	mov	r1, r3
 80036d0:	480b      	ldr	r0, [pc, #44]	@ (8003700 <HAL_UART_MspInit+0x94>)
 80036d2:	f000 fb09 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4619      	mov	r1, r3
 80036ea:	4805      	ldr	r0, [pc, #20]	@ (8003700 <HAL_UART_MspInit+0x94>)
 80036ec:	f000 fafc 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010800 	.word	0x40010800

08003704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	@ 0x38
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800371a:	4b34      	ldr	r3, [pc, #208]	@ (80037ec <HAL_InitTick+0xe8>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a33      	ldr	r2, [pc, #204]	@ (80037ec <HAL_InitTick+0xe8>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_InitTick+0xe8>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003732:	f107 0210 	add.w	r2, r7, #16
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 f883 	bl	8004848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 f854 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8003750:	6378      	str	r0, [r7, #52]	@ 0x34
 8003752:	e004      	b.n	800375e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003754:	f001 f850 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8003758:	4603      	mov	r3, r0
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_InitTick+0xec>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	3b01      	subs	r3, #1
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800376c:	4b21      	ldr	r3, [pc, #132]	@ (80037f4 <HAL_InitTick+0xf0>)
 800376e:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_InitTick+0xf4>)
 8003770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_InitTick+0xf0>)
 8003774:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003778:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_InitTick+0xf0>)
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003780:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <HAL_InitTick+0xf0>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_InitTick+0xf0>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_InitTick+0xf0>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003792:	4818      	ldr	r0, [pc, #96]	@ (80037f4 <HAL_InitTick+0xf0>)
 8003794:	f001 f8a6 	bl	80048e4 <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800379e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11b      	bne.n	80037de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80037a6:	4813      	ldr	r0, [pc, #76]	@ (80037f4 <HAL_InitTick+0xf0>)
 80037a8:	f001 f8f4 	bl	8004994 <HAL_TIM_Base_Start_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80037b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037ba:	201e      	movs	r0, #30
 80037bc:	f000 fa85 	bl	8003cca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d808      	bhi.n	80037d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80037c6:	2200      	movs	r2, #0
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	201e      	movs	r0, #30
 80037cc:	f000 fa61 	bl	8003c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d0:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <HAL_InitTick+0xf8>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e002      	b.n	80037de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3738      	adds	r7, #56	@ 0x38
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	200005bc 	.word	0x200005bc
 80037f8:	40000800 	.word	0x40000800
 80037fc:	20000004 	.word	0x20000004

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <NMI_Handler+0x4>

08003808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <MemManage_Handler+0x4>

08003818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <UsageFault_Handler+0x4>

08003828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <TIM4_IRQHandler+0x10>)
 800383a:	f001 f8fd 	bl	8004a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200005bc 	.word	0x200005bc

08003848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800384c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003850:	f000 fbe6 	bl	8004020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}

08003858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <_kill>:

int _kill(int pid, int sig)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003870:	f006 f9a2 	bl	8009bb8 <__errno>
 8003874:	4603      	mov	r3, r0
 8003876:	2216      	movs	r2, #22
 8003878:	601a      	str	r2, [r3, #0]
  return -1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_exit>:

void _exit (int status)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800388e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ffe7 	bl	8003866 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <_exit+0x12>

0800389c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00a      	b.n	80038c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ae:	f3af 8000 	nop.w
 80038b2:	4601      	mov	r1, r0
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	60ba      	str	r2, [r7, #8]
 80038ba:	b2ca      	uxtb	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	dbf0      	blt.n	80038ae <_read+0x12>
  }

  return len;
 80038cc:	687b      	ldr	r3, [r7, #4]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038fc:	605a      	str	r2, [r3, #4]
  return 0;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <_isatty>:

int _isatty(int file)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
	...

08003938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <_sbrk+0x5c>)
 8003942:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <_sbrk+0x60>)
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800394c:	4b13      	ldr	r3, [pc, #76]	@ (800399c <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <_sbrk+0x64>)
 8003956:	4a12      	ldr	r2, [pc, #72]	@ (80039a0 <_sbrk+0x68>)
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <_sbrk+0x64>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d207      	bcs.n	8003978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003968:	f006 f926 	bl	8009bb8 <__errno>
 800396c:	4603      	mov	r3, r0
 800396e:	220c      	movs	r2, #12
 8003970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003976:	e009      	b.n	800398c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003978:	4b08      	ldr	r3, [pc, #32]	@ (800399c <_sbrk+0x64>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	4a05      	ldr	r2, [pc, #20]	@ (800399c <_sbrk+0x64>)
 8003988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20005000 	.word	0x20005000
 8003998:	00000400 	.word	0x00000400
 800399c:	20000604 	.word	0x20000604
 80039a0:	20002ca8 	.word	0x20002ca8

080039a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <_write>:
#define USARTDIV            0X22B		//USARTDIV for 64MHz in 115200
//#define USARTDIV            0x1A0B		//USARTDIV for 64MHz in 115200

static void USER_USART1_Send_8bit( uint8_t Data );

int _write(int  file, char *ptr, int len){
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
	// Redirect stdout to UART
	//	freopen(NULL, "w", stdout);

	int DataIdx;
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e00f      	b.n	80039e2 <_write+0x32>
		while(!( USART1->SR & USART_SR_TXE ));
 80039c2:	bf00      	nop
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <_write+0x48>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f9      	beq.n	80039c4 <_write+0x14>
		USART1->DR = *ptr++;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	60ba      	str	r2, [r7, #8]
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <_write+0x48>)
 80039da:	605a      	str	r2, [r3, #4]
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	dbeb      	blt.n	80039c2 <_write+0x12>
	}
	return len;
 80039ea:	687b      	ldr	r3, [r7, #4]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40013800 	.word	0x40013800

080039fc <USER_USART1_Init>:

void USER_USART1_Init( void ){
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 8003a00:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a11      	ldr	r2, [pc, #68]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a0a:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a16:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a22:	6113      	str	r3, [r2, #16]
	USART1->BRR	 =	 USARTDIV;//		Step 5 Desired baud rate
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a26:	f240 222b 	movw	r2, #555	@ 0x22b
 8003a2a:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 8003a2c:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a06      	ldr	r2, [pc, #24]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a32:	f043 0308 	orr.w	r3, r3, #8
 8003a36:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 8003a38:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4a03      	ldr	r2, [pc, #12]	@ (8003a4c <USER_USART1_Init+0x50>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	60d3      	str	r3, [r2, #12]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40013800 	.word	0x40013800

08003a50 <USER_USART1_Receive>:
static void USER_USART1_Send_8bit( uint8_t Data ){
	while(!( USART1->SR & USART_SR_TXE ));//	wait until next data can be written
	USART1->DR = Data;//				Step 7 Data to send
}

uint8_t USER_USART1_Receive( void ){
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	if(USART1->SR & USART_SR_RXNE) {
 8003a54:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <USER_USART1_Receive+0x24>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <USER_USART1_Receive+0x18>
		return (uint8_t) USART1->DR;
 8003a60:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <USER_USART1_Receive+0x24>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e000      	b.n	8003a6a <USER_USART1_Receive+0x1a>
	} else {
		return 'n';
 8003a68:	236e      	movs	r3, #110	@ 0x6e
	}
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40013800 	.word	0x40013800

08003a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a78:	f7ff ff94 	bl	80039a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a7c:	480b      	ldr	r0, [pc, #44]	@ (8003aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a7e:	490c      	ldr	r1, [pc, #48]	@ (8003ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a80:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a94:	4c09      	ldr	r4, [pc, #36]	@ (8003abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f006 f88f 	bl	8009bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aa6:	f7fe ff49 	bl	800293c <main>
  bx lr
 8003aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003ab4:	0800e568 	.word	0x0800e568
  ldr r2, =_sbss
 8003ab8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003abc:	20002ca4 	.word	0x20002ca4

08003ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC1_2_IRQHandler>
	...

08003ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <HAL_Init+0x28>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a07      	ldr	r2, [pc, #28]	@ (8003aec <HAL_Init+0x28>)
 8003ace:	f043 0310 	orr.w	r3, r3, #16
 8003ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f000 f8d1 	bl	8003c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ada:	200f      	movs	r0, #15
 8003adc:	f7ff fe12 	bl	8003704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae0:	f7ff fd8c 	bl	80035fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000

08003af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_IncTick+0x1c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_IncTick+0x20>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a03      	ldr	r2, [pc, #12]	@ (8003b10 <HAL_IncTick+0x20>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	20000008 	.word	0x20000008
 8003b10:	20000608 	.word	0x20000608

08003b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return uwTick;
 8003b18:	4b02      	ldr	r3, [pc, #8]	@ (8003b24 <HAL_GetTick+0x10>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	20000608 	.word	0x20000608

08003b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5a:	4a04      	ldr	r2, [pc, #16]	@ (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	60d3      	str	r3, [r2, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b74:	4b04      	ldr	r3, [pc, #16]	@ (8003b88 <__NVIC_GetPriorityGrouping+0x18>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0307 	and.w	r3, r3, #7
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db0b      	blt.n	8003bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4906      	ldr	r1, [pc, #24]	@ (8003bc0 <__NVIC_EnableIRQ+0x34>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2001      	movs	r0, #1
 8003bae:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	@ (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	@ (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	@ 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf28      	it	cs
 8003c36:	2304      	movcs	r3, #4
 8003c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <NVIC_EncodePriority+0x30>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3b03      	subs	r3, #3
 8003c46:	e000      	b.n	8003c4a <NVIC_EncodePriority+0x32>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	4313      	orrs	r3, r2
         );
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	@ 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff4f 	bl	8003b28 <__NVIC_SetPriorityGrouping>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca4:	f7ff ff64 	bl	8003b70 <__NVIC_GetPriorityGrouping>
 8003ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ffb2 	bl	8003c18 <NVIC_EncodePriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff81 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff57 	bl	8003b8c <__NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	@ 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e169      	b.n	8003fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8158 	bne.w	8003fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a9a      	ldr	r2, [pc, #616]	@ (8003f88 <HAL_GPIO_Init+0x2a0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d05e      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d24:	4a98      	ldr	r2, [pc, #608]	@ (8003f88 <HAL_GPIO_Init+0x2a0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d875      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d2a:	4a98      	ldr	r2, [pc, #608]	@ (8003f8c <HAL_GPIO_Init+0x2a4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d058      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d30:	4a96      	ldr	r2, [pc, #600]	@ (8003f8c <HAL_GPIO_Init+0x2a4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d86f      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d36:	4a96      	ldr	r2, [pc, #600]	@ (8003f90 <HAL_GPIO_Init+0x2a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d052      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d3c:	4a94      	ldr	r2, [pc, #592]	@ (8003f90 <HAL_GPIO_Init+0x2a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d869      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d42:	4a94      	ldr	r2, [pc, #592]	@ (8003f94 <HAL_GPIO_Init+0x2ac>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04c      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d48:	4a92      	ldr	r2, [pc, #584]	@ (8003f94 <HAL_GPIO_Init+0x2ac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d863      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d4e:	4a92      	ldr	r2, [pc, #584]	@ (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d046      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d54:	4a90      	ldr	r2, [pc, #576]	@ (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d85d      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d82a      	bhi.n	8003db4 <HAL_GPIO_Init+0xcc>
 8003d5e:	2b12      	cmp	r3, #18
 8003d60:	d859      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d62:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <HAL_GPIO_Init+0x80>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003de3 	.word	0x08003de3
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dcf 	.word	0x08003dcf
 8003d74:	08003e11 	.word	0x08003e11
 8003d78:	08003e17 	.word	0x08003e17
 8003d7c:	08003e17 	.word	0x08003e17
 8003d80:	08003e17 	.word	0x08003e17
 8003d84:	08003e17 	.word	0x08003e17
 8003d88:	08003e17 	.word	0x08003e17
 8003d8c:	08003e17 	.word	0x08003e17
 8003d90:	08003e17 	.word	0x08003e17
 8003d94:	08003e17 	.word	0x08003e17
 8003d98:	08003e17 	.word	0x08003e17
 8003d9c:	08003e17 	.word	0x08003e17
 8003da0:	08003e17 	.word	0x08003e17
 8003da4:	08003e17 	.word	0x08003e17
 8003da8:	08003e17 	.word	0x08003e17
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	4a79      	ldr	r2, [pc, #484]	@ (8003f9c <HAL_GPIO_Init+0x2b4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dba:	e02c      	b.n	8003e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	623b      	str	r3, [r7, #32]
          break;
 8003dc2:	e029      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e024      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]
          break;
 8003dd6:	e01f      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	623b      	str	r3, [r7, #32]
          break;
 8003de0:	e01a      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dea:	2304      	movs	r3, #4
 8003dec:	623b      	str	r3, [r7, #32]
          break;
 8003dee:	e013      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	611a      	str	r2, [r3, #16]
          break;
 8003e02:	e009      	b.n	8003e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e04:	2308      	movs	r3, #8
 8003e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	615a      	str	r2, [r3, #20]
          break;
 8003e0e:	e003      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
          break;
 8003e14:	e000      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          break;
 8003e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2bff      	cmp	r3, #255	@ 0xff
 8003e1c:	d801      	bhi.n	8003e22 <HAL_GPIO_Init+0x13a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	e001      	b.n	8003e26 <HAL_GPIO_Init+0x13e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2bff      	cmp	r3, #255	@ 0xff
 8003e2c:	d802      	bhi.n	8003e34 <HAL_GPIO_Init+0x14c>
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x152>
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	3b08      	subs	r3, #8
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	210f      	movs	r1, #15
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80b1 	beq.w	8003fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e68:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6193      	str	r3, [r2, #24]
 8003e74:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e80:	4a48      	ldr	r2, [pc, #288]	@ (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	@ (8003fa8 <HAL_GPIO_Init+0x2c0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_GPIO_Init+0x1ec>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3f      	ldr	r2, [pc, #252]	@ (8003fac <HAL_GPIO_Init+0x2c4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_GPIO_Init+0x1e8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb0 <HAL_GPIO_Init+0x2c8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <HAL_GPIO_Init+0x1e4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8003fb4 <HAL_GPIO_Init+0x2cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_GPIO_Init+0x1e0>
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	e004      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e002      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	f002 0203 	and.w	r2, r2, #3
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	4093      	lsls	r3, r2
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ee6:	492f      	ldr	r1, [pc, #188]	@ (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f00:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	492c      	ldr	r1, [pc, #176]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4928      	ldr	r1, [pc, #160]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f28:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	4922      	ldr	r1, [pc, #136]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60cb      	str	r3, [r1, #12]
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	491e      	ldr	r1, [pc, #120]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4918      	ldr	r1, [pc, #96]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
 8003f5c:	e006      	b.n	8003f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f5e:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	4914      	ldr	r1, [pc, #80]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d021      	beq.n	8003fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f78:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	490e      	ldr	r1, [pc, #56]	@ (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	e021      	b.n	8003fca <HAL_GPIO_Init+0x2e2>
 8003f86:	bf00      	nop
 8003f88:	10320000 	.word	0x10320000
 8003f8c:	10310000 	.word	0x10310000
 8003f90:	10220000 	.word	0x10220000
 8003f94:	10210000 	.word	0x10210000
 8003f98:	10120000 	.word	0x10120000
 8003f9c:	10110000 	.word	0x10110000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010800 	.word	0x40010800
 8003fac:	40010c00 	.word	0x40010c00
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	40011400 	.word	0x40011400
 8003fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_GPIO_Init+0x304>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4909      	ldr	r1, [pc, #36]	@ (8003fec <HAL_GPIO_Init+0x304>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	3301      	adds	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f47f ae8e 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	372c      	adds	r7, #44	@ 0x2c
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800400c:	e003      	b.n	8004016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	041a      	lsls	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004036:	4a05      	ldr	r2, [pc, #20]	@ (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f806 	bl	8004050 <HAL_GPIO_EXTI_Callback>
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e272      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8087 	beq.w	8004192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004084:	4b92      	ldr	r3, [pc, #584]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
 800409c:	4b8c      	ldr	r3, [pc, #560]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4b89      	ldr	r3, [pc, #548]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06c      	beq.n	8004190 <HAL_RCC_OscConfig+0x12c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d168      	bne.n	8004190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e24c      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x76>
 80040cc:	4b80      	ldr	r3, [pc, #512]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7f      	ldr	r2, [pc, #508]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e02e      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x98>
 80040e2:	4b7b      	ldr	r3, [pc, #492]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7a      	ldr	r2, [pc, #488]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a77      	ldr	r2, [pc, #476]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xbc>
 8004106:	4b72      	ldr	r3, [pc, #456]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 8004120:	4b6b      	ldr	r3, [pc, #428]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7ff fce8 	bl	8003b14 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7ff fce4 	bl	8003b14 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e200      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xe4>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7ff fcd4 	bl	8003b14 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7ff fcd0 	bl	8003b14 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1ec      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x10c>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b4c      	ldr	r3, [pc, #304]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
 80041b6:	4b46      	ldr	r3, [pc, #280]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1c0      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4939      	ldr	r1, [pc, #228]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7ff fc89 	bl	8003b14 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7ff fc85 	bl	8003b14 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1a1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4927      	ldr	r1, [pc, #156]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7ff fc68 	bl	8003b14 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7ff fc64 	bl	8003b14 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e180      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d019      	beq.n	80042ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b17      	ldr	r3, [pc, #92]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7ff fc48 	bl	8003b14 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7ff fc44 	bl	8003b14 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e160      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 fafe 	bl	80048a8 <RCC_Delay>
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7ff fc2e 	bl	8003b14 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042bc:	f7ff fc2a 	bl	8003b14 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d908      	bls.n	80042dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e146      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	42420000 	.word	0x42420000
 80042d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b92      	ldr	r3, [pc, #584]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e9      	bne.n	80042bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a6 	beq.w	8004442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4a87      	ldr	r2, [pc, #540]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	61d3      	str	r3, [r2, #28]
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b82      	ldr	r3, [pc, #520]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b7f      	ldr	r3, [pc, #508]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7e      	ldr	r2, [pc, #504]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7ff fbeb 	bl	8003b14 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7ff fbe7 	bl	8003b14 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	@ 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e103      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b75      	ldr	r3, [pc, #468]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x312>
 8004368:	4b6f      	ldr	r3, [pc, #444]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x334>
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a69      	ldr	r2, [pc, #420]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a66      	ldr	r2, [pc, #408]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x356>
 80043a0:	4b61      	ldr	r3, [pc, #388]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a60      	ldr	r2, [pc, #384]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 80043ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a5a      	ldr	r2, [pc, #360]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	4b58      	ldr	r3, [pc, #352]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7ff fb9b 	bl	8003b14 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7ff fb97 	bl	8003b14 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x37e>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7ff fb85 	bl	8003b14 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7ff fb81 	bl	8003b14 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e09b      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b3c      	ldr	r3, [pc, #240]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a3b      	ldr	r2, [pc, #236]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8087 	beq.w	800455a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d061      	beq.n	800451c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d146      	bne.n	80044ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b33      	ldr	r3, [pc, #204]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7ff fb55 	bl	8003b14 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7ff fb51 	bl	8003b14 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e06d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004480:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d108      	bne.n	80044a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4921      	ldr	r1, [pc, #132]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a19      	ldr	r1, [r3, #32]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	430b      	orrs	r3, r1
 80044ba:	491b      	ldr	r1, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7ff fb25 	bl	8003b14 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7ff fb21 	bl	8003b14 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e0:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x46a>
 80044ec:	e035      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7ff fb0e 	bl	8003b14 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7ff fb0a 	bl	8003b14 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e026      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x498>
 800451a:	e01e      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e019      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
 8004530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x500>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	429a      	cmp	r2, r3
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0d0      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d910      	bls.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b67      	ldr	r3, [pc, #412]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0207 	bic.w	r2, r3, #7
 8004592:	4965      	ldr	r1, [pc, #404]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d040      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d115      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b41      	ldr	r3, [pc, #260]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e073      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4936      	ldr	r1, [pc, #216]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7ff fa5c 	bl	8003b14 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7ff fa58 	bl	8003b14 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e053      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2d      	ldr	r3, [pc, #180]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d210      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4922      	ldr	r1, [pc, #136]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	@ (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1cc>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fff4 	bl	8003704 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	0800e0d0 	.word	0x0800e0d0
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b04      	cmp	r3, #4
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x30>
 8004766:	2b08      	cmp	r3, #8
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x36>
 800476a:	e027      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800476c:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800476e:	613b      	str	r3, [r7, #16]
      break;
 8004770:	e027      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0c9b      	lsrs	r3, r3, #18
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
 800477e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800478a:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	0c5b      	lsrs	r3, r3, #17
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	fb03 f202 	mul.w	r2, r3, r2
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e004      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80047be:	613b      	str	r3, [r7, #16]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	693b      	ldr	r3, [r7, #16]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	007a1200 	.word	0x007a1200
 80047d8:	0800e0e8 	.word	0x0800e0e8
 80047dc:	0800e0f8 	.word	0x0800e0f8
 80047e0:	003d0900 	.word	0x003d0900

080047e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e8:	4b02      	ldr	r3, [pc, #8]	@ (80047f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000000 	.word	0x20000000

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff2 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	@ (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	0800e0e0 	.word	0x0800e0e0

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffde 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	0adb      	lsrs	r3, r3, #11
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	0800e0e0 	.word	0x0800e0e0

08004848 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	220f      	movs	r2, #15
 8004856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004858:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <HAL_RCC_GetClockConfig+0x58>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0203 	and.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004864:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <HAL_RCC_GetClockConfig+0x58>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_RCC_GetClockConfig+0x58>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800487c:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <HAL_RCC_GetClockConfig+0x58>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800488a:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <HAL_RCC_GetClockConfig+0x5c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0207 	and.w	r2, r3, #7
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40022000 	.word	0x40022000

080048a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <RCC_Delay+0x34>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	@ (80048e0 <RCC_Delay+0x38>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	0a5b      	lsrs	r3, r3, #9
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048c4:	bf00      	nop
  }
  while (Delay --);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	60fa      	str	r2, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f9      	bne.n	80048c4 <RCC_Delay+0x1c>
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	20000000 	.word	0x20000000
 80048e0:	10624dd3 	.word	0x10624dd3

080048e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e041      	b.n	800497a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f839 	bl	8004982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 f9b4 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e03a      	b.n	8004a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <HAL_TIM_Base_Start_IT+0x98>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x58>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a13      	ldr	r2, [pc, #76]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0202 	mvn.w	r2, #2
 8004a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8ed 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8e0 	bl	8004c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8ef 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0204 	mvn.w	r2, #4
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8c3 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8b6 	bl	8004c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8c5 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f899 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f88c 	bl	8004c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f89b 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0210 	mvn.w	r2, #16
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f86f 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f862 	bl	8004c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f871 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fe fb1c 	bl	80031f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd4:	2b80      	cmp	r3, #128	@ 0x80
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8bf 	bl	8004d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f835 	bl	8004c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0220 	mvn.w	r2, #32
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f88a 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a29      	ldr	r2, [pc, #164]	@ (8004d48 <TIM_Base_SetConfig+0xb8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <TIM_Base_SetConfig+0x30>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d007      	beq.n	8004cc0 <TIM_Base_SetConfig+0x30>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a26      	ldr	r2, [pc, #152]	@ (8004d4c <TIM_Base_SetConfig+0xbc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0x30>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a25      	ldr	r2, [pc, #148]	@ (8004d50 <TIM_Base_SetConfig+0xc0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d108      	bne.n	8004cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <TIM_Base_SetConfig+0xb8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	@ (8004d4c <TIM_Base_SetConfig+0xbc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a18      	ldr	r2, [pc, #96]	@ (8004d50 <TIM_Base_SetConfig+0xc0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a07      	ldr	r2, [pc, #28]	@ (8004d48 <TIM_Base_SetConfig+0xb8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e042      	b.n	8004e10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fe fc64 	bl	800366c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	@ 0x24
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f82b 	bl	8004e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e52:	f023 030c 	bic.w	r3, r3, #12
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <UART_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7ff fcce 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	e002      	b.n	8004e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7ff fcb6 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009a      	lsls	r2, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	4a22      	ldr	r2, [pc, #136]	@ (8004f30 <UART_SetConfig+0x118>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	0119      	lsls	r1, r3, #4
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f30 <UART_SetConfig+0x118>)
 8004ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2064      	movs	r0, #100	@ 0x64
 8004ece:	fb00 f303 	mul.w	r3, r0, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	3332      	adds	r3, #50	@ 0x32
 8004ed8:	4a15      	ldr	r2, [pc, #84]	@ (8004f30 <UART_SetConfig+0x118>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee4:	4419      	add	r1, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004efc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <UART_SetConfig+0x118>)
 8004efe:	fba3 0302 	umull	r0, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2064      	movs	r0, #100	@ 0x64
 8004f06:	fb00 f303 	mul.w	r3, r0, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	@ 0x32
 8004f10:	4a07      	ldr	r2, [pc, #28]	@ (8004f30 <UART_SetConfig+0x118>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	440a      	add	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f46:	2b84      	cmp	r3, #132	@ 0x84
 8004f48:	d005      	beq.n	8004f56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	3303      	adds	r3, #3
 8004f54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f68:	f3ef 8305 	mrs	r3, IPSR
 8004f6c:	607b      	str	r3, [r7, #4]
  return(result);
 8004f6e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f88:	f001 fbd4 	bl	8006734 <vTaskStartScheduler>
  
  return osOK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004f96:	f7ff ffe4 	bl	8004f62 <inHandlerMode>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004fa0:	f001 fcec 	bl	800697c <xTaskGetTickCountFromISR>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	e002      	b.n	8004fae <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004fa8:	f001 fcda 	bl	8006960 <xTaskGetTickCount>
 8004fac:	4603      	mov	r3, r0
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb4:	b089      	sub	sp, #36	@ 0x24
 8004fb6:	af04      	add	r7, sp, #16
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <osThreadCreate+0x54>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01c      	beq.n	8005006 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685c      	ldr	r4, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691e      	ldr	r6, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ffa8 	bl	8004f34 <makeFreeRtosPriority>
 8004fe4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fee:	9202      	str	r2, [sp, #8]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	9100      	str	r1, [sp, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f001 f9bd 	bl	800637a <xTaskCreateStatic>
 8005000:	4603      	mov	r3, r0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e01c      	b.n	8005040 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685c      	ldr	r4, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005012:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ff8a 	bl	8004f34 <makeFreeRtosPriority>
 8005020:	4602      	mov	r2, r0
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	9200      	str	r2, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	4632      	mov	r2, r6
 800502e:	4629      	mov	r1, r5
 8005030:	4620      	mov	r0, r4
 8005032:	f001 fa01 	bl	8006438 <xTaskCreate>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d001      	beq.n	8005040 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800504a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <osDelay+0x16>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	e000      	b.n	8005062 <osDelay+0x18>
 8005060:	2301      	movs	r3, #1
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fb30 	bl	80066c8 <vTaskDelay>
  
  return osOK;
 8005068:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4619      	mov	r1, r3
 8005088:	2001      	movs	r0, #1
 800508a:	f000 fb91 	bl	80057b0 <xQueueCreateMutexStatic>
 800508e:	4603      	mov	r3, r0
 8005090:	e003      	b.n	800509a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005092:	2001      	movs	r0, #1
 8005094:	f000 fb74 	bl	8005780 <xQueueCreateMutex>
 8005098:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <osMutexWait+0x18>
    return osErrorParameter;
 80050b8:	2380      	movs	r3, #128	@ 0x80
 80050ba:	e03a      	b.n	8005132 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050c6:	d103      	bne.n	80050d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e009      	b.n	80050e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <osMutexWait+0x40>
      ticks = 1;
 80050e0:	2301      	movs	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050e4:	f7ff ff3d 	bl	8004f62 <inHandlerMode>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050ee:	f107 0308 	add.w	r3, r7, #8
 80050f2:	461a      	mov	r2, r3
 80050f4:	2100      	movs	r1, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 ff96 	bl	8006028 <xQueueReceiveFromISR>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <osMutexWait+0x62>
      return osErrorOS;
 8005102:	23ff      	movs	r3, #255	@ 0xff
 8005104:	e015      	b.n	8005132 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d011      	beq.n	8005130 <osMutexWait+0x8c>
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <osMutexWait+0x98>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	e008      	b.n	8005130 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fe71 	bl	8005e08 <xQueueSemaphoreTake>
 8005126:	4603      	mov	r3, r0
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <osMutexWait+0x8c>
    return osErrorOS;
 800512c:	23ff      	movs	r3, #255	@ 0xff
 800512e:	e000      	b.n	8005132 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005150:	f7ff ff07 	bl	8004f62 <inHandlerMode>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fcde 	bl	8005b22 <xQueueGiveFromISR>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <osMutexRelease+0x30>
      return osErrorOS;
 800516c:	23ff      	movs	r3, #255	@ 0xff
 800516e:	e017      	b.n	80051a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d013      	beq.n	800519e <osMutexRelease+0x5e>
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <osMutexRelease+0x68>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	e00a      	b.n	800519e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005188:	2300      	movs	r3, #0
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fb2a 	bl	80057e8 <xQueueGenericSend>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d001      	beq.n	800519e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800519a:	23ff      	movs	r3, #255	@ 0xff
 800519c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <osMessageCreate+0x36>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2400      	movs	r4, #0
 80051d8:	9400      	str	r4, [sp, #0]
 80051da:	f000 f9dd 	bl	8005598 <xQueueGenericCreateStatic>
 80051de:	4603      	mov	r3, r0
 80051e0:	e008      	b.n	80051f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	4619      	mov	r1, r3
 80051ee:	f000 fa4f 	bl	8005690 <xQueueGenericCreate>
 80051f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd90      	pop	{r4, r7, pc}

080051fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <osMessagePut+0x1e>
    ticks = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800521a:	f7ff fea2 	bl	8004f62 <inHandlerMode>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d018      	beq.n	8005256 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005224:	f107 0210 	add.w	r2, r7, #16
 8005228:	f107 0108 	add.w	r1, r7, #8
 800522c:	2300      	movs	r3, #0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fbdc 	bl	80059ec <xQueueGenericSendFromISR>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d001      	beq.n	800523e <osMessagePut+0x42>
      return osErrorOS;
 800523a:	23ff      	movs	r3, #255	@ 0xff
 800523c:	e018      	b.n	8005270 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d014      	beq.n	800526e <osMessagePut+0x72>
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <osMessagePut+0x7c>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	e00b      	b.n	800526e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005256:	f107 0108 	add.w	r1, r7, #8
 800525a:	2300      	movs	r3, #0
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fac2 	bl	80057e8 <xQueueGenericSend>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <osMessagePut+0x72>
      return osErrorOS;
 800526a:	23ff      	movs	r3, #255	@ 0xff
 800526c:	e000      	b.n	8005270 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b08b      	sub	sp, #44	@ 0x2c
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	617b      	str	r3, [r7, #20]
    return event;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	461c      	mov	r4, r3
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052aa:	e054      	b.n	8005356 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ba:	d103      	bne.n	80052c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c2:	e009      	b.n	80052d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <osMessageGet+0x5c>
      ticks = 1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80052d8:	f7ff fe43 	bl	8004f62 <inHandlerMode>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01c      	beq.n	800531c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80052e2:	f107 0220 	add.w	r2, r7, #32
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	68b8      	ldr	r0, [r7, #8]
 80052f0:	f000 fe9a 	bl	8006028 <xQueueReceiveFromISR>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d102      	bne.n	8005300 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80052fa:	2310      	movs	r3, #16
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e001      	b.n	8005304 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01d      	beq.n	8005346 <osMessageGet+0xca>
 800530a:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <osMessageGet+0xe4>)
 800530c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	e014      	b.n	8005346 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	3304      	adds	r3, #4
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	4619      	mov	r1, r3
 8005326:	68b8      	ldr	r0, [r7, #8]
 8005328:	f000 fc8c 	bl	8005c44 <xQueueReceive>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d102      	bne.n	8005338 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005332:	2310      	movs	r3, #16
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e006      	b.n	8005346 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <osMessageGet+0xc6>
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <osMessageGet+0xc8>
 8005342:	2340      	movs	r3, #64	@ 0x40
 8005344:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	461c      	mov	r4, r3
 800534a:	f107 0314 	add.w	r3, r7, #20
 800534e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	372c      	adds	r7, #44	@ 0x2c
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f103 0208 	add.w	r2, r3, #8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800537c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f103 0208 	add.w	r2, r3, #8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f103 0208 	add.w	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005416:	d103      	bne.n	8005420 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e00c      	b.n	800543a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3308      	adds	r3, #8
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e002      	b.n	800542e <vListInsert+0x2e>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d2f6      	bcs.n	8005428 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6852      	ldr	r2, [r2, #4]
 8005490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d103      	bne.n	80054a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	1e5a      	subs	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
	...

080054c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054f0:	f002 f89c 	bl	800762c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	3b01      	subs	r3, #1
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	441a      	add	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	@ 0xff
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d114      	bne.n	8005570 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01a      	beq.n	8005584 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3310      	adds	r3, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fb6a 	bl	8006c2c <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <xQueueGenericReset+0xd0>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	e009      	b.n	8005584 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3310      	adds	r3, #16
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fef5 	bl	8005364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3324      	adds	r3, #36	@ 0x24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fef0 	bl	8005364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005584:	f002 f882 	bl	800768c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005588:	2301      	movs	r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	@ 0x38
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <xQueueGenericCreateStatic+0x56>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <xQueueGenericCreateStatic+0x5a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericCreateStatic+0x5c>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	623b      	str	r3, [r7, #32]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <xQueueGenericCreateStatic+0x84>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xQueueGenericCreateStatic+0x88>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xQueueGenericCreateStatic+0x8a>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	61fb      	str	r3, [r7, #28]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800563e:	2348      	movs	r3, #72	@ 0x48
 8005640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b48      	cmp	r3, #72	@ 0x48
 8005646:	d00b      	beq.n	8005660 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005672:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f844 	bl	800570e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005688:	4618      	mov	r0, r3
 800568a:	3730      	adds	r7, #48	@ 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	@ 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <xQueueGenericCreate+0x2c>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	613b      	str	r3, [r7, #16]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e004      	b.n	80056d2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3348      	adds	r3, #72	@ 0x48
 80056d6:	4618      	mov	r0, r3
 80056d8:	f002 f8aa 	bl	8007830 <pvPortMalloc>
 80056dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00f      	beq.n	8005704 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	3348      	adds	r3, #72	@ 0x48
 80056e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056f2:	79fa      	ldrb	r2, [r7, #7]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f805 	bl	800570e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005704:	69bb      	ldr	r3, [r7, #24]
	}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e002      	b.n	8005730 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800573c:	2101      	movs	r1, #1
 800573e:	69b8      	ldr	r0, [r7, #24]
 8005740:	f7ff fec0 	bl	80054c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800576c:	2300      	movs	r3, #0
 800576e:	2200      	movs	r2, #0
 8005770:	2100      	movs	r1, #0
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f838 	bl	80057e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	461a      	mov	r2, r3
 8005796:	6939      	ldr	r1, [r7, #16]
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f7ff ff79 	bl	8005690 <xQueueGenericCreate>
 800579e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ffd3 	bl	800574c <prvInitialiseMutex>

		return pxNewQueue;
 80057a6:	68fb      	ldr	r3, [r7, #12]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	6939      	ldr	r1, [r7, #16]
 80057ce:	6978      	ldr	r0, [r7, #20]
 80057d0:	f7ff fee2 	bl	8005598 <xQueueGenericCreateStatic>
 80057d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff ffb8 	bl	800574c <prvInitialiseMutex>

		return pxNewQueue;
 80057dc:	68fb      	ldr	r3, [r7, #12]
	}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08e      	sub	sp, #56	@ 0x38
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10b      	bne.n	800581c <xQueueGenericSend+0x34>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <xQueueGenericSend+0x42>
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xQueueGenericSend+0x46>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericSend+0x48>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSend+0x64>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d103      	bne.n	800585a <xQueueGenericSend+0x72>
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <xQueueGenericSend+0x76>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericSend+0x78>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSend+0x94>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800587c:	f001 fba0 	bl	8006fc0 <xTaskGetSchedulerState>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <xQueueGenericSend+0xa4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xQueueGenericSend+0xa8>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xQueueGenericSend+0xaa>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xQueueGenericSend+0xc6>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	61fb      	str	r3, [r7, #28]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058ae:	f001 febd 	bl	800762c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <xQueueGenericSend+0xdc>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d129      	bne.n	8005918 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ca:	f000 fc46 	bl	800615a <prvCopyDataToQueue>
 80058ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	3324      	adds	r3, #36	@ 0x24
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f9a5 	bl	8006c2c <xTaskRemoveFromEventList>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058e8:	4b3f      	ldr	r3, [pc, #252]	@ (80059e8 <xQueueGenericSend+0x200>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	e00a      	b.n	8005910 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005900:	4b39      	ldr	r3, [pc, #228]	@ (80059e8 <xQueueGenericSend+0x200>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005910:	f001 febc 	bl	800768c <vPortExitCritical>
				return pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	e063      	b.n	80059e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800591e:	f001 feb5 	bl	800768c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005922:	2300      	movs	r3, #0
 8005924:	e05c      	b.n	80059e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	4618      	mov	r0, r3
 8005932:	f001 f9df 	bl	8006cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800593a:	f001 fea7 	bl	800768c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800593e:	f000 ff63 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005942:	f001 fe73 	bl	800762c <vPortEnterCritical>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800594c:	b25b      	sxtb	r3, r3
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005952:	d103      	bne.n	800595c <xQueueGenericSend+0x174>
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005962:	b25b      	sxtb	r3, r3
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005968:	d103      	bne.n	8005972 <xQueueGenericSend+0x18a>
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005972:	f001 fe8b 	bl	800768c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005976:	1d3a      	adds	r2, r7, #4
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f001 f9ce 	bl	8006d20 <xTaskCheckForTimeOut>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d124      	bne.n	80059d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800598a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800598c:	f000 fcdd 	bl	800634a <prvIsQueueFull>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	3310      	adds	r3, #16
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f91e 	bl	8006be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a6:	f000 fc68 	bl	800627a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059aa:	f000 ff3b 	bl	8006824 <xTaskResumeAll>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f47f af7c 	bne.w	80058ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80059b6:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <xQueueGenericSend+0x200>)
 80059b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	e772      	b.n	80058ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ca:	f000 fc56 	bl	800627a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ce:	f000 ff29 	bl	8006824 <xTaskResumeAll>
 80059d2:	e76c      	b.n	80058ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d6:	f000 fc50 	bl	800627a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059da:	f000 ff23 	bl	8006824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059de:	2300      	movs	r3, #0
		}
	}
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3738      	adds	r7, #56	@ 0x38
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	@ 0x38
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <xQueueGenericSendFromISR+0x3e>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <xQueueGenericSendFromISR+0x42>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xQueueGenericSendFromISR+0x44>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	623b      	str	r3, [r7, #32]
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	e7fd      	b.n	8005a48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d103      	bne.n	8005a5a <xQueueGenericSendFromISR+0x6e>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <xQueueGenericSendFromISR+0x72>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueGenericSendFromISR+0x74>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61fb      	str	r3, [r7, #28]
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a7c:	f001 fe98 	bl	80077b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a80:	f3ef 8211 	mrs	r2, BASEPRI
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61ba      	str	r2, [r7, #24]
 8005a96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <xQueueGenericSendFromISR+0xc2>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d12c      	bne.n	8005b08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005abe:	f000 fb4c 	bl	800615a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ac2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aca:	d112      	bne.n	8005af2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d016      	beq.n	8005b02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	3324      	adds	r3, #36	@ 0x24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f8a7 	bl	8006c2c <xTaskRemoveFromEventList>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00e      	beq.n	8005b02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e007      	b.n	8005b02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005af2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005af6:	3301      	adds	r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	b25a      	sxtb	r2, r3
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b02:	2301      	movs	r3, #1
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005b06:	e001      	b.n	8005b0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3738      	adds	r7, #56	@ 0x38
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08e      	sub	sp, #56	@ 0x38
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	623b      	str	r3, [r7, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	e7fd      	b.n	8005b4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61fb      	str	r3, [r7, #28]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <xQueueGiveFromISR+0x5c>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <xQueueGiveFromISR+0x60>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <xQueueGiveFromISR+0x62>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	61bb      	str	r3, [r7, #24]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ba0:	f001 fe06 	bl	80077b0 <vPortValidateInterruptPriority>
	__asm volatile
 8005ba4:	f3ef 8211 	mrs	r2, BASEPRI
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	617a      	str	r2, [r7, #20]
 8005bba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005bbc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d22b      	bcs.n	8005c28 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005be2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bea:	d112      	bne.n	8005c12 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	3324      	adds	r3, #36	@ 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f817 	bl	8006c2c <xTaskRemoveFromEventList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e007      	b.n	8005c22 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c16:	3301      	adds	r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	b25a      	sxtb	r2, r3
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c22:	2301      	movs	r3, #1
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c26:	e001      	b.n	8005c2c <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f383 8811 	msr	BASEPRI, r3
}
 8005c36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3738      	adds	r7, #56	@ 0x38
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	@ 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xQueueReceive+0x32>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	623b      	str	r3, [r7, #32]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <xQueueReceive+0x40>
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <xQueueReceive+0x44>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <xQueueReceive+0x46>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <xQueueReceive+0x62>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61fb      	str	r3, [r7, #28]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca6:	f001 f98b 	bl	8006fc0 <xTaskGetSchedulerState>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <xQueueReceive+0x72>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <xQueueReceive+0x76>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <xQueueReceive+0x78>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <xQueueReceive+0x94>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	61bb      	str	r3, [r7, #24]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd8:	f001 fca8 	bl	800762c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cec:	f000 fa9f 	bl	800622e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	3310      	adds	r3, #16
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ff91 	bl	8006c2c <xTaskRemoveFromEventList>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b3c      	ldr	r3, [pc, #240]	@ (8005e04 <xQueueReceive+0x1c0>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d20:	f001 fcb4 	bl	800768c <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e069      	b.n	8005dfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f001 fcad 	bl	800768c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e062      	b.n	8005dfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 ffd7 	bl	8006cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f001 fc9f 	bl	800768c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 fd5b 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f001 fc6b 	bl	800762c <vPortEnterCritical>
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0x128>
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0x13e>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d82:	f001 fc83 	bl	800768c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ffc6 	bl	8006d20 <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d9c:	f000 fabf 	bl	800631e <prvIsQueueEmpty>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	3324      	adds	r3, #36	@ 0x24
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ff16 	bl	8006be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db6:	f000 fa60 	bl	800627a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 fd33 	bl	8006824 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d189      	bne.n	8005cd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <xQueueReceive+0x1c0>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	e780      	b.n	8005cd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd8:	f000 fa4f 	bl	800627a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ddc:	f000 fd22 	bl	8006824 <xTaskResumeAll>
 8005de0:	e77a      	b.n	8005cd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de4:	f000 fa49 	bl	800627a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de8:	f000 fd1c 	bl	8006824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dee:	f000 fa96 	bl	800631e <prvIsQueueEmpty>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f af6f 	beq.w	8005cd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	@ 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	@ 0x38
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61fb      	str	r3, [r7, #28]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5c:	f001 f8b0 	bl	8006fc0 <xTaskGetSchedulerState>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <xQueueSemaphoreTake+0x64>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueSemaphoreTake+0x68>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueSemaphoreTake+0x6a>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61bb      	str	r3, [r7, #24]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e8e:	f001 fbcd 	bl	800762c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d024      	beq.n	8005ee8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005eae:	f001 fa55 	bl	800735c <pvTaskIncrementMutexHeldCount>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec2:	3310      	adds	r3, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 feb1 	bl	8006c2c <xTaskRemoveFromEventList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ed0:	4b54      	ldr	r3, [pc, #336]	@ (8006024 <xQueueSemaphoreTake+0x21c>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee0:	f001 fbd4 	bl	800768c <vPortExitCritical>
				return pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e098      	b.n	800601a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d112      	bne.n	8005f14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	617b      	str	r3, [r7, #20]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f0c:	f001 fbbe 	bl	800768c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e082      	b.n	800601a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fee8 	bl	8006cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f28:	f001 fbb0 	bl	800768c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f2c:	f000 fc6c 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f30:	f001 fb7c 	bl	800762c <vPortEnterCritical>
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f40:	d103      	bne.n	8005f4a <xQueueSemaphoreTake+0x142>
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f56:	d103      	bne.n	8005f60 <xQueueSemaphoreTake+0x158>
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f60:	f001 fb94 	bl	800768c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f64:	463a      	mov	r2, r7
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fed7 	bl	8006d20 <xTaskCheckForTimeOut>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d132      	bne.n	8005fde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f7a:	f000 f9d0 	bl	800631e <prvIsQueueEmpty>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d026      	beq.n	8005fd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005f8c:	f001 fb4e 	bl	800762c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f831 	bl	8006ffc <xTaskPriorityInherit>
 8005f9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f9c:	f001 fb76 	bl	800768c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	3324      	adds	r3, #36	@ 0x24
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fe19 	bl	8006be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb0:	f000 f963 	bl	800627a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fb4:	f000 fc36 	bl	8006824 <xTaskResumeAll>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f af67 	bne.w	8005e8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005fc0:	4b18      	ldr	r3, [pc, #96]	@ (8006024 <xQueueSemaphoreTake+0x21c>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e75d      	b.n	8005e8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fd4:	f000 f951 	bl	800627a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fd8:	f000 fc24 	bl	8006824 <xTaskResumeAll>
 8005fdc:	e757      	b.n	8005e8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fe0:	f000 f94b 	bl	800627a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe4:	f000 fc1e 	bl	8006824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fea:	f000 f998 	bl	800631e <prvIsQueueEmpty>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f43f af4c 	beq.w	8005e8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ffc:	f001 fb16 	bl	800762c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006002:	f000 f893 	bl	800612c <prvGetDisinheritPriorityAfterTimeout>
 8006006:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f902 	bl	8007218 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006014:	f001 fb3a 	bl	800768c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800601a:	4618      	mov	r0, r3
 800601c:	3738      	adds	r7, #56	@ 0x38
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	@ 0x38
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	623b      	str	r3, [r7, #32]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <xQueueReceiveFromISR+0x3c>
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <xQueueReceiveFromISR+0x40>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <xQueueReceiveFromISR+0x42>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	61fb      	str	r3, [r7, #28]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006086:	f001 fb93 	bl	80077b0 <vPortValidateInterruptPriority>
	__asm volatile
 800608a:	f3ef 8211 	mrs	r2, BASEPRI
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61ba      	str	r2, [r7, #24]
 80060a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02f      	beq.n	8006112 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060c0:	f000 f8b5 	bl	800622e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	1e5a      	subs	r2, r3, #1
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060d4:	d112      	bne.n	80060fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	3310      	adds	r3, #16
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fda2 	bl	8006c2c <xTaskRemoveFromEventList>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e007      	b.n	800610c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006100:	3301      	adds	r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	b25a      	sxtb	r2, r3
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800610c:	2301      	movs	r3, #1
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	e001      	b.n	8006116 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	613b      	str	r3, [r7, #16]
	__asm volatile
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f383 8811 	msr	BASEPRI, r3
}
 8006120:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006124:	4618      	mov	r0, r3
 8006126:	3738      	adds	r7, #56	@ 0x38
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d006      	beq.n	800614a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1c3 0307 	rsb	r3, r3, #7
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e001      	b.n	800614e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800614e:	68fb      	ldr	r3, [r7, #12]
	}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b086      	sub	sp, #24
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10d      	bne.n	8006194 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d14d      	bne.n	800621c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 ffbf 	bl	8007108 <xTaskPriorityDisinherit>
 800618a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e043      	b.n	800621c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d119      	bne.n	80061ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6898      	ldr	r0, [r3, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	461a      	mov	r2, r3
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	f003 fd42 	bl	8009c2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d32b      	bcc.n	800621c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	e026      	b.n	800621c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68d8      	ldr	r0, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	461a      	mov	r2, r3
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	f003 fd28 	bl	8009c2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	425b      	negs	r3, r3
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d207      	bcs.n	800620a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	425b      	negs	r3, r3
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d105      	bne.n	800621c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3b01      	subs	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d018      	beq.n	8006272 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d303      	bcc.n	8006262 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68d9      	ldr	r1, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	461a      	mov	r2, r3
 800626c:	6838      	ldr	r0, [r7, #0]
 800626e:	f003 fcde 	bl	8009c2e <memcpy>
	}
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006282:	f001 f9d3 	bl	800762c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800628c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628e:	e011      	b.n	80062b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d012      	beq.n	80062be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3324      	adds	r3, #36	@ 0x24
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fcc5 	bl	8006c2c <xTaskRemoveFromEventList>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062a8:	f000 fd9e 	bl	8006de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dce9      	bgt.n	8006290 <prvUnlockQueue+0x16>
 80062bc:	e000      	b.n	80062c0 <prvUnlockQueue+0x46>
					break;
 80062be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	22ff      	movs	r2, #255	@ 0xff
 80062c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062c8:	f001 f9e0 	bl	800768c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062cc:	f001 f9ae 	bl	800762c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d8:	e011      	b.n	80062fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d012      	beq.n	8006308 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3310      	adds	r3, #16
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fca0 	bl	8006c2c <xTaskRemoveFromEventList>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062f2:	f000 fd79 	bl	8006de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dce9      	bgt.n	80062da <prvUnlockQueue+0x60>
 8006306:	e000      	b.n	800630a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006308:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	22ff      	movs	r2, #255	@ 0xff
 800630e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006312:	f001 f9bb 	bl	800768c <vPortExitCritical>
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006326:	f001 f981 	bl	800762c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006332:	2301      	movs	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e001      	b.n	800633c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800633c:	f001 f9a6 	bl	800768c <vPortExitCritical>

	return xReturn;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006352:	f001 f96b 	bl	800762c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635e:	429a      	cmp	r2, r3
 8006360:	d102      	bne.n	8006368 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e001      	b.n	800636c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800636c:	f001 f98e 	bl	800768c <vPortExitCritical>

	return xReturn;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800637a:	b580      	push	{r7, lr}
 800637c:	b08e      	sub	sp, #56	@ 0x38
 800637e:	af04      	add	r7, sp, #16
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	623b      	str	r3, [r7, #32]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	61fb      	str	r3, [r7, #28]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063c4:	23a0      	movs	r3, #160	@ 0xa0
 80063c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80063cc:	d00b      	beq.n	80063e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61bb      	str	r3, [r7, #24]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01e      	beq.n	800642a <xTaskCreateStatic+0xb0>
 80063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01b      	beq.n	800642a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006404:	2300      	movs	r3, #0
 8006406:	9303      	str	r3, [sp, #12]
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	9302      	str	r3, [sp, #8]
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f851 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006424:	f000 f8e6 	bl	80065f4 <prvAddNewTaskToReadyList>
 8006428:	e001      	b.n	800642e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800642e:	697b      	ldr	r3, [r7, #20]
	}
 8006430:	4618      	mov	r0, r3
 8006432:	3728      	adds	r7, #40	@ 0x28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08c      	sub	sp, #48	@ 0x30
 800643c:	af04      	add	r7, sp, #16
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f9ef 	bl	8007830 <pvPortMalloc>
 8006452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800645a:	20a0      	movs	r0, #160	@ 0xa0
 800645c:	f001 f9e8 	bl	8007830 <pvPortMalloc>
 8006460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
 800646e:	e005      	b.n	800647c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006470:	6978      	ldr	r0, [r7, #20]
 8006472:	f001 faa5 	bl	80079c0 <vPortFree>
 8006476:	e001      	b.n	800647c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f80f 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a6:	69f8      	ldr	r0, [r7, #28]
 80064a8:	f000 f8a4 	bl	80065f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064ac:	2301      	movs	r3, #1
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e002      	b.n	80064b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064b8:	69bb      	ldr	r3, [r7, #24]
	}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064dc:	3b01      	subs	r3, #1
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f023 0307 	bic.w	r3, r3, #7
 80064ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	617b      	str	r3, [r7, #20]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e012      	b.n	800653a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	7819      	ldrb	r1, [r3, #0]
 800651c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	3334      	adds	r3, #52	@ 0x34
 8006524:	460a      	mov	r2, r1
 8006526:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	3301      	adds	r3, #1
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d9e9      	bls.n	8006514 <prvInitialiseNewTask+0x50>
 8006540:	e000      	b.n	8006544 <prvInitialiseNewTask+0x80>
		{
			break;
 8006542:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	2b06      	cmp	r3, #6
 8006550:	d901      	bls.n	8006556 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006552:	2306      	movs	r3, #6
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006560:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2200      	movs	r2, #0
 8006566:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	3304      	adds	r3, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe ff18 	bl	80053a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	3318      	adds	r3, #24
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe ff13 	bl	80053a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006580:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006584:	f1c3 0207 	rsb	r2, r3, #7
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	2200      	movs	r2, #0
 8006596:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	2200      	movs	r2, #0
 800659e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	334c      	adds	r3, #76	@ 0x4c
 80065a6:	224c      	movs	r2, #76	@ 0x4c
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 fa80 	bl	8009ab0 <memset>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	4a0d      	ldr	r2, [pc, #52]	@ (80065e8 <prvInitialiseNewTask+0x124>)
 80065b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	4a0c      	ldr	r2, [pc, #48]	@ (80065ec <prvInitialiseNewTask+0x128>)
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	4a0c      	ldr	r2, [pc, #48]	@ (80065f0 <prvInitialiseNewTask+0x12c>)
 80065c0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	68f9      	ldr	r1, [r7, #12]
 80065c6:	69b8      	ldr	r0, [r7, #24]
 80065c8:	f000 ff42 	bl	8007450 <pxPortInitialiseStack>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065de:	bf00      	nop
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20002b58 	.word	0x20002b58
 80065ec:	20002bc0 	.word	0x20002bc0
 80065f0:	20002c28 	.word	0x20002c28

080065f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065fc:	f001 f816 	bl	800762c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006600:	4b2a      	ldr	r3, [pc, #168]	@ (80066ac <prvAddNewTaskToReadyList+0xb8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a29      	ldr	r2, [pc, #164]	@ (80066ac <prvAddNewTaskToReadyList+0xb8>)
 8006608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800660a:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <prvAddNewTaskToReadyList+0xbc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006612:	4a27      	ldr	r2, [pc, #156]	@ (80066b0 <prvAddNewTaskToReadyList+0xbc>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006618:	4b24      	ldr	r3, [pc, #144]	@ (80066ac <prvAddNewTaskToReadyList+0xb8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d110      	bne.n	8006642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006620:	f000 fc06 	bl	8006e30 <prvInitialiseTaskLists>
 8006624:	e00d      	b.n	8006642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006626:	4b23      	ldr	r3, [pc, #140]	@ (80066b4 <prvAddNewTaskToReadyList+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800662e:	4b20      	ldr	r3, [pc, #128]	@ (80066b0 <prvAddNewTaskToReadyList+0xbc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	d802      	bhi.n	8006642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800663c:	4a1c      	ldr	r2, [pc, #112]	@ (80066b0 <prvAddNewTaskToReadyList+0xbc>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006642:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <prvAddNewTaskToReadyList+0xc4>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <prvAddNewTaskToReadyList+0xc4>)
 800664a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	2201      	movs	r2, #1
 8006652:	409a      	lsls	r2, r3
 8006654:	4b19      	ldr	r3, [pc, #100]	@ (80066bc <prvAddNewTaskToReadyList+0xc8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4313      	orrs	r3, r2
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <prvAddNewTaskToReadyList+0xc8>)
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <prvAddNewTaskToReadyList+0xcc>)
 800666c:	441a      	add	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe fea0 	bl	80053ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800667a:	f001 f807 	bl	800768c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <prvAddNewTaskToReadyList+0xc0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006686:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <prvAddNewTaskToReadyList+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006690:	429a      	cmp	r2, r3
 8006692:	d207      	bcs.n	80066a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006694:	4b0b      	ldr	r3, [pc, #44]	@ (80066c4 <prvAddNewTaskToReadyList+0xd0>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	2000070c 	.word	0x2000070c
 80066b0:	2000060c 	.word	0x2000060c
 80066b4:	20000718 	.word	0x20000718
 80066b8:	20000728 	.word	0x20000728
 80066bc:	20000714 	.word	0x20000714
 80066c0:	20000610 	.word	0x20000610
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d018      	beq.n	800670c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066da:	4b14      	ldr	r3, [pc, #80]	@ (800672c <vTaskDelay+0x64>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <vTaskDelay+0x32>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066fa:	f000 f885 	bl	8006808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066fe:	2100      	movs	r1, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fe3f 	bl	8007384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006706:	f000 f88d 	bl	8006824 <xTaskResumeAll>
 800670a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d107      	bne.n	8006722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <vTaskDelay+0x68>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000734 	.word	0x20000734
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	@ 0x28
 8006738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006742:	463a      	mov	r2, r7
 8006744:	1d39      	adds	r1, r7, #4
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f7fb fcae 	bl	80020ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	9202      	str	r2, [sp, #8]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	2300      	movs	r3, #0
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	2300      	movs	r3, #0
 8006760:	460a      	mov	r2, r1
 8006762:	4921      	ldr	r1, [pc, #132]	@ (80067e8 <vTaskStartScheduler+0xb4>)
 8006764:	4821      	ldr	r0, [pc, #132]	@ (80067ec <vTaskStartScheduler+0xb8>)
 8006766:	f7ff fe08 	bl	800637a <xTaskCreateStatic>
 800676a:	4603      	mov	r3, r0
 800676c:	4a20      	ldr	r2, [pc, #128]	@ (80067f0 <vTaskStartScheduler+0xbc>)
 800676e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006770:	4b1f      	ldr	r3, [pc, #124]	@ (80067f0 <vTaskStartScheduler+0xbc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006778:	2301      	movs	r3, #1
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e001      	b.n	8006782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d11b      	bne.n	80067c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	613b      	str	r3, [r7, #16]
}
 800679a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800679c:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <vTaskStartScheduler+0xc0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	334c      	adds	r3, #76	@ 0x4c
 80067a2:	4a15      	ldr	r2, [pc, #84]	@ (80067f8 <vTaskStartScheduler+0xc4>)
 80067a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <vTaskStartScheduler+0xc8>)
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <vTaskStartScheduler+0xcc>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067b4:	4b13      	ldr	r3, [pc, #76]	@ (8006804 <vTaskStartScheduler+0xd0>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ba:	f000 fec5 	bl	8007548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067be:	e00f      	b.n	80067e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c6:	d10b      	bne.n	80067e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60fb      	str	r3, [r7, #12]
}
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	e7fd      	b.n	80067dc <vTaskStartScheduler+0xa8>
}
 80067e0:	bf00      	nop
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	0800d844 	.word	0x0800d844
 80067ec:	08006e01 	.word	0x08006e01
 80067f0:	20000730 	.word	0x20000730
 80067f4:	2000060c 	.word	0x2000060c
 80067f8:	20000188 	.word	0x20000188
 80067fc:	2000072c 	.word	0x2000072c
 8006800:	20000718 	.word	0x20000718
 8006804:	20000710 	.word	0x20000710

08006808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800680c:	4b04      	ldr	r3, [pc, #16]	@ (8006820 <vTaskSuspendAll+0x18>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a03      	ldr	r2, [pc, #12]	@ (8006820 <vTaskSuspendAll+0x18>)
 8006814:	6013      	str	r3, [r2, #0]
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000734 	.word	0x20000734

08006824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006832:	4b42      	ldr	r3, [pc, #264]	@ (800693c <xTaskResumeAll+0x118>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <xTaskResumeAll+0x2e>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	603b      	str	r3, [r7, #0]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006852:	f000 feeb 	bl	800762c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006856:	4b39      	ldr	r3, [pc, #228]	@ (800693c <xTaskResumeAll+0x118>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	4a37      	ldr	r2, [pc, #220]	@ (800693c <xTaskResumeAll+0x118>)
 800685e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006860:	4b36      	ldr	r3, [pc, #216]	@ (800693c <xTaskResumeAll+0x118>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d161      	bne.n	800692c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006868:	4b35      	ldr	r3, [pc, #212]	@ (8006940 <xTaskResumeAll+0x11c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05d      	beq.n	800692c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006870:	e02e      	b.n	80068d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006872:	4b34      	ldr	r3, [pc, #208]	@ (8006944 <xTaskResumeAll+0x120>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3318      	adds	r3, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fdf6 	bl	8005470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fdf1 	bl	8005470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	2201      	movs	r2, #1
 8006894:	409a      	lsls	r2, r3
 8006896:	4b2c      	ldr	r3, [pc, #176]	@ (8006948 <xTaskResumeAll+0x124>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4313      	orrs	r3, r2
 800689c:	4a2a      	ldr	r2, [pc, #168]	@ (8006948 <xTaskResumeAll+0x124>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a27      	ldr	r2, [pc, #156]	@ (800694c <xTaskResumeAll+0x128>)
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe fd7f 	bl	80053ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <xTaskResumeAll+0x12c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ca:	4b22      	ldr	r3, [pc, #136]	@ (8006954 <xTaskResumeAll+0x130>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006944 <xTaskResumeAll+0x120>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1cc      	bne.n	8006872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068de:	f000 fb4b 	bl	8006f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <xTaskResumeAll+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ee:	f000 f857 	bl	80069a0 <xTaskIncrementTick>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068f8:	4b16      	ldr	r3, [pc, #88]	@ (8006954 <xTaskResumeAll+0x130>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3b01      	subs	r3, #1
 8006902:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f1      	bne.n	80068ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800690a:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <xTaskResumeAll+0x134>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <xTaskResumeAll+0x130>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800691c:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <xTaskResumeAll+0x138>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800692c:	f000 feae 	bl	800768c <vPortExitCritical>

	return xAlreadyYielded;
 8006930:	68bb      	ldr	r3, [r7, #8]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000734 	.word	0x20000734
 8006940:	2000070c 	.word	0x2000070c
 8006944:	200006cc 	.word	0x200006cc
 8006948:	20000714 	.word	0x20000714
 800694c:	20000610 	.word	0x20000610
 8006950:	2000060c 	.word	0x2000060c
 8006954:	20000720 	.word	0x20000720
 8006958:	2000071c 	.word	0x2000071c
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006966:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <xTaskGetTickCount+0x18>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800696c:	687b      	ldr	r3, [r7, #4]
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr
 8006978:	20000710 	.word	0x20000710

0800697c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006982:	f000 ff15 	bl	80077b0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800698a:	4b04      	ldr	r3, [pc, #16]	@ (800699c <xTaskGetTickCountFromISR+0x20>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006990:	683b      	ldr	r3, [r7, #0]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000710 	.word	0x20000710

080069a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069aa:	4b51      	ldr	r3, [pc, #324]	@ (8006af0 <xTaskIncrementTick+0x150>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 808e 	bne.w	8006ad0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069b4:	4b4f      	ldr	r3, [pc, #316]	@ (8006af4 <xTaskIncrementTick+0x154>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069bc:	4a4d      	ldr	r2, [pc, #308]	@ (8006af4 <xTaskIncrementTick+0x154>)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d121      	bne.n	8006a0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80069c8:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <xTaskIncrementTick+0x158>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xTaskIncrementTick+0x46>
 80069ea:	4b43      	ldr	r3, [pc, #268]	@ (8006af8 <xTaskIncrementTick+0x158>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	4b42      	ldr	r3, [pc, #264]	@ (8006afc <xTaskIncrementTick+0x15c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a40      	ldr	r2, [pc, #256]	@ (8006af8 <xTaskIncrementTick+0x158>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	4a40      	ldr	r2, [pc, #256]	@ (8006afc <xTaskIncrementTick+0x15c>)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	4b40      	ldr	r3, [pc, #256]	@ (8006b00 <xTaskIncrementTick+0x160>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a3e      	ldr	r2, [pc, #248]	@ (8006b00 <xTaskIncrementTick+0x160>)
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	f000 fab6 	bl	8006f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b04 <xTaskIncrementTick+0x164>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d34d      	bcc.n	8006ab2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	4b38      	ldr	r3, [pc, #224]	@ (8006af8 <xTaskIncrementTick+0x158>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <xTaskIncrementTick+0x84>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <xTaskIncrementTick+0x86>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2a:	4b36      	ldr	r3, [pc, #216]	@ (8006b04 <xTaskIncrementTick+0x164>)
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a30:	601a      	str	r2, [r3, #0]
					break;
 8006a32:	e03e      	b.n	8006ab2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a34:	4b30      	ldr	r3, [pc, #192]	@ (8006af8 <xTaskIncrementTick+0x158>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d203      	bcs.n	8006a54 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b04 <xTaskIncrementTick+0x164>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
						break;
 8006a52:	e02e      	b.n	8006ab2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe fd09 	bl	8005470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fd00 	bl	8005470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	2201      	movs	r2, #1
 8006a76:	409a      	lsls	r2, r3
 8006a78:	4b23      	ldr	r3, [pc, #140]	@ (8006b08 <xTaskIncrementTick+0x168>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	4a22      	ldr	r2, [pc, #136]	@ (8006b08 <xTaskIncrementTick+0x168>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006b0c <xTaskIncrementTick+0x16c>)
 8006a90:	441a      	add	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f7fe fc8e 	bl	80053ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <xTaskIncrementTick+0x170>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d3b4      	bcc.n	8006a16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab0:	e7b1      	b.n	8006a16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ab2:	4b17      	ldr	r3, [pc, #92]	@ (8006b10 <xTaskIncrementTick+0x170>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4914      	ldr	r1, [pc, #80]	@ (8006b0c <xTaskIncrementTick+0x16c>)
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d907      	bls.n	8006ada <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006aca:	2301      	movs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e004      	b.n	8006ada <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ad0:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <xTaskIncrementTick+0x174>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b14 <xTaskIncrementTick+0x174>)
 8006ad8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ada:	4b0f      	ldr	r3, [pc, #60]	@ (8006b18 <xTaskIncrementTick+0x178>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ae6:	697b      	ldr	r3, [r7, #20]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000734 	.word	0x20000734
 8006af4:	20000710 	.word	0x20000710
 8006af8:	200006c4 	.word	0x200006c4
 8006afc:	200006c8 	.word	0x200006c8
 8006b00:	20000724 	.word	0x20000724
 8006b04:	2000072c 	.word	0x2000072c
 8006b08:	20000714 	.word	0x20000714
 8006b0c:	20000610 	.word	0x20000610
 8006b10:	2000060c 	.word	0x2000060c
 8006b14:	2000071c 	.word	0x2000071c
 8006b18:	20000720 	.word	0x20000720

08006b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b22:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <vTaskSwitchContext+0xac>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b2a:	4b28      	ldr	r3, [pc, #160]	@ (8006bcc <vTaskSwitchContext+0xb0>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b30:	e045      	b.n	8006bbe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006b32:	4b26      	ldr	r3, [pc, #152]	@ (8006bcc <vTaskSwitchContext+0xb0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b38:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <vTaskSwitchContext+0xb4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	fab3 f383 	clz	r3, r3
 8006b44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	f1c3 031f 	rsb	r3, r3, #31
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	4921      	ldr	r1, [pc, #132]	@ (8006bd4 <vTaskSwitchContext+0xb8>)
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	607b      	str	r3, [r7, #4]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <vTaskSwitchContext+0x5a>
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4a13      	ldr	r2, [pc, #76]	@ (8006bd4 <vTaskSwitchContext+0xb8>)
 8006b86:	4413      	add	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d104      	bne.n	8006baa <vTaskSwitchContext+0x8e>
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4a09      	ldr	r2, [pc, #36]	@ (8006bd8 <vTaskSwitchContext+0xbc>)
 8006bb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bb4:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <vTaskSwitchContext+0xbc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	334c      	adds	r3, #76	@ 0x4c
 8006bba:	4a08      	ldr	r2, [pc, #32]	@ (8006bdc <vTaskSwitchContext+0xc0>)
 8006bbc:	6013      	str	r3, [r2, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr
 8006bc8:	20000734 	.word	0x20000734
 8006bcc:	20000720 	.word	0x20000720
 8006bd0:	20000714 	.word	0x20000714
 8006bd4:	20000610 	.word	0x20000610
 8006bd8:	2000060c 	.word	0x2000060c
 8006bdc:	20000188 	.word	0x20000188

08006be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	60fb      	str	r3, [r7, #12]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c08:	4b07      	ldr	r3, [pc, #28]	@ (8006c28 <vTaskPlaceOnEventList+0x48>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3318      	adds	r3, #24
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7fe fbf5 	bl	8005400 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c16:	2101      	movs	r1, #1
 8006c18:	6838      	ldr	r0, [r7, #0]
 8006c1a:	f000 fbb3 	bl	8007384 <prvAddCurrentTaskToDelayedList>
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	2000060c 	.word	0x2000060c

08006c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	60fb      	str	r3, [r7, #12]
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	3318      	adds	r3, #24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fc06 	bl	8005470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c64:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <xTaskRemoveFromEventList+0xb0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11c      	bne.n	8006ca6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fbfd 	bl	8005470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	409a      	lsls	r2, r3
 8006c7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ce0 <xTaskRemoveFromEventList+0xb4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	4a16      	ldr	r2, [pc, #88]	@ (8006ce0 <xTaskRemoveFromEventList+0xb4>)
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4a13      	ldr	r2, [pc, #76]	@ (8006ce4 <xTaskRemoveFromEventList+0xb8>)
 8006c96:	441a      	add	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f7fe fb8b 	bl	80053ba <vListInsertEnd>
 8006ca4:	e005      	b.n	8006cb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	3318      	adds	r3, #24
 8006caa:	4619      	mov	r1, r3
 8006cac:	480e      	ldr	r0, [pc, #56]	@ (8006ce8 <xTaskRemoveFromEventList+0xbc>)
 8006cae:	f7fe fb84 	bl	80053ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <xTaskRemoveFromEventList+0xc0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d905      	bls.n	8006ccc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <xTaskRemoveFromEventList+0xc4>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e001      	b.n	8006cd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006cd0:	697b      	ldr	r3, [r7, #20]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000734 	.word	0x20000734
 8006ce0:	20000714 	.word	0x20000714
 8006ce4:	20000610 	.word	0x20000610
 8006ce8:	200006cc 	.word	0x200006cc
 8006cec:	2000060c 	.word	0x2000060c
 8006cf0:	20000720 	.word	0x20000720

08006cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <vTaskInternalSetTimeOutState+0x24>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <vTaskInternalSetTimeOutState+0x28>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	605a      	str	r2, [r3, #4]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000724 	.word	0x20000724
 8006d1c:	20000710 	.word	0x20000710

08006d20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	e7fd      	b.n	8006d44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60fb      	str	r3, [r7, #12]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d66:	f000 fc61 	bl	800762c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006de0 <xTaskCheckForTimeOut+0xc0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d82:	d102      	bne.n	8006d8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	e023      	b.n	8006dd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b15      	ldr	r3, [pc, #84]	@ (8006de4 <xTaskCheckForTimeOut+0xc4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d007      	beq.n	8006da6 <xTaskCheckForTimeOut+0x86>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e015      	b.n	8006dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d20b      	bcs.n	8006dc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff99 	bl	8006cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	e004      	b.n	8006dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dd2:	f000 fc5b 	bl	800768c <vPortExitCritical>

	return xReturn;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3720      	adds	r7, #32
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000710 	.word	0x20000710
 8006de4:	20000724 	.word	0x20000724

08006de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dec:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <vTaskMissedYield+0x14>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	bf00      	nop
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000720 	.word	0x20000720

08006e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e08:	f000 f852 	bl	8006eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <prvIdleTask+0x28>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d9f9      	bls.n	8006e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e14:	4b05      	ldr	r3, [pc, #20]	@ (8006e2c <prvIdleTask+0x2c>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e24:	e7f0      	b.n	8006e08 <prvIdleTask+0x8>
 8006e26:	bf00      	nop
 8006e28:	20000610 	.word	0x20000610
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	e00c      	b.n	8006e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4a12      	ldr	r2, [pc, #72]	@ (8006e90 <prvInitialiseTaskLists+0x60>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fa8a 	bl	8005364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3301      	adds	r3, #1
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d9ef      	bls.n	8006e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e5c:	480d      	ldr	r0, [pc, #52]	@ (8006e94 <prvInitialiseTaskLists+0x64>)
 8006e5e:	f7fe fa81 	bl	8005364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e62:	480d      	ldr	r0, [pc, #52]	@ (8006e98 <prvInitialiseTaskLists+0x68>)
 8006e64:	f7fe fa7e 	bl	8005364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e68:	480c      	ldr	r0, [pc, #48]	@ (8006e9c <prvInitialiseTaskLists+0x6c>)
 8006e6a:	f7fe fa7b 	bl	8005364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e6e:	480c      	ldr	r0, [pc, #48]	@ (8006ea0 <prvInitialiseTaskLists+0x70>)
 8006e70:	f7fe fa78 	bl	8005364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e74:	480b      	ldr	r0, [pc, #44]	@ (8006ea4 <prvInitialiseTaskLists+0x74>)
 8006e76:	f7fe fa75 	bl	8005364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <prvInitialiseTaskLists+0x78>)
 8006e7c:	4a05      	ldr	r2, [pc, #20]	@ (8006e94 <prvInitialiseTaskLists+0x64>)
 8006e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e80:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <prvInitialiseTaskLists+0x7c>)
 8006e82:	4a05      	ldr	r2, [pc, #20]	@ (8006e98 <prvInitialiseTaskLists+0x68>)
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000610 	.word	0x20000610
 8006e94:	2000069c 	.word	0x2000069c
 8006e98:	200006b0 	.word	0x200006b0
 8006e9c:	200006cc 	.word	0x200006cc
 8006ea0:	200006e0 	.word	0x200006e0
 8006ea4:	200006f8 	.word	0x200006f8
 8006ea8:	200006c4 	.word	0x200006c4
 8006eac:	200006c8 	.word	0x200006c8

08006eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb6:	e019      	b.n	8006eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb8:	f000 fbb8 	bl	800762c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ebc:	4b10      	ldr	r3, [pc, #64]	@ (8006f00 <prvCheckTasksWaitingTermination+0x50>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe fad1 	bl	8005470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ece:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <prvCheckTasksWaitingTermination+0x54>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8006f04 <prvCheckTasksWaitingTermination+0x54>)
 8006ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4a0a      	ldr	r2, [pc, #40]	@ (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ee2:	f000 fbd3 	bl	800768c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f810 	bl	8006f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eec:	4b06      	ldr	r3, [pc, #24]	@ (8006f08 <prvCheckTasksWaitingTermination+0x58>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e1      	bne.n	8006eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	200006e0 	.word	0x200006e0
 8006f04:	2000070c 	.word	0x2000070c
 8006f08:	200006f4 	.word	0x200006f4

08006f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	334c      	adds	r3, #76	@ 0x4c
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fdd5 	bl	8009ac8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d108      	bne.n	8006f3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fd47 	bl	80079c0 <vPortFree>
				vPortFree( pxTCB );
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fd44 	bl	80079c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f38:	e019      	b.n	8006f6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d103      	bne.n	8006f4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fd3b 	bl	80079c0 <vPortFree>
	}
 8006f4a:	e010      	b.n	8006f6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d00b      	beq.n	8006f6e <prvDeleteTCB+0x62>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <prvDeleteTCB+0x5e>
	}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <prvResetNextTaskUnblockTime+0x40>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <prvResetNextTaskUnblockTime+0x14>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <prvResetNextTaskUnblockTime+0x16>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvResetNextTaskUnblockTime+0x44>)
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f9a:	e008      	b.n	8006fae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f9c:	4b06      	ldr	r3, [pc, #24]	@ (8006fb8 <prvResetNextTaskUnblockTime+0x40>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4a04      	ldr	r2, [pc, #16]	@ (8006fbc <prvResetNextTaskUnblockTime+0x44>)
 8006fac:	6013      	str	r3, [r2, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr
 8006fb8:	200006c4 	.word	0x200006c4
 8006fbc:	2000072c 	.word	0x2000072c

08006fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <xTaskGetSchedulerState+0x34>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	e008      	b.n	8006fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd4:	4b08      	ldr	r3, [pc, #32]	@ (8006ff8 <xTaskGetSchedulerState+0x38>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	607b      	str	r3, [r7, #4]
 8006fe0:	e001      	b.n	8006fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fe6:	687b      	ldr	r3, [r7, #4]
	}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000718 	.word	0x20000718
 8006ff8:	20000734 	.word	0x20000734

08006ffc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d06e      	beq.n	80070f0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007016:	4b39      	ldr	r3, [pc, #228]	@ (80070fc <xTaskPriorityInherit+0x100>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	429a      	cmp	r2, r3
 800701e:	d25e      	bcs.n	80070de <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	db06      	blt.n	8007036 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007028:	4b34      	ldr	r3, [pc, #208]	@ (80070fc <xTaskPriorityInherit+0x100>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	f1c3 0207 	rsb	r2, r3, #7
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6959      	ldr	r1, [r3, #20]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4a2e      	ldr	r2, [pc, #184]	@ (8007100 <xTaskPriorityInherit+0x104>)
 8007048:	4413      	add	r3, r2
 800704a:	4299      	cmp	r1, r3
 800704c:	d101      	bne.n	8007052 <xTaskPriorityInherit+0x56>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xTaskPriorityInherit+0x58>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d03a      	beq.n	80070ce <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fa07 	bl	8005470 <uxListRemove>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d115      	bne.n	8007094 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706c:	4924      	ldr	r1, [pc, #144]	@ (8007100 <xTaskPriorityInherit+0x104>)
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <xTaskPriorityInherit+0x98>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43da      	mvns	r2, r3
 800708a:	4b1e      	ldr	r3, [pc, #120]	@ (8007104 <xTaskPriorityInherit+0x108>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	4a1c      	ldr	r2, [pc, #112]	@ (8007104 <xTaskPriorityInherit+0x108>)
 8007092:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <xTaskPriorityInherit+0x100>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	2201      	movs	r2, #1
 80070a4:	409a      	lsls	r2, r3
 80070a6:	4b17      	ldr	r3, [pc, #92]	@ (8007104 <xTaskPriorityInherit+0x108>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <xTaskPriorityInherit+0x108>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a10      	ldr	r2, [pc, #64]	@ (8007100 <xTaskPriorityInherit+0x104>)
 80070be:	441a      	add	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe f977 	bl	80053ba <vListInsertEnd>
 80070cc:	e004      	b.n	80070d8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <xTaskPriorityInherit+0x100>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e008      	b.n	80070f0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070e2:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <xTaskPriorityInherit+0x100>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d201      	bcs.n	80070f0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f0:	68fb      	ldr	r3, [r7, #12]
	}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2000060c 	.word	0x2000060c
 8007100:	20000610 	.word	0x20000610
 8007104:	20000714 	.word	0x20000714

08007108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d070      	beq.n	8007200 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800711e:	4b3b      	ldr	r3, [pc, #236]	@ (800720c <xTaskPriorityDisinherit+0x104>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d00b      	beq.n	8007140 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	60bb      	str	r3, [r7, #8]
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	429a      	cmp	r2, r3
 8007174:	d044      	beq.n	8007200 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717a:	2b00      	cmp	r3, #0
 800717c:	d140      	bne.n	8007200 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3304      	adds	r3, #4
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe f974 	bl	8005470 <uxListRemove>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d115      	bne.n	80071ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007192:	491f      	ldr	r1, [pc, #124]	@ (8007210 <xTaskPriorityDisinherit+0x108>)
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xTaskPriorityDisinherit+0xb2>
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	2201      	movs	r2, #1
 80071aa:	fa02 f303 	lsl.w	r3, r2, r3
 80071ae:	43da      	mvns	r2, r3
 80071b0:	4b18      	ldr	r3, [pc, #96]	@ (8007214 <xTaskPriorityDisinherit+0x10c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4013      	ands	r3, r2
 80071b6:	4a17      	ldr	r2, [pc, #92]	@ (8007214 <xTaskPriorityDisinherit+0x10c>)
 80071b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	f1c3 0207 	rsb	r2, r3, #7
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	2201      	movs	r2, #1
 80071d4:	409a      	lsls	r2, r3
 80071d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <xTaskPriorityDisinherit+0x10c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4313      	orrs	r3, r2
 80071dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007214 <xTaskPriorityDisinherit+0x10c>)
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4a08      	ldr	r2, [pc, #32]	@ (8007210 <xTaskPriorityDisinherit+0x108>)
 80071ee:	441a      	add	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7fe f8df 	bl	80053ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007200:	697b      	ldr	r3, [r7, #20]
	}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	2000060c 	.word	0x2000060c
 8007210:	20000610 	.word	0x20000610
 8007214:	20000714 	.word	0x20000714

08007218 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 808a 	beq.w	8007346 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60fb      	str	r3, [r7, #12]
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	e7fd      	b.n	800724e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d902      	bls.n	8007262 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	e002      	b.n	8007268 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007266:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	429a      	cmp	r2, r3
 8007270:	d069      	beq.n	8007346 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	429a      	cmp	r2, r3
 800727a:	d164      	bne.n	8007346 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800727c:	4b34      	ldr	r3, [pc, #208]	@ (8007350 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	d10b      	bne.n	800729e <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60bb      	str	r3, [r7, #8]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	db04      	blt.n	80072bc <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f1c3 0207 	rsb	r2, r3, #7
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	6959      	ldr	r1, [r3, #20]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a22      	ldr	r2, [pc, #136]	@ (8007354 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80072cc:	4413      	add	r3, r2
 80072ce:	4299      	cmp	r1, r3
 80072d0:	d101      	bne.n	80072d6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d034      	beq.n	8007346 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3304      	adds	r3, #4
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe f8c5 	bl	8005470 <uxListRemove>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d115      	bne.n	8007318 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f0:	4918      	ldr	r1, [pc, #96]	@ (8007354 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43da      	mvns	r2, r3
 800730e:	4b12      	ldr	r3, [pc, #72]	@ (8007358 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4013      	ands	r3, r2
 8007314:	4a10      	ldr	r2, [pc, #64]	@ (8007358 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007316:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	2201      	movs	r2, #1
 800731e:	409a      	lsls	r2, r3
 8007320:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4313      	orrs	r3, r2
 8007326:	4a0c      	ldr	r2, [pc, #48]	@ (8007358 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a07      	ldr	r2, [pc, #28]	@ (8007354 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007338:	441a      	add	r2, r3
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7fe f83a 	bl	80053ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007346:	bf00      	nop
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	2000060c 	.word	0x2000060c
 8007354:	20000610 	.word	0x20000610
 8007358:	20000714 	.word	0x20000714

0800735c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <pvTaskIncrementMutexHeldCount+0x24>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007368:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <pvTaskIncrementMutexHeldCount+0x24>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800736e:	3201      	adds	r2, #1
 8007370:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007372:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <pvTaskIncrementMutexHeldCount+0x24>)
 8007374:	681b      	ldr	r3, [r3, #0]
	}
 8007376:	4618      	mov	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	2000060c 	.word	0x2000060c

08007384 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800738e:	4b29      	ldr	r3, [pc, #164]	@ (8007434 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007394:	4b28      	ldr	r3, [pc, #160]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe f868 	bl	8005470 <uxListRemove>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80073a6:	4b24      	ldr	r3, [pc, #144]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	2201      	movs	r2, #1
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43da      	mvns	r2, r3
 80073b4:	4b21      	ldr	r3, [pc, #132]	@ (800743c <prvAddCurrentTaskToDelayedList+0xb8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4013      	ands	r3, r2
 80073ba:	4a20      	ldr	r2, [pc, #128]	@ (800743c <prvAddCurrentTaskToDelayedList+0xb8>)
 80073bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073c4:	d10a      	bne.n	80073dc <prvAddCurrentTaskToDelayedList+0x58>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d007      	beq.n	80073dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	481a      	ldr	r0, [pc, #104]	@ (8007440 <prvAddCurrentTaskToDelayedList+0xbc>)
 80073d6:	f7fd fff0 	bl	80053ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073da:	e026      	b.n	800742a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073e4:	4b14      	ldr	r3, [pc, #80]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d209      	bcs.n	8007408 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f4:	4b13      	ldr	r3, [pc, #76]	@ (8007444 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7fd fffd 	bl	8005400 <vListInsert>
}
 8007406:	e010      	b.n	800742a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007408:	4b0f      	ldr	r3, [pc, #60]	@ (8007448 <prvAddCurrentTaskToDelayedList+0xc4>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xb4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7fd fff3 	bl	8005400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800741a:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <prvAddCurrentTaskToDelayedList+0xc8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	d202      	bcs.n	800742a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007424:	4a09      	ldr	r2, [pc, #36]	@ (800744c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6013      	str	r3, [r2, #0]
}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000710 	.word	0x20000710
 8007438:	2000060c 	.word	0x2000060c
 800743c:	20000714 	.word	0x20000714
 8007440:	200006f8 	.word	0x200006f8
 8007444:	200006c8 	.word	0x200006c8
 8007448:	200006c4 	.word	0x200006c4
 800744c:	2000072c 	.word	0x2000072c

08007450 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3b04      	subs	r3, #4
 8007460:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3b04      	subs	r3, #4
 800746e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f023 0201 	bic.w	r2, r3, #1
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3b04      	subs	r3, #4
 800747e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007480:	4a08      	ldr	r2, [pc, #32]	@ (80074a4 <pxPortInitialiseStack+0x54>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3b14      	subs	r3, #20
 800748a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3b20      	subs	r3, #32
 8007496:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	080074a9 	.word	0x080074a9

080074a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <prvTaskExitError+0x54>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ba:	d00b      	beq.n	80074d4 <prvTaskExitError+0x2c>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60fb      	str	r3, [r7, #12]
}
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	e7fd      	b.n	80074d0 <prvTaskExitError+0x28>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60bb      	str	r3, [r7, #8]
}
 80074e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074e8:	bf00      	nop
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0fc      	beq.n	80074ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	2000000c 	.word	0x2000000c

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	f04e 0e0d 	orr.w	lr, lr, #13
 800751e:	4770      	bx	lr

08007520 <pxCurrentTCBConst2>:
 8007520:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007528:	4806      	ldr	r0, [pc, #24]	@ (8007544 <prvPortStartFirstTask+0x1c>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	b662      	cpsie	i
 8007534:	b661      	cpsie	f
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	df00      	svc	0
 8007540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007542:	bf00      	nop
 8007544:	e000ed08 	.word	0xe000ed08

08007548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800754e:	4b32      	ldr	r3, [pc, #200]	@ (8007618 <xPortStartScheduler+0xd0>)
 8007550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	22ff      	movs	r2, #255	@ 0xff
 800755e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007570:	b2da      	uxtb	r2, r3
 8007572:	4b2a      	ldr	r3, [pc, #168]	@ (800761c <xPortStartScheduler+0xd4>)
 8007574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007576:	4b2a      	ldr	r3, [pc, #168]	@ (8007620 <xPortStartScheduler+0xd8>)
 8007578:	2207      	movs	r2, #7
 800757a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800757c:	e009      	b.n	8007592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800757e:	4b28      	ldr	r3, [pc, #160]	@ (8007620 <xPortStartScheduler+0xd8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3b01      	subs	r3, #1
 8007584:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <xPortStartScheduler+0xd8>)
 8007586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759a:	2b80      	cmp	r3, #128	@ 0x80
 800759c:	d0ef      	beq.n	800757e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800759e:	4b20      	ldr	r3, [pc, #128]	@ (8007620 <xPortStartScheduler+0xd8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1c3 0307 	rsb	r3, r3, #7
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d00b      	beq.n	80075c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	60bb      	str	r3, [r7, #8]
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	e7fd      	b.n	80075be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075c2:	4b17      	ldr	r3, [pc, #92]	@ (8007620 <xPortStartScheduler+0xd8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	4a15      	ldr	r2, [pc, #84]	@ (8007620 <xPortStartScheduler+0xd8>)
 80075ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075cc:	4b14      	ldr	r3, [pc, #80]	@ (8007620 <xPortStartScheduler+0xd8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d4:	4a12      	ldr	r2, [pc, #72]	@ (8007620 <xPortStartScheduler+0xd8>)
 80075d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075e0:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <xPortStartScheduler+0xdc>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007624 <xPortStartScheduler+0xdc>)
 80075e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <xPortStartScheduler+0xdc>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007624 <xPortStartScheduler+0xdc>)
 80075f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f8:	f000 f8b8 	bl	800776c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <xPortStartScheduler+0xe0>)
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007602:	f7ff ff91 	bl	8007528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007606:	f7ff fa89 	bl	8006b1c <vTaskSwitchContext>
	prvTaskExitError();
 800760a:	f7ff ff4d 	bl	80074a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	e000e400 	.word	0xe000e400
 800761c:	20000738 	.word	0x20000738
 8007620:	2000073c 	.word	0x2000073c
 8007624:	e000ed20 	.word	0xe000ed20
 8007628:	2000000c 	.word	0x2000000c

0800762c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	607b      	str	r3, [r7, #4]
}
 8007644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007646:	4b0f      	ldr	r3, [pc, #60]	@ (8007684 <vPortEnterCritical+0x58>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a0d      	ldr	r2, [pc, #52]	@ (8007684 <vPortEnterCritical+0x58>)
 800764e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007650:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <vPortEnterCritical+0x58>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d110      	bne.n	800767a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007658:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <vPortEnterCritical+0x5c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <vPortEnterCritical+0x4e>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	603b      	str	r3, [r7, #0]
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	e7fd      	b.n	8007676 <vPortEnterCritical+0x4a>
	}
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr
 8007684:	2000000c 	.word	0x2000000c
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007692:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <vPortExitCritical+0x50>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <vPortExitCritical+0x26>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	607b      	str	r3, [r7, #4]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4a08      	ldr	r2, [pc, #32]	@ (80076dc <vPortExitCritical+0x50>)
 80076ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076bc:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <vPortExitCritical+0x50>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <vPortExitCritical+0x44>
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f383 8811 	msr	BASEPRI, r3
}
 80076ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	2000000c 	.word	0x2000000c

080076e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076e0:	f3ef 8009 	mrs	r0, PSP
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <pxCurrentTCBConst>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076f0:	6010      	str	r0, [r2, #0]
 80076f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80076f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076fa:	f380 8811 	msr	BASEPRI, r0
 80076fe:	f7ff fa0d 	bl	8006b1c <vTaskSwitchContext>
 8007702:	f04f 0000 	mov.w	r0, #0
 8007706:	f380 8811 	msr	BASEPRI, r0
 800770a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007716:	f380 8809 	msr	PSP, r0
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	4770      	bx	lr

08007720 <pxCurrentTCBConst>:
 8007720:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007742:	f7ff f92d 	bl	80069a0 <xTaskIncrementTick>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800774c:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <SysTick_Handler+0x40>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f383 8811 	msr	BASEPRI, r3
}
 800775e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <vPortSetupTimerInterrupt+0x30>)
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007776:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800777c:	4b09      	ldr	r3, [pc, #36]	@ (80077a4 <vPortSetupTimerInterrupt+0x38>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a09      	ldr	r2, [pc, #36]	@ (80077a8 <vPortSetupTimerInterrupt+0x3c>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	4a08      	ldr	r2, [pc, #32]	@ (80077ac <vPortSetupTimerInterrupt+0x40>)
 800778a:	3b01      	subs	r3, #1
 800778c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800778e:	4b03      	ldr	r3, [pc, #12]	@ (800779c <vPortSetupTimerInterrupt+0x30>)
 8007790:	2207      	movs	r2, #7
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	e000e010 	.word	0xe000e010
 80077a0:	e000e018 	.word	0xe000e018
 80077a4:	20000000 	.word	0x20000000
 80077a8:	10624dd3 	.word	0x10624dd3
 80077ac:	e000e014 	.word	0xe000e014

080077b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077b6:	f3ef 8305 	mrs	r3, IPSR
 80077ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b0f      	cmp	r3, #15
 80077c0:	d915      	bls.n	80077ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077c2:	4a17      	ldr	r2, [pc, #92]	@ (8007820 <vPortValidateInterruptPriority+0x70>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <vPortValidateInterruptPriority+0x74>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	7afa      	ldrb	r2, [r7, #11]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d20b      	bcs.n	80077ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	607b      	str	r3, [r7, #4]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <vPortValidateInterruptPriority+0x78>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <vPortValidateInterruptPriority+0x7c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d90b      	bls.n	8007816 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	603b      	str	r3, [r7, #0]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vPortValidateInterruptPriority+0x62>
	}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	e000e3f0 	.word	0xe000e3f0
 8007824:	20000738 	.word	0x20000738
 8007828:	e000ed0c 	.word	0xe000ed0c
 800782c:	2000073c 	.word	0x2000073c

08007830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	@ 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800783c:	f7fe ffe4 	bl	8006808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007840:	4b5a      	ldr	r3, [pc, #360]	@ (80079ac <pvPortMalloc+0x17c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007848:	f000 f916 	bl	8007a78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800784c:	4b58      	ldr	r3, [pc, #352]	@ (80079b0 <pvPortMalloc+0x180>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	f040 8090 	bne.w	800797a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01e      	beq.n	800789e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007860:	2208      	movs	r2, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	2b00      	cmp	r3, #0
 8007870:	d015      	beq.n	800789e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	3308      	adds	r3, #8
 800787a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <pvPortMalloc+0x6e>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	617b      	str	r3, [r7, #20]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d06a      	beq.n	800797a <pvPortMalloc+0x14a>
 80078a4:	4b43      	ldr	r3, [pc, #268]	@ (80079b4 <pvPortMalloc+0x184>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d865      	bhi.n	800797a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078ae:	4b42      	ldr	r3, [pc, #264]	@ (80079b8 <pvPortMalloc+0x188>)
 80078b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078b2:	4b41      	ldr	r3, [pc, #260]	@ (80079b8 <pvPortMalloc+0x188>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b8:	e004      	b.n	80078c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <pvPortMalloc+0xa6>
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f1      	bne.n	80078ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078d6:	4b35      	ldr	r3, [pc, #212]	@ (80079ac <pvPortMalloc+0x17c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078dc:	429a      	cmp	r2, r3
 80078de:	d04c      	beq.n	800797a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	4413      	add	r3, r2
 80078e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	2308      	movs	r3, #8
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	429a      	cmp	r2, r3
 8007900:	d920      	bls.n	8007944 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <pvPortMalloc+0xfc>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	613b      	str	r3, [r7, #16]
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800793e:	69b8      	ldr	r0, [r7, #24]
 8007940:	f000 f8fc 	bl	8007b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007944:	4b1b      	ldr	r3, [pc, #108]	@ (80079b4 <pvPortMalloc+0x184>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	4a19      	ldr	r2, [pc, #100]	@ (80079b4 <pvPortMalloc+0x184>)
 8007950:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007952:	4b18      	ldr	r3, [pc, #96]	@ (80079b4 <pvPortMalloc+0x184>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b19      	ldr	r3, [pc, #100]	@ (80079bc <pvPortMalloc+0x18c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d203      	bcs.n	8007966 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800795e:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <pvPortMalloc+0x184>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a16      	ldr	r2, [pc, #88]	@ (80079bc <pvPortMalloc+0x18c>)
 8007964:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <pvPortMalloc+0x180>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	431a      	orrs	r2, r3
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800797a:	f7fe ff53 	bl	8006824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <pvPortMalloc+0x170>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <pvPortMalloc+0x16c>
	return pvReturn;
 80079a0:	69fb      	ldr	r3, [r7, #28]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3728      	adds	r7, #40	@ 0x28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20002b48 	.word	0x20002b48
 80079b0:	20002b54 	.word	0x20002b54
 80079b4:	20002b4c 	.word	0x20002b4c
 80079b8:	20002b40 	.word	0x20002b40
 80079bc:	20002b50 	.word	0x20002b50

080079c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d04a      	beq.n	8007a68 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079d2:	2308      	movs	r3, #8
 80079d4:	425b      	negs	r3, r3
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	4b22      	ldr	r3, [pc, #136]	@ (8007a70 <vPortFree+0xb0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <vPortFree+0x46>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60fb      	str	r3, [r7, #12]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <vPortFree+0x66>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60bb      	str	r3, [r7, #8]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <vPortFree+0xb0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d019      	beq.n	8007a68 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d115      	bne.n	8007a68 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <vPortFree+0xb0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a4c:	f7fe fedc 	bl	8006808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	4b07      	ldr	r3, [pc, #28]	@ (8007a74 <vPortFree+0xb4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4413      	add	r3, r2
 8007a5a:	4a06      	ldr	r2, [pc, #24]	@ (8007a74 <vPortFree+0xb4>)
 8007a5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a5e:	6938      	ldr	r0, [r7, #16]
 8007a60:	f000 f86c 	bl	8007b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a64:	f7fe fede 	bl	8006824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a68:	bf00      	nop
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20002b54 	.word	0x20002b54
 8007a74:	20002b4c 	.word	0x20002b4c

08007a78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a7e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007a82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a84:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <prvHeapInit+0xac>)
 8007a86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00c      	beq.n	8007aac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3307      	adds	r3, #7
 8007a96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b24 <prvHeapInit+0xac>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b28 <prvHeapInit+0xb0>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8007b28 <prvHeapInit+0xb0>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0307 	bic.w	r3, r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4a15      	ldr	r2, [pc, #84]	@ (8007b2c <prvHeapInit+0xb4>)
 8007ad8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ada:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <prvHeapInit+0xb4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	@ (8007b2c <prvHeapInit+0xb4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007af8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b2c <prvHeapInit+0xb4>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4a0a      	ldr	r2, [pc, #40]	@ (8007b30 <prvHeapInit+0xb8>)
 8007b06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <prvHeapInit+0xbc>)
 8007b0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b10:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <prvHeapInit+0xc0>)
 8007b12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b16:	601a      	str	r2, [r3, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000740 	.word	0x20000740
 8007b28:	20002b40 	.word	0x20002b40
 8007b2c:	20002b48 	.word	0x20002b48
 8007b30:	20002b50 	.word	0x20002b50
 8007b34:	20002b4c 	.word	0x20002b4c
 8007b38:	20002b54 	.word	0x20002b54

08007b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b44:	4b27      	ldr	r3, [pc, #156]	@ (8007be4 <prvInsertBlockIntoFreeList+0xa8>)
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	e002      	b.n	8007b50 <prvInsertBlockIntoFreeList+0x14>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d8f7      	bhi.n	8007b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d108      	bne.n	8007b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	441a      	add	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d118      	bne.n	8007bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b14      	ldr	r3, [pc, #80]	@ (8007be8 <prvInsertBlockIntoFreeList+0xac>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d00d      	beq.n	8007bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e008      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <prvInsertBlockIntoFreeList+0xac>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e003      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d002      	beq.n	8007bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr
 8007be4:	20002b40 	.word	0x20002b40
 8007be8:	20002b48 	.word	0x20002b48

08007bec <__cvt>:
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	bfbb      	ittet	lt
 8007bf6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007bfa:	461d      	movlt	r5, r3
 8007bfc:	2300      	movge	r3, #0
 8007bfe:	232d      	movlt	r3, #45	@ 0x2d
 8007c00:	b088      	sub	sp, #32
 8007c02:	4614      	mov	r4, r2
 8007c04:	bfb8      	it	lt
 8007c06:	4614      	movlt	r4, r2
 8007c08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c0a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007c0c:	7013      	strb	r3, [r2, #0]
 8007c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c10:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007c14:	f023 0820 	bic.w	r8, r3, #32
 8007c18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c1c:	d005      	beq.n	8007c2a <__cvt+0x3e>
 8007c1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c22:	d100      	bne.n	8007c26 <__cvt+0x3a>
 8007c24:	3601      	adds	r6, #1
 8007c26:	2302      	movs	r3, #2
 8007c28:	e000      	b.n	8007c2c <__cvt+0x40>
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	aa07      	add	r2, sp, #28
 8007c2e:	9204      	str	r2, [sp, #16]
 8007c30:	aa06      	add	r2, sp, #24
 8007c32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c36:	e9cd 3600 	strd	r3, r6, [sp]
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f002 f897 	bl	8009d70 <_dtoa_r>
 8007c42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c46:	4607      	mov	r7, r0
 8007c48:	d119      	bne.n	8007c7e <__cvt+0x92>
 8007c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c4c:	07db      	lsls	r3, r3, #31
 8007c4e:	d50e      	bpl.n	8007c6e <__cvt+0x82>
 8007c50:	eb00 0906 	add.w	r9, r0, r6
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8007c60:	b108      	cbz	r0, 8007c66 <__cvt+0x7a>
 8007c62:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c66:	2230      	movs	r2, #48	@ 0x30
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	454b      	cmp	r3, r9
 8007c6c:	d31e      	bcc.n	8007cac <__cvt+0xc0>
 8007c6e:	4638      	mov	r0, r7
 8007c70:	9b07      	ldr	r3, [sp, #28]
 8007c72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007c74:	1bdb      	subs	r3, r3, r7
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	b008      	add	sp, #32
 8007c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c82:	eb00 0906 	add.w	r9, r0, r6
 8007c86:	d1e5      	bne.n	8007c54 <__cvt+0x68>
 8007c88:	7803      	ldrb	r3, [r0, #0]
 8007c8a:	2b30      	cmp	r3, #48	@ 0x30
 8007c8c:	d10a      	bne.n	8007ca4 <__cvt+0xb8>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4620      	mov	r0, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7f8 fe87 	bl	80009a8 <__aeabi_dcmpeq>
 8007c9a:	b918      	cbnz	r0, 8007ca4 <__cvt+0xb8>
 8007c9c:	f1c6 0601 	rsb	r6, r6, #1
 8007ca0:	f8ca 6000 	str.w	r6, [sl]
 8007ca4:	f8da 3000 	ldr.w	r3, [sl]
 8007ca8:	4499      	add	r9, r3
 8007caa:	e7d3      	b.n	8007c54 <__cvt+0x68>
 8007cac:	1c59      	adds	r1, r3, #1
 8007cae:	9107      	str	r1, [sp, #28]
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e7d9      	b.n	8007c68 <__cvt+0x7c>

08007cb4 <__exponent>:
 8007cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	bfb6      	itet	lt
 8007cba:	232d      	movlt	r3, #45	@ 0x2d
 8007cbc:	232b      	movge	r3, #43	@ 0x2b
 8007cbe:	4249      	neglt	r1, r1
 8007cc0:	2909      	cmp	r1, #9
 8007cc2:	7002      	strb	r2, [r0, #0]
 8007cc4:	7043      	strb	r3, [r0, #1]
 8007cc6:	dd29      	ble.n	8007d1c <__exponent+0x68>
 8007cc8:	f10d 0307 	add.w	r3, sp, #7
 8007ccc:	461d      	mov	r5, r3
 8007cce:	270a      	movs	r7, #10
 8007cd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	fb07 1416 	mls	r4, r7, r6, r1
 8007cda:	3430      	adds	r4, #48	@ 0x30
 8007cdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	2c63      	cmp	r4, #99	@ 0x63
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007cea:	dcf1      	bgt.n	8007cd0 <__exponent+0x1c>
 8007cec:	3130      	adds	r1, #48	@ 0x30
 8007cee:	1e94      	subs	r4, r2, #2
 8007cf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	1c41      	adds	r1, r0, #1
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	d30a      	bcc.n	8007d12 <__exponent+0x5e>
 8007cfc:	f10d 0309 	add.w	r3, sp, #9
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	42ac      	cmp	r4, r5
 8007d04:	bf88      	it	hi
 8007d06:	2300      	movhi	r3, #0
 8007d08:	3302      	adds	r3, #2
 8007d0a:	4403      	add	r3, r0
 8007d0c:	1a18      	subs	r0, r3, r0
 8007d0e:	b003      	add	sp, #12
 8007d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d1a:	e7ed      	b.n	8007cf8 <__exponent+0x44>
 8007d1c:	2330      	movs	r3, #48	@ 0x30
 8007d1e:	3130      	adds	r1, #48	@ 0x30
 8007d20:	7083      	strb	r3, [r0, #2]
 8007d22:	70c1      	strb	r1, [r0, #3]
 8007d24:	1d03      	adds	r3, r0, #4
 8007d26:	e7f1      	b.n	8007d0c <__exponent+0x58>

08007d28 <_printf_float>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	b091      	sub	sp, #68	@ 0x44
 8007d2e:	460c      	mov	r4, r1
 8007d30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007d34:	4616      	mov	r6, r2
 8007d36:	461f      	mov	r7, r3
 8007d38:	4605      	mov	r5, r0
 8007d3a:	f001 fec1 	bl	8009ac0 <_localeconv_r>
 8007d3e:	6803      	ldr	r3, [r0, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	9308      	str	r3, [sp, #32]
 8007d44:	f7f8 fa04 	bl	8000150 <strlen>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d50:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d52:	3307      	adds	r3, #7
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	f103 0208 	add.w	r2, r3, #8
 8007d5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d60:	f8d4 b000 	ldr.w	fp, [r4]
 8007d64:	f8c8 2000 	str.w	r2, [r8]
 8007d68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d82:	4b9c      	ldr	r3, [pc, #624]	@ (8007ff4 <_printf_float+0x2cc>)
 8007d84:	f7f8 fe42 	bl	8000a0c <__aeabi_dcmpun>
 8007d88:	bb70      	cbnz	r0, 8007de8 <_printf_float+0xc0>
 8007d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d92:	4b98      	ldr	r3, [pc, #608]	@ (8007ff4 <_printf_float+0x2cc>)
 8007d94:	f7f8 fe1c 	bl	80009d0 <__aeabi_dcmple>
 8007d98:	bb30      	cbnz	r0, 8007de8 <_printf_float+0xc0>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fe0b 	bl	80009bc <__aeabi_dcmplt>
 8007da6:	b110      	cbz	r0, 8007dae <_printf_float+0x86>
 8007da8:	232d      	movs	r3, #45	@ 0x2d
 8007daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dae:	4a92      	ldr	r2, [pc, #584]	@ (8007ff8 <_printf_float+0x2d0>)
 8007db0:	4b92      	ldr	r3, [pc, #584]	@ (8007ffc <_printf_float+0x2d4>)
 8007db2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007db6:	bf94      	ite	ls
 8007db8:	4690      	movls	r8, r2
 8007dba:	4698      	movhi	r8, r3
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	f04f 0900 	mov.w	r9, #0
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	f02b 0304 	bic.w	r3, fp, #4
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	4633      	mov	r3, r6
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4628      	mov	r0, r5
 8007dd0:	9700      	str	r7, [sp, #0]
 8007dd2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007dd4:	f000 f9d4 	bl	8008180 <_printf_common>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	f040 8090 	bne.w	8007efe <_printf_float+0x1d6>
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007de2:	b011      	add	sp, #68	@ 0x44
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe0c 	bl	8000a0c <__aeabi_dcmpun>
 8007df4:	b148      	cbz	r0, 8007e0a <_printf_float+0xe2>
 8007df6:	464b      	mov	r3, r9
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bfb8      	it	lt
 8007dfc:	232d      	movlt	r3, #45	@ 0x2d
 8007dfe:	4a80      	ldr	r2, [pc, #512]	@ (8008000 <_printf_float+0x2d8>)
 8007e00:	bfb8      	it	lt
 8007e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e06:	4b7f      	ldr	r3, [pc, #508]	@ (8008004 <_printf_float+0x2dc>)
 8007e08:	e7d3      	b.n	8007db2 <_printf_float+0x8a>
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	d13f      	bne.n	8007e94 <_printf_float+0x16c>
 8007e14:	2306      	movs	r3, #6
 8007e16:	6063      	str	r3, [r4, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	9206      	str	r2, [sp, #24]
 8007e22:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e24:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007e28:	aa0d      	add	r2, sp, #52	@ 0x34
 8007e2a:	9203      	str	r2, [sp, #12]
 8007e2c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007e30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	4642      	mov	r2, r8
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007e40:	f7ff fed4 	bl	8007bec <__cvt>
 8007e44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e46:	4680      	mov	r8, r0
 8007e48:	2947      	cmp	r1, #71	@ 0x47
 8007e4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e4c:	d128      	bne.n	8007ea0 <_printf_float+0x178>
 8007e4e:	1cc8      	adds	r0, r1, #3
 8007e50:	db02      	blt.n	8007e58 <_printf_float+0x130>
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	4299      	cmp	r1, r3
 8007e56:	dd40      	ble.n	8007eda <_printf_float+0x1b2>
 8007e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e60:	4652      	mov	r2, sl
 8007e62:	3901      	subs	r1, #1
 8007e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e68:	910d      	str	r1, [sp, #52]	@ 0x34
 8007e6a:	f7ff ff23 	bl	8007cb4 <__exponent>
 8007e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e70:	4681      	mov	r9, r0
 8007e72:	1813      	adds	r3, r2, r0
 8007e74:	2a01      	cmp	r2, #1
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	dc02      	bgt.n	8007e80 <_printf_float+0x158>
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	07d2      	lsls	r2, r2, #31
 8007e7e:	d501      	bpl.n	8007e84 <_printf_float+0x15c>
 8007e80:	3301      	adds	r3, #1
 8007e82:	6123      	str	r3, [r4, #16]
 8007e84:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d09e      	beq.n	8007dca <_printf_float+0xa2>
 8007e8c:	232d      	movs	r3, #45	@ 0x2d
 8007e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e92:	e79a      	b.n	8007dca <_printf_float+0xa2>
 8007e94:	2947      	cmp	r1, #71	@ 0x47
 8007e96:	d1bf      	bne.n	8007e18 <_printf_float+0xf0>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1bd      	bne.n	8007e18 <_printf_float+0xf0>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7ba      	b.n	8007e16 <_printf_float+0xee>
 8007ea0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ea4:	d9dc      	bls.n	8007e60 <_printf_float+0x138>
 8007ea6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007eaa:	d118      	bne.n	8007ede <_printf_float+0x1b6>
 8007eac:	2900      	cmp	r1, #0
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	dd0b      	ble.n	8007eca <_printf_float+0x1a2>
 8007eb2:	6121      	str	r1, [r4, #16]
 8007eb4:	b913      	cbnz	r3, 8007ebc <_printf_float+0x194>
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	07d0      	lsls	r0, r2, #31
 8007eba:	d502      	bpl.n	8007ec2 <_printf_float+0x19a>
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	440b      	add	r3, r1
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ec8:	e7dc      	b.n	8007e84 <_printf_float+0x15c>
 8007eca:	b913      	cbnz	r3, 8007ed2 <_printf_float+0x1aa>
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	07d2      	lsls	r2, r2, #31
 8007ed0:	d501      	bpl.n	8007ed6 <_printf_float+0x1ae>
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	e7f4      	b.n	8007ec0 <_printf_float+0x198>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e7f2      	b.n	8007ec0 <_printf_float+0x198>
 8007eda:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	db05      	blt.n	8007ef0 <_printf_float+0x1c8>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	6121      	str	r1, [r4, #16]
 8007ee8:	07d8      	lsls	r0, r3, #31
 8007eea:	d5ea      	bpl.n	8007ec2 <_printf_float+0x19a>
 8007eec:	1c4b      	adds	r3, r1, #1
 8007eee:	e7e7      	b.n	8007ec0 <_printf_float+0x198>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	bfcc      	ite	gt
 8007ef4:	2201      	movgt	r2, #1
 8007ef6:	f1c1 0202 	rsble	r2, r1, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	e7e0      	b.n	8007ec0 <_printf_float+0x198>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	055a      	lsls	r2, r3, #21
 8007f02:	d407      	bmi.n	8007f14 <_printf_float+0x1ec>
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	4642      	mov	r2, r8
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d12b      	bne.n	8007f6a <_printf_float+0x242>
 8007f12:	e764      	b.n	8007dde <_printf_float+0xb6>
 8007f14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f18:	f240 80dc 	bls.w	80080d4 <_printf_float+0x3ac>
 8007f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f20:	2200      	movs	r2, #0
 8007f22:	2300      	movs	r3, #0
 8007f24:	f7f8 fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d033      	beq.n	8007f94 <_printf_float+0x26c>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	4a35      	ldr	r2, [pc, #212]	@ (8008008 <_printf_float+0x2e0>)
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af51 	beq.w	8007dde <_printf_float+0xb6>
 8007f3c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007f40:	4543      	cmp	r3, r8
 8007f42:	db02      	blt.n	8007f4a <_printf_float+0x222>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	07d8      	lsls	r0, r3, #31
 8007f48:	d50f      	bpl.n	8007f6a <_printf_float+0x242>
 8007f4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4628      	mov	r0, r5
 8007f52:	47b8      	blx	r7
 8007f54:	3001      	adds	r0, #1
 8007f56:	f43f af42 	beq.w	8007dde <_printf_float+0xb6>
 8007f5a:	f04f 0900 	mov.w	r9, #0
 8007f5e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007f62:	f104 0a1a 	add.w	sl, r4, #26
 8007f66:	45c8      	cmp	r8, r9
 8007f68:	dc09      	bgt.n	8007f7e <_printf_float+0x256>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	079b      	lsls	r3, r3, #30
 8007f6e:	f100 8102 	bmi.w	8008176 <_printf_float+0x44e>
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f76:	4298      	cmp	r0, r3
 8007f78:	bfb8      	it	lt
 8007f7a:	4618      	movlt	r0, r3
 8007f7c:	e731      	b.n	8007de2 <_printf_float+0xba>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4652      	mov	r2, sl
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f43f af28 	beq.w	8007dde <_printf_float+0xb6>
 8007f8e:	f109 0901 	add.w	r9, r9, #1
 8007f92:	e7e8      	b.n	8007f66 <_printf_float+0x23e>
 8007f94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dc38      	bgt.n	800800c <_printf_float+0x2e4>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	4a19      	ldr	r2, [pc, #100]	@ (8008008 <_printf_float+0x2e0>)
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f af1a 	beq.w	8007dde <_printf_float+0xb6>
 8007faa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007fae:	ea59 0303 	orrs.w	r3, r9, r3
 8007fb2:	d102      	bne.n	8007fba <_printf_float+0x292>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	07d9      	lsls	r1, r3, #31
 8007fb8:	d5d7      	bpl.n	8007f6a <_printf_float+0x242>
 8007fba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f af0a 	beq.w	8007dde <_printf_float+0xb6>
 8007fca:	f04f 0a00 	mov.w	sl, #0
 8007fce:	f104 0b1a 	add.w	fp, r4, #26
 8007fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fd4:	425b      	negs	r3, r3
 8007fd6:	4553      	cmp	r3, sl
 8007fd8:	dc01      	bgt.n	8007fde <_printf_float+0x2b6>
 8007fda:	464b      	mov	r3, r9
 8007fdc:	e793      	b.n	8007f06 <_printf_float+0x1de>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	465a      	mov	r2, fp
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f aef8 	beq.w	8007dde <_printf_float+0xb6>
 8007fee:	f10a 0a01 	add.w	sl, sl, #1
 8007ff2:	e7ee      	b.n	8007fd2 <_printf_float+0x2aa>
 8007ff4:	7fefffff 	.word	0x7fefffff
 8007ff8:	0800e0fa 	.word	0x0800e0fa
 8007ffc:	0800e0fe 	.word	0x0800e0fe
 8008000:	0800e102 	.word	0x0800e102
 8008004:	0800e106 	.word	0x0800e106
 8008008:	0800e10a 	.word	0x0800e10a
 800800c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800800e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008012:	4553      	cmp	r3, sl
 8008014:	bfa8      	it	ge
 8008016:	4653      	movge	r3, sl
 8008018:	2b00      	cmp	r3, #0
 800801a:	4699      	mov	r9, r3
 800801c:	dc36      	bgt.n	800808c <_printf_float+0x364>
 800801e:	f04f 0b00 	mov.w	fp, #0
 8008022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008026:	f104 021a 	add.w	r2, r4, #26
 800802a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800802c:	930a      	str	r3, [sp, #40]	@ 0x28
 800802e:	eba3 0309 	sub.w	r3, r3, r9
 8008032:	455b      	cmp	r3, fp
 8008034:	dc31      	bgt.n	800809a <_printf_float+0x372>
 8008036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008038:	459a      	cmp	sl, r3
 800803a:	dc3a      	bgt.n	80080b2 <_printf_float+0x38a>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	07da      	lsls	r2, r3, #31
 8008040:	d437      	bmi.n	80080b2 <_printf_float+0x38a>
 8008042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008044:	ebaa 0903 	sub.w	r9, sl, r3
 8008048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800804a:	ebaa 0303 	sub.w	r3, sl, r3
 800804e:	4599      	cmp	r9, r3
 8008050:	bfa8      	it	ge
 8008052:	4699      	movge	r9, r3
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	dc33      	bgt.n	80080c2 <_printf_float+0x39a>
 800805a:	f04f 0800 	mov.w	r8, #0
 800805e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008062:	f104 0b1a 	add.w	fp, r4, #26
 8008066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008068:	ebaa 0303 	sub.w	r3, sl, r3
 800806c:	eba3 0309 	sub.w	r3, r3, r9
 8008070:	4543      	cmp	r3, r8
 8008072:	f77f af7a 	ble.w	8007f6a <_printf_float+0x242>
 8008076:	2301      	movs	r3, #1
 8008078:	465a      	mov	r2, fp
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f aeac 	beq.w	8007dde <_printf_float+0xb6>
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	e7ec      	b.n	8008066 <_printf_float+0x33e>
 800808c:	4642      	mov	r2, r8
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	d1c2      	bne.n	800801e <_printf_float+0x2f6>
 8008098:	e6a1      	b.n	8007dde <_printf_float+0xb6>
 800809a:	2301      	movs	r3, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae9a 	beq.w	8007dde <_printf_float+0xb6>
 80080aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080ac:	f10b 0b01 	add.w	fp, fp, #1
 80080b0:	e7bb      	b.n	800802a <_printf_float+0x302>
 80080b2:	4631      	mov	r1, r6
 80080b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	d1c0      	bne.n	8008042 <_printf_float+0x31a>
 80080c0:	e68d      	b.n	8007dde <_printf_float+0xb6>
 80080c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c4:	464b      	mov	r3, r9
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	4442      	add	r2, r8
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	d1c3      	bne.n	800805a <_printf_float+0x332>
 80080d2:	e684      	b.n	8007dde <_printf_float+0xb6>
 80080d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80080d8:	f1ba 0f01 	cmp.w	sl, #1
 80080dc:	dc01      	bgt.n	80080e2 <_printf_float+0x3ba>
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d536      	bpl.n	8008150 <_printf_float+0x428>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4642      	mov	r2, r8
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f ae76 	beq.w	8007dde <_printf_float+0xb6>
 80080f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae6e 	beq.w	8007dde <_printf_float+0xb6>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800810e:	f7f8 fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8008112:	b9c0      	cbnz	r0, 8008146 <_printf_float+0x41e>
 8008114:	4653      	mov	r3, sl
 8008116:	f108 0201 	add.w	r2, r8, #1
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d10c      	bne.n	800813e <_printf_float+0x416>
 8008124:	e65b      	b.n	8007dde <_printf_float+0xb6>
 8008126:	2301      	movs	r3, #1
 8008128:	465a      	mov	r2, fp
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae54 	beq.w	8007dde <_printf_float+0xb6>
 8008136:	f108 0801 	add.w	r8, r8, #1
 800813a:	45d0      	cmp	r8, sl
 800813c:	dbf3      	blt.n	8008126 <_printf_float+0x3fe>
 800813e:	464b      	mov	r3, r9
 8008140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008144:	e6e0      	b.n	8007f08 <_printf_float+0x1e0>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	f104 0b1a 	add.w	fp, r4, #26
 800814e:	e7f4      	b.n	800813a <_printf_float+0x412>
 8008150:	2301      	movs	r3, #1
 8008152:	4642      	mov	r2, r8
 8008154:	e7e1      	b.n	800811a <_printf_float+0x3f2>
 8008156:	2301      	movs	r3, #1
 8008158:	464a      	mov	r2, r9
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae3c 	beq.w	8007dde <_printf_float+0xb6>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800816e:	1a5b      	subs	r3, r3, r1
 8008170:	4543      	cmp	r3, r8
 8008172:	dcf0      	bgt.n	8008156 <_printf_float+0x42e>
 8008174:	e6fd      	b.n	8007f72 <_printf_float+0x24a>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	f104 0919 	add.w	r9, r4, #25
 800817e:	e7f4      	b.n	800816a <_printf_float+0x442>

08008180 <_printf_common>:
 8008180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	4616      	mov	r6, r2
 8008186:	4698      	mov	r8, r3
 8008188:	688a      	ldr	r2, [r1, #8]
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	4607      	mov	r7, r0
 800818e:	4293      	cmp	r3, r2
 8008190:	bfb8      	it	lt
 8008192:	4613      	movlt	r3, r2
 8008194:	6033      	str	r3, [r6, #0]
 8008196:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800819a:	460c      	mov	r4, r1
 800819c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081a0:	b10a      	cbz	r2, 80081a6 <_printf_common+0x26>
 80081a2:	3301      	adds	r3, #1
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	0699      	lsls	r1, r3, #26
 80081aa:	bf42      	ittt	mi
 80081ac:	6833      	ldrmi	r3, [r6, #0]
 80081ae:	3302      	addmi	r3, #2
 80081b0:	6033      	strmi	r3, [r6, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	f015 0506 	ands.w	r5, r5, #6
 80081b8:	d106      	bne.n	80081c8 <_printf_common+0x48>
 80081ba:	f104 0a19 	add.w	sl, r4, #25
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	6832      	ldr	r2, [r6, #0]
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dc2b      	bgt.n	8008220 <_printf_common+0xa0>
 80081c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	3b00      	subs	r3, #0
 80081d0:	bf18      	it	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	0692      	lsls	r2, r2, #26
 80081d6:	d430      	bmi.n	800823a <_printf_common+0xba>
 80081d8:	4641      	mov	r1, r8
 80081da:	4638      	mov	r0, r7
 80081dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081e0:	47c8      	blx	r9
 80081e2:	3001      	adds	r0, #1
 80081e4:	d023      	beq.n	800822e <_printf_common+0xae>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	f003 0306 	and.w	r3, r3, #6
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	bf14      	ite	ne
 80081f2:	2500      	movne	r5, #0
 80081f4:	6833      	ldreq	r3, [r6, #0]
 80081f6:	f04f 0600 	mov.w	r6, #0
 80081fa:	bf08      	it	eq
 80081fc:	68e5      	ldreq	r5, [r4, #12]
 80081fe:	f104 041a 	add.w	r4, r4, #26
 8008202:	bf08      	it	eq
 8008204:	1aed      	subeq	r5, r5, r3
 8008206:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800820a:	bf08      	it	eq
 800820c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008210:	4293      	cmp	r3, r2
 8008212:	bfc4      	itt	gt
 8008214:	1a9b      	subgt	r3, r3, r2
 8008216:	18ed      	addgt	r5, r5, r3
 8008218:	42b5      	cmp	r5, r6
 800821a:	d11a      	bne.n	8008252 <_printf_common+0xd2>
 800821c:	2000      	movs	r0, #0
 800821e:	e008      	b.n	8008232 <_printf_common+0xb2>
 8008220:	2301      	movs	r3, #1
 8008222:	4652      	mov	r2, sl
 8008224:	4641      	mov	r1, r8
 8008226:	4638      	mov	r0, r7
 8008228:	47c8      	blx	r9
 800822a:	3001      	adds	r0, #1
 800822c:	d103      	bne.n	8008236 <_printf_common+0xb6>
 800822e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008236:	3501      	adds	r5, #1
 8008238:	e7c1      	b.n	80081be <_printf_common+0x3e>
 800823a:	2030      	movs	r0, #48	@ 0x30
 800823c:	18e1      	adds	r1, r4, r3
 800823e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008248:	4422      	add	r2, r4
 800824a:	3302      	adds	r3, #2
 800824c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008250:	e7c2      	b.n	80081d8 <_printf_common+0x58>
 8008252:	2301      	movs	r3, #1
 8008254:	4622      	mov	r2, r4
 8008256:	4641      	mov	r1, r8
 8008258:	4638      	mov	r0, r7
 800825a:	47c8      	blx	r9
 800825c:	3001      	adds	r0, #1
 800825e:	d0e6      	beq.n	800822e <_printf_common+0xae>
 8008260:	3601      	adds	r6, #1
 8008262:	e7d9      	b.n	8008218 <_printf_common+0x98>

08008264 <_printf_i>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	7e0f      	ldrb	r7, [r1, #24]
 800826a:	4691      	mov	r9, r2
 800826c:	2f78      	cmp	r7, #120	@ 0x78
 800826e:	4680      	mov	r8, r0
 8008270:	460c      	mov	r4, r1
 8008272:	469a      	mov	sl, r3
 8008274:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800827a:	d807      	bhi.n	800828c <_printf_i+0x28>
 800827c:	2f62      	cmp	r7, #98	@ 0x62
 800827e:	d80a      	bhi.n	8008296 <_printf_i+0x32>
 8008280:	2f00      	cmp	r7, #0
 8008282:	f000 80d3 	beq.w	800842c <_printf_i+0x1c8>
 8008286:	2f58      	cmp	r7, #88	@ 0x58
 8008288:	f000 80ba 	beq.w	8008400 <_printf_i+0x19c>
 800828c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008294:	e03a      	b.n	800830c <_printf_i+0xa8>
 8008296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800829a:	2b15      	cmp	r3, #21
 800829c:	d8f6      	bhi.n	800828c <_printf_i+0x28>
 800829e:	a101      	add	r1, pc, #4	@ (adr r1, 80082a4 <_printf_i+0x40>)
 80082a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	08008311 	.word	0x08008311
 80082ac:	0800828d 	.word	0x0800828d
 80082b0:	0800828d 	.word	0x0800828d
 80082b4:	0800828d 	.word	0x0800828d
 80082b8:	0800828d 	.word	0x0800828d
 80082bc:	08008311 	.word	0x08008311
 80082c0:	0800828d 	.word	0x0800828d
 80082c4:	0800828d 	.word	0x0800828d
 80082c8:	0800828d 	.word	0x0800828d
 80082cc:	0800828d 	.word	0x0800828d
 80082d0:	08008413 	.word	0x08008413
 80082d4:	0800833b 	.word	0x0800833b
 80082d8:	080083cd 	.word	0x080083cd
 80082dc:	0800828d 	.word	0x0800828d
 80082e0:	0800828d 	.word	0x0800828d
 80082e4:	08008435 	.word	0x08008435
 80082e8:	0800828d 	.word	0x0800828d
 80082ec:	0800833b 	.word	0x0800833b
 80082f0:	0800828d 	.word	0x0800828d
 80082f4:	0800828d 	.word	0x0800828d
 80082f8:	080083d5 	.word	0x080083d5
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6032      	str	r2, [r6, #0]
 8008304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800830c:	2301      	movs	r3, #1
 800830e:	e09e      	b.n	800844e <_printf_i+0x1ea>
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	6820      	ldr	r0, [r4, #0]
 8008314:	1d19      	adds	r1, r3, #4
 8008316:	6031      	str	r1, [r6, #0]
 8008318:	0606      	lsls	r6, r0, #24
 800831a:	d501      	bpl.n	8008320 <_printf_i+0xbc>
 800831c:	681d      	ldr	r5, [r3, #0]
 800831e:	e003      	b.n	8008328 <_printf_i+0xc4>
 8008320:	0645      	lsls	r5, r0, #25
 8008322:	d5fb      	bpl.n	800831c <_printf_i+0xb8>
 8008324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008328:	2d00      	cmp	r5, #0
 800832a:	da03      	bge.n	8008334 <_printf_i+0xd0>
 800832c:	232d      	movs	r3, #45	@ 0x2d
 800832e:	426d      	negs	r5, r5
 8008330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008334:	230a      	movs	r3, #10
 8008336:	4859      	ldr	r0, [pc, #356]	@ (800849c <_printf_i+0x238>)
 8008338:	e011      	b.n	800835e <_printf_i+0xfa>
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	0608      	lsls	r0, r1, #24
 8008340:	f853 5b04 	ldr.w	r5, [r3], #4
 8008344:	d402      	bmi.n	800834c <_printf_i+0xe8>
 8008346:	0649      	lsls	r1, r1, #25
 8008348:	bf48      	it	mi
 800834a:	b2ad      	uxthmi	r5, r5
 800834c:	2f6f      	cmp	r7, #111	@ 0x6f
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	bf14      	ite	ne
 8008352:	230a      	movne	r3, #10
 8008354:	2308      	moveq	r3, #8
 8008356:	4851      	ldr	r0, [pc, #324]	@ (800849c <_printf_i+0x238>)
 8008358:	2100      	movs	r1, #0
 800835a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800835e:	6866      	ldr	r6, [r4, #4]
 8008360:	2e00      	cmp	r6, #0
 8008362:	bfa8      	it	ge
 8008364:	6821      	ldrge	r1, [r4, #0]
 8008366:	60a6      	str	r6, [r4, #8]
 8008368:	bfa4      	itt	ge
 800836a:	f021 0104 	bicge.w	r1, r1, #4
 800836e:	6021      	strge	r1, [r4, #0]
 8008370:	b90d      	cbnz	r5, 8008376 <_printf_i+0x112>
 8008372:	2e00      	cmp	r6, #0
 8008374:	d04b      	beq.n	800840e <_printf_i+0x1aa>
 8008376:	4616      	mov	r6, r2
 8008378:	fbb5 f1f3 	udiv	r1, r5, r3
 800837c:	fb03 5711 	mls	r7, r3, r1, r5
 8008380:	5dc7      	ldrb	r7, [r0, r7]
 8008382:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008386:	462f      	mov	r7, r5
 8008388:	42bb      	cmp	r3, r7
 800838a:	460d      	mov	r5, r1
 800838c:	d9f4      	bls.n	8008378 <_printf_i+0x114>
 800838e:	2b08      	cmp	r3, #8
 8008390:	d10b      	bne.n	80083aa <_printf_i+0x146>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	07df      	lsls	r7, r3, #31
 8008396:	d508      	bpl.n	80083aa <_printf_i+0x146>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	6861      	ldr	r1, [r4, #4]
 800839c:	4299      	cmp	r1, r3
 800839e:	bfde      	ittt	le
 80083a0:	2330      	movle	r3, #48	@ 0x30
 80083a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083aa:	1b92      	subs	r2, r2, r6
 80083ac:	6122      	str	r2, [r4, #16]
 80083ae:	464b      	mov	r3, r9
 80083b0:	4621      	mov	r1, r4
 80083b2:	4640      	mov	r0, r8
 80083b4:	f8cd a000 	str.w	sl, [sp]
 80083b8:	aa03      	add	r2, sp, #12
 80083ba:	f7ff fee1 	bl	8008180 <_printf_common>
 80083be:	3001      	adds	r0, #1
 80083c0:	d14a      	bne.n	8008458 <_printf_i+0x1f4>
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083c6:	b004      	add	sp, #16
 80083c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	f043 0320 	orr.w	r3, r3, #32
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	2778      	movs	r7, #120	@ 0x78
 80083d6:	4832      	ldr	r0, [pc, #200]	@ (80084a0 <_printf_i+0x23c>)
 80083d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	6831      	ldr	r1, [r6, #0]
 80083e0:	061f      	lsls	r7, r3, #24
 80083e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80083e6:	d402      	bmi.n	80083ee <_printf_i+0x18a>
 80083e8:	065f      	lsls	r7, r3, #25
 80083ea:	bf48      	it	mi
 80083ec:	b2ad      	uxthmi	r5, r5
 80083ee:	6031      	str	r1, [r6, #0]
 80083f0:	07d9      	lsls	r1, r3, #31
 80083f2:	bf44      	itt	mi
 80083f4:	f043 0320 	orrmi.w	r3, r3, #32
 80083f8:	6023      	strmi	r3, [r4, #0]
 80083fa:	b11d      	cbz	r5, 8008404 <_printf_i+0x1a0>
 80083fc:	2310      	movs	r3, #16
 80083fe:	e7ab      	b.n	8008358 <_printf_i+0xf4>
 8008400:	4826      	ldr	r0, [pc, #152]	@ (800849c <_printf_i+0x238>)
 8008402:	e7e9      	b.n	80083d8 <_printf_i+0x174>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	f023 0320 	bic.w	r3, r3, #32
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	e7f6      	b.n	80083fc <_printf_i+0x198>
 800840e:	4616      	mov	r6, r2
 8008410:	e7bd      	b.n	800838e <_printf_i+0x12a>
 8008412:	6833      	ldr	r3, [r6, #0]
 8008414:	6825      	ldr	r5, [r4, #0]
 8008416:	1d18      	adds	r0, r3, #4
 8008418:	6961      	ldr	r1, [r4, #20]
 800841a:	6030      	str	r0, [r6, #0]
 800841c:	062e      	lsls	r6, r5, #24
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	d501      	bpl.n	8008426 <_printf_i+0x1c2>
 8008422:	6019      	str	r1, [r3, #0]
 8008424:	e002      	b.n	800842c <_printf_i+0x1c8>
 8008426:	0668      	lsls	r0, r5, #25
 8008428:	d5fb      	bpl.n	8008422 <_printf_i+0x1be>
 800842a:	8019      	strh	r1, [r3, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	4616      	mov	r6, r2
 8008430:	6123      	str	r3, [r4, #16]
 8008432:	e7bc      	b.n	80083ae <_printf_i+0x14a>
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	2100      	movs	r1, #0
 8008438:	1d1a      	adds	r2, r3, #4
 800843a:	6032      	str	r2, [r6, #0]
 800843c:	681e      	ldr	r6, [r3, #0]
 800843e:	6862      	ldr	r2, [r4, #4]
 8008440:	4630      	mov	r0, r6
 8008442:	f001 fbe6 	bl	8009c12 <memchr>
 8008446:	b108      	cbz	r0, 800844c <_printf_i+0x1e8>
 8008448:	1b80      	subs	r0, r0, r6
 800844a:	6060      	str	r0, [r4, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	2300      	movs	r3, #0
 8008452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008456:	e7aa      	b.n	80083ae <_printf_i+0x14a>
 8008458:	4632      	mov	r2, r6
 800845a:	4649      	mov	r1, r9
 800845c:	4640      	mov	r0, r8
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	47d0      	blx	sl
 8008462:	3001      	adds	r0, #1
 8008464:	d0ad      	beq.n	80083c2 <_printf_i+0x15e>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	079b      	lsls	r3, r3, #30
 800846a:	d413      	bmi.n	8008494 <_printf_i+0x230>
 800846c:	68e0      	ldr	r0, [r4, #12]
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	4298      	cmp	r0, r3
 8008472:	bfb8      	it	lt
 8008474:	4618      	movlt	r0, r3
 8008476:	e7a6      	b.n	80083c6 <_printf_i+0x162>
 8008478:	2301      	movs	r3, #1
 800847a:	4632      	mov	r2, r6
 800847c:	4649      	mov	r1, r9
 800847e:	4640      	mov	r0, r8
 8008480:	47d0      	blx	sl
 8008482:	3001      	adds	r0, #1
 8008484:	d09d      	beq.n	80083c2 <_printf_i+0x15e>
 8008486:	3501      	adds	r5, #1
 8008488:	68e3      	ldr	r3, [r4, #12]
 800848a:	9903      	ldr	r1, [sp, #12]
 800848c:	1a5b      	subs	r3, r3, r1
 800848e:	42ab      	cmp	r3, r5
 8008490:	dcf2      	bgt.n	8008478 <_printf_i+0x214>
 8008492:	e7eb      	b.n	800846c <_printf_i+0x208>
 8008494:	2500      	movs	r5, #0
 8008496:	f104 0619 	add.w	r6, r4, #25
 800849a:	e7f5      	b.n	8008488 <_printf_i+0x224>
 800849c:	0800e10c 	.word	0x0800e10c
 80084a0:	0800e11d 	.word	0x0800e11d

080084a4 <_scanf_float>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	b087      	sub	sp, #28
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	688b      	ldr	r3, [r1, #8]
 80084ae:	4617      	mov	r7, r2
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084b6:	bf82      	ittt	hi
 80084b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80084c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084c4:	460a      	mov	r2, r1
 80084c6:	f04f 0500 	mov.w	r5, #0
 80084ca:	bf88      	it	hi
 80084cc:	608b      	strhi	r3, [r1, #8]
 80084ce:	680b      	ldr	r3, [r1, #0]
 80084d0:	4680      	mov	r8, r0
 80084d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084d6:	f842 3b1c 	str.w	r3, [r2], #28
 80084da:	460c      	mov	r4, r1
 80084dc:	bf98      	it	ls
 80084de:	f04f 0b00 	movls.w	fp, #0
 80084e2:	4616      	mov	r6, r2
 80084e4:	46aa      	mov	sl, r5
 80084e6:	46a9      	mov	r9, r5
 80084e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084ec:	9201      	str	r2, [sp, #4]
 80084ee:	9502      	str	r5, [sp, #8]
 80084f0:	68a2      	ldr	r2, [r4, #8]
 80084f2:	b152      	cbz	r2, 800850a <_scanf_float+0x66>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80084fa:	d865      	bhi.n	80085c8 <_scanf_float+0x124>
 80084fc:	2b40      	cmp	r3, #64	@ 0x40
 80084fe:	d83d      	bhi.n	800857c <_scanf_float+0xd8>
 8008500:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008504:	b2c8      	uxtb	r0, r1
 8008506:	280e      	cmp	r0, #14
 8008508:	d93b      	bls.n	8008582 <_scanf_float+0xde>
 800850a:	f1b9 0f00 	cmp.w	r9, #0
 800850e:	d003      	beq.n	8008518 <_scanf_float+0x74>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800851c:	f1ba 0f01 	cmp.w	sl, #1
 8008520:	f200 8118 	bhi.w	8008754 <_scanf_float+0x2b0>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	429e      	cmp	r6, r3
 8008528:	f200 8109 	bhi.w	800873e <_scanf_float+0x29a>
 800852c:	2001      	movs	r0, #1
 800852e:	b007      	add	sp, #28
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008534:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008538:	2a0d      	cmp	r2, #13
 800853a:	d8e6      	bhi.n	800850a <_scanf_float+0x66>
 800853c:	a101      	add	r1, pc, #4	@ (adr r1, 8008544 <_scanf_float+0xa0>)
 800853e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008542:	bf00      	nop
 8008544:	0800868b 	.word	0x0800868b
 8008548:	0800850b 	.word	0x0800850b
 800854c:	0800850b 	.word	0x0800850b
 8008550:	0800850b 	.word	0x0800850b
 8008554:	080086eb 	.word	0x080086eb
 8008558:	080086c3 	.word	0x080086c3
 800855c:	0800850b 	.word	0x0800850b
 8008560:	0800850b 	.word	0x0800850b
 8008564:	08008699 	.word	0x08008699
 8008568:	0800850b 	.word	0x0800850b
 800856c:	0800850b 	.word	0x0800850b
 8008570:	0800850b 	.word	0x0800850b
 8008574:	0800850b 	.word	0x0800850b
 8008578:	08008651 	.word	0x08008651
 800857c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008580:	e7da      	b.n	8008538 <_scanf_float+0x94>
 8008582:	290e      	cmp	r1, #14
 8008584:	d8c1      	bhi.n	800850a <_scanf_float+0x66>
 8008586:	a001      	add	r0, pc, #4	@ (adr r0, 800858c <_scanf_float+0xe8>)
 8008588:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800858c:	08008641 	.word	0x08008641
 8008590:	0800850b 	.word	0x0800850b
 8008594:	08008641 	.word	0x08008641
 8008598:	080086d7 	.word	0x080086d7
 800859c:	0800850b 	.word	0x0800850b
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	08008627 	.word	0x08008627
 80085a8:	08008627 	.word	0x08008627
 80085ac:	08008627 	.word	0x08008627
 80085b0:	08008627 	.word	0x08008627
 80085b4:	08008627 	.word	0x08008627
 80085b8:	08008627 	.word	0x08008627
 80085bc:	08008627 	.word	0x08008627
 80085c0:	08008627 	.word	0x08008627
 80085c4:	08008627 	.word	0x08008627
 80085c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80085ca:	d809      	bhi.n	80085e0 <_scanf_float+0x13c>
 80085cc:	2b60      	cmp	r3, #96	@ 0x60
 80085ce:	d8b1      	bhi.n	8008534 <_scanf_float+0x90>
 80085d0:	2b54      	cmp	r3, #84	@ 0x54
 80085d2:	d07b      	beq.n	80086cc <_scanf_float+0x228>
 80085d4:	2b59      	cmp	r3, #89	@ 0x59
 80085d6:	d198      	bne.n	800850a <_scanf_float+0x66>
 80085d8:	2d07      	cmp	r5, #7
 80085da:	d196      	bne.n	800850a <_scanf_float+0x66>
 80085dc:	2508      	movs	r5, #8
 80085de:	e02c      	b.n	800863a <_scanf_float+0x196>
 80085e0:	2b74      	cmp	r3, #116	@ 0x74
 80085e2:	d073      	beq.n	80086cc <_scanf_float+0x228>
 80085e4:	2b79      	cmp	r3, #121	@ 0x79
 80085e6:	e7f6      	b.n	80085d6 <_scanf_float+0x132>
 80085e8:	6821      	ldr	r1, [r4, #0]
 80085ea:	05c8      	lsls	r0, r1, #23
 80085ec:	d51b      	bpl.n	8008626 <_scanf_float+0x182>
 80085ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80085f2:	6021      	str	r1, [r4, #0]
 80085f4:	f109 0901 	add.w	r9, r9, #1
 80085f8:	f1bb 0f00 	cmp.w	fp, #0
 80085fc:	d003      	beq.n	8008606 <_scanf_float+0x162>
 80085fe:	3201      	adds	r2, #1
 8008600:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008604:	60a2      	str	r2, [r4, #8]
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	3b01      	subs	r3, #1
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	3301      	adds	r3, #1
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3b01      	subs	r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	f340 8087 	ble.w	800872c <_scanf_float+0x288>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	e764      	b.n	80084f0 <_scanf_float+0x4c>
 8008626:	eb1a 0105 	adds.w	r1, sl, r5
 800862a:	f47f af6e 	bne.w	800850a <_scanf_float+0x66>
 800862e:	460d      	mov	r5, r1
 8008630:	468a      	mov	sl, r1
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	f806 3b01 	strb.w	r3, [r6], #1
 800863e:	e7e2      	b.n	8008606 <_scanf_float+0x162>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	0610      	lsls	r0, r2, #24
 8008644:	f57f af61 	bpl.w	800850a <_scanf_float+0x66>
 8008648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	e7f4      	b.n	800863a <_scanf_float+0x196>
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d10e      	bne.n	8008674 <_scanf_float+0x1d0>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	d10e      	bne.n	800867a <_scanf_float+0x1d6>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008662:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008666:	d108      	bne.n	800867a <_scanf_float+0x1d6>
 8008668:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800866c:	f04f 0a01 	mov.w	sl, #1
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	e7e2      	b.n	800863a <_scanf_float+0x196>
 8008674:	f1ba 0f02 	cmp.w	sl, #2
 8008678:	d055      	beq.n	8008726 <_scanf_float+0x282>
 800867a:	2d01      	cmp	r5, #1
 800867c:	d002      	beq.n	8008684 <_scanf_float+0x1e0>
 800867e:	2d04      	cmp	r5, #4
 8008680:	f47f af43 	bne.w	800850a <_scanf_float+0x66>
 8008684:	3501      	adds	r5, #1
 8008686:	b2ed      	uxtb	r5, r5
 8008688:	e7d7      	b.n	800863a <_scanf_float+0x196>
 800868a:	f1ba 0f01 	cmp.w	sl, #1
 800868e:	f47f af3c 	bne.w	800850a <_scanf_float+0x66>
 8008692:	f04f 0a02 	mov.w	sl, #2
 8008696:	e7d0      	b.n	800863a <_scanf_float+0x196>
 8008698:	b97d      	cbnz	r5, 80086ba <_scanf_float+0x216>
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	f47f af37 	bne.w	8008510 <_scanf_float+0x6c>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086ac:	f040 8103 	bne.w	80088b6 <_scanf_float+0x412>
 80086b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086b4:	2501      	movs	r5, #1
 80086b6:	6022      	str	r2, [r4, #0]
 80086b8:	e7bf      	b.n	800863a <_scanf_float+0x196>
 80086ba:	2d03      	cmp	r5, #3
 80086bc:	d0e2      	beq.n	8008684 <_scanf_float+0x1e0>
 80086be:	2d05      	cmp	r5, #5
 80086c0:	e7de      	b.n	8008680 <_scanf_float+0x1dc>
 80086c2:	2d02      	cmp	r5, #2
 80086c4:	f47f af21 	bne.w	800850a <_scanf_float+0x66>
 80086c8:	2503      	movs	r5, #3
 80086ca:	e7b6      	b.n	800863a <_scanf_float+0x196>
 80086cc:	2d06      	cmp	r5, #6
 80086ce:	f47f af1c 	bne.w	800850a <_scanf_float+0x66>
 80086d2:	2507      	movs	r5, #7
 80086d4:	e7b1      	b.n	800863a <_scanf_float+0x196>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	0591      	lsls	r1, r2, #22
 80086da:	f57f af16 	bpl.w	800850a <_scanf_float+0x66>
 80086de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80086e8:	e7a7      	b.n	800863a <_scanf_float+0x196>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80086f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80086f4:	d006      	beq.n	8008704 <_scanf_float+0x260>
 80086f6:	0550      	lsls	r0, r2, #21
 80086f8:	f57f af07 	bpl.w	800850a <_scanf_float+0x66>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	f000 80d9 	beq.w	80088b6 <_scanf_float+0x412>
 8008704:	0591      	lsls	r1, r2, #22
 8008706:	bf58      	it	pl
 8008708:	9902      	ldrpl	r1, [sp, #8]
 800870a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800870e:	bf58      	it	pl
 8008710:	eba9 0101 	subpl.w	r1, r9, r1
 8008714:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	bf58      	it	pl
 800871e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008722:	6022      	str	r2, [r4, #0]
 8008724:	e789      	b.n	800863a <_scanf_float+0x196>
 8008726:	f04f 0a03 	mov.w	sl, #3
 800872a:	e786      	b.n	800863a <_scanf_float+0x196>
 800872c:	4639      	mov	r1, r7
 800872e:	4640      	mov	r0, r8
 8008730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008734:	4798      	blx	r3
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f aeda 	beq.w	80084f0 <_scanf_float+0x4c>
 800873c:	e6e5      	b.n	800850a <_scanf_float+0x66>
 800873e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008742:	463a      	mov	r2, r7
 8008744:	4640      	mov	r0, r8
 8008746:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800874a:	4798      	blx	r3
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	3b01      	subs	r3, #1
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	e6e7      	b.n	8008524 <_scanf_float+0x80>
 8008754:	1e6b      	subs	r3, r5, #1
 8008756:	2b06      	cmp	r3, #6
 8008758:	d824      	bhi.n	80087a4 <_scanf_float+0x300>
 800875a:	2d02      	cmp	r5, #2
 800875c:	d836      	bhi.n	80087cc <_scanf_float+0x328>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	429e      	cmp	r6, r3
 8008762:	f67f aee3 	bls.w	800852c <_scanf_float+0x88>
 8008766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800876a:	463a      	mov	r2, r7
 800876c:	4640      	mov	r0, r8
 800876e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008772:	4798      	blx	r3
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	3b01      	subs	r3, #1
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	e7f0      	b.n	800875e <_scanf_float+0x2ba>
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008780:	463a      	mov	r2, r7
 8008782:	4640      	mov	r0, r8
 8008784:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008788:	4798      	blx	r3
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	3b01      	subs	r3, #1
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008794:	fa5f fa8a 	uxtb.w	sl, sl
 8008798:	f1ba 0f02 	cmp.w	sl, #2
 800879c:	d1ee      	bne.n	800877c <_scanf_float+0x2d8>
 800879e:	3d03      	subs	r5, #3
 80087a0:	b2ed      	uxtb	r5, r5
 80087a2:	1b76      	subs	r6, r6, r5
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	05da      	lsls	r2, r3, #23
 80087a8:	d530      	bpl.n	800880c <_scanf_float+0x368>
 80087aa:	055b      	lsls	r3, r3, #21
 80087ac:	d511      	bpl.n	80087d2 <_scanf_float+0x32e>
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	429e      	cmp	r6, r3
 80087b2:	f67f aebb 	bls.w	800852c <_scanf_float+0x88>
 80087b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087ba:	463a      	mov	r2, r7
 80087bc:	4640      	mov	r0, r8
 80087be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c2:	4798      	blx	r3
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	e7f0      	b.n	80087ae <_scanf_float+0x30a>
 80087cc:	46aa      	mov	sl, r5
 80087ce:	46b3      	mov	fp, r6
 80087d0:	e7de      	b.n	8008790 <_scanf_float+0x2ec>
 80087d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	2965      	cmp	r1, #101	@ 0x65
 80087da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80087de:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	d00c      	beq.n	8008800 <_scanf_float+0x35c>
 80087e6:	2945      	cmp	r1, #69	@ 0x45
 80087e8:	d00a      	beq.n	8008800 <_scanf_float+0x35c>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087ee:	463a      	mov	r2, r7
 80087f0:	4640      	mov	r0, r8
 80087f2:	4798      	blx	r3
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	1eb5      	subs	r5, r6, #2
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	463a      	mov	r2, r7
 8008802:	4640      	mov	r0, r8
 8008804:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008808:	4798      	blx	r3
 800880a:	462e      	mov	r6, r5
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	f012 0210 	ands.w	r2, r2, #16
 8008812:	d001      	beq.n	8008818 <_scanf_float+0x374>
 8008814:	2000      	movs	r0, #0
 8008816:	e68a      	b.n	800852e <_scanf_float+0x8a>
 8008818:	7032      	strb	r2, [r6, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008824:	d11c      	bne.n	8008860 <_scanf_float+0x3bc>
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	454b      	cmp	r3, r9
 800882a:	eba3 0209 	sub.w	r2, r3, r9
 800882e:	d123      	bne.n	8008878 <_scanf_float+0x3d4>
 8008830:	2200      	movs	r2, #0
 8008832:	4640      	mov	r0, r8
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	f000 ffb7 	bl	80097a8 <_strtod_r>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f015 0f02 	tst.w	r5, #2
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	f103 0204 	add.w	r2, r3, #4
 800884c:	d01f      	beq.n	800888e <_scanf_float+0x3ea>
 800884e:	9903      	ldr	r1, [sp, #12]
 8008850:	600a      	str	r2, [r1, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	e9c3 6700 	strd	r6, r7, [r3]
 8008858:	68e3      	ldr	r3, [r4, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60e3      	str	r3, [r4, #12]
 800885e:	e7d9      	b.n	8008814 <_scanf_float+0x370>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0e4      	beq.n	8008830 <_scanf_float+0x38c>
 8008866:	9905      	ldr	r1, [sp, #20]
 8008868:	230a      	movs	r3, #10
 800886a:	4640      	mov	r0, r8
 800886c:	3101      	adds	r1, #1
 800886e:	f001 f81b 	bl	80098a8 <_strtol_r>
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	9e05      	ldr	r6, [sp, #20]
 8008876:	1ac2      	subs	r2, r0, r3
 8008878:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800887c:	429e      	cmp	r6, r3
 800887e:	bf28      	it	cs
 8008880:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008884:	4630      	mov	r0, r6
 8008886:	490d      	ldr	r1, [pc, #52]	@ (80088bc <_scanf_float+0x418>)
 8008888:	f000 f8d0 	bl	8008a2c <siprintf>
 800888c:	e7d0      	b.n	8008830 <_scanf_float+0x38c>
 800888e:	076d      	lsls	r5, r5, #29
 8008890:	d4dd      	bmi.n	800884e <_scanf_float+0x3aa>
 8008892:	9d03      	ldr	r5, [sp, #12]
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	681d      	ldr	r5, [r3, #0]
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	f7f8 f8b6 	bl	8000a0c <__aeabi_dcmpun>
 80088a0:	b120      	cbz	r0, 80088ac <_scanf_float+0x408>
 80088a2:	4807      	ldr	r0, [pc, #28]	@ (80088c0 <_scanf_float+0x41c>)
 80088a4:	f001 f9d8 	bl	8009c58 <nanf>
 80088a8:	6028      	str	r0, [r5, #0]
 80088aa:	e7d5      	b.n	8008858 <_scanf_float+0x3b4>
 80088ac:	4630      	mov	r0, r6
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f8 f90a 	bl	8000ac8 <__aeabi_d2f>
 80088b4:	e7f8      	b.n	80088a8 <_scanf_float+0x404>
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	e62d      	b.n	8008518 <_scanf_float+0x74>
 80088bc:	0800e12e 	.word	0x0800e12e
 80088c0:	0800e523 	.word	0x0800e523

080088c4 <setvbuf>:
 80088c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	461d      	mov	r5, r3
 80088ca:	4b57      	ldr	r3, [pc, #348]	@ (8008a28 <setvbuf+0x164>)
 80088cc:	4604      	mov	r4, r0
 80088ce:	681f      	ldr	r7, [r3, #0]
 80088d0:	460e      	mov	r6, r1
 80088d2:	4690      	mov	r8, r2
 80088d4:	b127      	cbz	r7, 80088e0 <setvbuf+0x1c>
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	b913      	cbnz	r3, 80088e0 <setvbuf+0x1c>
 80088da:	4638      	mov	r0, r7
 80088dc:	f000 f952 	bl	8008b84 <__sinit>
 80088e0:	f1b8 0f02 	cmp.w	r8, #2
 80088e4:	d006      	beq.n	80088f4 <setvbuf+0x30>
 80088e6:	f1b8 0f01 	cmp.w	r8, #1
 80088ea:	f200 809a 	bhi.w	8008a22 <setvbuf+0x15e>
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	f2c0 8097 	blt.w	8008a22 <setvbuf+0x15e>
 80088f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	d405      	bmi.n	8008906 <setvbuf+0x42>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	059a      	lsls	r2, r3, #22
 80088fe:	d402      	bmi.n	8008906 <setvbuf+0x42>
 8008900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008902:	f001 f984 	bl	8009c0e <__retarget_lock_acquire_recursive>
 8008906:	4621      	mov	r1, r4
 8008908:	4638      	mov	r0, r7
 800890a:	f002 ff4d 	bl	800b7a8 <_fflush_r>
 800890e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008910:	b141      	cbz	r1, 8008924 <setvbuf+0x60>
 8008912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008916:	4299      	cmp	r1, r3
 8008918:	d002      	beq.n	8008920 <setvbuf+0x5c>
 800891a:	4638      	mov	r0, r7
 800891c:	f001 fff0 	bl	800a900 <_free_r>
 8008920:	2300      	movs	r3, #0
 8008922:	6363      	str	r3, [r4, #52]	@ 0x34
 8008924:	2300      	movs	r3, #0
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	d503      	bpl.n	8008938 <setvbuf+0x74>
 8008930:	4638      	mov	r0, r7
 8008932:	6921      	ldr	r1, [r4, #16]
 8008934:	f001 ffe4 	bl	800a900 <_free_r>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f1b8 0f02 	cmp.w	r8, #2
 800893e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008942:	f023 0303 	bic.w	r3, r3, #3
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	d061      	beq.n	8008a0e <setvbuf+0x14a>
 800894a:	ab01      	add	r3, sp, #4
 800894c:	466a      	mov	r2, sp
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f000 ffc9 	bl	80098e8 <__swhatbuf_r>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	4318      	orrs	r0, r3
 800895a:	81a0      	strh	r0, [r4, #12]
 800895c:	bb2d      	cbnz	r5, 80089aa <setvbuf+0xe6>
 800895e:	9d00      	ldr	r5, [sp, #0]
 8008960:	4628      	mov	r0, r5
 8008962:	f002 fde5 	bl	800b530 <malloc>
 8008966:	4606      	mov	r6, r0
 8008968:	2800      	cmp	r0, #0
 800896a:	d152      	bne.n	8008a12 <setvbuf+0x14e>
 800896c:	f8dd 9000 	ldr.w	r9, [sp]
 8008970:	45a9      	cmp	r9, r5
 8008972:	d140      	bne.n	80089f6 <setvbuf+0x132>
 8008974:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897c:	f043 0202 	orr.w	r2, r3, #2
 8008980:	81a2      	strh	r2, [r4, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	60a2      	str	r2, [r4, #8]
 8008986:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	6122      	str	r2, [r4, #16]
 800898e:	2201      	movs	r2, #1
 8008990:	6162      	str	r2, [r4, #20]
 8008992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008994:	07d6      	lsls	r6, r2, #31
 8008996:	d404      	bmi.n	80089a2 <setvbuf+0xde>
 8008998:	0598      	lsls	r0, r3, #22
 800899a:	d402      	bmi.n	80089a2 <setvbuf+0xde>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f001 f937 	bl	8009c10 <__retarget_lock_release_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	b003      	add	sp, #12
 80089a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d0d8      	beq.n	8008960 <setvbuf+0x9c>
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	b913      	cbnz	r3, 80089b8 <setvbuf+0xf4>
 80089b2:	4638      	mov	r0, r7
 80089b4:	f000 f8e6 	bl	8008b84 <__sinit>
 80089b8:	f1b8 0f01 	cmp.w	r8, #1
 80089bc:	bf08      	it	eq
 80089be:	89a3      	ldrheq	r3, [r4, #12]
 80089c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80089c4:	bf04      	itt	eq
 80089c6:	f043 0301 	orreq.w	r3, r3, #1
 80089ca:	81a3      	strheq	r3, [r4, #12]
 80089cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d0:	6026      	str	r6, [r4, #0]
 80089d2:	f013 0208 	ands.w	r2, r3, #8
 80089d6:	d01e      	beq.n	8008a16 <setvbuf+0x152>
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	bf41      	itttt	mi
 80089dc:	2200      	movmi	r2, #0
 80089de:	426d      	negmi	r5, r5
 80089e0:	60a2      	strmi	r2, [r4, #8]
 80089e2:	61a5      	strmi	r5, [r4, #24]
 80089e4:	bf58      	it	pl
 80089e6:	60a5      	strpl	r5, [r4, #8]
 80089e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089ea:	07d2      	lsls	r2, r2, #31
 80089ec:	d401      	bmi.n	80089f2 <setvbuf+0x12e>
 80089ee:	059b      	lsls	r3, r3, #22
 80089f0:	d513      	bpl.n	8008a1a <setvbuf+0x156>
 80089f2:	2500      	movs	r5, #0
 80089f4:	e7d5      	b.n	80089a2 <setvbuf+0xde>
 80089f6:	4648      	mov	r0, r9
 80089f8:	f002 fd9a 	bl	800b530 <malloc>
 80089fc:	4606      	mov	r6, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0b8      	beq.n	8008974 <setvbuf+0xb0>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	464d      	mov	r5, r9
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	e7cf      	b.n	80089ae <setvbuf+0xea>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	e7b2      	b.n	8008978 <setvbuf+0xb4>
 8008a12:	46a9      	mov	r9, r5
 8008a14:	e7f5      	b.n	8008a02 <setvbuf+0x13e>
 8008a16:	60a2      	str	r2, [r4, #8]
 8008a18:	e7e6      	b.n	80089e8 <setvbuf+0x124>
 8008a1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1c:	f001 f8f8 	bl	8009c10 <__retarget_lock_release_recursive>
 8008a20:	e7e7      	b.n	80089f2 <setvbuf+0x12e>
 8008a22:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008a26:	e7bc      	b.n	80089a2 <setvbuf+0xde>
 8008a28:	20000188 	.word	0x20000188

08008a2c <siprintf>:
 8008a2c:	b40e      	push	{r1, r2, r3}
 8008a2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a32:	b500      	push	{lr}
 8008a34:	b09c      	sub	sp, #112	@ 0x70
 8008a36:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a38:	9002      	str	r0, [sp, #8]
 8008a3a:	9006      	str	r0, [sp, #24]
 8008a3c:	9107      	str	r1, [sp, #28]
 8008a3e:	9104      	str	r1, [sp, #16]
 8008a40:	4808      	ldr	r0, [pc, #32]	@ (8008a64 <siprintf+0x38>)
 8008a42:	4909      	ldr	r1, [pc, #36]	@ (8008a68 <siprintf+0x3c>)
 8008a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a48:	9105      	str	r1, [sp, #20]
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	a902      	add	r1, sp, #8
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	f002 fb32 	bl	800b0b8 <_svfiprintf_r>
 8008a54:	2200      	movs	r2, #0
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	b01c      	add	sp, #112	@ 0x70
 8008a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a60:	b003      	add	sp, #12
 8008a62:	4770      	bx	lr
 8008a64:	20000188 	.word	0x20000188
 8008a68:	ffff0208 	.word	0xffff0208

08008a6c <std>:
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	4604      	mov	r4, r0
 8008a72:	e9c0 3300 	strd	r3, r3, [r0]
 8008a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a7a:	6083      	str	r3, [r0, #8]
 8008a7c:	8181      	strh	r1, [r0, #12]
 8008a7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a80:	81c2      	strh	r2, [r0, #14]
 8008a82:	6183      	str	r3, [r0, #24]
 8008a84:	4619      	mov	r1, r3
 8008a86:	2208      	movs	r2, #8
 8008a88:	305c      	adds	r0, #92	@ 0x5c
 8008a8a:	f001 f811 	bl	8009ab0 <memset>
 8008a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac4 <std+0x58>)
 8008a90:	6224      	str	r4, [r4, #32]
 8008a92:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a94:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <std+0x5c>)
 8008a96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a98:	4b0c      	ldr	r3, [pc, #48]	@ (8008acc <std+0x60>)
 8008a9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad0 <std+0x64>)
 8008a9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <std+0x68>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d006      	beq.n	8008ab4 <std+0x48>
 8008aa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aaa:	4294      	cmp	r4, r2
 8008aac:	d002      	beq.n	8008ab4 <std+0x48>
 8008aae:	33d0      	adds	r3, #208	@ 0xd0
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	d105      	bne.n	8008ac0 <std+0x54>
 8008ab4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008abc:	f001 b8a6 	b.w	8009c0c <__retarget_lock_init_recursive>
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	bf00      	nop
 8008ac4:	0800c15d 	.word	0x0800c15d
 8008ac8:	0800c17f 	.word	0x0800c17f
 8008acc:	0800c1b7 	.word	0x0800c1b7
 8008ad0:	0800c1db 	.word	0x0800c1db
 8008ad4:	20002b58 	.word	0x20002b58

08008ad8 <stdio_exit_handler>:
 8008ad8:	4a02      	ldr	r2, [pc, #8]	@ (8008ae4 <stdio_exit_handler+0xc>)
 8008ada:	4903      	ldr	r1, [pc, #12]	@ (8008ae8 <stdio_exit_handler+0x10>)
 8008adc:	4803      	ldr	r0, [pc, #12]	@ (8008aec <stdio_exit_handler+0x14>)
 8008ade:	f000 bee5 	b.w	80098ac <_fwalk_sglue>
 8008ae2:	bf00      	nop
 8008ae4:	20000010 	.word	0x20000010
 8008ae8:	0800b7a9 	.word	0x0800b7a9
 8008aec:	2000018c 	.word	0x2000018c

08008af0 <cleanup_stdio>:
 8008af0:	6841      	ldr	r1, [r0, #4]
 8008af2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b24 <cleanup_stdio+0x34>)
 8008af4:	b510      	push	{r4, lr}
 8008af6:	4299      	cmp	r1, r3
 8008af8:	4604      	mov	r4, r0
 8008afa:	d001      	beq.n	8008b00 <cleanup_stdio+0x10>
 8008afc:	f002 fe54 	bl	800b7a8 <_fflush_r>
 8008b00:	68a1      	ldr	r1, [r4, #8]
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <cleanup_stdio+0x38>)
 8008b04:	4299      	cmp	r1, r3
 8008b06:	d002      	beq.n	8008b0e <cleanup_stdio+0x1e>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f002 fe4d 	bl	800b7a8 <_fflush_r>
 8008b0e:	68e1      	ldr	r1, [r4, #12]
 8008b10:	4b06      	ldr	r3, [pc, #24]	@ (8008b2c <cleanup_stdio+0x3c>)
 8008b12:	4299      	cmp	r1, r3
 8008b14:	d004      	beq.n	8008b20 <cleanup_stdio+0x30>
 8008b16:	4620      	mov	r0, r4
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1c:	f002 be44 	b.w	800b7a8 <_fflush_r>
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	20002b58 	.word	0x20002b58
 8008b28:	20002bc0 	.word	0x20002bc0
 8008b2c:	20002c28 	.word	0x20002c28

08008b30 <global_stdio_init.part.0>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4b0b      	ldr	r3, [pc, #44]	@ (8008b60 <global_stdio_init.part.0+0x30>)
 8008b34:	4c0b      	ldr	r4, [pc, #44]	@ (8008b64 <global_stdio_init.part.0+0x34>)
 8008b36:	4a0c      	ldr	r2, [pc, #48]	@ (8008b68 <global_stdio_init.part.0+0x38>)
 8008b38:	4620      	mov	r0, r4
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f7ff ff94 	bl	8008a6c <std>
 8008b44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b48:	2201      	movs	r2, #1
 8008b4a:	2109      	movs	r1, #9
 8008b4c:	f7ff ff8e 	bl	8008a6c <std>
 8008b50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b54:	2202      	movs	r2, #2
 8008b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b5a:	2112      	movs	r1, #18
 8008b5c:	f7ff bf86 	b.w	8008a6c <std>
 8008b60:	20002c90 	.word	0x20002c90
 8008b64:	20002b58 	.word	0x20002b58
 8008b68:	08008ad9 	.word	0x08008ad9

08008b6c <__sfp_lock_acquire>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	@ (8008b74 <__sfp_lock_acquire+0x8>)
 8008b6e:	f001 b84e 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 8008b72:	bf00      	nop
 8008b74:	20002c99 	.word	0x20002c99

08008b78 <__sfp_lock_release>:
 8008b78:	4801      	ldr	r0, [pc, #4]	@ (8008b80 <__sfp_lock_release+0x8>)
 8008b7a:	f001 b849 	b.w	8009c10 <__retarget_lock_release_recursive>
 8008b7e:	bf00      	nop
 8008b80:	20002c99 	.word	0x20002c99

08008b84 <__sinit>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	f7ff fff0 	bl	8008b6c <__sfp_lock_acquire>
 8008b8c:	6a23      	ldr	r3, [r4, #32]
 8008b8e:	b11b      	cbz	r3, 8008b98 <__sinit+0x14>
 8008b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b94:	f7ff bff0 	b.w	8008b78 <__sfp_lock_release>
 8008b98:	4b04      	ldr	r3, [pc, #16]	@ (8008bac <__sinit+0x28>)
 8008b9a:	6223      	str	r3, [r4, #32]
 8008b9c:	4b04      	ldr	r3, [pc, #16]	@ (8008bb0 <__sinit+0x2c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1f5      	bne.n	8008b90 <__sinit+0xc>
 8008ba4:	f7ff ffc4 	bl	8008b30 <global_stdio_init.part.0>
 8008ba8:	e7f2      	b.n	8008b90 <__sinit+0xc>
 8008baa:	bf00      	nop
 8008bac:	08008af1 	.word	0x08008af1
 8008bb0:	20002c90 	.word	0x20002c90

08008bb4 <sulp>:
 8008bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	460f      	mov	r7, r1
 8008bba:	4690      	mov	r8, r2
 8008bbc:	f003 f99a 	bl	800bef4 <__ulp>
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	f1b8 0f00 	cmp.w	r8, #0
 8008bc8:	d011      	beq.n	8008bee <sulp+0x3a>
 8008bca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008bce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dd0b      	ble.n	8008bee <sulp+0x3a>
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	051b      	lsls	r3, r3, #20
 8008bda:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008be2:	4622      	mov	r2, r4
 8008be4:	462b      	mov	r3, r5
 8008be6:	f7f7 fc77 	bl	80004d8 <__aeabi_dmul>
 8008bea:	4604      	mov	r4, r0
 8008bec:	460d      	mov	r5, r1
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008bf8 <_strtod_l>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	b09f      	sub	sp, #124	@ 0x7c
 8008bfe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c00:	2200      	movs	r2, #0
 8008c02:	460c      	mov	r4, r1
 8008c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c06:	f04f 0a00 	mov.w	sl, #0
 8008c0a:	f04f 0b00 	mov.w	fp, #0
 8008c0e:	460a      	mov	r2, r1
 8008c10:	9005      	str	r0, [sp, #20]
 8008c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c14:	7811      	ldrb	r1, [r2, #0]
 8008c16:	292b      	cmp	r1, #43	@ 0x2b
 8008c18:	d048      	beq.n	8008cac <_strtod_l+0xb4>
 8008c1a:	d836      	bhi.n	8008c8a <_strtod_l+0x92>
 8008c1c:	290d      	cmp	r1, #13
 8008c1e:	d830      	bhi.n	8008c82 <_strtod_l+0x8a>
 8008c20:	2908      	cmp	r1, #8
 8008c22:	d830      	bhi.n	8008c86 <_strtod_l+0x8e>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d039      	beq.n	8008c9c <_strtod_l+0xa4>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c2e:	782a      	ldrb	r2, [r5, #0]
 8008c30:	2a30      	cmp	r2, #48	@ 0x30
 8008c32:	f040 80b1 	bne.w	8008d98 <_strtod_l+0x1a0>
 8008c36:	786a      	ldrb	r2, [r5, #1]
 8008c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c3c:	2a58      	cmp	r2, #88	@ 0x58
 8008c3e:	d16c      	bne.n	8008d1a <_strtod_l+0x122>
 8008c40:	9302      	str	r3, [sp, #8]
 8008c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c44:	4a8e      	ldr	r2, [pc, #568]	@ (8008e80 <_strtod_l+0x288>)
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	9805      	ldr	r0, [sp, #20]
 8008c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c50:	a919      	add	r1, sp, #100	@ 0x64
 8008c52:	f001 ff05 	bl	800aa60 <__gethex>
 8008c56:	f010 060f 	ands.w	r6, r0, #15
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	d005      	beq.n	8008c6a <_strtod_l+0x72>
 8008c5e:	2e06      	cmp	r6, #6
 8008c60:	d126      	bne.n	8008cb0 <_strtod_l+0xb8>
 8008c62:	2300      	movs	r3, #0
 8008c64:	3501      	adds	r5, #1
 8008c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8584 	bne.w	800977a <_strtod_l+0xb82>
 8008c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c74:	b1bb      	cbz	r3, 8008ca6 <_strtod_l+0xae>
 8008c76:	4650      	mov	r0, sl
 8008c78:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008c7c:	b01f      	add	sp, #124	@ 0x7c
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	2920      	cmp	r1, #32
 8008c84:	d1d0      	bne.n	8008c28 <_strtod_l+0x30>
 8008c86:	3201      	adds	r2, #1
 8008c88:	e7c3      	b.n	8008c12 <_strtod_l+0x1a>
 8008c8a:	292d      	cmp	r1, #45	@ 0x2d
 8008c8c:	d1cc      	bne.n	8008c28 <_strtod_l+0x30>
 8008c8e:	2101      	movs	r1, #1
 8008c90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c92:	1c51      	adds	r1, r2, #1
 8008c94:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c96:	7852      	ldrb	r2, [r2, #1]
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d1c7      	bne.n	8008c2c <_strtod_l+0x34>
 8008c9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f040 8568 	bne.w	8009776 <_strtod_l+0xb7e>
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	4659      	mov	r1, fp
 8008caa:	e7e7      	b.n	8008c7c <_strtod_l+0x84>
 8008cac:	2100      	movs	r1, #0
 8008cae:	e7ef      	b.n	8008c90 <_strtod_l+0x98>
 8008cb0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cb2:	b13a      	cbz	r2, 8008cc4 <_strtod_l+0xcc>
 8008cb4:	2135      	movs	r1, #53	@ 0x35
 8008cb6:	a81c      	add	r0, sp, #112	@ 0x70
 8008cb8:	f003 fa0c 	bl	800c0d4 <__copybits>
 8008cbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	f002 fde6 	bl	800b890 <_Bfree>
 8008cc4:	3e01      	subs	r6, #1
 8008cc6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cc8:	2e04      	cmp	r6, #4
 8008cca:	d806      	bhi.n	8008cda <_strtod_l+0xe2>
 8008ccc:	e8df f006 	tbb	[pc, r6]
 8008cd0:	201d0314 	.word	0x201d0314
 8008cd4:	14          	.byte	0x14
 8008cd5:	00          	.byte	0x00
 8008cd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cda:	05e1      	lsls	r1, r4, #23
 8008cdc:	bf48      	it	mi
 8008cde:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ce6:	0d1b      	lsrs	r3, r3, #20
 8008ce8:	051b      	lsls	r3, r3, #20
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1bd      	bne.n	8008c6a <_strtod_l+0x72>
 8008cee:	f000 ff63 	bl	8009bb8 <__errno>
 8008cf2:	2322      	movs	r3, #34	@ 0x22
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	e7b8      	b.n	8008c6a <_strtod_l+0x72>
 8008cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d04:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d08:	e7e7      	b.n	8008cda <_strtod_l+0xe2>
 8008d0a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008e84 <_strtod_l+0x28c>
 8008d0e:	e7e4      	b.n	8008cda <_strtod_l+0xe2>
 8008d10:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d14:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008d18:	e7df      	b.n	8008cda <_strtod_l+0xe2>
 8008d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b30      	cmp	r3, #48	@ 0x30
 8008d24:	d0f9      	beq.n	8008d1a <_strtod_l+0x122>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d09f      	beq.n	8008c6a <_strtod_l+0x72>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d30:	220a      	movs	r2, #10
 8008d32:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d34:	2300      	movs	r3, #0
 8008d36:	461f      	mov	r7, r3
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d3e:	7805      	ldrb	r5, [r0, #0]
 8008d40:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d44:	b2d9      	uxtb	r1, r3
 8008d46:	2909      	cmp	r1, #9
 8008d48:	d928      	bls.n	8008d9c <_strtod_l+0x1a4>
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	494e      	ldr	r1, [pc, #312]	@ (8008e88 <_strtod_l+0x290>)
 8008d4e:	f000 fe9d 	bl	8009a8c <strncmp>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d032      	beq.n	8008dbc <_strtod_l+0x1c4>
 8008d56:	2000      	movs	r0, #0
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4681      	mov	r9, r0
 8008d5c:	463d      	mov	r5, r7
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2a65      	cmp	r2, #101	@ 0x65
 8008d62:	d001      	beq.n	8008d68 <_strtod_l+0x170>
 8008d64:	2a45      	cmp	r2, #69	@ 0x45
 8008d66:	d114      	bne.n	8008d92 <_strtod_l+0x19a>
 8008d68:	b91d      	cbnz	r5, 8008d72 <_strtod_l+0x17a>
 8008d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d6c:	4302      	orrs	r2, r0
 8008d6e:	d095      	beq.n	8008c9c <_strtod_l+0xa4>
 8008d70:	2500      	movs	r5, #0
 8008d72:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d74:	1c62      	adds	r2, r4, #1
 8008d76:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d78:	7862      	ldrb	r2, [r4, #1]
 8008d7a:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d7c:	d077      	beq.n	8008e6e <_strtod_l+0x276>
 8008d7e:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d80:	d07b      	beq.n	8008e7a <_strtod_l+0x282>
 8008d82:	f04f 0c00 	mov.w	ip, #0
 8008d86:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d8a:	2909      	cmp	r1, #9
 8008d8c:	f240 8082 	bls.w	8008e94 <_strtod_l+0x29c>
 8008d90:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	e0a2      	b.n	8008ede <_strtod_l+0x2e6>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e7c7      	b.n	8008d2c <_strtod_l+0x134>
 8008d9c:	2f08      	cmp	r7, #8
 8008d9e:	bfd5      	itete	le
 8008da0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008da2:	9908      	ldrgt	r1, [sp, #32]
 8008da4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008da8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008dac:	f100 0001 	add.w	r0, r0, #1
 8008db0:	bfd4      	ite	le
 8008db2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008db4:	9308      	strgt	r3, [sp, #32]
 8008db6:	3701      	adds	r7, #1
 8008db8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dba:	e7bf      	b.n	8008d3c <_strtod_l+0x144>
 8008dbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dc2:	785a      	ldrb	r2, [r3, #1]
 8008dc4:	b37f      	cbz	r7, 8008e26 <_strtod_l+0x22e>
 8008dc6:	4681      	mov	r9, r0
 8008dc8:	463d      	mov	r5, r7
 8008dca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d912      	bls.n	8008df8 <_strtod_l+0x200>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e7c4      	b.n	8008d60 <_strtod_l+0x168>
 8008dd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dd8:	3001      	adds	r0, #1
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dde:	785a      	ldrb	r2, [r3, #1]
 8008de0:	2a30      	cmp	r2, #48	@ 0x30
 8008de2:	d0f8      	beq.n	8008dd6 <_strtod_l+0x1de>
 8008de4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	f200 84cb 	bhi.w	8009784 <_strtod_l+0xb8c>
 8008dee:	4681      	mov	r9, r0
 8008df0:	2000      	movs	r0, #0
 8008df2:	4605      	mov	r5, r0
 8008df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df6:	930c      	str	r3, [sp, #48]	@ 0x30
 8008df8:	3a30      	subs	r2, #48	@ 0x30
 8008dfa:	f100 0301 	add.w	r3, r0, #1
 8008dfe:	d02a      	beq.n	8008e56 <_strtod_l+0x25e>
 8008e00:	4499      	add	r9, r3
 8008e02:	210a      	movs	r1, #10
 8008e04:	462b      	mov	r3, r5
 8008e06:	eb00 0c05 	add.w	ip, r0, r5
 8008e0a:	4563      	cmp	r3, ip
 8008e0c:	d10d      	bne.n	8008e2a <_strtod_l+0x232>
 8008e0e:	1c69      	adds	r1, r5, #1
 8008e10:	4401      	add	r1, r0
 8008e12:	4428      	add	r0, r5
 8008e14:	2808      	cmp	r0, #8
 8008e16:	dc16      	bgt.n	8008e46 <_strtod_l+0x24e>
 8008e18:	230a      	movs	r3, #10
 8008e1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e1c:	fb03 2300 	mla	r3, r3, r0, r2
 8008e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e22:	2300      	movs	r3, #0
 8008e24:	e018      	b.n	8008e58 <_strtod_l+0x260>
 8008e26:	4638      	mov	r0, r7
 8008e28:	e7da      	b.n	8008de0 <_strtod_l+0x1e8>
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	f103 0301 	add.w	r3, r3, #1
 8008e30:	dc03      	bgt.n	8008e3a <_strtod_l+0x242>
 8008e32:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e34:	434e      	muls	r6, r1
 8008e36:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e38:	e7e7      	b.n	8008e0a <_strtod_l+0x212>
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	bfde      	ittt	le
 8008e3e:	9e08      	ldrle	r6, [sp, #32]
 8008e40:	434e      	mulle	r6, r1
 8008e42:	9608      	strle	r6, [sp, #32]
 8008e44:	e7e1      	b.n	8008e0a <_strtod_l+0x212>
 8008e46:	280f      	cmp	r0, #15
 8008e48:	dceb      	bgt.n	8008e22 <_strtod_l+0x22a>
 8008e4a:	230a      	movs	r3, #10
 8008e4c:	9808      	ldr	r0, [sp, #32]
 8008e4e:	fb03 2300 	mla	r3, r3, r0, r2
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	e7e5      	b.n	8008e22 <_strtod_l+0x22a>
 8008e56:	4629      	mov	r1, r5
 8008e58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	1c50      	adds	r0, r2, #1
 8008e5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e60:	7852      	ldrb	r2, [r2, #1]
 8008e62:	4618      	mov	r0, r3
 8008e64:	e7b1      	b.n	8008dca <_strtod_l+0x1d2>
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e77d      	b.n	8008d6a <_strtod_l+0x172>
 8008e6e:	f04f 0c00 	mov.w	ip, #0
 8008e72:	1ca2      	adds	r2, r4, #2
 8008e74:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e76:	78a2      	ldrb	r2, [r4, #2]
 8008e78:	e785      	b.n	8008d86 <_strtod_l+0x18e>
 8008e7a:	f04f 0c01 	mov.w	ip, #1
 8008e7e:	e7f8      	b.n	8008e72 <_strtod_l+0x27a>
 8008e80:	0800e14c 	.word	0x0800e14c
 8008e84:	7ff00000 	.word	0x7ff00000
 8008e88:	0800e133 	.word	0x0800e133
 8008e8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e8e:	1c51      	adds	r1, r2, #1
 8008e90:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e92:	7852      	ldrb	r2, [r2, #1]
 8008e94:	2a30      	cmp	r2, #48	@ 0x30
 8008e96:	d0f9      	beq.n	8008e8c <_strtod_l+0x294>
 8008e98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e9c:	2908      	cmp	r1, #8
 8008e9e:	f63f af78 	bhi.w	8008d92 <_strtod_l+0x19a>
 8008ea2:	f04f 080a 	mov.w	r8, #10
 8008ea6:	3a30      	subs	r2, #48	@ 0x30
 8008ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb0:	1c56      	adds	r6, r2, #1
 8008eb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008eb4:	7852      	ldrb	r2, [r2, #1]
 8008eb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008eba:	f1be 0f09 	cmp.w	lr, #9
 8008ebe:	d939      	bls.n	8008f34 <_strtod_l+0x33c>
 8008ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ec6:	1a76      	subs	r6, r6, r1
 8008ec8:	2e08      	cmp	r6, #8
 8008eca:	dc03      	bgt.n	8008ed4 <_strtod_l+0x2dc>
 8008ecc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ece:	4588      	cmp	r8, r1
 8008ed0:	bfa8      	it	ge
 8008ed2:	4688      	movge	r8, r1
 8008ed4:	f1bc 0f00 	cmp.w	ip, #0
 8008ed8:	d001      	beq.n	8008ede <_strtod_l+0x2e6>
 8008eda:	f1c8 0800 	rsb	r8, r8, #0
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	d14e      	bne.n	8008f80 <_strtod_l+0x388>
 8008ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee4:	4308      	orrs	r0, r1
 8008ee6:	f47f aec0 	bne.w	8008c6a <_strtod_l+0x72>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f47f aed6 	bne.w	8008c9c <_strtod_l+0xa4>
 8008ef0:	2a69      	cmp	r2, #105	@ 0x69
 8008ef2:	d028      	beq.n	8008f46 <_strtod_l+0x34e>
 8008ef4:	dc25      	bgt.n	8008f42 <_strtod_l+0x34a>
 8008ef6:	2a49      	cmp	r2, #73	@ 0x49
 8008ef8:	d025      	beq.n	8008f46 <_strtod_l+0x34e>
 8008efa:	2a4e      	cmp	r2, #78	@ 0x4e
 8008efc:	f47f aece 	bne.w	8008c9c <_strtod_l+0xa4>
 8008f00:	499a      	ldr	r1, [pc, #616]	@ (800916c <_strtod_l+0x574>)
 8008f02:	a819      	add	r0, sp, #100	@ 0x64
 8008f04:	f001 ffce 	bl	800aea4 <__match>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	f43f aec7 	beq.w	8008c9c <_strtod_l+0xa4>
 8008f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b28      	cmp	r3, #40	@ 0x28
 8008f14:	d12e      	bne.n	8008f74 <_strtod_l+0x37c>
 8008f16:	4996      	ldr	r1, [pc, #600]	@ (8009170 <_strtod_l+0x578>)
 8008f18:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f1a:	a819      	add	r0, sp, #100	@ 0x64
 8008f1c:	f001 ffd6 	bl	800aecc <__hexnan>
 8008f20:	2805      	cmp	r0, #5
 8008f22:	d127      	bne.n	8008f74 <_strtod_l+0x37c>
 8008f24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f32:	e69a      	b.n	8008c6a <_strtod_l+0x72>
 8008f34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f36:	fb08 2101 	mla	r1, r8, r1, r2
 8008f3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f40:	e7b5      	b.n	8008eae <_strtod_l+0x2b6>
 8008f42:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f44:	e7da      	b.n	8008efc <_strtod_l+0x304>
 8008f46:	498b      	ldr	r1, [pc, #556]	@ (8009174 <_strtod_l+0x57c>)
 8008f48:	a819      	add	r0, sp, #100	@ 0x64
 8008f4a:	f001 ffab 	bl	800aea4 <__match>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f aea4 	beq.w	8008c9c <_strtod_l+0xa4>
 8008f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f56:	4988      	ldr	r1, [pc, #544]	@ (8009178 <_strtod_l+0x580>)
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	a819      	add	r0, sp, #100	@ 0x64
 8008f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f5e:	f001 ffa1 	bl	800aea4 <__match>
 8008f62:	b910      	cbnz	r0, 8008f6a <_strtod_l+0x372>
 8008f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f66:	3301      	adds	r3, #1
 8008f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f6a:	f04f 0a00 	mov.w	sl, #0
 8008f6e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800917c <_strtod_l+0x584>
 8008f72:	e67a      	b.n	8008c6a <_strtod_l+0x72>
 8008f74:	4882      	ldr	r0, [pc, #520]	@ (8009180 <_strtod_l+0x588>)
 8008f76:	f000 fe69 	bl	8009c4c <nan>
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	e674      	b.n	8008c6a <_strtod_l+0x72>
 8008f80:	eba8 0309 	sub.w	r3, r8, r9
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	bf08      	it	eq
 8008f88:	462f      	moveq	r7, r5
 8008f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f8c:	2d10      	cmp	r5, #16
 8008f8e:	462c      	mov	r4, r5
 8008f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f92:	bfa8      	it	ge
 8008f94:	2410      	movge	r4, #16
 8008f96:	f7f7 fa25 	bl	80003e4 <__aeabi_ui2d>
 8008f9a:	2d09      	cmp	r5, #9
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	468b      	mov	fp, r1
 8008fa0:	dc11      	bgt.n	8008fc6 <_strtod_l+0x3ce>
 8008fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f43f ae60 	beq.w	8008c6a <_strtod_l+0x72>
 8008faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fac:	dd76      	ble.n	800909c <_strtod_l+0x4a4>
 8008fae:	2b16      	cmp	r3, #22
 8008fb0:	dc5d      	bgt.n	800906e <_strtod_l+0x476>
 8008fb2:	4974      	ldr	r1, [pc, #464]	@ (8009184 <_strtod_l+0x58c>)
 8008fb4:	4652      	mov	r2, sl
 8008fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fba:	465b      	mov	r3, fp
 8008fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc0:	f7f7 fa8a 	bl	80004d8 <__aeabi_dmul>
 8008fc4:	e7d9      	b.n	8008f7a <_strtod_l+0x382>
 8008fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8009184 <_strtod_l+0x58c>)
 8008fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fd0:	f7f7 fa82 	bl	80004d8 <__aeabi_dmul>
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	9808      	ldr	r0, [sp, #32]
 8008fd8:	468b      	mov	fp, r1
 8008fda:	f7f7 fa03 	bl	80003e4 <__aeabi_ui2d>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	f7f7 f8c1 	bl	800016c <__adddf3>
 8008fea:	2d0f      	cmp	r5, #15
 8008fec:	4682      	mov	sl, r0
 8008fee:	468b      	mov	fp, r1
 8008ff0:	ddd7      	ble.n	8008fa2 <_strtod_l+0x3aa>
 8008ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff4:	1b2c      	subs	r4, r5, r4
 8008ff6:	441c      	add	r4, r3
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	f340 8096 	ble.w	800912a <_strtod_l+0x532>
 8008ffe:	f014 030f 	ands.w	r3, r4, #15
 8009002:	d00a      	beq.n	800901a <_strtod_l+0x422>
 8009004:	495f      	ldr	r1, [pc, #380]	@ (8009184 <_strtod_l+0x58c>)
 8009006:	4652      	mov	r2, sl
 8009008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800900c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009010:	465b      	mov	r3, fp
 8009012:	f7f7 fa61 	bl	80004d8 <__aeabi_dmul>
 8009016:	4682      	mov	sl, r0
 8009018:	468b      	mov	fp, r1
 800901a:	f034 040f 	bics.w	r4, r4, #15
 800901e:	d073      	beq.n	8009108 <_strtod_l+0x510>
 8009020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009024:	dd48      	ble.n	80090b8 <_strtod_l+0x4c0>
 8009026:	2400      	movs	r4, #0
 8009028:	46a0      	mov	r8, r4
 800902a:	46a1      	mov	r9, r4
 800902c:	940a      	str	r4, [sp, #40]	@ 0x28
 800902e:	2322      	movs	r3, #34	@ 0x22
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	9a05      	ldr	r2, [sp, #20]
 8009036:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800917c <_strtod_l+0x584>
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	f43f ae13 	beq.w	8008c6a <_strtod_l+0x72>
 8009044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f002 fc22 	bl	800b890 <_Bfree>
 800904c:	4649      	mov	r1, r9
 800904e:	9805      	ldr	r0, [sp, #20]
 8009050:	f002 fc1e 	bl	800b890 <_Bfree>
 8009054:	4641      	mov	r1, r8
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f002 fc1a 	bl	800b890 <_Bfree>
 800905c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800905e:	9805      	ldr	r0, [sp, #20]
 8009060:	f002 fc16 	bl	800b890 <_Bfree>
 8009064:	4621      	mov	r1, r4
 8009066:	9805      	ldr	r0, [sp, #20]
 8009068:	f002 fc12 	bl	800b890 <_Bfree>
 800906c:	e5fd      	b.n	8008c6a <_strtod_l+0x72>
 800906e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009074:	4293      	cmp	r3, r2
 8009076:	dbbc      	blt.n	8008ff2 <_strtod_l+0x3fa>
 8009078:	4c42      	ldr	r4, [pc, #264]	@ (8009184 <_strtod_l+0x58c>)
 800907a:	f1c5 050f 	rsb	r5, r5, #15
 800907e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009082:	4652      	mov	r2, sl
 8009084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009088:	465b      	mov	r3, fp
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009090:	1b5d      	subs	r5, r3, r5
 8009092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800909a:	e791      	b.n	8008fc0 <_strtod_l+0x3c8>
 800909c:	3316      	adds	r3, #22
 800909e:	dba8      	blt.n	8008ff2 <_strtod_l+0x3fa>
 80090a0:	4b38      	ldr	r3, [pc, #224]	@ (8009184 <_strtod_l+0x58c>)
 80090a2:	eba9 0808 	sub.w	r8, r9, r8
 80090a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090aa:	4650      	mov	r0, sl
 80090ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090b0:	4659      	mov	r1, fp
 80090b2:	f7f7 fb3b 	bl	800072c <__aeabi_ddiv>
 80090b6:	e760      	b.n	8008f7a <_strtod_l+0x382>
 80090b8:	4b33      	ldr	r3, [pc, #204]	@ (8009188 <_strtod_l+0x590>)
 80090ba:	4650      	mov	r0, sl
 80090bc:	9308      	str	r3, [sp, #32]
 80090be:	2300      	movs	r3, #0
 80090c0:	4659      	mov	r1, fp
 80090c2:	461e      	mov	r6, r3
 80090c4:	1124      	asrs	r4, r4, #4
 80090c6:	2c01      	cmp	r4, #1
 80090c8:	dc21      	bgt.n	800910e <_strtod_l+0x516>
 80090ca:	b10b      	cbz	r3, 80090d0 <_strtod_l+0x4d8>
 80090cc:	4682      	mov	sl, r0
 80090ce:	468b      	mov	fp, r1
 80090d0:	492d      	ldr	r1, [pc, #180]	@ (8009188 <_strtod_l+0x590>)
 80090d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090da:	4652      	mov	r2, sl
 80090dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e0:	465b      	mov	r3, fp
 80090e2:	f7f7 f9f9 	bl	80004d8 <__aeabi_dmul>
 80090e6:	4b25      	ldr	r3, [pc, #148]	@ (800917c <_strtod_l+0x584>)
 80090e8:	460a      	mov	r2, r1
 80090ea:	400b      	ands	r3, r1
 80090ec:	4927      	ldr	r1, [pc, #156]	@ (800918c <_strtod_l+0x594>)
 80090ee:	4682      	mov	sl, r0
 80090f0:	428b      	cmp	r3, r1
 80090f2:	d898      	bhi.n	8009026 <_strtod_l+0x42e>
 80090f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090f8:	428b      	cmp	r3, r1
 80090fa:	bf86      	itte	hi
 80090fc:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009100:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009190 <_strtod_l+0x598>
 8009104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009108:	2300      	movs	r3, #0
 800910a:	9308      	str	r3, [sp, #32]
 800910c:	e07a      	b.n	8009204 <_strtod_l+0x60c>
 800910e:	07e2      	lsls	r2, r4, #31
 8009110:	d505      	bpl.n	800911e <_strtod_l+0x526>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f9de 	bl	80004d8 <__aeabi_dmul>
 800911c:	2301      	movs	r3, #1
 800911e:	9a08      	ldr	r2, [sp, #32]
 8009120:	3601      	adds	r6, #1
 8009122:	3208      	adds	r2, #8
 8009124:	1064      	asrs	r4, r4, #1
 8009126:	9208      	str	r2, [sp, #32]
 8009128:	e7cd      	b.n	80090c6 <_strtod_l+0x4ce>
 800912a:	d0ed      	beq.n	8009108 <_strtod_l+0x510>
 800912c:	4264      	negs	r4, r4
 800912e:	f014 020f 	ands.w	r2, r4, #15
 8009132:	d00a      	beq.n	800914a <_strtod_l+0x552>
 8009134:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <_strtod_l+0x58c>)
 8009136:	4650      	mov	r0, sl
 8009138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800913c:	4659      	mov	r1, fp
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 faf3 	bl	800072c <__aeabi_ddiv>
 8009146:	4682      	mov	sl, r0
 8009148:	468b      	mov	fp, r1
 800914a:	1124      	asrs	r4, r4, #4
 800914c:	d0dc      	beq.n	8009108 <_strtod_l+0x510>
 800914e:	2c1f      	cmp	r4, #31
 8009150:	dd20      	ble.n	8009194 <_strtod_l+0x59c>
 8009152:	2400      	movs	r4, #0
 8009154:	46a0      	mov	r8, r4
 8009156:	46a1      	mov	r9, r4
 8009158:	940a      	str	r4, [sp, #40]	@ 0x28
 800915a:	2322      	movs	r3, #34	@ 0x22
 800915c:	9a05      	ldr	r2, [sp, #20]
 800915e:	f04f 0a00 	mov.w	sl, #0
 8009162:	f04f 0b00 	mov.w	fp, #0
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	e768      	b.n	800903c <_strtod_l+0x444>
 800916a:	bf00      	nop
 800916c:	0800e107 	.word	0x0800e107
 8009170:	0800e138 	.word	0x0800e138
 8009174:	0800e0ff 	.word	0x0800e0ff
 8009178:	0800e294 	.word	0x0800e294
 800917c:	7ff00000 	.word	0x7ff00000
 8009180:	0800e523 	.word	0x0800e523
 8009184:	0800e420 	.word	0x0800e420
 8009188:	0800e3f8 	.word	0x0800e3f8
 800918c:	7ca00000 	.word	0x7ca00000
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	f014 0310 	ands.w	r3, r4, #16
 8009198:	bf18      	it	ne
 800919a:	236a      	movne	r3, #106	@ 0x6a
 800919c:	4650      	mov	r0, sl
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	4659      	mov	r1, fp
 80091a2:	2300      	movs	r3, #0
 80091a4:	4ea9      	ldr	r6, [pc, #676]	@ (800944c <_strtod_l+0x854>)
 80091a6:	07e2      	lsls	r2, r4, #31
 80091a8:	d504      	bpl.n	80091b4 <_strtod_l+0x5bc>
 80091aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091ae:	f7f7 f993 	bl	80004d8 <__aeabi_dmul>
 80091b2:	2301      	movs	r3, #1
 80091b4:	1064      	asrs	r4, r4, #1
 80091b6:	f106 0608 	add.w	r6, r6, #8
 80091ba:	d1f4      	bne.n	80091a6 <_strtod_l+0x5ae>
 80091bc:	b10b      	cbz	r3, 80091c2 <_strtod_l+0x5ca>
 80091be:	4682      	mov	sl, r0
 80091c0:	468b      	mov	fp, r1
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	b1b3      	cbz	r3, 80091f4 <_strtod_l+0x5fc>
 80091c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	4659      	mov	r1, fp
 80091d2:	dd0f      	ble.n	80091f4 <_strtod_l+0x5fc>
 80091d4:	2b1f      	cmp	r3, #31
 80091d6:	dd57      	ble.n	8009288 <_strtod_l+0x690>
 80091d8:	2b34      	cmp	r3, #52	@ 0x34
 80091da:	bfd8      	it	le
 80091dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80091e0:	f04f 0a00 	mov.w	sl, #0
 80091e4:	bfcf      	iteee	gt
 80091e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091ee:	4093      	lslle	r3, r2
 80091f0:	ea03 0b01 	andle.w	fp, r3, r1
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	4650      	mov	r0, sl
 80091fa:	4659      	mov	r1, fp
 80091fc:	f7f7 fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8009200:	2800      	cmp	r0, #0
 8009202:	d1a6      	bne.n	8009152 <_strtod_l+0x55a>
 8009204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009206:	463a      	mov	r2, r7
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800920c:	462b      	mov	r3, r5
 800920e:	9805      	ldr	r0, [sp, #20]
 8009210:	f002 fba6 	bl	800b960 <__s2b>
 8009214:	900a      	str	r0, [sp, #40]	@ 0x28
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f af05 	beq.w	8009026 <_strtod_l+0x42e>
 800921c:	2400      	movs	r4, #0
 800921e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009220:	eba9 0308 	sub.w	r3, r9, r8
 8009224:	2a00      	cmp	r2, #0
 8009226:	bfa8      	it	ge
 8009228:	2300      	movge	r3, #0
 800922a:	46a0      	mov	r8, r4
 800922c:	9312      	str	r3, [sp, #72]	@ 0x48
 800922e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009232:	9316      	str	r3, [sp, #88]	@ 0x58
 8009234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	6859      	ldr	r1, [r3, #4]
 800923a:	f002 fae9 	bl	800b810 <_Balloc>
 800923e:	4681      	mov	r9, r0
 8009240:	2800      	cmp	r0, #0
 8009242:	f43f aef4 	beq.w	800902e <_strtod_l+0x436>
 8009246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009248:	300c      	adds	r0, #12
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	f103 010c 	add.w	r1, r3, #12
 8009250:	3202      	adds	r2, #2
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	f000 fceb 	bl	8009c2e <memcpy>
 8009258:	ab1c      	add	r3, sp, #112	@ 0x70
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4652      	mov	r2, sl
 8009262:	465b      	mov	r3, fp
 8009264:	9805      	ldr	r0, [sp, #20]
 8009266:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800926a:	f002 feab 	bl	800bfc4 <__d2b>
 800926e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009270:	2800      	cmp	r0, #0
 8009272:	f43f aedc 	beq.w	800902e <_strtod_l+0x436>
 8009276:	2101      	movs	r1, #1
 8009278:	9805      	ldr	r0, [sp, #20]
 800927a:	f002 fc07 	bl	800ba8c <__i2b>
 800927e:	4680      	mov	r8, r0
 8009280:	b948      	cbnz	r0, 8009296 <_strtod_l+0x69e>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	e6d2      	b.n	800902e <_strtod_l+0x436>
 8009288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	ea03 0a0a 	and.w	sl, r3, sl
 8009294:	e7ae      	b.n	80091f4 <_strtod_l+0x5fc>
 8009296:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009298:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800929a:	2d00      	cmp	r5, #0
 800929c:	bfab      	itete	ge
 800929e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80092a0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092a2:	18ef      	addge	r7, r5, r3
 80092a4:	1b5e      	sublt	r6, r3, r5
 80092a6:	9b08      	ldr	r3, [sp, #32]
 80092a8:	bfa8      	it	ge
 80092aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092ac:	eba5 0503 	sub.w	r5, r5, r3
 80092b0:	4415      	add	r5, r2
 80092b2:	4b67      	ldr	r3, [pc, #412]	@ (8009450 <_strtod_l+0x858>)
 80092b4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80092b8:	bfb8      	it	lt
 80092ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092bc:	429d      	cmp	r5, r3
 80092be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092c2:	da50      	bge.n	8009366 <_strtod_l+0x76e>
 80092c4:	1b5b      	subs	r3, r3, r5
 80092c6:	2b1f      	cmp	r3, #31
 80092c8:	f04f 0101 	mov.w	r1, #1
 80092cc:	eba2 0203 	sub.w	r2, r2, r3
 80092d0:	dc3d      	bgt.n	800934e <_strtod_l+0x756>
 80092d2:	fa01 f303 	lsl.w	r3, r1, r3
 80092d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092d8:	2300      	movs	r3, #0
 80092da:	9310      	str	r3, [sp, #64]	@ 0x40
 80092dc:	18bd      	adds	r5, r7, r2
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	42af      	cmp	r7, r5
 80092e2:	4416      	add	r6, r2
 80092e4:	441e      	add	r6, r3
 80092e6:	463b      	mov	r3, r7
 80092e8:	bfa8      	it	ge
 80092ea:	462b      	movge	r3, r5
 80092ec:	42b3      	cmp	r3, r6
 80092ee:	bfa8      	it	ge
 80092f0:	4633      	movge	r3, r6
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfc2      	ittt	gt
 80092f6:	1aed      	subgt	r5, r5, r3
 80092f8:	1af6      	subgt	r6, r6, r3
 80092fa:	1aff      	subgt	r7, r7, r3
 80092fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd16      	ble.n	8009330 <_strtod_l+0x738>
 8009302:	4641      	mov	r1, r8
 8009304:	461a      	mov	r2, r3
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	f002 fc7e 	bl	800bc08 <__pow5mult>
 800930c:	4680      	mov	r8, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d0b7      	beq.n	8009282 <_strtod_l+0x68a>
 8009312:	4601      	mov	r1, r0
 8009314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f002 fbce 	bl	800bab8 <__multiply>
 800931c:	900e      	str	r0, [sp, #56]	@ 0x38
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f ae85 	beq.w	800902e <_strtod_l+0x436>
 8009324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009326:	9805      	ldr	r0, [sp, #20]
 8009328:	f002 fab2 	bl	800b890 <_Bfree>
 800932c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800932e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009330:	2d00      	cmp	r5, #0
 8009332:	dc1d      	bgt.n	8009370 <_strtod_l+0x778>
 8009334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	dd23      	ble.n	8009382 <_strtod_l+0x78a>
 800933a:	4649      	mov	r1, r9
 800933c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800933e:	9805      	ldr	r0, [sp, #20]
 8009340:	f002 fc62 	bl	800bc08 <__pow5mult>
 8009344:	4681      	mov	r9, r0
 8009346:	b9e0      	cbnz	r0, 8009382 <_strtod_l+0x78a>
 8009348:	f04f 0900 	mov.w	r9, #0
 800934c:	e66f      	b.n	800902e <_strtod_l+0x436>
 800934e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009352:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009356:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800935a:	35e2      	adds	r5, #226	@ 0xe2
 800935c:	fa01 f305 	lsl.w	r3, r1, r5
 8009360:	9310      	str	r3, [sp, #64]	@ 0x40
 8009362:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009364:	e7ba      	b.n	80092dc <_strtod_l+0x6e4>
 8009366:	2300      	movs	r3, #0
 8009368:	9310      	str	r3, [sp, #64]	@ 0x40
 800936a:	2301      	movs	r3, #1
 800936c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800936e:	e7b5      	b.n	80092dc <_strtod_l+0x6e4>
 8009370:	462a      	mov	r2, r5
 8009372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	f002 fca1 	bl	800bcbc <__lshift>
 800937a:	901a      	str	r0, [sp, #104]	@ 0x68
 800937c:	2800      	cmp	r0, #0
 800937e:	d1d9      	bne.n	8009334 <_strtod_l+0x73c>
 8009380:	e655      	b.n	800902e <_strtod_l+0x436>
 8009382:	2e00      	cmp	r6, #0
 8009384:	dd07      	ble.n	8009396 <_strtod_l+0x79e>
 8009386:	4649      	mov	r1, r9
 8009388:	4632      	mov	r2, r6
 800938a:	9805      	ldr	r0, [sp, #20]
 800938c:	f002 fc96 	bl	800bcbc <__lshift>
 8009390:	4681      	mov	r9, r0
 8009392:	2800      	cmp	r0, #0
 8009394:	d0d8      	beq.n	8009348 <_strtod_l+0x750>
 8009396:	2f00      	cmp	r7, #0
 8009398:	dd08      	ble.n	80093ac <_strtod_l+0x7b4>
 800939a:	4641      	mov	r1, r8
 800939c:	463a      	mov	r2, r7
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	f002 fc8c 	bl	800bcbc <__lshift>
 80093a4:	4680      	mov	r8, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f ae41 	beq.w	800902e <_strtod_l+0x436>
 80093ac:	464a      	mov	r2, r9
 80093ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093b0:	9805      	ldr	r0, [sp, #20]
 80093b2:	f002 fd0b 	bl	800bdcc <__mdiff>
 80093b6:	4604      	mov	r4, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f43f ae38 	beq.w	800902e <_strtod_l+0x436>
 80093be:	68c3      	ldr	r3, [r0, #12]
 80093c0:	4641      	mov	r1, r8
 80093c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093c4:	2300      	movs	r3, #0
 80093c6:	60c3      	str	r3, [r0, #12]
 80093c8:	f002 fce4 	bl	800bd94 <__mcmp>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	da45      	bge.n	800945c <_strtod_l+0x864>
 80093d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093d2:	ea53 030a 	orrs.w	r3, r3, sl
 80093d6:	d16b      	bne.n	80094b0 <_strtod_l+0x8b8>
 80093d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d167      	bne.n	80094b0 <_strtod_l+0x8b8>
 80093e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093e4:	0d1b      	lsrs	r3, r3, #20
 80093e6:	051b      	lsls	r3, r3, #20
 80093e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093ec:	d960      	bls.n	80094b0 <_strtod_l+0x8b8>
 80093ee:	6963      	ldr	r3, [r4, #20]
 80093f0:	b913      	cbnz	r3, 80093f8 <_strtod_l+0x800>
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	dd5b      	ble.n	80094b0 <_strtod_l+0x8b8>
 80093f8:	4621      	mov	r1, r4
 80093fa:	2201      	movs	r2, #1
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	f002 fc5d 	bl	800bcbc <__lshift>
 8009402:	4641      	mov	r1, r8
 8009404:	4604      	mov	r4, r0
 8009406:	f002 fcc5 	bl	800bd94 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	dd50      	ble.n	80094b0 <_strtod_l+0x8b8>
 800940e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009412:	9a08      	ldr	r2, [sp, #32]
 8009414:	0d1b      	lsrs	r3, r3, #20
 8009416:	051b      	lsls	r3, r3, #20
 8009418:	2a00      	cmp	r2, #0
 800941a:	d06a      	beq.n	80094f2 <_strtod_l+0x8fa>
 800941c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009420:	d867      	bhi.n	80094f2 <_strtod_l+0x8fa>
 8009422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009426:	f67f ae98 	bls.w	800915a <_strtod_l+0x562>
 800942a:	4650      	mov	r0, sl
 800942c:	4659      	mov	r1, fp
 800942e:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <_strtod_l+0x85c>)
 8009430:	2200      	movs	r2, #0
 8009432:	f7f7 f851 	bl	80004d8 <__aeabi_dmul>
 8009436:	4b08      	ldr	r3, [pc, #32]	@ (8009458 <_strtod_l+0x860>)
 8009438:	4682      	mov	sl, r0
 800943a:	400b      	ands	r3, r1
 800943c:	468b      	mov	fp, r1
 800943e:	2b00      	cmp	r3, #0
 8009440:	f47f ae00 	bne.w	8009044 <_strtod_l+0x44c>
 8009444:	2322      	movs	r3, #34	@ 0x22
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	e5fb      	b.n	8009044 <_strtod_l+0x44c>
 800944c:	0800e160 	.word	0x0800e160
 8009450:	fffffc02 	.word	0xfffffc02
 8009454:	39500000 	.word	0x39500000
 8009458:	7ff00000 	.word	0x7ff00000
 800945c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009460:	d165      	bne.n	800952e <_strtod_l+0x936>
 8009462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009468:	b35a      	cbz	r2, 80094c2 <_strtod_l+0x8ca>
 800946a:	4a99      	ldr	r2, [pc, #612]	@ (80096d0 <_strtod_l+0xad8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d12b      	bne.n	80094c8 <_strtod_l+0x8d0>
 8009470:	9b08      	ldr	r3, [sp, #32]
 8009472:	4651      	mov	r1, sl
 8009474:	b303      	cbz	r3, 80094b8 <_strtod_l+0x8c0>
 8009476:	465a      	mov	r2, fp
 8009478:	4b96      	ldr	r3, [pc, #600]	@ (80096d4 <_strtod_l+0xadc>)
 800947a:	4013      	ands	r3, r2
 800947c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009484:	d81b      	bhi.n	80094be <_strtod_l+0x8c6>
 8009486:	0d1b      	lsrs	r3, r3, #20
 8009488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800948c:	fa02 f303 	lsl.w	r3, r2, r3
 8009490:	4299      	cmp	r1, r3
 8009492:	d119      	bne.n	80094c8 <_strtod_l+0x8d0>
 8009494:	4b90      	ldr	r3, [pc, #576]	@ (80096d8 <_strtod_l+0xae0>)
 8009496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009498:	429a      	cmp	r2, r3
 800949a:	d102      	bne.n	80094a2 <_strtod_l+0x8aa>
 800949c:	3101      	adds	r1, #1
 800949e:	f43f adc6 	beq.w	800902e <_strtod_l+0x436>
 80094a2:	f04f 0a00 	mov.w	sl, #0
 80094a6:	4b8b      	ldr	r3, [pc, #556]	@ (80096d4 <_strtod_l+0xadc>)
 80094a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094aa:	401a      	ands	r2, r3
 80094ac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094b0:	9b08      	ldr	r3, [sp, #32]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1b9      	bne.n	800942a <_strtod_l+0x832>
 80094b6:	e5c5      	b.n	8009044 <_strtod_l+0x44c>
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094bc:	e7e8      	b.n	8009490 <_strtod_l+0x898>
 80094be:	4613      	mov	r3, r2
 80094c0:	e7e6      	b.n	8009490 <_strtod_l+0x898>
 80094c2:	ea53 030a 	orrs.w	r3, r3, sl
 80094c6:	d0a2      	beq.n	800940e <_strtod_l+0x816>
 80094c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ca:	b1db      	cbz	r3, 8009504 <_strtod_l+0x90c>
 80094cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094ce:	4213      	tst	r3, r2
 80094d0:	d0ee      	beq.n	80094b0 <_strtod_l+0x8b8>
 80094d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d4:	4650      	mov	r0, sl
 80094d6:	4659      	mov	r1, fp
 80094d8:	9a08      	ldr	r2, [sp, #32]
 80094da:	b1bb      	cbz	r3, 800950c <_strtod_l+0x914>
 80094dc:	f7ff fb6a 	bl	8008bb4 <sulp>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e8:	f7f6 fe40 	bl	800016c <__adddf3>
 80094ec:	4682      	mov	sl, r0
 80094ee:	468b      	mov	fp, r1
 80094f0:	e7de      	b.n	80094b0 <_strtod_l+0x8b8>
 80094f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094fa:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80094fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009502:	e7d5      	b.n	80094b0 <_strtod_l+0x8b8>
 8009504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009506:	ea13 0f0a 	tst.w	r3, sl
 800950a:	e7e1      	b.n	80094d0 <_strtod_l+0x8d8>
 800950c:	f7ff fb52 	bl	8008bb4 <sulp>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009518:	f7f6 fe26 	bl	8000168 <__aeabi_dsub>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	f7f7 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8009528:	2800      	cmp	r0, #0
 800952a:	d0c1      	beq.n	80094b0 <_strtod_l+0x8b8>
 800952c:	e615      	b.n	800915a <_strtod_l+0x562>
 800952e:	4641      	mov	r1, r8
 8009530:	4620      	mov	r0, r4
 8009532:	f002 fd9f 	bl	800c074 <__ratio>
 8009536:	2200      	movs	r2, #0
 8009538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	f7f7 fa46 	bl	80009d0 <__aeabi_dcmple>
 8009544:	2800      	cmp	r0, #0
 8009546:	d06d      	beq.n	8009624 <_strtod_l+0xa2c>
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d178      	bne.n	8009640 <_strtod_l+0xa48>
 800954e:	f1ba 0f00 	cmp.w	sl, #0
 8009552:	d156      	bne.n	8009602 <_strtod_l+0xa0a>
 8009554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800955a:	2b00      	cmp	r3, #0
 800955c:	d158      	bne.n	8009610 <_strtod_l+0xa18>
 800955e:	2200      	movs	r2, #0
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	4b5d      	ldr	r3, [pc, #372]	@ (80096dc <_strtod_l+0xae4>)
 8009566:	f7f7 fa29 	bl	80009bc <__aeabi_dcmplt>
 800956a:	2800      	cmp	r0, #0
 800956c:	d157      	bne.n	800961e <_strtod_l+0xa26>
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	2200      	movs	r2, #0
 8009574:	4b5a      	ldr	r3, [pc, #360]	@ (80096e0 <_strtod_l+0xae8>)
 8009576:	f7f6 ffaf 	bl	80004d8 <__aeabi_dmul>
 800957a:	4606      	mov	r6, r0
 800957c:	460f      	mov	r7, r1
 800957e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009582:	9606      	str	r6, [sp, #24]
 8009584:	9307      	str	r3, [sp, #28]
 8009586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800958a:	4d52      	ldr	r5, [pc, #328]	@ (80096d4 <_strtod_l+0xadc>)
 800958c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009592:	401d      	ands	r5, r3
 8009594:	4b53      	ldr	r3, [pc, #332]	@ (80096e4 <_strtod_l+0xaec>)
 8009596:	429d      	cmp	r5, r3
 8009598:	f040 80aa 	bne.w	80096f0 <_strtod_l+0xaf8>
 800959c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959e:	4650      	mov	r0, sl
 80095a0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80095a4:	4659      	mov	r1, fp
 80095a6:	f002 fca5 	bl	800bef4 <__ulp>
 80095aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095ae:	f7f6 ff93 	bl	80004d8 <__aeabi_dmul>
 80095b2:	4652      	mov	r2, sl
 80095b4:	465b      	mov	r3, fp
 80095b6:	f7f6 fdd9 	bl	800016c <__adddf3>
 80095ba:	460b      	mov	r3, r1
 80095bc:	4945      	ldr	r1, [pc, #276]	@ (80096d4 <_strtod_l+0xadc>)
 80095be:	4a4a      	ldr	r2, [pc, #296]	@ (80096e8 <_strtod_l+0xaf0>)
 80095c0:	4019      	ands	r1, r3
 80095c2:	4291      	cmp	r1, r2
 80095c4:	4682      	mov	sl, r0
 80095c6:	d942      	bls.n	800964e <_strtod_l+0xa56>
 80095c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095ca:	4b43      	ldr	r3, [pc, #268]	@ (80096d8 <_strtod_l+0xae0>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d103      	bne.n	80095d8 <_strtod_l+0x9e0>
 80095d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095d2:	3301      	adds	r3, #1
 80095d4:	f43f ad2b 	beq.w	800902e <_strtod_l+0x436>
 80095d8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80095dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80096d8 <_strtod_l+0xae0>
 80095e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	f002 f954 	bl	800b890 <_Bfree>
 80095e8:	4649      	mov	r1, r9
 80095ea:	9805      	ldr	r0, [sp, #20]
 80095ec:	f002 f950 	bl	800b890 <_Bfree>
 80095f0:	4641      	mov	r1, r8
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	f002 f94c 	bl	800b890 <_Bfree>
 80095f8:	4621      	mov	r1, r4
 80095fa:	9805      	ldr	r0, [sp, #20]
 80095fc:	f002 f948 	bl	800b890 <_Bfree>
 8009600:	e618      	b.n	8009234 <_strtod_l+0x63c>
 8009602:	f1ba 0f01 	cmp.w	sl, #1
 8009606:	d103      	bne.n	8009610 <_strtod_l+0xa18>
 8009608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	f43f ada5 	beq.w	800915a <_strtod_l+0x562>
 8009610:	2200      	movs	r2, #0
 8009612:	4b36      	ldr	r3, [pc, #216]	@ (80096ec <_strtod_l+0xaf4>)
 8009614:	2600      	movs	r6, #0
 8009616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800961a:	4f30      	ldr	r7, [pc, #192]	@ (80096dc <_strtod_l+0xae4>)
 800961c:	e7b3      	b.n	8009586 <_strtod_l+0x98e>
 800961e:	2600      	movs	r6, #0
 8009620:	4f2f      	ldr	r7, [pc, #188]	@ (80096e0 <_strtod_l+0xae8>)
 8009622:	e7ac      	b.n	800957e <_strtod_l+0x986>
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	4b2d      	ldr	r3, [pc, #180]	@ (80096e0 <_strtod_l+0xae8>)
 800962a:	2200      	movs	r2, #0
 800962c:	f7f6 ff54 	bl	80004d8 <__aeabi_dmul>
 8009630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0a1      	beq.n	800957e <_strtod_l+0x986>
 800963a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800963e:	e7a2      	b.n	8009586 <_strtod_l+0x98e>
 8009640:	2200      	movs	r2, #0
 8009642:	4b26      	ldr	r3, [pc, #152]	@ (80096dc <_strtod_l+0xae4>)
 8009644:	4616      	mov	r6, r2
 8009646:	461f      	mov	r7, r3
 8009648:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800964c:	e79b      	b.n	8009586 <_strtod_l+0x98e>
 800964e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1c1      	bne.n	80095e0 <_strtod_l+0x9e8>
 800965c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009660:	0d1b      	lsrs	r3, r3, #20
 8009662:	051b      	lsls	r3, r3, #20
 8009664:	429d      	cmp	r5, r3
 8009666:	d1bb      	bne.n	80095e0 <_strtod_l+0x9e8>
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f7 fcda 	bl	8001024 <__aeabi_d2lz>
 8009670:	f7f6 ff04 	bl	800047c <__aeabi_l2d>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f6 fd74 	bl	8000168 <__aeabi_dsub>
 8009680:	460b      	mov	r3, r1
 8009682:	4602      	mov	r2, r0
 8009684:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009688:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800968c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800968e:	ea46 060a 	orr.w	r6, r6, sl
 8009692:	431e      	orrs	r6, r3
 8009694:	d069      	beq.n	800976a <_strtod_l+0xb72>
 8009696:	a30a      	add	r3, pc, #40	@ (adr r3, 80096c0 <_strtod_l+0xac8>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f7 f98e 	bl	80009bc <__aeabi_dcmplt>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f47f accf 	bne.w	8009044 <_strtod_l+0x44c>
 80096a6:	a308      	add	r3, pc, #32	@ (adr r3, 80096c8 <_strtod_l+0xad0>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096b0:	f7f7 f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d093      	beq.n	80095e0 <_strtod_l+0x9e8>
 80096b8:	e4c4      	b.n	8009044 <_strtod_l+0x44c>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	94a03595 	.word	0x94a03595
 80096c4:	3fdfffff 	.word	0x3fdfffff
 80096c8:	35afe535 	.word	0x35afe535
 80096cc:	3fe00000 	.word	0x3fe00000
 80096d0:	000fffff 	.word	0x000fffff
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	7fefffff 	.word	0x7fefffff
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	7fe00000 	.word	0x7fe00000
 80096e8:	7c9fffff 	.word	0x7c9fffff
 80096ec:	bff00000 	.word	0xbff00000
 80096f0:	9b08      	ldr	r3, [sp, #32]
 80096f2:	b323      	cbz	r3, 800973e <_strtod_l+0xb46>
 80096f4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096f8:	d821      	bhi.n	800973e <_strtod_l+0xb46>
 80096fa:	a327      	add	r3, pc, #156	@ (adr r3, 8009798 <_strtod_l+0xba0>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	4630      	mov	r0, r6
 8009702:	4639      	mov	r1, r7
 8009704:	f7f7 f964 	bl	80009d0 <__aeabi_dcmple>
 8009708:	b1a0      	cbz	r0, 8009734 <_strtod_l+0xb3c>
 800970a:	4639      	mov	r1, r7
 800970c:	4630      	mov	r0, r6
 800970e:	f7f7 f9bb 	bl	8000a88 <__aeabi_d2uiz>
 8009712:	2801      	cmp	r0, #1
 8009714:	bf38      	it	cc
 8009716:	2001      	movcc	r0, #1
 8009718:	f7f6 fe64 	bl	80003e4 <__aeabi_ui2d>
 800971c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971e:	4606      	mov	r6, r0
 8009720:	460f      	mov	r7, r1
 8009722:	b9fb      	cbnz	r3, 8009764 <_strtod_l+0xb6c>
 8009724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009728:	9014      	str	r0, [sp, #80]	@ 0x50
 800972a:	9315      	str	r3, [sp, #84]	@ 0x54
 800972c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009730:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009734:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009736:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800973a:	1b5b      	subs	r3, r3, r5
 800973c:	9311      	str	r3, [sp, #68]	@ 0x44
 800973e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009742:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009746:	f002 fbd5 	bl	800bef4 <__ulp>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	f7f6 fec1 	bl	80004d8 <__aeabi_dmul>
 8009756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800975a:	f7f6 fd07 	bl	800016c <__adddf3>
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	e776      	b.n	8009652 <_strtod_l+0xa5a>
 8009764:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009768:	e7e0      	b.n	800972c <_strtod_l+0xb34>
 800976a:	a30d      	add	r3, pc, #52	@ (adr r3, 80097a0 <_strtod_l+0xba8>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f7 f924 	bl	80009bc <__aeabi_dcmplt>
 8009774:	e79e      	b.n	80096b4 <_strtod_l+0xabc>
 8009776:	2300      	movs	r3, #0
 8009778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800977a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800977c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	f7ff ba77 	b.w	8008c72 <_strtod_l+0x7a>
 8009784:	2a65      	cmp	r2, #101	@ 0x65
 8009786:	f43f ab6e 	beq.w	8008e66 <_strtod_l+0x26e>
 800978a:	2a45      	cmp	r2, #69	@ 0x45
 800978c:	f43f ab6b 	beq.w	8008e66 <_strtod_l+0x26e>
 8009790:	2301      	movs	r3, #1
 8009792:	f7ff bba6 	b.w	8008ee2 <_strtod_l+0x2ea>
 8009796:	bf00      	nop
 8009798:	ffc00000 	.word	0xffc00000
 800979c:	41dfffff 	.word	0x41dfffff
 80097a0:	94a03595 	.word	0x94a03595
 80097a4:	3fcfffff 	.word	0x3fcfffff

080097a8 <_strtod_r>:
 80097a8:	4b01      	ldr	r3, [pc, #4]	@ (80097b0 <_strtod_r+0x8>)
 80097aa:	f7ff ba25 	b.w	8008bf8 <_strtod_l>
 80097ae:	bf00      	nop
 80097b0:	2000001c 	.word	0x2000001c

080097b4 <_strtol_l.constprop.0>:
 80097b4:	2b24      	cmp	r3, #36	@ 0x24
 80097b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ba:	4686      	mov	lr, r0
 80097bc:	4690      	mov	r8, r2
 80097be:	d801      	bhi.n	80097c4 <_strtol_l.constprop.0+0x10>
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d106      	bne.n	80097d2 <_strtol_l.constprop.0+0x1e>
 80097c4:	f000 f9f8 	bl	8009bb8 <__errno>
 80097c8:	2316      	movs	r3, #22
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	460d      	mov	r5, r1
 80097d4:	4833      	ldr	r0, [pc, #204]	@ (80098a4 <_strtol_l.constprop.0+0xf0>)
 80097d6:	462a      	mov	r2, r5
 80097d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097dc:	5d06      	ldrb	r6, [r0, r4]
 80097de:	f016 0608 	ands.w	r6, r6, #8
 80097e2:	d1f8      	bne.n	80097d6 <_strtol_l.constprop.0+0x22>
 80097e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80097e6:	d12d      	bne.n	8009844 <_strtol_l.constprop.0+0x90>
 80097e8:	2601      	movs	r6, #1
 80097ea:	782c      	ldrb	r4, [r5, #0]
 80097ec:	1c95      	adds	r5, r2, #2
 80097ee:	f033 0210 	bics.w	r2, r3, #16
 80097f2:	d109      	bne.n	8009808 <_strtol_l.constprop.0+0x54>
 80097f4:	2c30      	cmp	r4, #48	@ 0x30
 80097f6:	d12a      	bne.n	800984e <_strtol_l.constprop.0+0x9a>
 80097f8:	782a      	ldrb	r2, [r5, #0]
 80097fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097fe:	2a58      	cmp	r2, #88	@ 0x58
 8009800:	d125      	bne.n	800984e <_strtol_l.constprop.0+0x9a>
 8009802:	2310      	movs	r3, #16
 8009804:	786c      	ldrb	r4, [r5, #1]
 8009806:	3502      	adds	r5, #2
 8009808:	2200      	movs	r2, #0
 800980a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800980e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009812:	fbbc f9f3 	udiv	r9, ip, r3
 8009816:	4610      	mov	r0, r2
 8009818:	fb03 ca19 	mls	sl, r3, r9, ip
 800981c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009820:	2f09      	cmp	r7, #9
 8009822:	d81b      	bhi.n	800985c <_strtol_l.constprop.0+0xa8>
 8009824:	463c      	mov	r4, r7
 8009826:	42a3      	cmp	r3, r4
 8009828:	dd27      	ble.n	800987a <_strtol_l.constprop.0+0xc6>
 800982a:	1c57      	adds	r7, r2, #1
 800982c:	d007      	beq.n	800983e <_strtol_l.constprop.0+0x8a>
 800982e:	4581      	cmp	r9, r0
 8009830:	d320      	bcc.n	8009874 <_strtol_l.constprop.0+0xc0>
 8009832:	d101      	bne.n	8009838 <_strtol_l.constprop.0+0x84>
 8009834:	45a2      	cmp	sl, r4
 8009836:	db1d      	blt.n	8009874 <_strtol_l.constprop.0+0xc0>
 8009838:	2201      	movs	r2, #1
 800983a:	fb00 4003 	mla	r0, r0, r3, r4
 800983e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009842:	e7eb      	b.n	800981c <_strtol_l.constprop.0+0x68>
 8009844:	2c2b      	cmp	r4, #43	@ 0x2b
 8009846:	bf04      	itt	eq
 8009848:	782c      	ldrbeq	r4, [r5, #0]
 800984a:	1c95      	addeq	r5, r2, #2
 800984c:	e7cf      	b.n	80097ee <_strtol_l.constprop.0+0x3a>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1da      	bne.n	8009808 <_strtol_l.constprop.0+0x54>
 8009852:	2c30      	cmp	r4, #48	@ 0x30
 8009854:	bf0c      	ite	eq
 8009856:	2308      	moveq	r3, #8
 8009858:	230a      	movne	r3, #10
 800985a:	e7d5      	b.n	8009808 <_strtol_l.constprop.0+0x54>
 800985c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009860:	2f19      	cmp	r7, #25
 8009862:	d801      	bhi.n	8009868 <_strtol_l.constprop.0+0xb4>
 8009864:	3c37      	subs	r4, #55	@ 0x37
 8009866:	e7de      	b.n	8009826 <_strtol_l.constprop.0+0x72>
 8009868:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800986c:	2f19      	cmp	r7, #25
 800986e:	d804      	bhi.n	800987a <_strtol_l.constprop.0+0xc6>
 8009870:	3c57      	subs	r4, #87	@ 0x57
 8009872:	e7d8      	b.n	8009826 <_strtol_l.constprop.0+0x72>
 8009874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009878:	e7e1      	b.n	800983e <_strtol_l.constprop.0+0x8a>
 800987a:	1c53      	adds	r3, r2, #1
 800987c:	d108      	bne.n	8009890 <_strtol_l.constprop.0+0xdc>
 800987e:	2322      	movs	r3, #34	@ 0x22
 8009880:	4660      	mov	r0, ip
 8009882:	f8ce 3000 	str.w	r3, [lr]
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	d0a0      	beq.n	80097ce <_strtol_l.constprop.0+0x1a>
 800988c:	1e69      	subs	r1, r5, #1
 800988e:	e006      	b.n	800989e <_strtol_l.constprop.0+0xea>
 8009890:	b106      	cbz	r6, 8009894 <_strtol_l.constprop.0+0xe0>
 8009892:	4240      	negs	r0, r0
 8009894:	f1b8 0f00 	cmp.w	r8, #0
 8009898:	d099      	beq.n	80097ce <_strtol_l.constprop.0+0x1a>
 800989a:	2a00      	cmp	r2, #0
 800989c:	d1f6      	bne.n	800988c <_strtol_l.constprop.0+0xd8>
 800989e:	f8c8 1000 	str.w	r1, [r8]
 80098a2:	e794      	b.n	80097ce <_strtol_l.constprop.0+0x1a>
 80098a4:	0800e191 	.word	0x0800e191

080098a8 <_strtol_r>:
 80098a8:	f7ff bf84 	b.w	80097b4 <_strtol_l.constprop.0>

080098ac <_fwalk_sglue>:
 80098ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	4607      	mov	r7, r0
 80098b2:	4688      	mov	r8, r1
 80098b4:	4614      	mov	r4, r2
 80098b6:	2600      	movs	r6, #0
 80098b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098bc:	f1b9 0901 	subs.w	r9, r9, #1
 80098c0:	d505      	bpl.n	80098ce <_fwalk_sglue+0x22>
 80098c2:	6824      	ldr	r4, [r4, #0]
 80098c4:	2c00      	cmp	r4, #0
 80098c6:	d1f7      	bne.n	80098b8 <_fwalk_sglue+0xc>
 80098c8:	4630      	mov	r0, r6
 80098ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d907      	bls.n	80098e4 <_fwalk_sglue+0x38>
 80098d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098d8:	3301      	adds	r3, #1
 80098da:	d003      	beq.n	80098e4 <_fwalk_sglue+0x38>
 80098dc:	4629      	mov	r1, r5
 80098de:	4638      	mov	r0, r7
 80098e0:	47c0      	blx	r8
 80098e2:	4306      	orrs	r6, r0
 80098e4:	3568      	adds	r5, #104	@ 0x68
 80098e6:	e7e9      	b.n	80098bc <_fwalk_sglue+0x10>

080098e8 <__swhatbuf_r>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	4615      	mov	r5, r2
 80098f2:	2900      	cmp	r1, #0
 80098f4:	461e      	mov	r6, r3
 80098f6:	b096      	sub	sp, #88	@ 0x58
 80098f8:	da0c      	bge.n	8009914 <__swhatbuf_r+0x2c>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	2100      	movs	r1, #0
 80098fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009902:	bf14      	ite	ne
 8009904:	2340      	movne	r3, #64	@ 0x40
 8009906:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800990a:	2000      	movs	r0, #0
 800990c:	6031      	str	r1, [r6, #0]
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	b016      	add	sp, #88	@ 0x58
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	466a      	mov	r2, sp
 8009916:	f000 f92d 	bl	8009b74 <_fstat_r>
 800991a:	2800      	cmp	r0, #0
 800991c:	dbed      	blt.n	80098fa <__swhatbuf_r+0x12>
 800991e:	9901      	ldr	r1, [sp, #4]
 8009920:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009924:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009928:	4259      	negs	r1, r3
 800992a:	4159      	adcs	r1, r3
 800992c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009930:	e7eb      	b.n	800990a <__swhatbuf_r+0x22>

08009932 <__smakebuf_r>:
 8009932:	898b      	ldrh	r3, [r1, #12]
 8009934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009936:	079d      	lsls	r5, r3, #30
 8009938:	4606      	mov	r6, r0
 800993a:	460c      	mov	r4, r1
 800993c:	d507      	bpl.n	800994e <__smakebuf_r+0x1c>
 800993e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	2301      	movs	r3, #1
 8009948:	6163      	str	r3, [r4, #20]
 800994a:	b003      	add	sp, #12
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	466a      	mov	r2, sp
 8009950:	ab01      	add	r3, sp, #4
 8009952:	f7ff ffc9 	bl	80098e8 <__swhatbuf_r>
 8009956:	9f00      	ldr	r7, [sp, #0]
 8009958:	4605      	mov	r5, r0
 800995a:	4639      	mov	r1, r7
 800995c:	4630      	mov	r0, r6
 800995e:	f001 fe11 	bl	800b584 <_malloc_r>
 8009962:	b948      	cbnz	r0, 8009978 <__smakebuf_r+0x46>
 8009964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009968:	059a      	lsls	r2, r3, #22
 800996a:	d4ee      	bmi.n	800994a <__smakebuf_r+0x18>
 800996c:	f023 0303 	bic.w	r3, r3, #3
 8009970:	f043 0302 	orr.w	r3, r3, #2
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	e7e2      	b.n	800993e <__smakebuf_r+0xc>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800997e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	b15b      	cbz	r3, 80099a2 <__smakebuf_r+0x70>
 800998a:	4630      	mov	r0, r6
 800998c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009990:	f000 f902 	bl	8009b98 <_isatty_r>
 8009994:	b128      	cbz	r0, 80099a2 <__smakebuf_r+0x70>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	f043 0301 	orr.w	r3, r3, #1
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	431d      	orrs	r5, r3
 80099a6:	81a5      	strh	r5, [r4, #12]
 80099a8:	e7cf      	b.n	800994a <__smakebuf_r+0x18>
	...

080099ac <iprintf>:
 80099ac:	b40f      	push	{r0, r1, r2, r3}
 80099ae:	b507      	push	{r0, r1, r2, lr}
 80099b0:	4906      	ldr	r1, [pc, #24]	@ (80099cc <iprintf+0x20>)
 80099b2:	ab04      	add	r3, sp, #16
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ba:	6881      	ldr	r1, [r0, #8]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	f001 fc9f 	bl	800b300 <_vfiprintf_r>
 80099c2:	b003      	add	sp, #12
 80099c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c8:	b004      	add	sp, #16
 80099ca:	4770      	bx	lr
 80099cc:	20000188 	.word	0x20000188

080099d0 <_puts_r>:
 80099d0:	6a03      	ldr	r3, [r0, #32]
 80099d2:	b570      	push	{r4, r5, r6, lr}
 80099d4:	4605      	mov	r5, r0
 80099d6:	460e      	mov	r6, r1
 80099d8:	6884      	ldr	r4, [r0, #8]
 80099da:	b90b      	cbnz	r3, 80099e0 <_puts_r+0x10>
 80099dc:	f7ff f8d2 	bl	8008b84 <__sinit>
 80099e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e2:	07db      	lsls	r3, r3, #31
 80099e4:	d405      	bmi.n	80099f2 <_puts_r+0x22>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	0598      	lsls	r0, r3, #22
 80099ea:	d402      	bmi.n	80099f2 <_puts_r+0x22>
 80099ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ee:	f000 f90e 	bl	8009c0e <__retarget_lock_acquire_recursive>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	0719      	lsls	r1, r3, #28
 80099f6:	d502      	bpl.n	80099fe <_puts_r+0x2e>
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d135      	bne.n	8009a6a <_puts_r+0x9a>
 80099fe:	4621      	mov	r1, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	f002 fc5b 	bl	800c2bc <__swsetup_r>
 8009a06:	b380      	cbz	r0, 8009a6a <_puts_r+0x9a>
 8009a08:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a0e:	07da      	lsls	r2, r3, #31
 8009a10:	d405      	bmi.n	8009a1e <_puts_r+0x4e>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	059b      	lsls	r3, r3, #22
 8009a16:	d402      	bmi.n	8009a1e <_puts_r+0x4e>
 8009a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a1a:	f000 f8f9 	bl	8009c10 <__retarget_lock_release_recursive>
 8009a1e:	4628      	mov	r0, r5
 8009a20:	bd70      	pop	{r4, r5, r6, pc}
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da04      	bge.n	8009a30 <_puts_r+0x60>
 8009a26:	69a2      	ldr	r2, [r4, #24]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	dc17      	bgt.n	8009a5c <_puts_r+0x8c>
 8009a2c:	290a      	cmp	r1, #10
 8009a2e:	d015      	beq.n	8009a5c <_puts_r+0x8c>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	6022      	str	r2, [r4, #0]
 8009a36:	7019      	strb	r1, [r3, #0]
 8009a38:	68a3      	ldr	r3, [r4, #8]
 8009a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	2900      	cmp	r1, #0
 8009a44:	d1ed      	bne.n	8009a22 <_puts_r+0x52>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	da11      	bge.n	8009a6e <_puts_r+0x9e>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	210a      	movs	r1, #10
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f002 fbf5 	bl	800c23e <__swbuf_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d0d7      	beq.n	8009a08 <_puts_r+0x38>
 8009a58:	250a      	movs	r5, #10
 8009a5a:	e7d7      	b.n	8009a0c <_puts_r+0x3c>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f002 fbed 	bl	800c23e <__swbuf_r>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d1e7      	bne.n	8009a38 <_puts_r+0x68>
 8009a68:	e7ce      	b.n	8009a08 <_puts_r+0x38>
 8009a6a:	3e01      	subs	r6, #1
 8009a6c:	e7e4      	b.n	8009a38 <_puts_r+0x68>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	6022      	str	r2, [r4, #0]
 8009a74:	220a      	movs	r2, #10
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	e7ee      	b.n	8009a58 <_puts_r+0x88>
	...

08009a7c <puts>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	@ (8009a88 <puts+0xc>)
 8009a7e:	4601      	mov	r1, r0
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f7ff bfa5 	b.w	80099d0 <_puts_r>
 8009a86:	bf00      	nop
 8009a88:	20000188 	.word	0x20000188

08009a8c <strncmp>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	b16a      	cbz	r2, 8009aac <strncmp+0x20>
 8009a90:	3901      	subs	r1, #1
 8009a92:	1884      	adds	r4, r0, r2
 8009a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d103      	bne.n	8009aa8 <strncmp+0x1c>
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	d001      	beq.n	8009aa8 <strncmp+0x1c>
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	d1f5      	bne.n	8009a94 <strncmp+0x8>
 8009aa8:	1ad0      	subs	r0, r2, r3
 8009aaa:	bd10      	pop	{r4, pc}
 8009aac:	4610      	mov	r0, r2
 8009aae:	e7fc      	b.n	8009aaa <strncmp+0x1e>

08009ab0 <memset>:
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	4402      	add	r2, r0
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d100      	bne.n	8009aba <memset+0xa>
 8009ab8:	4770      	bx	lr
 8009aba:	f803 1b01 	strb.w	r1, [r3], #1
 8009abe:	e7f9      	b.n	8009ab4 <memset+0x4>

08009ac0 <_localeconv_r>:
 8009ac0:	4800      	ldr	r0, [pc, #0]	@ (8009ac4 <_localeconv_r+0x4>)
 8009ac2:	4770      	bx	lr
 8009ac4:	2000010c 	.word	0x2000010c

08009ac8 <_reclaim_reent>:
 8009ac8:	4b29      	ldr	r3, [pc, #164]	@ (8009b70 <_reclaim_reent+0xa8>)
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	d04b      	beq.n	8009b6c <_reclaim_reent+0xa4>
 8009ad4:	69c3      	ldr	r3, [r0, #28]
 8009ad6:	b1ab      	cbz	r3, 8009b04 <_reclaim_reent+0x3c>
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	b16b      	cbz	r3, 8009af8 <_reclaim_reent+0x30>
 8009adc:	2500      	movs	r5, #0
 8009ade:	69e3      	ldr	r3, [r4, #28]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	5959      	ldr	r1, [r3, r5]
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d13b      	bne.n	8009b60 <_reclaim_reent+0x98>
 8009ae8:	3504      	adds	r5, #4
 8009aea:	2d80      	cmp	r5, #128	@ 0x80
 8009aec:	d1f7      	bne.n	8009ade <_reclaim_reent+0x16>
 8009aee:	69e3      	ldr	r3, [r4, #28]
 8009af0:	4620      	mov	r0, r4
 8009af2:	68d9      	ldr	r1, [r3, #12]
 8009af4:	f000 ff04 	bl	800a900 <_free_r>
 8009af8:	69e3      	ldr	r3, [r4, #28]
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	b111      	cbz	r1, 8009b04 <_reclaim_reent+0x3c>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 fefe 	bl	800a900 <_free_r>
 8009b04:	6961      	ldr	r1, [r4, #20]
 8009b06:	b111      	cbz	r1, 8009b0e <_reclaim_reent+0x46>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fef9 	bl	800a900 <_free_r>
 8009b0e:	69e1      	ldr	r1, [r4, #28]
 8009b10:	b111      	cbz	r1, 8009b18 <_reclaim_reent+0x50>
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fef4 	bl	800a900 <_free_r>
 8009b18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009b1a:	b111      	cbz	r1, 8009b22 <_reclaim_reent+0x5a>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 feef 	bl	800a900 <_free_r>
 8009b22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b24:	b111      	cbz	r1, 8009b2c <_reclaim_reent+0x64>
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 feea 	bl	800a900 <_free_r>
 8009b2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b2e:	b111      	cbz	r1, 8009b36 <_reclaim_reent+0x6e>
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fee5 	bl	800a900 <_free_r>
 8009b36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b38:	b111      	cbz	r1, 8009b40 <_reclaim_reent+0x78>
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 fee0 	bl	800a900 <_free_r>
 8009b40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b42:	b111      	cbz	r1, 8009b4a <_reclaim_reent+0x82>
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 fedb 	bl	800a900 <_free_r>
 8009b4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b4c:	b111      	cbz	r1, 8009b54 <_reclaim_reent+0x8c>
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fed6 	bl	800a900 <_free_r>
 8009b54:	6a23      	ldr	r3, [r4, #32]
 8009b56:	b14b      	cbz	r3, 8009b6c <_reclaim_reent+0xa4>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b5e:	4718      	bx	r3
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 fecc 	bl	800a900 <_free_r>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	e7bb      	b.n	8009ae4 <_reclaim_reent+0x1c>
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000188 	.word	0x20000188

08009b74 <_fstat_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	2300      	movs	r3, #0
 8009b78:	4d06      	ldr	r5, [pc, #24]	@ (8009b94 <_fstat_r+0x20>)
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	4611      	mov	r1, r2
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f7f9 feb3 	bl	80038ec <_fstat>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d102      	bne.n	8009b90 <_fstat_r+0x1c>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	b103      	cbz	r3, 8009b90 <_fstat_r+0x1c>
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	bf00      	nop
 8009b94:	20002c94 	.word	0x20002c94

08009b98 <_isatty_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	4d05      	ldr	r5, [pc, #20]	@ (8009bb4 <_isatty_r+0x1c>)
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f9 feb1 	bl	800390a <_isatty>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_isatty_r+0x1a>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_isatty_r+0x1a>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20002c94 	.word	0x20002c94

08009bb8 <__errno>:
 8009bb8:	4b01      	ldr	r3, [pc, #4]	@ (8009bc0 <__errno+0x8>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20000188 	.word	0x20000188

08009bc4 <__libc_init_array>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	4d0c      	ldr	r5, [pc, #48]	@ (8009bfc <__libc_init_array+0x38>)
 8009bca:	4c0d      	ldr	r4, [pc, #52]	@ (8009c00 <__libc_init_array+0x3c>)
 8009bcc:	1b64      	subs	r4, r4, r5
 8009bce:	10a4      	asrs	r4, r4, #2
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	d109      	bne.n	8009be8 <__libc_init_array+0x24>
 8009bd4:	f003 fd56 	bl	800d684 <_init>
 8009bd8:	2600      	movs	r6, #0
 8009bda:	4d0a      	ldr	r5, [pc, #40]	@ (8009c04 <__libc_init_array+0x40>)
 8009bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8009c08 <__libc_init_array+0x44>)
 8009bde:	1b64      	subs	r4, r4, r5
 8009be0:	10a4      	asrs	r4, r4, #2
 8009be2:	42a6      	cmp	r6, r4
 8009be4:	d105      	bne.n	8009bf2 <__libc_init_array+0x2e>
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bec:	4798      	blx	r3
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__libc_init_array+0xc>
 8009bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf6:	4798      	blx	r3
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	e7f2      	b.n	8009be2 <__libc_init_array+0x1e>
 8009bfc:	0800e560 	.word	0x0800e560
 8009c00:	0800e560 	.word	0x0800e560
 8009c04:	0800e560 	.word	0x0800e560
 8009c08:	0800e564 	.word	0x0800e564

08009c0c <__retarget_lock_init_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <__retarget_lock_acquire_recursive>:
 8009c0e:	4770      	bx	lr

08009c10 <__retarget_lock_release_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <memchr>:
 8009c12:	4603      	mov	r3, r0
 8009c14:	b510      	push	{r4, lr}
 8009c16:	b2c9      	uxtb	r1, r1
 8009c18:	4402      	add	r2, r0
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	d101      	bne.n	8009c24 <memchr+0x12>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e003      	b.n	8009c2c <memchr+0x1a>
 8009c24:	7804      	ldrb	r4, [r0, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	428c      	cmp	r4, r1
 8009c2a:	d1f6      	bne.n	8009c1a <memchr+0x8>
 8009c2c:	bd10      	pop	{r4, pc}

08009c2e <memcpy>:
 8009c2e:	440a      	add	r2, r1
 8009c30:	4291      	cmp	r1, r2
 8009c32:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c36:	d100      	bne.n	8009c3a <memcpy+0xc>
 8009c38:	4770      	bx	lr
 8009c3a:	b510      	push	{r4, lr}
 8009c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c40:	4291      	cmp	r1, r2
 8009c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c46:	d1f9      	bne.n	8009c3c <memcpy+0xe>
 8009c48:	bd10      	pop	{r4, pc}
	...

08009c4c <nan>:
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	4901      	ldr	r1, [pc, #4]	@ (8009c54 <nan+0x8>)
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	7ff80000 	.word	0x7ff80000

08009c58 <nanf>:
 8009c58:	4800      	ldr	r0, [pc, #0]	@ (8009c5c <nanf+0x4>)
 8009c5a:	4770      	bx	lr
 8009c5c:	7fc00000 	.word	0x7fc00000

08009c60 <quorem>:
 8009c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	6903      	ldr	r3, [r0, #16]
 8009c66:	690c      	ldr	r4, [r1, #16]
 8009c68:	4607      	mov	r7, r0
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	db7e      	blt.n	8009d6c <quorem+0x10c>
 8009c6e:	3c01      	subs	r4, #1
 8009c70:	00a3      	lsls	r3, r4, #2
 8009c72:	f100 0514 	add.w	r5, r0, #20
 8009c76:	f101 0814 	add.w	r8, r1, #20
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c96:	d32e      	bcc.n	8009cf6 <quorem+0x96>
 8009c98:	f04f 0a00 	mov.w	sl, #0
 8009c9c:	46c4      	mov	ip, r8
 8009c9e:	46ae      	mov	lr, r5
 8009ca0:	46d3      	mov	fp, sl
 8009ca2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ca6:	b298      	uxth	r0, r3
 8009ca8:	fb06 a000 	mla	r0, r6, r0, sl
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	0c02      	lsrs	r2, r0, #16
 8009cb0:	fb06 2303 	mla	r3, r6, r3, r2
 8009cb4:	f8de 2000 	ldr.w	r2, [lr]
 8009cb8:	b280      	uxth	r0, r0
 8009cba:	b292      	uxth	r2, r2
 8009cbc:	1a12      	subs	r2, r2, r0
 8009cbe:	445a      	add	r2, fp
 8009cc0:	f8de 0000 	ldr.w	r0, [lr]
 8009cc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009cce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cd8:	45e1      	cmp	r9, ip
 8009cda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cde:	f84e 2b04 	str.w	r2, [lr], #4
 8009ce2:	d2de      	bcs.n	8009ca2 <quorem+0x42>
 8009ce4:	9b00      	ldr	r3, [sp, #0]
 8009ce6:	58eb      	ldr	r3, [r5, r3]
 8009ce8:	b92b      	cbnz	r3, 8009cf6 <quorem+0x96>
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	3b04      	subs	r3, #4
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	d32f      	bcc.n	8009d54 <quorem+0xf4>
 8009cf4:	613c      	str	r4, [r7, #16]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f002 f84c 	bl	800bd94 <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	db25      	blt.n	8009d4c <quorem+0xec>
 8009d00:	4629      	mov	r1, r5
 8009d02:	2000      	movs	r0, #0
 8009d04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d08:	f8d1 c000 	ldr.w	ip, [r1]
 8009d0c:	fa1f fe82 	uxth.w	lr, r2
 8009d10:	fa1f f38c 	uxth.w	r3, ip
 8009d14:	eba3 030e 	sub.w	r3, r3, lr
 8009d18:	4403      	add	r3, r0
 8009d1a:	0c12      	lsrs	r2, r2, #16
 8009d1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d2a:	45c1      	cmp	r9, r8
 8009d2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d30:	f841 3b04 	str.w	r3, [r1], #4
 8009d34:	d2e6      	bcs.n	8009d04 <quorem+0xa4>
 8009d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d3e:	b922      	cbnz	r2, 8009d4a <quorem+0xea>
 8009d40:	3b04      	subs	r3, #4
 8009d42:	429d      	cmp	r5, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	d30b      	bcc.n	8009d60 <quorem+0x100>
 8009d48:	613c      	str	r4, [r7, #16]
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	3b04      	subs	r3, #4
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d1cb      	bne.n	8009cf4 <quorem+0x94>
 8009d5c:	3c01      	subs	r4, #1
 8009d5e:	e7c6      	b.n	8009cee <quorem+0x8e>
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	3b04      	subs	r3, #4
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	d1ef      	bne.n	8009d48 <quorem+0xe8>
 8009d68:	3c01      	subs	r4, #1
 8009d6a:	e7ea      	b.n	8009d42 <quorem+0xe2>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7ee      	b.n	8009d4e <quorem+0xee>

08009d70 <_dtoa_r>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4614      	mov	r4, r2
 8009d76:	461d      	mov	r5, r3
 8009d78:	69c7      	ldr	r7, [r0, #28]
 8009d7a:	b097      	sub	sp, #92	@ 0x5c
 8009d7c:	4683      	mov	fp, r0
 8009d7e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009d84:	b97f      	cbnz	r7, 8009da6 <_dtoa_r+0x36>
 8009d86:	2010      	movs	r0, #16
 8009d88:	f001 fbd2 	bl	800b530 <malloc>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d92:	b920      	cbnz	r0, 8009d9e <_dtoa_r+0x2e>
 8009d94:	21ef      	movs	r1, #239	@ 0xef
 8009d96:	4ba8      	ldr	r3, [pc, #672]	@ (800a038 <_dtoa_r+0x2c8>)
 8009d98:	48a8      	ldr	r0, [pc, #672]	@ (800a03c <_dtoa_r+0x2cc>)
 8009d9a:	f002 fb63 	bl	800c464 <__assert_func>
 8009d9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009da2:	6007      	str	r7, [r0, #0]
 8009da4:	60c7      	str	r7, [r0, #12]
 8009da6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009daa:	6819      	ldr	r1, [r3, #0]
 8009dac:	b159      	cbz	r1, 8009dc6 <_dtoa_r+0x56>
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	2301      	movs	r3, #1
 8009db2:	4093      	lsls	r3, r2
 8009db4:	604a      	str	r2, [r1, #4]
 8009db6:	608b      	str	r3, [r1, #8]
 8009db8:	4658      	mov	r0, fp
 8009dba:	f001 fd69 	bl	800b890 <_Bfree>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	1e2b      	subs	r3, r5, #0
 8009dc8:	bfaf      	iteee	ge
 8009dca:	2300      	movge	r3, #0
 8009dcc:	2201      	movlt	r2, #1
 8009dce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dd2:	9303      	strlt	r3, [sp, #12]
 8009dd4:	bfa8      	it	ge
 8009dd6:	6033      	strge	r3, [r6, #0]
 8009dd8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ddc:	4b98      	ldr	r3, [pc, #608]	@ (800a040 <_dtoa_r+0x2d0>)
 8009dde:	bfb8      	it	lt
 8009de0:	6032      	strlt	r2, [r6, #0]
 8009de2:	ea33 0308 	bics.w	r3, r3, r8
 8009de6:	d112      	bne.n	8009e0e <_dtoa_r+0x9e>
 8009de8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009df4:	4323      	orrs	r3, r4
 8009df6:	f000 8550 	beq.w	800a89a <_dtoa_r+0xb2a>
 8009dfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009dfc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a044 <_dtoa_r+0x2d4>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8552 	beq.w	800a8aa <_dtoa_r+0xb3a>
 8009e06:	f10a 0303 	add.w	r3, sl, #3
 8009e0a:	f000 bd4c 	b.w	800a8a6 <_dtoa_r+0xb36>
 8009e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f7f6 fdc3 	bl	80009a8 <__aeabi_dcmpeq>
 8009e22:	4607      	mov	r7, r0
 8009e24:	b158      	cbz	r0, 8009e3e <_dtoa_r+0xce>
 8009e26:	2301      	movs	r3, #1
 8009e28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e2e:	b113      	cbz	r3, 8009e36 <_dtoa_r+0xc6>
 8009e30:	4b85      	ldr	r3, [pc, #532]	@ (800a048 <_dtoa_r+0x2d8>)
 8009e32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a04c <_dtoa_r+0x2dc>
 8009e3a:	f000 bd36 	b.w	800a8aa <_dtoa_r+0xb3a>
 8009e3e:	ab14      	add	r3, sp, #80	@ 0x50
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	ab15      	add	r3, sp, #84	@ 0x54
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4658      	mov	r0, fp
 8009e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e4c:	f002 f8ba 	bl	800bfc4 <__d2b>
 8009e50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009e54:	4681      	mov	r9, r0
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	d077      	beq.n	8009f4a <_dtoa_r+0x1da>
 8009e5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e70:	9712      	str	r7, [sp, #72]	@ 0x48
 8009e72:	4619      	mov	r1, r3
 8009e74:	2200      	movs	r2, #0
 8009e76:	4b76      	ldr	r3, [pc, #472]	@ (800a050 <_dtoa_r+0x2e0>)
 8009e78:	f7f6 f976 	bl	8000168 <__aeabi_dsub>
 8009e7c:	a368      	add	r3, pc, #416	@ (adr r3, 800a020 <_dtoa_r+0x2b0>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	f7f6 fb29 	bl	80004d8 <__aeabi_dmul>
 8009e86:	a368      	add	r3, pc, #416	@ (adr r3, 800a028 <_dtoa_r+0x2b8>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 f96e 	bl	800016c <__adddf3>
 8009e90:	4604      	mov	r4, r0
 8009e92:	4630      	mov	r0, r6
 8009e94:	460d      	mov	r5, r1
 8009e96:	f7f6 fab5 	bl	8000404 <__aeabi_i2d>
 8009e9a:	a365      	add	r3, pc, #404	@ (adr r3, 800a030 <_dtoa_r+0x2c0>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7f6 f95e 	bl	800016c <__adddf3>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	f7f6 fdc0 	bl	8000a38 <__aeabi_d2iz>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4607      	mov	r7, r0
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 fd7b 	bl	80009bc <__aeabi_dcmplt>
 8009ec6:	b140      	cbz	r0, 8009eda <_dtoa_r+0x16a>
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f7f6 fa9b 	bl	8000404 <__aeabi_i2d>
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	f7f6 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed6:	b900      	cbnz	r0, 8009eda <_dtoa_r+0x16a>
 8009ed8:	3f01      	subs	r7, #1
 8009eda:	2f16      	cmp	r7, #22
 8009edc:	d853      	bhi.n	8009f86 <_dtoa_r+0x216>
 8009ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ee2:	4b5c      	ldr	r3, [pc, #368]	@ (800a054 <_dtoa_r+0x2e4>)
 8009ee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 fd66 	bl	80009bc <__aeabi_dcmplt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d04a      	beq.n	8009f8a <_dtoa_r+0x21a>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	3f01      	subs	r7, #1
 8009ef8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009efa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009efc:	1b9b      	subs	r3, r3, r6
 8009efe:	1e5a      	subs	r2, r3, #1
 8009f00:	bf46      	itte	mi
 8009f02:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f06:	2300      	movmi	r3, #0
 8009f08:	f04f 0800 	movpl.w	r8, #0
 8009f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f0e:	bf48      	it	mi
 8009f10:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009f12:	2f00      	cmp	r7, #0
 8009f14:	db3b      	blt.n	8009f8e <_dtoa_r+0x21e>
 8009f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f18:	970e      	str	r7, [sp, #56]	@ 0x38
 8009f1a:	443b      	add	r3, r7
 8009f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1e:	2300      	movs	r3, #0
 8009f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f24:	2b09      	cmp	r3, #9
 8009f26:	d866      	bhi.n	8009ff6 <_dtoa_r+0x286>
 8009f28:	2b05      	cmp	r3, #5
 8009f2a:	bfc4      	itt	gt
 8009f2c:	3b04      	subgt	r3, #4
 8009f2e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009f30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f32:	bfc8      	it	gt
 8009f34:	2400      	movgt	r4, #0
 8009f36:	f1a3 0302 	sub.w	r3, r3, #2
 8009f3a:	bfd8      	it	le
 8009f3c:	2401      	movle	r4, #1
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d864      	bhi.n	800a00c <_dtoa_r+0x29c>
 8009f42:	e8df f003 	tbb	[pc, r3]
 8009f46:	382b      	.short	0x382b
 8009f48:	5636      	.short	0x5636
 8009f4a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f4e:	441e      	add	r6, r3
 8009f50:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	bfc1      	itttt	gt
 8009f58:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f60:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f64:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f68:	bfd6      	itet	le
 8009f6a:	f1c3 0320 	rsble	r3, r3, #32
 8009f6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f72:	fa04 f003 	lslle.w	r0, r4, r3
 8009f76:	f7f6 fa35 	bl	80003e4 <__aeabi_ui2d>
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f80:	3e01      	subs	r6, #1
 8009f82:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f84:	e775      	b.n	8009e72 <_dtoa_r+0x102>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7b6      	b.n	8009ef8 <_dtoa_r+0x188>
 8009f8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009f8c:	e7b5      	b.n	8009efa <_dtoa_r+0x18a>
 8009f8e:	427b      	negs	r3, r7
 8009f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f92:	2300      	movs	r3, #0
 8009f94:	eba8 0807 	sub.w	r8, r8, r7
 8009f98:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f9a:	e7c2      	b.n	8009f22 <_dtoa_r+0x1b2>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc35      	bgt.n	800a012 <_dtoa_r+0x2a2>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	461a      	mov	r2, r3
 8009faa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009fae:	9221      	str	r2, [sp, #132]	@ 0x84
 8009fb0:	e00b      	b.n	8009fca <_dtoa_r+0x25a>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7f3      	b.n	8009f9e <_dtoa_r+0x22e>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	9308      	str	r3, [sp, #32]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	bfb8      	it	lt
 8009fc8:	2301      	movlt	r3, #1
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009fd2:	f102 0514 	add.w	r5, r2, #20
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	d91f      	bls.n	800a01a <_dtoa_r+0x2aa>
 8009fda:	6041      	str	r1, [r0, #4]
 8009fdc:	4658      	mov	r0, fp
 8009fde:	f001 fc17 	bl	800b810 <_Balloc>
 8009fe2:	4682      	mov	sl, r0
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d139      	bne.n	800a05c <_dtoa_r+0x2ec>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fee:	4b1a      	ldr	r3, [pc, #104]	@ (800a058 <_dtoa_r+0x2e8>)
 8009ff0:	e6d2      	b.n	8009d98 <_dtoa_r+0x28>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e7e0      	b.n	8009fb8 <_dtoa_r+0x248>
 8009ff6:	2401      	movs	r4, #1
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ffc:	9320      	str	r3, [sp, #128]	@ 0x80
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a002:	2200      	movs	r2, #0
 800a004:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a008:	2312      	movs	r3, #18
 800a00a:	e7d0      	b.n	8009fae <_dtoa_r+0x23e>
 800a00c:	2301      	movs	r3, #1
 800a00e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a010:	e7f5      	b.n	8009ffe <_dtoa_r+0x28e>
 800a012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a014:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a018:	e7d7      	b.n	8009fca <_dtoa_r+0x25a>
 800a01a:	3101      	adds	r1, #1
 800a01c:	0052      	lsls	r2, r2, #1
 800a01e:	e7d8      	b.n	8009fd2 <_dtoa_r+0x262>
 800a020:	636f4361 	.word	0x636f4361
 800a024:	3fd287a7 	.word	0x3fd287a7
 800a028:	8b60c8b3 	.word	0x8b60c8b3
 800a02c:	3fc68a28 	.word	0x3fc68a28
 800a030:	509f79fb 	.word	0x509f79fb
 800a034:	3fd34413 	.word	0x3fd34413
 800a038:	0800e29e 	.word	0x0800e29e
 800a03c:	0800e2b5 	.word	0x0800e2b5
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	0800e29a 	.word	0x0800e29a
 800a048:	0800e10b 	.word	0x0800e10b
 800a04c:	0800e10a 	.word	0x0800e10a
 800a050:	3ff80000 	.word	0x3ff80000
 800a054:	0800e420 	.word	0x0800e420
 800a058:	0800e30d 	.word	0x0800e30d
 800a05c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a060:	6018      	str	r0, [r3, #0]
 800a062:	9b07      	ldr	r3, [sp, #28]
 800a064:	2b0e      	cmp	r3, #14
 800a066:	f200 80a4 	bhi.w	800a1b2 <_dtoa_r+0x442>
 800a06a:	2c00      	cmp	r4, #0
 800a06c:	f000 80a1 	beq.w	800a1b2 <_dtoa_r+0x442>
 800a070:	2f00      	cmp	r7, #0
 800a072:	dd33      	ble.n	800a0dc <_dtoa_r+0x36c>
 800a074:	4b86      	ldr	r3, [pc, #536]	@ (800a290 <_dtoa_r+0x520>)
 800a076:	f007 020f 	and.w	r2, r7, #15
 800a07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07e:	05f8      	lsls	r0, r7, #23
 800a080:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a084:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a08c:	d516      	bpl.n	800a0bc <_dtoa_r+0x34c>
 800a08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a092:	4b80      	ldr	r3, [pc, #512]	@ (800a294 <_dtoa_r+0x524>)
 800a094:	2603      	movs	r6, #3
 800a096:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a09a:	f7f6 fb47 	bl	800072c <__aeabi_ddiv>
 800a09e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a2:	f004 040f 	and.w	r4, r4, #15
 800a0a6:	4d7b      	ldr	r5, [pc, #492]	@ (800a294 <_dtoa_r+0x524>)
 800a0a8:	b954      	cbnz	r4, 800a0c0 <_dtoa_r+0x350>
 800a0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b2:	f7f6 fb3b 	bl	800072c <__aeabi_ddiv>
 800a0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ba:	e028      	b.n	800a10e <_dtoa_r+0x39e>
 800a0bc:	2602      	movs	r6, #2
 800a0be:	e7f2      	b.n	800a0a6 <_dtoa_r+0x336>
 800a0c0:	07e1      	lsls	r1, r4, #31
 800a0c2:	d508      	bpl.n	800a0d6 <_dtoa_r+0x366>
 800a0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0cc:	f7f6 fa04 	bl	80004d8 <__aeabi_dmul>
 800a0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0d4:	3601      	adds	r6, #1
 800a0d6:	1064      	asrs	r4, r4, #1
 800a0d8:	3508      	adds	r5, #8
 800a0da:	e7e5      	b.n	800a0a8 <_dtoa_r+0x338>
 800a0dc:	f000 80d2 	beq.w	800a284 <_dtoa_r+0x514>
 800a0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0e4:	427c      	negs	r4, r7
 800a0e6:	4b6a      	ldr	r3, [pc, #424]	@ (800a290 <_dtoa_r+0x520>)
 800a0e8:	f004 020f 	and.w	r2, r4, #15
 800a0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	2602      	movs	r6, #2
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a100:	4d64      	ldr	r5, [pc, #400]	@ (800a294 <_dtoa_r+0x524>)
 800a102:	1124      	asrs	r4, r4, #4
 800a104:	2c00      	cmp	r4, #0
 800a106:	f040 80b2 	bne.w	800a26e <_dtoa_r+0x4fe>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1d3      	bne.n	800a0b6 <_dtoa_r+0x346>
 800a10e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 80b7 	beq.w	800a288 <_dtoa_r+0x518>
 800a11a:	2200      	movs	r2, #0
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	4b5d      	ldr	r3, [pc, #372]	@ (800a298 <_dtoa_r+0x528>)
 800a122:	f7f6 fc4b 	bl	80009bc <__aeabi_dcmplt>
 800a126:	2800      	cmp	r0, #0
 800a128:	f000 80ae 	beq.w	800a288 <_dtoa_r+0x518>
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 80aa 	beq.w	800a288 <_dtoa_r+0x518>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dd37      	ble.n	800a1aa <_dtoa_r+0x43a>
 800a13a:	1e7b      	subs	r3, r7, #1
 800a13c:	4620      	mov	r0, r4
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	2200      	movs	r2, #0
 800a142:	4629      	mov	r1, r5
 800a144:	4b55      	ldr	r3, [pc, #340]	@ (800a29c <_dtoa_r+0x52c>)
 800a146:	f7f6 f9c7 	bl	80004d8 <__aeabi_dmul>
 800a14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a14e:	9c08      	ldr	r4, [sp, #32]
 800a150:	3601      	adds	r6, #1
 800a152:	4630      	mov	r0, r6
 800a154:	f7f6 f956 	bl	8000404 <__aeabi_i2d>
 800a158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a15c:	f7f6 f9bc 	bl	80004d8 <__aeabi_dmul>
 800a160:	2200      	movs	r2, #0
 800a162:	4b4f      	ldr	r3, [pc, #316]	@ (800a2a0 <_dtoa_r+0x530>)
 800a164:	f7f6 f802 	bl	800016c <__adddf3>
 800a168:	4605      	mov	r5, r0
 800a16a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a16e:	2c00      	cmp	r4, #0
 800a170:	f040 809a 	bne.w	800a2a8 <_dtoa_r+0x538>
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	2200      	movs	r2, #0
 800a17a:	4b4a      	ldr	r3, [pc, #296]	@ (800a2a4 <_dtoa_r+0x534>)
 800a17c:	f7f5 fff4 	bl	8000168 <__aeabi_dsub>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a188:	462a      	mov	r2, r5
 800a18a:	4633      	mov	r3, r6
 800a18c:	f7f6 fc34 	bl	80009f8 <__aeabi_dcmpgt>
 800a190:	2800      	cmp	r0, #0
 800a192:	f040 828e 	bne.w	800a6b2 <_dtoa_r+0x942>
 800a196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19a:	462a      	mov	r2, r5
 800a19c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1a0:	f7f6 fc0c 	bl	80009bc <__aeabi_dcmplt>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f040 8127 	bne.w	800a3f8 <_dtoa_r+0x688>
 800a1aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a1ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a1b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f2c0 8163 	blt.w	800a480 <_dtoa_r+0x710>
 800a1ba:	2f0e      	cmp	r7, #14
 800a1bc:	f300 8160 	bgt.w	800a480 <_dtoa_r+0x710>
 800a1c0:	4b33      	ldr	r3, [pc, #204]	@ (800a290 <_dtoa_r+0x520>)
 800a1c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da03      	bge.n	800a1dc <_dtoa_r+0x46c>
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f340 8100 	ble.w	800a3dc <_dtoa_r+0x66c>
 800a1dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1e0:	4656      	mov	r6, sl
 800a1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 fa9f 	bl	800072c <__aeabi_ddiv>
 800a1ee:	f7f6 fc23 	bl	8000a38 <__aeabi_d2iz>
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	f7f6 f906 	bl	8000404 <__aeabi_i2d>
 800a1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1fc:	f7f6 f96c 	bl	80004d8 <__aeabi_dmul>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4620      	mov	r0, r4
 800a206:	4629      	mov	r1, r5
 800a208:	f7f5 ffae 	bl	8000168 <__aeabi_dsub>
 800a20c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a210:	9d07      	ldr	r5, [sp, #28]
 800a212:	f806 4b01 	strb.w	r4, [r6], #1
 800a216:	eba6 040a 	sub.w	r4, r6, sl
 800a21a:	42a5      	cmp	r5, r4
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	f040 8116 	bne.w	800a450 <_dtoa_r+0x6e0>
 800a224:	f7f5 ffa2 	bl	800016c <__adddf3>
 800a228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	f7f6 fbe2 	bl	80009f8 <__aeabi_dcmpgt>
 800a234:	2800      	cmp	r0, #0
 800a236:	f040 80f8 	bne.w	800a42a <_dtoa_r+0x6ba>
 800a23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a23e:	4620      	mov	r0, r4
 800a240:	4629      	mov	r1, r5
 800a242:	f7f6 fbb1 	bl	80009a8 <__aeabi_dcmpeq>
 800a246:	b118      	cbz	r0, 800a250 <_dtoa_r+0x4e0>
 800a248:	f018 0f01 	tst.w	r8, #1
 800a24c:	f040 80ed 	bne.w	800a42a <_dtoa_r+0x6ba>
 800a250:	4649      	mov	r1, r9
 800a252:	4658      	mov	r0, fp
 800a254:	f001 fb1c 	bl	800b890 <_Bfree>
 800a258:	2300      	movs	r3, #0
 800a25a:	7033      	strb	r3, [r6, #0]
 800a25c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a25e:	3701      	adds	r7, #1
 800a260:	601f      	str	r7, [r3, #0]
 800a262:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8320 	beq.w	800a8aa <_dtoa_r+0xb3a>
 800a26a:	601e      	str	r6, [r3, #0]
 800a26c:	e31d      	b.n	800a8aa <_dtoa_r+0xb3a>
 800a26e:	07e2      	lsls	r2, r4, #31
 800a270:	d505      	bpl.n	800a27e <_dtoa_r+0x50e>
 800a272:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a276:	f7f6 f92f 	bl	80004d8 <__aeabi_dmul>
 800a27a:	2301      	movs	r3, #1
 800a27c:	3601      	adds	r6, #1
 800a27e:	1064      	asrs	r4, r4, #1
 800a280:	3508      	adds	r5, #8
 800a282:	e73f      	b.n	800a104 <_dtoa_r+0x394>
 800a284:	2602      	movs	r6, #2
 800a286:	e742      	b.n	800a10e <_dtoa_r+0x39e>
 800a288:	9c07      	ldr	r4, [sp, #28]
 800a28a:	9704      	str	r7, [sp, #16]
 800a28c:	e761      	b.n	800a152 <_dtoa_r+0x3e2>
 800a28e:	bf00      	nop
 800a290:	0800e420 	.word	0x0800e420
 800a294:	0800e3f8 	.word	0x0800e3f8
 800a298:	3ff00000 	.word	0x3ff00000
 800a29c:	40240000 	.word	0x40240000
 800a2a0:	401c0000 	.word	0x401c0000
 800a2a4:	40140000 	.word	0x40140000
 800a2a8:	4b70      	ldr	r3, [pc, #448]	@ (800a46c <_dtoa_r+0x6fc>)
 800a2aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2b4:	4454      	add	r4, sl
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	d045      	beq.n	800a346 <_dtoa_r+0x5d6>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	496c      	ldr	r1, [pc, #432]	@ (800a470 <_dtoa_r+0x700>)
 800a2be:	f7f6 fa35 	bl	800072c <__aeabi_ddiv>
 800a2c2:	4633      	mov	r3, r6
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	f7f5 ff4f 	bl	8000168 <__aeabi_dsub>
 800a2ca:	4656      	mov	r6, sl
 800a2cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d4:	f7f6 fbb0 	bl	8000a38 <__aeabi_d2iz>
 800a2d8:	4605      	mov	r5, r0
 800a2da:	f7f6 f893 	bl	8000404 <__aeabi_i2d>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2e6:	f7f5 ff3f 	bl	8000168 <__aeabi_dsub>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	3530      	adds	r5, #48	@ 0x30
 800a2f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2f8:	f806 5b01 	strb.w	r5, [r6], #1
 800a2fc:	f7f6 fb5e 	bl	80009bc <__aeabi_dcmplt>
 800a300:	2800      	cmp	r0, #0
 800a302:	d163      	bne.n	800a3cc <_dtoa_r+0x65c>
 800a304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a308:	2000      	movs	r0, #0
 800a30a:	495a      	ldr	r1, [pc, #360]	@ (800a474 <_dtoa_r+0x704>)
 800a30c:	f7f5 ff2c 	bl	8000168 <__aeabi_dsub>
 800a310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a314:	f7f6 fb52 	bl	80009bc <__aeabi_dcmplt>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f040 8087 	bne.w	800a42c <_dtoa_r+0x6bc>
 800a31e:	42a6      	cmp	r6, r4
 800a320:	f43f af43 	beq.w	800a1aa <_dtoa_r+0x43a>
 800a324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a328:	2200      	movs	r2, #0
 800a32a:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <_dtoa_r+0x708>)
 800a32c:	f7f6 f8d4 	bl	80004d8 <__aeabi_dmul>
 800a330:	2200      	movs	r2, #0
 800a332:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a33a:	4b4f      	ldr	r3, [pc, #316]	@ (800a478 <_dtoa_r+0x708>)
 800a33c:	f7f6 f8cc 	bl	80004d8 <__aeabi_dmul>
 800a340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a344:	e7c4      	b.n	800a2d0 <_dtoa_r+0x560>
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	f7f6 f8c5 	bl	80004d8 <__aeabi_dmul>
 800a34e:	4656      	mov	r6, sl
 800a350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a354:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a35a:	f7f6 fb6d 	bl	8000a38 <__aeabi_d2iz>
 800a35e:	4605      	mov	r5, r0
 800a360:	f7f6 f850 	bl	8000404 <__aeabi_i2d>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a36c:	f7f5 fefc 	bl	8000168 <__aeabi_dsub>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	3530      	adds	r5, #48	@ 0x30
 800a376:	f806 5b01 	strb.w	r5, [r6], #1
 800a37a:	42a6      	cmp	r6, r4
 800a37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a380:	f04f 0200 	mov.w	r2, #0
 800a384:	d124      	bne.n	800a3d0 <_dtoa_r+0x660>
 800a386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a38a:	4b39      	ldr	r3, [pc, #228]	@ (800a470 <_dtoa_r+0x700>)
 800a38c:	f7f5 feee 	bl	800016c <__adddf3>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a398:	f7f6 fb2e 	bl	80009f8 <__aeabi_dcmpgt>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d145      	bne.n	800a42c <_dtoa_r+0x6bc>
 800a3a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	4932      	ldr	r1, [pc, #200]	@ (800a470 <_dtoa_r+0x700>)
 800a3a8:	f7f5 fede 	bl	8000168 <__aeabi_dsub>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3b4:	f7f6 fb02 	bl	80009bc <__aeabi_dcmplt>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	f43f aef6 	beq.w	800a1aa <_dtoa_r+0x43a>
 800a3be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a3c0:	1e73      	subs	r3, r6, #1
 800a3c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3c8:	2b30      	cmp	r3, #48	@ 0x30
 800a3ca:	d0f8      	beq.n	800a3be <_dtoa_r+0x64e>
 800a3cc:	9f04      	ldr	r7, [sp, #16]
 800a3ce:	e73f      	b.n	800a250 <_dtoa_r+0x4e0>
 800a3d0:	4b29      	ldr	r3, [pc, #164]	@ (800a478 <_dtoa_r+0x708>)
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3da:	e7bc      	b.n	800a356 <_dtoa_r+0x5e6>
 800a3dc:	d10c      	bne.n	800a3f8 <_dtoa_r+0x688>
 800a3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4b25      	ldr	r3, [pc, #148]	@ (800a47c <_dtoa_r+0x70c>)
 800a3e6:	f7f6 f877 	bl	80004d8 <__aeabi_dmul>
 800a3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ee:	f7f6 faf9 	bl	80009e4 <__aeabi_dcmpge>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f000 815b 	beq.w	800a6ae <_dtoa_r+0x93e>
 800a3f8:	2400      	movs	r4, #0
 800a3fa:	4625      	mov	r5, r4
 800a3fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3fe:	4656      	mov	r6, sl
 800a400:	43db      	mvns	r3, r3
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	2700      	movs	r7, #0
 800a406:	4621      	mov	r1, r4
 800a408:	4658      	mov	r0, fp
 800a40a:	f001 fa41 	bl	800b890 <_Bfree>
 800a40e:	2d00      	cmp	r5, #0
 800a410:	d0dc      	beq.n	800a3cc <_dtoa_r+0x65c>
 800a412:	b12f      	cbz	r7, 800a420 <_dtoa_r+0x6b0>
 800a414:	42af      	cmp	r7, r5
 800a416:	d003      	beq.n	800a420 <_dtoa_r+0x6b0>
 800a418:	4639      	mov	r1, r7
 800a41a:	4658      	mov	r0, fp
 800a41c:	f001 fa38 	bl	800b890 <_Bfree>
 800a420:	4629      	mov	r1, r5
 800a422:	4658      	mov	r0, fp
 800a424:	f001 fa34 	bl	800b890 <_Bfree>
 800a428:	e7d0      	b.n	800a3cc <_dtoa_r+0x65c>
 800a42a:	9704      	str	r7, [sp, #16]
 800a42c:	4633      	mov	r3, r6
 800a42e:	461e      	mov	r6, r3
 800a430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a434:	2a39      	cmp	r2, #57	@ 0x39
 800a436:	d107      	bne.n	800a448 <_dtoa_r+0x6d8>
 800a438:	459a      	cmp	sl, r3
 800a43a:	d1f8      	bne.n	800a42e <_dtoa_r+0x6be>
 800a43c:	9a04      	ldr	r2, [sp, #16]
 800a43e:	3201      	adds	r2, #1
 800a440:	9204      	str	r2, [sp, #16]
 800a442:	2230      	movs	r2, #48	@ 0x30
 800a444:	f88a 2000 	strb.w	r2, [sl]
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	3201      	adds	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	e7bd      	b.n	800a3cc <_dtoa_r+0x65c>
 800a450:	2200      	movs	r2, #0
 800a452:	4b09      	ldr	r3, [pc, #36]	@ (800a478 <_dtoa_r+0x708>)
 800a454:	f7f6 f840 	bl	80004d8 <__aeabi_dmul>
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	f7f6 faa2 	bl	80009a8 <__aeabi_dcmpeq>
 800a464:	2800      	cmp	r0, #0
 800a466:	f43f aebc 	beq.w	800a1e2 <_dtoa_r+0x472>
 800a46a:	e6f1      	b.n	800a250 <_dtoa_r+0x4e0>
 800a46c:	0800e420 	.word	0x0800e420
 800a470:	3fe00000 	.word	0x3fe00000
 800a474:	3ff00000 	.word	0x3ff00000
 800a478:	40240000 	.word	0x40240000
 800a47c:	40140000 	.word	0x40140000
 800a480:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a482:	2a00      	cmp	r2, #0
 800a484:	f000 80db 	beq.w	800a63e <_dtoa_r+0x8ce>
 800a488:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a48a:	2a01      	cmp	r2, #1
 800a48c:	f300 80bf 	bgt.w	800a60e <_dtoa_r+0x89e>
 800a490:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a492:	2a00      	cmp	r2, #0
 800a494:	f000 80b7 	beq.w	800a606 <_dtoa_r+0x896>
 800a498:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a49c:	4646      	mov	r6, r8
 800a49e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	441a      	add	r2, r3
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	4498      	add	r8, r3
 800a4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4ac:	f001 faee 	bl	800ba8c <__i2b>
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	b15e      	cbz	r6, 800a4cc <_dtoa_r+0x75c>
 800a4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dd08      	ble.n	800a4cc <_dtoa_r+0x75c>
 800a4ba:	42b3      	cmp	r3, r6
 800a4bc:	bfa8      	it	ge
 800a4be:	4633      	movge	r3, r6
 800a4c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4c2:	eba8 0803 	sub.w	r8, r8, r3
 800a4c6:	1af6      	subs	r6, r6, r3
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ce:	b1f3      	cbz	r3, 800a50e <_dtoa_r+0x79e>
 800a4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 80b7 	beq.w	800a646 <_dtoa_r+0x8d6>
 800a4d8:	b18c      	cbz	r4, 800a4fe <_dtoa_r+0x78e>
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f001 fb92 	bl	800bc08 <__pow5mult>
 800a4e4:	464a      	mov	r2, r9
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	4658      	mov	r0, fp
 800a4ec:	f001 fae4 	bl	800bab8 <__multiply>
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	9004      	str	r0, [sp, #16]
 800a4f4:	4658      	mov	r0, fp
 800a4f6:	f001 f9cb 	bl	800b890 <_Bfree>
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	4699      	mov	r9, r3
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a500:	1b1a      	subs	r2, r3, r4
 800a502:	d004      	beq.n	800a50e <_dtoa_r+0x79e>
 800a504:	4649      	mov	r1, r9
 800a506:	4658      	mov	r0, fp
 800a508:	f001 fb7e 	bl	800bc08 <__pow5mult>
 800a50c:	4681      	mov	r9, r0
 800a50e:	2101      	movs	r1, #1
 800a510:	4658      	mov	r0, fp
 800a512:	f001 fabb 	bl	800ba8c <__i2b>
 800a516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a518:	4604      	mov	r4, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 81c9 	beq.w	800a8b2 <_dtoa_r+0xb42>
 800a520:	461a      	mov	r2, r3
 800a522:	4601      	mov	r1, r0
 800a524:	4658      	mov	r0, fp
 800a526:	f001 fb6f 	bl	800bc08 <__pow5mult>
 800a52a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a52c:	4604      	mov	r4, r0
 800a52e:	2b01      	cmp	r3, #1
 800a530:	f300 808f 	bgt.w	800a652 <_dtoa_r+0x8e2>
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f040 8087 	bne.w	800a64a <_dtoa_r+0x8da>
 800a53c:	9b03      	ldr	r3, [sp, #12]
 800a53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a542:	2b00      	cmp	r3, #0
 800a544:	f040 8083 	bne.w	800a64e <_dtoa_r+0x8de>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a54e:	0d1b      	lsrs	r3, r3, #20
 800a550:	051b      	lsls	r3, r3, #20
 800a552:	b12b      	cbz	r3, 800a560 <_dtoa_r+0x7f0>
 800a554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a556:	f108 0801 	add.w	r8, r8, #1
 800a55a:	3301      	adds	r3, #1
 800a55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55e:	2301      	movs	r3, #1
 800a560:	930a      	str	r3, [sp, #40]	@ 0x28
 800a562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 81aa 	beq.w	800a8be <_dtoa_r+0xb4e>
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a570:	6918      	ldr	r0, [r3, #16]
 800a572:	f001 fa3f 	bl	800b9f4 <__hi0bits>
 800a576:	f1c0 0020 	rsb	r0, r0, #32
 800a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57c:	4418      	add	r0, r3
 800a57e:	f010 001f 	ands.w	r0, r0, #31
 800a582:	d071      	beq.n	800a668 <_dtoa_r+0x8f8>
 800a584:	f1c0 0320 	rsb	r3, r0, #32
 800a588:	2b04      	cmp	r3, #4
 800a58a:	dd65      	ble.n	800a658 <_dtoa_r+0x8e8>
 800a58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58e:	f1c0 001c 	rsb	r0, r0, #28
 800a592:	4403      	add	r3, r0
 800a594:	4480      	add	r8, r0
 800a596:	4406      	add	r6, r0
 800a598:	9309      	str	r3, [sp, #36]	@ 0x24
 800a59a:	f1b8 0f00 	cmp.w	r8, #0
 800a59e:	dd05      	ble.n	800a5ac <_dtoa_r+0x83c>
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	4642      	mov	r2, r8
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	f001 fb89 	bl	800bcbc <__lshift>
 800a5aa:	4681      	mov	r9, r0
 800a5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd05      	ble.n	800a5be <_dtoa_r+0x84e>
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	f001 fb80 	bl	800bcbc <__lshift>
 800a5bc:	4604      	mov	r4, r0
 800a5be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d053      	beq.n	800a66c <_dtoa_r+0x8fc>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	f001 fbe4 	bl	800bd94 <__mcmp>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	da4d      	bge.n	800a66c <_dtoa_r+0x8fc>
 800a5d0:	1e7b      	subs	r3, r7, #1
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f001 f97a 	bl	800b8d4 <__multadd>
 800a5e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e2:	4681      	mov	r9, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 816c 	beq.w	800a8c2 <_dtoa_r+0xb52>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	220a      	movs	r2, #10
 800a5f0:	4658      	mov	r0, fp
 800a5f2:	f001 f96f 	bl	800b8d4 <__multadd>
 800a5f6:	9b08      	ldr	r3, [sp, #32]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	dc61      	bgt.n	800a6c2 <_dtoa_r+0x952>
 800a5fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a600:	2b02      	cmp	r3, #2
 800a602:	dc3b      	bgt.n	800a67c <_dtoa_r+0x90c>
 800a604:	e05d      	b.n	800a6c2 <_dtoa_r+0x952>
 800a606:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a608:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a60c:	e746      	b.n	800a49c <_dtoa_r+0x72c>
 800a60e:	9b07      	ldr	r3, [sp, #28]
 800a610:	1e5c      	subs	r4, r3, #1
 800a612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a614:	42a3      	cmp	r3, r4
 800a616:	bfbf      	itttt	lt
 800a618:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a61a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a61c:	1ae3      	sublt	r3, r4, r3
 800a61e:	18d2      	addlt	r2, r2, r3
 800a620:	bfa8      	it	ge
 800a622:	1b1c      	subge	r4, r3, r4
 800a624:	9b07      	ldr	r3, [sp, #28]
 800a626:	bfbe      	ittt	lt
 800a628:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a62a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a62c:	2400      	movlt	r4, #0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfb5      	itete	lt
 800a632:	eba8 0603 	sublt.w	r6, r8, r3
 800a636:	4646      	movge	r6, r8
 800a638:	2300      	movlt	r3, #0
 800a63a:	9b07      	ldrge	r3, [sp, #28]
 800a63c:	e730      	b.n	800a4a0 <_dtoa_r+0x730>
 800a63e:	4646      	mov	r6, r8
 800a640:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a642:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a644:	e735      	b.n	800a4b2 <_dtoa_r+0x742>
 800a646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a648:	e75c      	b.n	800a504 <_dtoa_r+0x794>
 800a64a:	2300      	movs	r3, #0
 800a64c:	e788      	b.n	800a560 <_dtoa_r+0x7f0>
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	e786      	b.n	800a560 <_dtoa_r+0x7f0>
 800a652:	2300      	movs	r3, #0
 800a654:	930a      	str	r3, [sp, #40]	@ 0x28
 800a656:	e788      	b.n	800a56a <_dtoa_r+0x7fa>
 800a658:	d09f      	beq.n	800a59a <_dtoa_r+0x82a>
 800a65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a65c:	331c      	adds	r3, #28
 800a65e:	441a      	add	r2, r3
 800a660:	4498      	add	r8, r3
 800a662:	441e      	add	r6, r3
 800a664:	9209      	str	r2, [sp, #36]	@ 0x24
 800a666:	e798      	b.n	800a59a <_dtoa_r+0x82a>
 800a668:	4603      	mov	r3, r0
 800a66a:	e7f6      	b.n	800a65a <_dtoa_r+0x8ea>
 800a66c:	9b07      	ldr	r3, [sp, #28]
 800a66e:	9704      	str	r7, [sp, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc20      	bgt.n	800a6b6 <_dtoa_r+0x946>
 800a674:	9308      	str	r3, [sp, #32]
 800a676:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a678:	2b02      	cmp	r3, #2
 800a67a:	dd1e      	ble.n	800a6ba <_dtoa_r+0x94a>
 800a67c:	9b08      	ldr	r3, [sp, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f47f aebc 	bne.w	800a3fc <_dtoa_r+0x68c>
 800a684:	4621      	mov	r1, r4
 800a686:	2205      	movs	r2, #5
 800a688:	4658      	mov	r0, fp
 800a68a:	f001 f923 	bl	800b8d4 <__multadd>
 800a68e:	4601      	mov	r1, r0
 800a690:	4604      	mov	r4, r0
 800a692:	4648      	mov	r0, r9
 800a694:	f001 fb7e 	bl	800bd94 <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	f77f aeaf 	ble.w	800a3fc <_dtoa_r+0x68c>
 800a69e:	2331      	movs	r3, #49	@ 0x31
 800a6a0:	4656      	mov	r6, sl
 800a6a2:	f806 3b01 	strb.w	r3, [r6], #1
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	e6aa      	b.n	800a404 <_dtoa_r+0x694>
 800a6ae:	9c07      	ldr	r4, [sp, #28]
 800a6b0:	9704      	str	r7, [sp, #16]
 800a6b2:	4625      	mov	r5, r4
 800a6b4:	e7f3      	b.n	800a69e <_dtoa_r+0x92e>
 800a6b6:	9b07      	ldr	r3, [sp, #28]
 800a6b8:	9308      	str	r3, [sp, #32]
 800a6ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 8104 	beq.w	800a8ca <_dtoa_r+0xb5a>
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	dd05      	ble.n	800a6d2 <_dtoa_r+0x962>
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	4658      	mov	r0, fp
 800a6cc:	f001 faf6 	bl	800bcbc <__lshift>
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d05a      	beq.n	800a78e <_dtoa_r+0xa1e>
 800a6d8:	4658      	mov	r0, fp
 800a6da:	6869      	ldr	r1, [r5, #4]
 800a6dc:	f001 f898 	bl	800b810 <_Balloc>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	b928      	cbnz	r0, 800a6f0 <_dtoa_r+0x980>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6ea:	4b83      	ldr	r3, [pc, #524]	@ (800a8f8 <_dtoa_r+0xb88>)
 800a6ec:	f7ff bb54 	b.w	8009d98 <_dtoa_r+0x28>
 800a6f0:	692a      	ldr	r2, [r5, #16]
 800a6f2:	f105 010c 	add.w	r1, r5, #12
 800a6f6:	3202      	adds	r2, #2
 800a6f8:	0092      	lsls	r2, r2, #2
 800a6fa:	300c      	adds	r0, #12
 800a6fc:	f7ff fa97 	bl	8009c2e <memcpy>
 800a700:	2201      	movs	r2, #1
 800a702:	4631      	mov	r1, r6
 800a704:	4658      	mov	r0, fp
 800a706:	f001 fad9 	bl	800bcbc <__lshift>
 800a70a:	462f      	mov	r7, r5
 800a70c:	4605      	mov	r5, r0
 800a70e:	f10a 0301 	add.w	r3, sl, #1
 800a712:	9307      	str	r3, [sp, #28]
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	4453      	add	r3, sl
 800a718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a71a:	9b02      	ldr	r3, [sp, #8]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	930a      	str	r3, [sp, #40]	@ 0x28
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	4621      	mov	r1, r4
 800a726:	3b01      	subs	r3, #1
 800a728:	4648      	mov	r0, r9
 800a72a:	9302      	str	r3, [sp, #8]
 800a72c:	f7ff fa98 	bl	8009c60 <quorem>
 800a730:	4639      	mov	r1, r7
 800a732:	9008      	str	r0, [sp, #32]
 800a734:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a738:	4648      	mov	r0, r9
 800a73a:	f001 fb2b 	bl	800bd94 <__mcmp>
 800a73e:	462a      	mov	r2, r5
 800a740:	9009      	str	r0, [sp, #36]	@ 0x24
 800a742:	4621      	mov	r1, r4
 800a744:	4658      	mov	r0, fp
 800a746:	f001 fb41 	bl	800bdcc <__mdiff>
 800a74a:	68c2      	ldr	r2, [r0, #12]
 800a74c:	4606      	mov	r6, r0
 800a74e:	bb02      	cbnz	r2, 800a792 <_dtoa_r+0xa22>
 800a750:	4601      	mov	r1, r0
 800a752:	4648      	mov	r0, r9
 800a754:	f001 fb1e 	bl	800bd94 <__mcmp>
 800a758:	4602      	mov	r2, r0
 800a75a:	4631      	mov	r1, r6
 800a75c:	4658      	mov	r0, fp
 800a75e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a760:	f001 f896 	bl	800b890 <_Bfree>
 800a764:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a766:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a768:	9e07      	ldr	r6, [sp, #28]
 800a76a:	ea43 0102 	orr.w	r1, r3, r2
 800a76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a770:	4319      	orrs	r1, r3
 800a772:	d110      	bne.n	800a796 <_dtoa_r+0xa26>
 800a774:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a778:	d029      	beq.n	800a7ce <_dtoa_r+0xa5e>
 800a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd02      	ble.n	800a786 <_dtoa_r+0xa16>
 800a780:	9b08      	ldr	r3, [sp, #32]
 800a782:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a786:	9b02      	ldr	r3, [sp, #8]
 800a788:	f883 8000 	strb.w	r8, [r3]
 800a78c:	e63b      	b.n	800a406 <_dtoa_r+0x696>
 800a78e:	4628      	mov	r0, r5
 800a790:	e7bb      	b.n	800a70a <_dtoa_r+0x99a>
 800a792:	2201      	movs	r2, #1
 800a794:	e7e1      	b.n	800a75a <_dtoa_r+0x9ea>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db04      	blt.n	800a7a6 <_dtoa_r+0xa36>
 800a79c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7a2:	430b      	orrs	r3, r1
 800a7a4:	d120      	bne.n	800a7e8 <_dtoa_r+0xa78>
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	dded      	ble.n	800a786 <_dtoa_r+0xa16>
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	4658      	mov	r0, fp
 800a7b0:	f001 fa84 	bl	800bcbc <__lshift>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4681      	mov	r9, r0
 800a7b8:	f001 faec 	bl	800bd94 <__mcmp>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	dc03      	bgt.n	800a7c8 <_dtoa_r+0xa58>
 800a7c0:	d1e1      	bne.n	800a786 <_dtoa_r+0xa16>
 800a7c2:	f018 0f01 	tst.w	r8, #1
 800a7c6:	d0de      	beq.n	800a786 <_dtoa_r+0xa16>
 800a7c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7cc:	d1d8      	bne.n	800a780 <_dtoa_r+0xa10>
 800a7ce:	2339      	movs	r3, #57	@ 0x39
 800a7d0:	9a02      	ldr	r2, [sp, #8]
 800a7d2:	7013      	strb	r3, [r2, #0]
 800a7d4:	4633      	mov	r3, r6
 800a7d6:	461e      	mov	r6, r3
 800a7d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	2a39      	cmp	r2, #57	@ 0x39
 800a7e0:	d052      	beq.n	800a888 <_dtoa_r+0xb18>
 800a7e2:	3201      	adds	r2, #1
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	e60e      	b.n	800a406 <_dtoa_r+0x696>
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	dd07      	ble.n	800a7fc <_dtoa_r+0xa8c>
 800a7ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7f0:	d0ed      	beq.n	800a7ce <_dtoa_r+0xa5e>
 800a7f2:	9a02      	ldr	r2, [sp, #8]
 800a7f4:	f108 0301 	add.w	r3, r8, #1
 800a7f8:	7013      	strb	r3, [r2, #0]
 800a7fa:	e604      	b.n	800a406 <_dtoa_r+0x696>
 800a7fc:	9b07      	ldr	r3, [sp, #28]
 800a7fe:	9a07      	ldr	r2, [sp, #28]
 800a800:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a806:	4293      	cmp	r3, r2
 800a808:	d028      	beq.n	800a85c <_dtoa_r+0xaec>
 800a80a:	4649      	mov	r1, r9
 800a80c:	2300      	movs	r3, #0
 800a80e:	220a      	movs	r2, #10
 800a810:	4658      	mov	r0, fp
 800a812:	f001 f85f 	bl	800b8d4 <__multadd>
 800a816:	42af      	cmp	r7, r5
 800a818:	4681      	mov	r9, r0
 800a81a:	f04f 0300 	mov.w	r3, #0
 800a81e:	f04f 020a 	mov.w	r2, #10
 800a822:	4639      	mov	r1, r7
 800a824:	4658      	mov	r0, fp
 800a826:	d107      	bne.n	800a838 <_dtoa_r+0xac8>
 800a828:	f001 f854 	bl	800b8d4 <__multadd>
 800a82c:	4607      	mov	r7, r0
 800a82e:	4605      	mov	r5, r0
 800a830:	9b07      	ldr	r3, [sp, #28]
 800a832:	3301      	adds	r3, #1
 800a834:	9307      	str	r3, [sp, #28]
 800a836:	e774      	b.n	800a722 <_dtoa_r+0x9b2>
 800a838:	f001 f84c 	bl	800b8d4 <__multadd>
 800a83c:	4629      	mov	r1, r5
 800a83e:	4607      	mov	r7, r0
 800a840:	2300      	movs	r3, #0
 800a842:	220a      	movs	r2, #10
 800a844:	4658      	mov	r0, fp
 800a846:	f001 f845 	bl	800b8d4 <__multadd>
 800a84a:	4605      	mov	r5, r0
 800a84c:	e7f0      	b.n	800a830 <_dtoa_r+0xac0>
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	2700      	movs	r7, #0
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfcc      	ite	gt
 800a856:	461e      	movgt	r6, r3
 800a858:	2601      	movle	r6, #1
 800a85a:	4456      	add	r6, sl
 800a85c:	4649      	mov	r1, r9
 800a85e:	2201      	movs	r2, #1
 800a860:	4658      	mov	r0, fp
 800a862:	f001 fa2b 	bl	800bcbc <__lshift>
 800a866:	4621      	mov	r1, r4
 800a868:	4681      	mov	r9, r0
 800a86a:	f001 fa93 	bl	800bd94 <__mcmp>
 800a86e:	2800      	cmp	r0, #0
 800a870:	dcb0      	bgt.n	800a7d4 <_dtoa_r+0xa64>
 800a872:	d102      	bne.n	800a87a <_dtoa_r+0xb0a>
 800a874:	f018 0f01 	tst.w	r8, #1
 800a878:	d1ac      	bne.n	800a7d4 <_dtoa_r+0xa64>
 800a87a:	4633      	mov	r3, r6
 800a87c:	461e      	mov	r6, r3
 800a87e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a882:	2a30      	cmp	r2, #48	@ 0x30
 800a884:	d0fa      	beq.n	800a87c <_dtoa_r+0xb0c>
 800a886:	e5be      	b.n	800a406 <_dtoa_r+0x696>
 800a888:	459a      	cmp	sl, r3
 800a88a:	d1a4      	bne.n	800a7d6 <_dtoa_r+0xa66>
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	3301      	adds	r3, #1
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	2331      	movs	r3, #49	@ 0x31
 800a894:	f88a 3000 	strb.w	r3, [sl]
 800a898:	e5b5      	b.n	800a406 <_dtoa_r+0x696>
 800a89a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a89c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8fc <_dtoa_r+0xb8c>
 800a8a0:	b11b      	cbz	r3, 800a8aa <_dtoa_r+0xb3a>
 800a8a2:	f10a 0308 	add.w	r3, sl, #8
 800a8a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	b017      	add	sp, #92	@ 0x5c
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	f77f ae3d 	ble.w	800a534 <_dtoa_r+0x7c4>
 800a8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e65b      	b.n	800a57a <_dtoa_r+0x80a>
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f77f aed6 	ble.w	800a676 <_dtoa_r+0x906>
 800a8ca:	4656      	mov	r6, sl
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4648      	mov	r0, r9
 800a8d0:	f7ff f9c6 	bl	8009c60 <quorem>
 800a8d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8d8:	9b08      	ldr	r3, [sp, #32]
 800a8da:	f806 8b01 	strb.w	r8, [r6], #1
 800a8de:	eba6 020a 	sub.w	r2, r6, sl
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	ddb3      	ble.n	800a84e <_dtoa_r+0xade>
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	220a      	movs	r2, #10
 800a8ec:	4658      	mov	r0, fp
 800a8ee:	f000 fff1 	bl	800b8d4 <__multadd>
 800a8f2:	4681      	mov	r9, r0
 800a8f4:	e7ea      	b.n	800a8cc <_dtoa_r+0xb5c>
 800a8f6:	bf00      	nop
 800a8f8:	0800e30d 	.word	0x0800e30d
 800a8fc:	0800e291 	.word	0x0800e291

0800a900 <_free_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4605      	mov	r5, r0
 800a904:	2900      	cmp	r1, #0
 800a906:	d040      	beq.n	800a98a <_free_r+0x8a>
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f0c      	subs	r4, r1, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfb8      	it	lt
 800a912:	18e4      	addlt	r4, r4, r3
 800a914:	f000 ff70 	bl	800b7f8 <__malloc_lock>
 800a918:	4a1c      	ldr	r2, [pc, #112]	@ (800a98c <_free_r+0x8c>)
 800a91a:	6813      	ldr	r3, [r2, #0]
 800a91c:	b933      	cbnz	r3, 800a92c <_free_r+0x2c>
 800a91e:	6063      	str	r3, [r4, #4]
 800a920:	6014      	str	r4, [r2, #0]
 800a922:	4628      	mov	r0, r5
 800a924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a928:	f000 bf6c 	b.w	800b804 <__malloc_unlock>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d908      	bls.n	800a942 <_free_r+0x42>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	1821      	adds	r1, r4, r0
 800a934:	428b      	cmp	r3, r1
 800a936:	bf01      	itttt	eq
 800a938:	6819      	ldreq	r1, [r3, #0]
 800a93a:	685b      	ldreq	r3, [r3, #4]
 800a93c:	1809      	addeq	r1, r1, r0
 800a93e:	6021      	streq	r1, [r4, #0]
 800a940:	e7ed      	b.n	800a91e <_free_r+0x1e>
 800a942:	461a      	mov	r2, r3
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	b10b      	cbz	r3, 800a94c <_free_r+0x4c>
 800a948:	42a3      	cmp	r3, r4
 800a94a:	d9fa      	bls.n	800a942 <_free_r+0x42>
 800a94c:	6811      	ldr	r1, [r2, #0]
 800a94e:	1850      	adds	r0, r2, r1
 800a950:	42a0      	cmp	r0, r4
 800a952:	d10b      	bne.n	800a96c <_free_r+0x6c>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	4401      	add	r1, r0
 800a958:	1850      	adds	r0, r2, r1
 800a95a:	4283      	cmp	r3, r0
 800a95c:	6011      	str	r1, [r2, #0]
 800a95e:	d1e0      	bne.n	800a922 <_free_r+0x22>
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4408      	add	r0, r1
 800a966:	6010      	str	r0, [r2, #0]
 800a968:	6053      	str	r3, [r2, #4]
 800a96a:	e7da      	b.n	800a922 <_free_r+0x22>
 800a96c:	d902      	bls.n	800a974 <_free_r+0x74>
 800a96e:	230c      	movs	r3, #12
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	e7d6      	b.n	800a922 <_free_r+0x22>
 800a974:	6820      	ldr	r0, [r4, #0]
 800a976:	1821      	adds	r1, r4, r0
 800a978:	428b      	cmp	r3, r1
 800a97a:	bf01      	itttt	eq
 800a97c:	6819      	ldreq	r1, [r3, #0]
 800a97e:	685b      	ldreq	r3, [r3, #4]
 800a980:	1809      	addeq	r1, r1, r0
 800a982:	6021      	streq	r1, [r4, #0]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	6054      	str	r4, [r2, #4]
 800a988:	e7cb      	b.n	800a922 <_free_r+0x22>
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20002ca0 	.word	0x20002ca0

0800a990 <rshift>:
 800a990:	6903      	ldr	r3, [r0, #16]
 800a992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a99a:	f100 0414 	add.w	r4, r0, #20
 800a99e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9a2:	dd46      	ble.n	800aa32 <rshift+0xa2>
 800a9a4:	f011 011f 	ands.w	r1, r1, #31
 800a9a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9b0:	d10c      	bne.n	800a9cc <rshift+0x3c>
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f100 0710 	add.w	r7, r0, #16
 800a9b8:	42b1      	cmp	r1, r6
 800a9ba:	d335      	bcc.n	800aa28 <rshift+0x98>
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	1eea      	subs	r2, r5, #3
 800a9c2:	4296      	cmp	r6, r2
 800a9c4:	bf38      	it	cc
 800a9c6:	2300      	movcc	r3, #0
 800a9c8:	4423      	add	r3, r4
 800a9ca:	e015      	b.n	800a9f8 <rshift+0x68>
 800a9cc:	46a1      	mov	r9, r4
 800a9ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9d2:	f1c1 0820 	rsb	r8, r1, #32
 800a9d6:	40cf      	lsrs	r7, r1
 800a9d8:	f105 0e04 	add.w	lr, r5, #4
 800a9dc:	4576      	cmp	r6, lr
 800a9de:	46f4      	mov	ip, lr
 800a9e0:	d816      	bhi.n	800aa10 <rshift+0x80>
 800a9e2:	1a9a      	subs	r2, r3, r2
 800a9e4:	0092      	lsls	r2, r2, #2
 800a9e6:	3a04      	subs	r2, #4
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	42ae      	cmp	r6, r5
 800a9ec:	bf38      	it	cc
 800a9ee:	2200      	movcc	r2, #0
 800a9f0:	18a3      	adds	r3, r4, r2
 800a9f2:	50a7      	str	r7, [r4, r2]
 800a9f4:	b107      	cbz	r7, 800a9f8 <rshift+0x68>
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	eba3 0204 	sub.w	r2, r3, r4
 800a9fe:	bf08      	it	eq
 800aa00:	2300      	moveq	r3, #0
 800aa02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa06:	6102      	str	r2, [r0, #16]
 800aa08:	bf08      	it	eq
 800aa0a:	6143      	streq	r3, [r0, #20]
 800aa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa10:	f8dc c000 	ldr.w	ip, [ip]
 800aa14:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa18:	ea4c 0707 	orr.w	r7, ip, r7
 800aa1c:	f849 7b04 	str.w	r7, [r9], #4
 800aa20:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa24:	40cf      	lsrs	r7, r1
 800aa26:	e7d9      	b.n	800a9dc <rshift+0x4c>
 800aa28:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa2c:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa30:	e7c2      	b.n	800a9b8 <rshift+0x28>
 800aa32:	4623      	mov	r3, r4
 800aa34:	e7e0      	b.n	800a9f8 <rshift+0x68>

0800aa36 <__hexdig_fun>:
 800aa36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d802      	bhi.n	800aa44 <__hexdig_fun+0xe>
 800aa3e:	3820      	subs	r0, #32
 800aa40:	b2c0      	uxtb	r0, r0
 800aa42:	4770      	bx	lr
 800aa44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa48:	2b05      	cmp	r3, #5
 800aa4a:	d801      	bhi.n	800aa50 <__hexdig_fun+0x1a>
 800aa4c:	3847      	subs	r0, #71	@ 0x47
 800aa4e:	e7f7      	b.n	800aa40 <__hexdig_fun+0xa>
 800aa50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa54:	2b05      	cmp	r3, #5
 800aa56:	d801      	bhi.n	800aa5c <__hexdig_fun+0x26>
 800aa58:	3827      	subs	r0, #39	@ 0x27
 800aa5a:	e7f1      	b.n	800aa40 <__hexdig_fun+0xa>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4770      	bx	lr

0800aa60 <__gethex>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	468a      	mov	sl, r1
 800aa66:	4690      	mov	r8, r2
 800aa68:	b085      	sub	sp, #20
 800aa6a:	9302      	str	r3, [sp, #8]
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	1c9c      	adds	r4, r3, #2
 800aa72:	46a1      	mov	r9, r4
 800aa74:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa78:	2830      	cmp	r0, #48	@ 0x30
 800aa7a:	d0fa      	beq.n	800aa72 <__gethex+0x12>
 800aa7c:	eba9 0303 	sub.w	r3, r9, r3
 800aa80:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa84:	f7ff ffd7 	bl	800aa36 <__hexdig_fun>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d168      	bne.n	800ab60 <__gethex+0x100>
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4648      	mov	r0, r9
 800aa92:	499f      	ldr	r1, [pc, #636]	@ (800ad10 <__gethex+0x2b0>)
 800aa94:	f7fe fffa 	bl	8009a8c <strncmp>
 800aa98:	4607      	mov	r7, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d167      	bne.n	800ab6e <__gethex+0x10e>
 800aa9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aaa2:	4626      	mov	r6, r4
 800aaa4:	f7ff ffc7 	bl	800aa36 <__hexdig_fun>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d062      	beq.n	800ab72 <__gethex+0x112>
 800aaac:	4623      	mov	r3, r4
 800aaae:	7818      	ldrb	r0, [r3, #0]
 800aab0:	4699      	mov	r9, r3
 800aab2:	2830      	cmp	r0, #48	@ 0x30
 800aab4:	f103 0301 	add.w	r3, r3, #1
 800aab8:	d0f9      	beq.n	800aaae <__gethex+0x4e>
 800aaba:	f7ff ffbc 	bl	800aa36 <__hexdig_fun>
 800aabe:	fab0 f580 	clz	r5, r0
 800aac2:	f04f 0b01 	mov.w	fp, #1
 800aac6:	096d      	lsrs	r5, r5, #5
 800aac8:	464a      	mov	r2, r9
 800aaca:	4616      	mov	r6, r2
 800aacc:	7830      	ldrb	r0, [r6, #0]
 800aace:	3201      	adds	r2, #1
 800aad0:	f7ff ffb1 	bl	800aa36 <__hexdig_fun>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d1f8      	bne.n	800aaca <__gethex+0x6a>
 800aad8:	2201      	movs	r2, #1
 800aada:	4630      	mov	r0, r6
 800aadc:	498c      	ldr	r1, [pc, #560]	@ (800ad10 <__gethex+0x2b0>)
 800aade:	f7fe ffd5 	bl	8009a8c <strncmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d13f      	bne.n	800ab66 <__gethex+0x106>
 800aae6:	b944      	cbnz	r4, 800aafa <__gethex+0x9a>
 800aae8:	1c74      	adds	r4, r6, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4616      	mov	r6, r2
 800aaee:	7830      	ldrb	r0, [r6, #0]
 800aaf0:	3201      	adds	r2, #1
 800aaf2:	f7ff ffa0 	bl	800aa36 <__hexdig_fun>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d1f8      	bne.n	800aaec <__gethex+0x8c>
 800aafa:	1ba4      	subs	r4, r4, r6
 800aafc:	00a7      	lsls	r7, r4, #2
 800aafe:	7833      	ldrb	r3, [r6, #0]
 800ab00:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab04:	2b50      	cmp	r3, #80	@ 0x50
 800ab06:	d13e      	bne.n	800ab86 <__gethex+0x126>
 800ab08:	7873      	ldrb	r3, [r6, #1]
 800ab0a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab0c:	d033      	beq.n	800ab76 <__gethex+0x116>
 800ab0e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab10:	d034      	beq.n	800ab7c <__gethex+0x11c>
 800ab12:	2400      	movs	r4, #0
 800ab14:	1c71      	adds	r1, r6, #1
 800ab16:	7808      	ldrb	r0, [r1, #0]
 800ab18:	f7ff ff8d 	bl	800aa36 <__hexdig_fun>
 800ab1c:	1e43      	subs	r3, r0, #1
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b18      	cmp	r3, #24
 800ab22:	d830      	bhi.n	800ab86 <__gethex+0x126>
 800ab24:	f1a0 0210 	sub.w	r2, r0, #16
 800ab28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab2c:	f7ff ff83 	bl	800aa36 <__hexdig_fun>
 800ab30:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ab34:	fa5f fc8c 	uxtb.w	ip, ip
 800ab38:	f1bc 0f18 	cmp.w	ip, #24
 800ab3c:	f04f 030a 	mov.w	r3, #10
 800ab40:	d91e      	bls.n	800ab80 <__gethex+0x120>
 800ab42:	b104      	cbz	r4, 800ab46 <__gethex+0xe6>
 800ab44:	4252      	negs	r2, r2
 800ab46:	4417      	add	r7, r2
 800ab48:	f8ca 1000 	str.w	r1, [sl]
 800ab4c:	b1ed      	cbz	r5, 800ab8a <__gethex+0x12a>
 800ab4e:	f1bb 0f00 	cmp.w	fp, #0
 800ab52:	bf0c      	ite	eq
 800ab54:	2506      	moveq	r5, #6
 800ab56:	2500      	movne	r5, #0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	b005      	add	sp, #20
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	2500      	movs	r5, #0
 800ab62:	462c      	mov	r4, r5
 800ab64:	e7b0      	b.n	800aac8 <__gethex+0x68>
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d1c7      	bne.n	800aafa <__gethex+0x9a>
 800ab6a:	4627      	mov	r7, r4
 800ab6c:	e7c7      	b.n	800aafe <__gethex+0x9e>
 800ab6e:	464e      	mov	r6, r9
 800ab70:	462f      	mov	r7, r5
 800ab72:	2501      	movs	r5, #1
 800ab74:	e7c3      	b.n	800aafe <__gethex+0x9e>
 800ab76:	2400      	movs	r4, #0
 800ab78:	1cb1      	adds	r1, r6, #2
 800ab7a:	e7cc      	b.n	800ab16 <__gethex+0xb6>
 800ab7c:	2401      	movs	r4, #1
 800ab7e:	e7fb      	b.n	800ab78 <__gethex+0x118>
 800ab80:	fb03 0002 	mla	r0, r3, r2, r0
 800ab84:	e7ce      	b.n	800ab24 <__gethex+0xc4>
 800ab86:	4631      	mov	r1, r6
 800ab88:	e7de      	b.n	800ab48 <__gethex+0xe8>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	eba6 0309 	sub.w	r3, r6, r9
 800ab90:	3b01      	subs	r3, #1
 800ab92:	2b07      	cmp	r3, #7
 800ab94:	dc0a      	bgt.n	800abac <__gethex+0x14c>
 800ab96:	9801      	ldr	r0, [sp, #4]
 800ab98:	f000 fe3a 	bl	800b810 <_Balloc>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	b940      	cbnz	r0, 800abb2 <__gethex+0x152>
 800aba0:	4602      	mov	r2, r0
 800aba2:	21e4      	movs	r1, #228	@ 0xe4
 800aba4:	4b5b      	ldr	r3, [pc, #364]	@ (800ad14 <__gethex+0x2b4>)
 800aba6:	485c      	ldr	r0, [pc, #368]	@ (800ad18 <__gethex+0x2b8>)
 800aba8:	f001 fc5c 	bl	800c464 <__assert_func>
 800abac:	3101      	adds	r1, #1
 800abae:	105b      	asrs	r3, r3, #1
 800abb0:	e7ef      	b.n	800ab92 <__gethex+0x132>
 800abb2:	2300      	movs	r3, #0
 800abb4:	f100 0a14 	add.w	sl, r0, #20
 800abb8:	4655      	mov	r5, sl
 800abba:	469b      	mov	fp, r3
 800abbc:	45b1      	cmp	r9, r6
 800abbe:	d337      	bcc.n	800ac30 <__gethex+0x1d0>
 800abc0:	f845 bb04 	str.w	fp, [r5], #4
 800abc4:	eba5 050a 	sub.w	r5, r5, sl
 800abc8:	10ad      	asrs	r5, r5, #2
 800abca:	6125      	str	r5, [r4, #16]
 800abcc:	4658      	mov	r0, fp
 800abce:	f000 ff11 	bl	800b9f4 <__hi0bits>
 800abd2:	016d      	lsls	r5, r5, #5
 800abd4:	f8d8 6000 	ldr.w	r6, [r8]
 800abd8:	1a2d      	subs	r5, r5, r0
 800abda:	42b5      	cmp	r5, r6
 800abdc:	dd54      	ble.n	800ac88 <__gethex+0x228>
 800abde:	1bad      	subs	r5, r5, r6
 800abe0:	4629      	mov	r1, r5
 800abe2:	4620      	mov	r0, r4
 800abe4:	f001 fa99 	bl	800c11a <__any_on>
 800abe8:	4681      	mov	r9, r0
 800abea:	b178      	cbz	r0, 800ac0c <__gethex+0x1ac>
 800abec:	f04f 0901 	mov.w	r9, #1
 800abf0:	1e6b      	subs	r3, r5, #1
 800abf2:	1159      	asrs	r1, r3, #5
 800abf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abf8:	f003 021f 	and.w	r2, r3, #31
 800abfc:	fa09 f202 	lsl.w	r2, r9, r2
 800ac00:	420a      	tst	r2, r1
 800ac02:	d003      	beq.n	800ac0c <__gethex+0x1ac>
 800ac04:	454b      	cmp	r3, r9
 800ac06:	dc36      	bgt.n	800ac76 <__gethex+0x216>
 800ac08:	f04f 0902 	mov.w	r9, #2
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7ff febe 	bl	800a990 <rshift>
 800ac14:	442f      	add	r7, r5
 800ac16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac1a:	42bb      	cmp	r3, r7
 800ac1c:	da42      	bge.n	800aca4 <__gethex+0x244>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	f000 fe35 	bl	800b890 <_Bfree>
 800ac26:	2300      	movs	r3, #0
 800ac28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac2a:	25a3      	movs	r5, #163	@ 0xa3
 800ac2c:	6013      	str	r3, [r2, #0]
 800ac2e:	e793      	b.n	800ab58 <__gethex+0xf8>
 800ac30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac34:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac36:	d012      	beq.n	800ac5e <__gethex+0x1fe>
 800ac38:	2b20      	cmp	r3, #32
 800ac3a:	d104      	bne.n	800ac46 <__gethex+0x1e6>
 800ac3c:	f845 bb04 	str.w	fp, [r5], #4
 800ac40:	f04f 0b00 	mov.w	fp, #0
 800ac44:	465b      	mov	r3, fp
 800ac46:	7830      	ldrb	r0, [r6, #0]
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	f7ff fef4 	bl	800aa36 <__hexdig_fun>
 800ac4e:	9b03      	ldr	r3, [sp, #12]
 800ac50:	f000 000f 	and.w	r0, r0, #15
 800ac54:	4098      	lsls	r0, r3
 800ac56:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	e7ae      	b.n	800abbc <__gethex+0x15c>
 800ac5e:	45b1      	cmp	r9, r6
 800ac60:	d8ea      	bhi.n	800ac38 <__gethex+0x1d8>
 800ac62:	2201      	movs	r2, #1
 800ac64:	4630      	mov	r0, r6
 800ac66:	492a      	ldr	r1, [pc, #168]	@ (800ad10 <__gethex+0x2b0>)
 800ac68:	9303      	str	r3, [sp, #12]
 800ac6a:	f7fe ff0f 	bl	8009a8c <strncmp>
 800ac6e:	9b03      	ldr	r3, [sp, #12]
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d1e1      	bne.n	800ac38 <__gethex+0x1d8>
 800ac74:	e7a2      	b.n	800abbc <__gethex+0x15c>
 800ac76:	4620      	mov	r0, r4
 800ac78:	1ea9      	subs	r1, r5, #2
 800ac7a:	f001 fa4e 	bl	800c11a <__any_on>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d0c2      	beq.n	800ac08 <__gethex+0x1a8>
 800ac82:	f04f 0903 	mov.w	r9, #3
 800ac86:	e7c1      	b.n	800ac0c <__gethex+0x1ac>
 800ac88:	da09      	bge.n	800ac9e <__gethex+0x23e>
 800ac8a:	1b75      	subs	r5, r6, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	462a      	mov	r2, r5
 800ac90:	9801      	ldr	r0, [sp, #4]
 800ac92:	f001 f813 	bl	800bcbc <__lshift>
 800ac96:	4604      	mov	r4, r0
 800ac98:	1b7f      	subs	r7, r7, r5
 800ac9a:	f100 0a14 	add.w	sl, r0, #20
 800ac9e:	f04f 0900 	mov.w	r9, #0
 800aca2:	e7b8      	b.n	800ac16 <__gethex+0x1b6>
 800aca4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aca8:	42bd      	cmp	r5, r7
 800acaa:	dd6f      	ble.n	800ad8c <__gethex+0x32c>
 800acac:	1bed      	subs	r5, r5, r7
 800acae:	42ae      	cmp	r6, r5
 800acb0:	dc34      	bgt.n	800ad1c <__gethex+0x2bc>
 800acb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d022      	beq.n	800ad00 <__gethex+0x2a0>
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d024      	beq.n	800ad08 <__gethex+0x2a8>
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d115      	bne.n	800acee <__gethex+0x28e>
 800acc2:	42ae      	cmp	r6, r5
 800acc4:	d113      	bne.n	800acee <__gethex+0x28e>
 800acc6:	2e01      	cmp	r6, #1
 800acc8:	d10b      	bne.n	800ace2 <__gethex+0x282>
 800acca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acce:	9a02      	ldr	r2, [sp, #8]
 800acd0:	2562      	movs	r5, #98	@ 0x62
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	2301      	movs	r3, #1
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	f8ca 3000 	str.w	r3, [sl]
 800acdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acde:	601c      	str	r4, [r3, #0]
 800ace0:	e73a      	b.n	800ab58 <__gethex+0xf8>
 800ace2:	4620      	mov	r0, r4
 800ace4:	1e71      	subs	r1, r6, #1
 800ace6:	f001 fa18 	bl	800c11a <__any_on>
 800acea:	2800      	cmp	r0, #0
 800acec:	d1ed      	bne.n	800acca <__gethex+0x26a>
 800acee:	4621      	mov	r1, r4
 800acf0:	9801      	ldr	r0, [sp, #4]
 800acf2:	f000 fdcd 	bl	800b890 <_Bfree>
 800acf6:	2300      	movs	r3, #0
 800acf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acfa:	2550      	movs	r5, #80	@ 0x50
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	e72b      	b.n	800ab58 <__gethex+0xf8>
 800ad00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f3      	bne.n	800acee <__gethex+0x28e>
 800ad06:	e7e0      	b.n	800acca <__gethex+0x26a>
 800ad08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1dd      	bne.n	800acca <__gethex+0x26a>
 800ad0e:	e7ee      	b.n	800acee <__gethex+0x28e>
 800ad10:	0800e133 	.word	0x0800e133
 800ad14:	0800e30d 	.word	0x0800e30d
 800ad18:	0800e31e 	.word	0x0800e31e
 800ad1c:	1e6f      	subs	r7, r5, #1
 800ad1e:	f1b9 0f00 	cmp.w	r9, #0
 800ad22:	d130      	bne.n	800ad86 <__gethex+0x326>
 800ad24:	b127      	cbz	r7, 800ad30 <__gethex+0x2d0>
 800ad26:	4639      	mov	r1, r7
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f001 f9f6 	bl	800c11a <__any_on>
 800ad2e:	4681      	mov	r9, r0
 800ad30:	2301      	movs	r3, #1
 800ad32:	4629      	mov	r1, r5
 800ad34:	1b76      	subs	r6, r6, r5
 800ad36:	2502      	movs	r5, #2
 800ad38:	117a      	asrs	r2, r7, #5
 800ad3a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad3e:	f007 071f 	and.w	r7, r7, #31
 800ad42:	40bb      	lsls	r3, r7
 800ad44:	4213      	tst	r3, r2
 800ad46:	4620      	mov	r0, r4
 800ad48:	bf18      	it	ne
 800ad4a:	f049 0902 	orrne.w	r9, r9, #2
 800ad4e:	f7ff fe1f 	bl	800a990 <rshift>
 800ad52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad56:	f1b9 0f00 	cmp.w	r9, #0
 800ad5a:	d047      	beq.n	800adec <__gethex+0x38c>
 800ad5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d015      	beq.n	800ad90 <__gethex+0x330>
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d017      	beq.n	800ad98 <__gethex+0x338>
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d109      	bne.n	800ad80 <__gethex+0x320>
 800ad6c:	f019 0f02 	tst.w	r9, #2
 800ad70:	d006      	beq.n	800ad80 <__gethex+0x320>
 800ad72:	f8da 3000 	ldr.w	r3, [sl]
 800ad76:	ea49 0903 	orr.w	r9, r9, r3
 800ad7a:	f019 0f01 	tst.w	r9, #1
 800ad7e:	d10e      	bne.n	800ad9e <__gethex+0x33e>
 800ad80:	f045 0510 	orr.w	r5, r5, #16
 800ad84:	e032      	b.n	800adec <__gethex+0x38c>
 800ad86:	f04f 0901 	mov.w	r9, #1
 800ad8a:	e7d1      	b.n	800ad30 <__gethex+0x2d0>
 800ad8c:	2501      	movs	r5, #1
 800ad8e:	e7e2      	b.n	800ad56 <__gethex+0x2f6>
 800ad90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad92:	f1c3 0301 	rsb	r3, r3, #1
 800ad96:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <__gethex+0x320>
 800ad9e:	f04f 0c00 	mov.w	ip, #0
 800ada2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ada6:	f104 0314 	add.w	r3, r4, #20
 800adaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800adbc:	d01b      	beq.n	800adf6 <__gethex+0x396>
 800adbe:	3201      	adds	r2, #1
 800adc0:	6002      	str	r2, [r0, #0]
 800adc2:	2d02      	cmp	r5, #2
 800adc4:	f104 0314 	add.w	r3, r4, #20
 800adc8:	d13c      	bne.n	800ae44 <__gethex+0x3e4>
 800adca:	f8d8 2000 	ldr.w	r2, [r8]
 800adce:	3a01      	subs	r2, #1
 800add0:	42b2      	cmp	r2, r6
 800add2:	d109      	bne.n	800ade8 <__gethex+0x388>
 800add4:	2201      	movs	r2, #1
 800add6:	1171      	asrs	r1, r6, #5
 800add8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800addc:	f006 061f 	and.w	r6, r6, #31
 800ade0:	fa02 f606 	lsl.w	r6, r2, r6
 800ade4:	421e      	tst	r6, r3
 800ade6:	d13a      	bne.n	800ae5e <__gethex+0x3fe>
 800ade8:	f045 0520 	orr.w	r5, r5, #32
 800adec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adee:	601c      	str	r4, [r3, #0]
 800adf0:	9b02      	ldr	r3, [sp, #8]
 800adf2:	601f      	str	r7, [r3, #0]
 800adf4:	e6b0      	b.n	800ab58 <__gethex+0xf8>
 800adf6:	4299      	cmp	r1, r3
 800adf8:	f843 cc04 	str.w	ip, [r3, #-4]
 800adfc:	d8d9      	bhi.n	800adb2 <__gethex+0x352>
 800adfe:	68a3      	ldr	r3, [r4, #8]
 800ae00:	459b      	cmp	fp, r3
 800ae02:	db17      	blt.n	800ae34 <__gethex+0x3d4>
 800ae04:	6861      	ldr	r1, [r4, #4]
 800ae06:	9801      	ldr	r0, [sp, #4]
 800ae08:	3101      	adds	r1, #1
 800ae0a:	f000 fd01 	bl	800b810 <_Balloc>
 800ae0e:	4681      	mov	r9, r0
 800ae10:	b918      	cbnz	r0, 800ae1a <__gethex+0x3ba>
 800ae12:	4602      	mov	r2, r0
 800ae14:	2184      	movs	r1, #132	@ 0x84
 800ae16:	4b19      	ldr	r3, [pc, #100]	@ (800ae7c <__gethex+0x41c>)
 800ae18:	e6c5      	b.n	800aba6 <__gethex+0x146>
 800ae1a:	6922      	ldr	r2, [r4, #16]
 800ae1c:	f104 010c 	add.w	r1, r4, #12
 800ae20:	3202      	adds	r2, #2
 800ae22:	0092      	lsls	r2, r2, #2
 800ae24:	300c      	adds	r0, #12
 800ae26:	f7fe ff02 	bl	8009c2e <memcpy>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	9801      	ldr	r0, [sp, #4]
 800ae2e:	f000 fd2f 	bl	800b890 <_Bfree>
 800ae32:	464c      	mov	r4, r9
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	6122      	str	r2, [r4, #16]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae40:	615a      	str	r2, [r3, #20]
 800ae42:	e7be      	b.n	800adc2 <__gethex+0x362>
 800ae44:	6922      	ldr	r2, [r4, #16]
 800ae46:	455a      	cmp	r2, fp
 800ae48:	dd0b      	ble.n	800ae62 <__gethex+0x402>
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f7ff fd9f 	bl	800a990 <rshift>
 800ae52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae56:	3701      	adds	r7, #1
 800ae58:	42bb      	cmp	r3, r7
 800ae5a:	f6ff aee0 	blt.w	800ac1e <__gethex+0x1be>
 800ae5e:	2501      	movs	r5, #1
 800ae60:	e7c2      	b.n	800ade8 <__gethex+0x388>
 800ae62:	f016 061f 	ands.w	r6, r6, #31
 800ae66:	d0fa      	beq.n	800ae5e <__gethex+0x3fe>
 800ae68:	4453      	add	r3, sl
 800ae6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae6e:	f000 fdc1 	bl	800b9f4 <__hi0bits>
 800ae72:	f1c6 0620 	rsb	r6, r6, #32
 800ae76:	42b0      	cmp	r0, r6
 800ae78:	dbe7      	blt.n	800ae4a <__gethex+0x3ea>
 800ae7a:	e7f0      	b.n	800ae5e <__gethex+0x3fe>
 800ae7c:	0800e30d 	.word	0x0800e30d

0800ae80 <L_shift>:
 800ae80:	f1c2 0208 	rsb	r2, r2, #8
 800ae84:	0092      	lsls	r2, r2, #2
 800ae86:	b570      	push	{r4, r5, r6, lr}
 800ae88:	f1c2 0620 	rsb	r6, r2, #32
 800ae8c:	6843      	ldr	r3, [r0, #4]
 800ae8e:	6804      	ldr	r4, [r0, #0]
 800ae90:	fa03 f506 	lsl.w	r5, r3, r6
 800ae94:	432c      	orrs	r4, r5
 800ae96:	40d3      	lsrs	r3, r2
 800ae98:	6004      	str	r4, [r0, #0]
 800ae9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae9e:	4288      	cmp	r0, r1
 800aea0:	d3f4      	bcc.n	800ae8c <L_shift+0xc>
 800aea2:	bd70      	pop	{r4, r5, r6, pc}

0800aea4 <__match>:
 800aea4:	b530      	push	{r4, r5, lr}
 800aea6:	6803      	ldr	r3, [r0, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeae:	b914      	cbnz	r4, 800aeb6 <__match+0x12>
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	bd30      	pop	{r4, r5, pc}
 800aeb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aebe:	2d19      	cmp	r5, #25
 800aec0:	bf98      	it	ls
 800aec2:	3220      	addls	r2, #32
 800aec4:	42a2      	cmp	r2, r4
 800aec6:	d0f0      	beq.n	800aeaa <__match+0x6>
 800aec8:	2000      	movs	r0, #0
 800aeca:	e7f3      	b.n	800aeb4 <__match+0x10>

0800aecc <__hexnan>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	2500      	movs	r5, #0
 800aed2:	680b      	ldr	r3, [r1, #0]
 800aed4:	4682      	mov	sl, r0
 800aed6:	115e      	asrs	r6, r3, #5
 800aed8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aedc:	f013 031f 	ands.w	r3, r3, #31
 800aee0:	bf18      	it	ne
 800aee2:	3604      	addne	r6, #4
 800aee4:	1f37      	subs	r7, r6, #4
 800aee6:	4690      	mov	r8, r2
 800aee8:	46b9      	mov	r9, r7
 800aeea:	463c      	mov	r4, r7
 800aeec:	46ab      	mov	fp, r5
 800aeee:	b087      	sub	sp, #28
 800aef0:	6801      	ldr	r1, [r0, #0]
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	f846 5c04 	str.w	r5, [r6, #-4]
 800aef8:	9502      	str	r5, [sp, #8]
 800aefa:	784a      	ldrb	r2, [r1, #1]
 800aefc:	1c4b      	adds	r3, r1, #1
 800aefe:	9303      	str	r3, [sp, #12]
 800af00:	b342      	cbz	r2, 800af54 <__hexnan+0x88>
 800af02:	4610      	mov	r0, r2
 800af04:	9105      	str	r1, [sp, #20]
 800af06:	9204      	str	r2, [sp, #16]
 800af08:	f7ff fd95 	bl	800aa36 <__hexdig_fun>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d151      	bne.n	800afb4 <__hexnan+0xe8>
 800af10:	9a04      	ldr	r2, [sp, #16]
 800af12:	9905      	ldr	r1, [sp, #20]
 800af14:	2a20      	cmp	r2, #32
 800af16:	d818      	bhi.n	800af4a <__hexnan+0x7e>
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	459b      	cmp	fp, r3
 800af1c:	dd13      	ble.n	800af46 <__hexnan+0x7a>
 800af1e:	454c      	cmp	r4, r9
 800af20:	d206      	bcs.n	800af30 <__hexnan+0x64>
 800af22:	2d07      	cmp	r5, #7
 800af24:	dc04      	bgt.n	800af30 <__hexnan+0x64>
 800af26:	462a      	mov	r2, r5
 800af28:	4649      	mov	r1, r9
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff ffa8 	bl	800ae80 <L_shift>
 800af30:	4544      	cmp	r4, r8
 800af32:	d952      	bls.n	800afda <__hexnan+0x10e>
 800af34:	2300      	movs	r3, #0
 800af36:	f1a4 0904 	sub.w	r9, r4, #4
 800af3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af3e:	461d      	mov	r5, r3
 800af40:	464c      	mov	r4, r9
 800af42:	f8cd b008 	str.w	fp, [sp, #8]
 800af46:	9903      	ldr	r1, [sp, #12]
 800af48:	e7d7      	b.n	800aefa <__hexnan+0x2e>
 800af4a:	2a29      	cmp	r2, #41	@ 0x29
 800af4c:	d157      	bne.n	800affe <__hexnan+0x132>
 800af4e:	3102      	adds	r1, #2
 800af50:	f8ca 1000 	str.w	r1, [sl]
 800af54:	f1bb 0f00 	cmp.w	fp, #0
 800af58:	d051      	beq.n	800affe <__hexnan+0x132>
 800af5a:	454c      	cmp	r4, r9
 800af5c:	d206      	bcs.n	800af6c <__hexnan+0xa0>
 800af5e:	2d07      	cmp	r5, #7
 800af60:	dc04      	bgt.n	800af6c <__hexnan+0xa0>
 800af62:	462a      	mov	r2, r5
 800af64:	4649      	mov	r1, r9
 800af66:	4620      	mov	r0, r4
 800af68:	f7ff ff8a 	bl	800ae80 <L_shift>
 800af6c:	4544      	cmp	r4, r8
 800af6e:	d936      	bls.n	800afde <__hexnan+0x112>
 800af70:	4623      	mov	r3, r4
 800af72:	f1a8 0204 	sub.w	r2, r8, #4
 800af76:	f853 1b04 	ldr.w	r1, [r3], #4
 800af7a:	429f      	cmp	r7, r3
 800af7c:	f842 1f04 	str.w	r1, [r2, #4]!
 800af80:	d2f9      	bcs.n	800af76 <__hexnan+0xaa>
 800af82:	1b3b      	subs	r3, r7, r4
 800af84:	f023 0303 	bic.w	r3, r3, #3
 800af88:	3304      	adds	r3, #4
 800af8a:	3401      	adds	r4, #1
 800af8c:	3e03      	subs	r6, #3
 800af8e:	42b4      	cmp	r4, r6
 800af90:	bf88      	it	hi
 800af92:	2304      	movhi	r3, #4
 800af94:	2200      	movs	r2, #0
 800af96:	4443      	add	r3, r8
 800af98:	f843 2b04 	str.w	r2, [r3], #4
 800af9c:	429f      	cmp	r7, r3
 800af9e:	d2fb      	bcs.n	800af98 <__hexnan+0xcc>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	b91b      	cbnz	r3, 800afac <__hexnan+0xe0>
 800afa4:	4547      	cmp	r7, r8
 800afa6:	d128      	bne.n	800affa <__hexnan+0x12e>
 800afa8:	2301      	movs	r3, #1
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	2005      	movs	r0, #5
 800afae:	b007      	add	sp, #28
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	3501      	adds	r5, #1
 800afb6:	2d08      	cmp	r5, #8
 800afb8:	f10b 0b01 	add.w	fp, fp, #1
 800afbc:	dd06      	ble.n	800afcc <__hexnan+0x100>
 800afbe:	4544      	cmp	r4, r8
 800afc0:	d9c1      	bls.n	800af46 <__hexnan+0x7a>
 800afc2:	2300      	movs	r3, #0
 800afc4:	2501      	movs	r5, #1
 800afc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800afca:	3c04      	subs	r4, #4
 800afcc:	6822      	ldr	r2, [r4, #0]
 800afce:	f000 000f 	and.w	r0, r0, #15
 800afd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afd6:	6020      	str	r0, [r4, #0]
 800afd8:	e7b5      	b.n	800af46 <__hexnan+0x7a>
 800afda:	2508      	movs	r5, #8
 800afdc:	e7b3      	b.n	800af46 <__hexnan+0x7a>
 800afde:	9b01      	ldr	r3, [sp, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0dd      	beq.n	800afa0 <__hexnan+0xd4>
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afe8:	f1c3 0320 	rsb	r3, r3, #32
 800afec:	40da      	lsrs	r2, r3
 800afee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aff2:	4013      	ands	r3, r2
 800aff4:	f846 3c04 	str.w	r3, [r6, #-4]
 800aff8:	e7d2      	b.n	800afa0 <__hexnan+0xd4>
 800affa:	3f04      	subs	r7, #4
 800affc:	e7d0      	b.n	800afa0 <__hexnan+0xd4>
 800affe:	2004      	movs	r0, #4
 800b000:	e7d5      	b.n	800afae <__hexnan+0xe2>

0800b002 <__ssputs_r>:
 800b002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b006:	461f      	mov	r7, r3
 800b008:	688e      	ldr	r6, [r1, #8]
 800b00a:	4682      	mov	sl, r0
 800b00c:	42be      	cmp	r6, r7
 800b00e:	460c      	mov	r4, r1
 800b010:	4690      	mov	r8, r2
 800b012:	680b      	ldr	r3, [r1, #0]
 800b014:	d82d      	bhi.n	800b072 <__ssputs_r+0x70>
 800b016:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b01a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b01e:	d026      	beq.n	800b06e <__ssputs_r+0x6c>
 800b020:	6965      	ldr	r5, [r4, #20]
 800b022:	6909      	ldr	r1, [r1, #16]
 800b024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b028:	eba3 0901 	sub.w	r9, r3, r1
 800b02c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b030:	1c7b      	adds	r3, r7, #1
 800b032:	444b      	add	r3, r9
 800b034:	106d      	asrs	r5, r5, #1
 800b036:	429d      	cmp	r5, r3
 800b038:	bf38      	it	cc
 800b03a:	461d      	movcc	r5, r3
 800b03c:	0553      	lsls	r3, r2, #21
 800b03e:	d527      	bpl.n	800b090 <__ssputs_r+0x8e>
 800b040:	4629      	mov	r1, r5
 800b042:	f000 fa9f 	bl	800b584 <_malloc_r>
 800b046:	4606      	mov	r6, r0
 800b048:	b360      	cbz	r0, 800b0a4 <__ssputs_r+0xa2>
 800b04a:	464a      	mov	r2, r9
 800b04c:	6921      	ldr	r1, [r4, #16]
 800b04e:	f7fe fdee 	bl	8009c2e <memcpy>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	6126      	str	r6, [r4, #16]
 800b060:	444e      	add	r6, r9
 800b062:	6026      	str	r6, [r4, #0]
 800b064:	463e      	mov	r6, r7
 800b066:	6165      	str	r5, [r4, #20]
 800b068:	eba5 0509 	sub.w	r5, r5, r9
 800b06c:	60a5      	str	r5, [r4, #8]
 800b06e:	42be      	cmp	r6, r7
 800b070:	d900      	bls.n	800b074 <__ssputs_r+0x72>
 800b072:	463e      	mov	r6, r7
 800b074:	4632      	mov	r2, r6
 800b076:	4641      	mov	r1, r8
 800b078:	6820      	ldr	r0, [r4, #0]
 800b07a:	f001 f982 	bl	800c382 <memmove>
 800b07e:	2000      	movs	r0, #0
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	1b9b      	subs	r3, r3, r6
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	4433      	add	r3, r6
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b090:	462a      	mov	r2, r5
 800b092:	f001 f8a6 	bl	800c1e2 <_realloc_r>
 800b096:	4606      	mov	r6, r0
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1e0      	bne.n	800b05e <__ssputs_r+0x5c>
 800b09c:	4650      	mov	r0, sl
 800b09e:	6921      	ldr	r1, [r4, #16]
 800b0a0:	f7ff fc2e 	bl	800a900 <_free_r>
 800b0a4:	230c      	movs	r3, #12
 800b0a6:	f8ca 3000 	str.w	r3, [sl]
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b4:	81a3      	strh	r3, [r4, #12]
 800b0b6:	e7e9      	b.n	800b08c <__ssputs_r+0x8a>

0800b0b8 <_svfiprintf_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4698      	mov	r8, r3
 800b0be:	898b      	ldrh	r3, [r1, #12]
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	061b      	lsls	r3, r3, #24
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	b09d      	sub	sp, #116	@ 0x74
 800b0ca:	d510      	bpl.n	800b0ee <_svfiprintf_r+0x36>
 800b0cc:	690b      	ldr	r3, [r1, #16]
 800b0ce:	b973      	cbnz	r3, 800b0ee <_svfiprintf_r+0x36>
 800b0d0:	2140      	movs	r1, #64	@ 0x40
 800b0d2:	f000 fa57 	bl	800b584 <_malloc_r>
 800b0d6:	6028      	str	r0, [r5, #0]
 800b0d8:	6128      	str	r0, [r5, #16]
 800b0da:	b930      	cbnz	r0, 800b0ea <_svfiprintf_r+0x32>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e4:	b01d      	add	sp, #116	@ 0x74
 800b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ea:	2340      	movs	r3, #64	@ 0x40
 800b0ec:	616b      	str	r3, [r5, #20]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f2:	2320      	movs	r3, #32
 800b0f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0f8:	2330      	movs	r3, #48	@ 0x30
 800b0fa:	f04f 0901 	mov.w	r9, #1
 800b0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b102:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b29c <_svfiprintf_r+0x1e4>
 800b106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b10a:	4623      	mov	r3, r4
 800b10c:	469a      	mov	sl, r3
 800b10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b112:	b10a      	cbz	r2, 800b118 <_svfiprintf_r+0x60>
 800b114:	2a25      	cmp	r2, #37	@ 0x25
 800b116:	d1f9      	bne.n	800b10c <_svfiprintf_r+0x54>
 800b118:	ebba 0b04 	subs.w	fp, sl, r4
 800b11c:	d00b      	beq.n	800b136 <_svfiprintf_r+0x7e>
 800b11e:	465b      	mov	r3, fp
 800b120:	4622      	mov	r2, r4
 800b122:	4629      	mov	r1, r5
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff ff6c 	bl	800b002 <__ssputs_r>
 800b12a:	3001      	adds	r0, #1
 800b12c:	f000 80a7 	beq.w	800b27e <_svfiprintf_r+0x1c6>
 800b130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b132:	445a      	add	r2, fp
 800b134:	9209      	str	r2, [sp, #36]	@ 0x24
 800b136:	f89a 3000 	ldrb.w	r3, [sl]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 809f 	beq.w	800b27e <_svfiprintf_r+0x1c6>
 800b140:	2300      	movs	r3, #0
 800b142:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14a:	f10a 0a01 	add.w	sl, sl, #1
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b156:	931a      	str	r3, [sp, #104]	@ 0x68
 800b158:	4654      	mov	r4, sl
 800b15a:	2205      	movs	r2, #5
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	484e      	ldr	r0, [pc, #312]	@ (800b29c <_svfiprintf_r+0x1e4>)
 800b162:	f7fe fd56 	bl	8009c12 <memchr>
 800b166:	9a04      	ldr	r2, [sp, #16]
 800b168:	b9d8      	cbnz	r0, 800b1a2 <_svfiprintf_r+0xea>
 800b16a:	06d0      	lsls	r0, r2, #27
 800b16c:	bf44      	itt	mi
 800b16e:	2320      	movmi	r3, #32
 800b170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b174:	0711      	lsls	r1, r2, #28
 800b176:	bf44      	itt	mi
 800b178:	232b      	movmi	r3, #43	@ 0x2b
 800b17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b17e:	f89a 3000 	ldrb.w	r3, [sl]
 800b182:	2b2a      	cmp	r3, #42	@ 0x2a
 800b184:	d015      	beq.n	800b1b2 <_svfiprintf_r+0xfa>
 800b186:	4654      	mov	r4, sl
 800b188:	2000      	movs	r0, #0
 800b18a:	f04f 0c0a 	mov.w	ip, #10
 800b18e:	9a07      	ldr	r2, [sp, #28]
 800b190:	4621      	mov	r1, r4
 800b192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b196:	3b30      	subs	r3, #48	@ 0x30
 800b198:	2b09      	cmp	r3, #9
 800b19a:	d94b      	bls.n	800b234 <_svfiprintf_r+0x17c>
 800b19c:	b1b0      	cbz	r0, 800b1cc <_svfiprintf_r+0x114>
 800b19e:	9207      	str	r2, [sp, #28]
 800b1a0:	e014      	b.n	800b1cc <_svfiprintf_r+0x114>
 800b1a2:	eba0 0308 	sub.w	r3, r0, r8
 800b1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	46a2      	mov	sl, r4
 800b1ae:	9304      	str	r3, [sp, #16]
 800b1b0:	e7d2      	b.n	800b158 <_svfiprintf_r+0xa0>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	1d19      	adds	r1, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	9103      	str	r1, [sp, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbb      	ittet	lt
 800b1be:	425b      	neglt	r3, r3
 800b1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c4:	9307      	strge	r3, [sp, #28]
 800b1c6:	9307      	strlt	r3, [sp, #28]
 800b1c8:	bfb8      	it	lt
 800b1ca:	9204      	strlt	r2, [sp, #16]
 800b1cc:	7823      	ldrb	r3, [r4, #0]
 800b1ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d0:	d10a      	bne.n	800b1e8 <_svfiprintf_r+0x130>
 800b1d2:	7863      	ldrb	r3, [r4, #1]
 800b1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1d6:	d132      	bne.n	800b23e <_svfiprintf_r+0x186>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	3402      	adds	r4, #2
 800b1dc:	1d1a      	adds	r2, r3, #4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	9203      	str	r2, [sp, #12]
 800b1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1e6:	9305      	str	r3, [sp, #20]
 800b1e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b2a0 <_svfiprintf_r+0x1e8>
 800b1ec:	2203      	movs	r2, #3
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	7821      	ldrb	r1, [r4, #0]
 800b1f2:	f7fe fd0e 	bl	8009c12 <memchr>
 800b1f6:	b138      	cbz	r0, 800b208 <_svfiprintf_r+0x150>
 800b1f8:	2240      	movs	r2, #64	@ 0x40
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	eba0 000a 	sub.w	r0, r0, sl
 800b200:	4082      	lsls	r2, r0
 800b202:	4313      	orrs	r3, r2
 800b204:	3401      	adds	r4, #1
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20c:	2206      	movs	r2, #6
 800b20e:	4825      	ldr	r0, [pc, #148]	@ (800b2a4 <_svfiprintf_r+0x1ec>)
 800b210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b214:	f7fe fcfd 	bl	8009c12 <memchr>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d036      	beq.n	800b28a <_svfiprintf_r+0x1d2>
 800b21c:	4b22      	ldr	r3, [pc, #136]	@ (800b2a8 <_svfiprintf_r+0x1f0>)
 800b21e:	bb1b      	cbnz	r3, 800b268 <_svfiprintf_r+0x1b0>
 800b220:	9b03      	ldr	r3, [sp, #12]
 800b222:	3307      	adds	r3, #7
 800b224:	f023 0307 	bic.w	r3, r3, #7
 800b228:	3308      	adds	r3, #8
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22e:	4433      	add	r3, r6
 800b230:	9309      	str	r3, [sp, #36]	@ 0x24
 800b232:	e76a      	b.n	800b10a <_svfiprintf_r+0x52>
 800b234:	460c      	mov	r4, r1
 800b236:	2001      	movs	r0, #1
 800b238:	fb0c 3202 	mla	r2, ip, r2, r3
 800b23c:	e7a8      	b.n	800b190 <_svfiprintf_r+0xd8>
 800b23e:	2300      	movs	r3, #0
 800b240:	f04f 0c0a 	mov.w	ip, #10
 800b244:	4619      	mov	r1, r3
 800b246:	3401      	adds	r4, #1
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	4620      	mov	r0, r4
 800b24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b250:	3a30      	subs	r2, #48	@ 0x30
 800b252:	2a09      	cmp	r2, #9
 800b254:	d903      	bls.n	800b25e <_svfiprintf_r+0x1a6>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0c6      	beq.n	800b1e8 <_svfiprintf_r+0x130>
 800b25a:	9105      	str	r1, [sp, #20]
 800b25c:	e7c4      	b.n	800b1e8 <_svfiprintf_r+0x130>
 800b25e:	4604      	mov	r4, r0
 800b260:	2301      	movs	r3, #1
 800b262:	fb0c 2101 	mla	r1, ip, r1, r2
 800b266:	e7f0      	b.n	800b24a <_svfiprintf_r+0x192>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4638      	mov	r0, r7
 800b270:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ac <_svfiprintf_r+0x1f4>)
 800b272:	a904      	add	r1, sp, #16
 800b274:	f7fc fd58 	bl	8007d28 <_printf_float>
 800b278:	1c42      	adds	r2, r0, #1
 800b27a:	4606      	mov	r6, r0
 800b27c:	d1d6      	bne.n	800b22c <_svfiprintf_r+0x174>
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	065b      	lsls	r3, r3, #25
 800b282:	f53f af2d 	bmi.w	800b0e0 <_svfiprintf_r+0x28>
 800b286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b288:	e72c      	b.n	800b0e4 <_svfiprintf_r+0x2c>
 800b28a:	ab03      	add	r3, sp, #12
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	462a      	mov	r2, r5
 800b290:	4638      	mov	r0, r7
 800b292:	4b06      	ldr	r3, [pc, #24]	@ (800b2ac <_svfiprintf_r+0x1f4>)
 800b294:	a904      	add	r1, sp, #16
 800b296:	f7fc ffe5 	bl	8008264 <_printf_i>
 800b29a:	e7ed      	b.n	800b278 <_svfiprintf_r+0x1c0>
 800b29c:	0800e37e 	.word	0x0800e37e
 800b2a0:	0800e384 	.word	0x0800e384
 800b2a4:	0800e388 	.word	0x0800e388
 800b2a8:	08007d29 	.word	0x08007d29
 800b2ac:	0800b003 	.word	0x0800b003

0800b2b0 <__sfputc_r>:
 800b2b0:	6893      	ldr	r3, [r2, #8]
 800b2b2:	b410      	push	{r4}
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	6093      	str	r3, [r2, #8]
 800b2ba:	da07      	bge.n	800b2cc <__sfputc_r+0x1c>
 800b2bc:	6994      	ldr	r4, [r2, #24]
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	db01      	blt.n	800b2c6 <__sfputc_r+0x16>
 800b2c2:	290a      	cmp	r1, #10
 800b2c4:	d102      	bne.n	800b2cc <__sfputc_r+0x1c>
 800b2c6:	bc10      	pop	{r4}
 800b2c8:	f000 bfb9 	b.w	800c23e <__swbuf_r>
 800b2cc:	6813      	ldr	r3, [r2, #0]
 800b2ce:	1c58      	adds	r0, r3, #1
 800b2d0:	6010      	str	r0, [r2, #0]
 800b2d2:	7019      	strb	r1, [r3, #0]
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	bc10      	pop	{r4}
 800b2d8:	4770      	bx	lr

0800b2da <__sfputs_r>:
 800b2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2dc:	4606      	mov	r6, r0
 800b2de:	460f      	mov	r7, r1
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	18d5      	adds	r5, r2, r3
 800b2e4:	42ac      	cmp	r4, r5
 800b2e6:	d101      	bne.n	800b2ec <__sfputs_r+0x12>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e007      	b.n	800b2fc <__sfputs_r+0x22>
 800b2ec:	463a      	mov	r2, r7
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f4:	f7ff ffdc 	bl	800b2b0 <__sfputc_r>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d1f3      	bne.n	800b2e4 <__sfputs_r+0xa>
 800b2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b300 <_vfiprintf_r>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	460d      	mov	r5, r1
 800b306:	4614      	mov	r4, r2
 800b308:	4698      	mov	r8, r3
 800b30a:	4606      	mov	r6, r0
 800b30c:	b09d      	sub	sp, #116	@ 0x74
 800b30e:	b118      	cbz	r0, 800b318 <_vfiprintf_r+0x18>
 800b310:	6a03      	ldr	r3, [r0, #32]
 800b312:	b90b      	cbnz	r3, 800b318 <_vfiprintf_r+0x18>
 800b314:	f7fd fc36 	bl	8008b84 <__sinit>
 800b318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b31a:	07d9      	lsls	r1, r3, #31
 800b31c:	d405      	bmi.n	800b32a <_vfiprintf_r+0x2a>
 800b31e:	89ab      	ldrh	r3, [r5, #12]
 800b320:	059a      	lsls	r2, r3, #22
 800b322:	d402      	bmi.n	800b32a <_vfiprintf_r+0x2a>
 800b324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b326:	f7fe fc72 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	071b      	lsls	r3, r3, #28
 800b32e:	d501      	bpl.n	800b334 <_vfiprintf_r+0x34>
 800b330:	692b      	ldr	r3, [r5, #16]
 800b332:	b99b      	cbnz	r3, 800b35c <_vfiprintf_r+0x5c>
 800b334:	4629      	mov	r1, r5
 800b336:	4630      	mov	r0, r6
 800b338:	f000 ffc0 	bl	800c2bc <__swsetup_r>
 800b33c:	b170      	cbz	r0, 800b35c <_vfiprintf_r+0x5c>
 800b33e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b340:	07dc      	lsls	r4, r3, #31
 800b342:	d504      	bpl.n	800b34e <_vfiprintf_r+0x4e>
 800b344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b348:	b01d      	add	sp, #116	@ 0x74
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	0598      	lsls	r0, r3, #22
 800b352:	d4f7      	bmi.n	800b344 <_vfiprintf_r+0x44>
 800b354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b356:	f7fe fc5b 	bl	8009c10 <__retarget_lock_release_recursive>
 800b35a:	e7f3      	b.n	800b344 <_vfiprintf_r+0x44>
 800b35c:	2300      	movs	r3, #0
 800b35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b360:	2320      	movs	r3, #32
 800b362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b366:	2330      	movs	r3, #48	@ 0x30
 800b368:	f04f 0901 	mov.w	r9, #1
 800b36c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b370:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b51c <_vfiprintf_r+0x21c>
 800b374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b378:	4623      	mov	r3, r4
 800b37a:	469a      	mov	sl, r3
 800b37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b380:	b10a      	cbz	r2, 800b386 <_vfiprintf_r+0x86>
 800b382:	2a25      	cmp	r2, #37	@ 0x25
 800b384:	d1f9      	bne.n	800b37a <_vfiprintf_r+0x7a>
 800b386:	ebba 0b04 	subs.w	fp, sl, r4
 800b38a:	d00b      	beq.n	800b3a4 <_vfiprintf_r+0xa4>
 800b38c:	465b      	mov	r3, fp
 800b38e:	4622      	mov	r2, r4
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ffa1 	bl	800b2da <__sfputs_r>
 800b398:	3001      	adds	r0, #1
 800b39a:	f000 80a7 	beq.w	800b4ec <_vfiprintf_r+0x1ec>
 800b39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a0:	445a      	add	r2, fp
 800b3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 809f 	beq.w	800b4ec <_vfiprintf_r+0x1ec>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b8:	f10a 0a01 	add.w	sl, sl, #1
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3c6:	4654      	mov	r4, sl
 800b3c8:	2205      	movs	r2, #5
 800b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ce:	4853      	ldr	r0, [pc, #332]	@ (800b51c <_vfiprintf_r+0x21c>)
 800b3d0:	f7fe fc1f 	bl	8009c12 <memchr>
 800b3d4:	9a04      	ldr	r2, [sp, #16]
 800b3d6:	b9d8      	cbnz	r0, 800b410 <_vfiprintf_r+0x110>
 800b3d8:	06d1      	lsls	r1, r2, #27
 800b3da:	bf44      	itt	mi
 800b3dc:	2320      	movmi	r3, #32
 800b3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e2:	0713      	lsls	r3, r2, #28
 800b3e4:	bf44      	itt	mi
 800b3e6:	232b      	movmi	r3, #43	@ 0x2b
 800b3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3f2:	d015      	beq.n	800b420 <_vfiprintf_r+0x120>
 800b3f4:	4654      	mov	r4, sl
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f04f 0c0a 	mov.w	ip, #10
 800b3fc:	9a07      	ldr	r2, [sp, #28]
 800b3fe:	4621      	mov	r1, r4
 800b400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b404:	3b30      	subs	r3, #48	@ 0x30
 800b406:	2b09      	cmp	r3, #9
 800b408:	d94b      	bls.n	800b4a2 <_vfiprintf_r+0x1a2>
 800b40a:	b1b0      	cbz	r0, 800b43a <_vfiprintf_r+0x13a>
 800b40c:	9207      	str	r2, [sp, #28]
 800b40e:	e014      	b.n	800b43a <_vfiprintf_r+0x13a>
 800b410:	eba0 0308 	sub.w	r3, r0, r8
 800b414:	fa09 f303 	lsl.w	r3, r9, r3
 800b418:	4313      	orrs	r3, r2
 800b41a:	46a2      	mov	sl, r4
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	e7d2      	b.n	800b3c6 <_vfiprintf_r+0xc6>
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	1d19      	adds	r1, r3, #4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	9103      	str	r1, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	bfbb      	ittet	lt
 800b42c:	425b      	neglt	r3, r3
 800b42e:	f042 0202 	orrlt.w	r2, r2, #2
 800b432:	9307      	strge	r3, [sp, #28]
 800b434:	9307      	strlt	r3, [sp, #28]
 800b436:	bfb8      	it	lt
 800b438:	9204      	strlt	r2, [sp, #16]
 800b43a:	7823      	ldrb	r3, [r4, #0]
 800b43c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b43e:	d10a      	bne.n	800b456 <_vfiprintf_r+0x156>
 800b440:	7863      	ldrb	r3, [r4, #1]
 800b442:	2b2a      	cmp	r3, #42	@ 0x2a
 800b444:	d132      	bne.n	800b4ac <_vfiprintf_r+0x1ac>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	3402      	adds	r4, #2
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	9203      	str	r2, [sp, #12]
 800b450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b520 <_vfiprintf_r+0x220>
 800b45a:	2203      	movs	r2, #3
 800b45c:	4650      	mov	r0, sl
 800b45e:	7821      	ldrb	r1, [r4, #0]
 800b460:	f7fe fbd7 	bl	8009c12 <memchr>
 800b464:	b138      	cbz	r0, 800b476 <_vfiprintf_r+0x176>
 800b466:	2240      	movs	r2, #64	@ 0x40
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	eba0 000a 	sub.w	r0, r0, sl
 800b46e:	4082      	lsls	r2, r0
 800b470:	4313      	orrs	r3, r2
 800b472:	3401      	adds	r4, #1
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47a:	2206      	movs	r2, #6
 800b47c:	4829      	ldr	r0, [pc, #164]	@ (800b524 <_vfiprintf_r+0x224>)
 800b47e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b482:	f7fe fbc6 	bl	8009c12 <memchr>
 800b486:	2800      	cmp	r0, #0
 800b488:	d03f      	beq.n	800b50a <_vfiprintf_r+0x20a>
 800b48a:	4b27      	ldr	r3, [pc, #156]	@ (800b528 <_vfiprintf_r+0x228>)
 800b48c:	bb1b      	cbnz	r3, 800b4d6 <_vfiprintf_r+0x1d6>
 800b48e:	9b03      	ldr	r3, [sp, #12]
 800b490:	3307      	adds	r3, #7
 800b492:	f023 0307 	bic.w	r3, r3, #7
 800b496:	3308      	adds	r3, #8
 800b498:	9303      	str	r3, [sp, #12]
 800b49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b49c:	443b      	add	r3, r7
 800b49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a0:	e76a      	b.n	800b378 <_vfiprintf_r+0x78>
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4aa:	e7a8      	b.n	800b3fe <_vfiprintf_r+0xfe>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f04f 0c0a 	mov.w	ip, #10
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	3401      	adds	r4, #1
 800b4b6:	9305      	str	r3, [sp, #20]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4be:	3a30      	subs	r2, #48	@ 0x30
 800b4c0:	2a09      	cmp	r2, #9
 800b4c2:	d903      	bls.n	800b4cc <_vfiprintf_r+0x1cc>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0c6      	beq.n	800b456 <_vfiprintf_r+0x156>
 800b4c8:	9105      	str	r1, [sp, #20]
 800b4ca:	e7c4      	b.n	800b456 <_vfiprintf_r+0x156>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d4:	e7f0      	b.n	800b4b8 <_vfiprintf_r+0x1b8>
 800b4d6:	ab03      	add	r3, sp, #12
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4b13      	ldr	r3, [pc, #76]	@ (800b52c <_vfiprintf_r+0x22c>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	f7fc fc21 	bl	8007d28 <_printf_float>
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	1c78      	adds	r0, r7, #1
 800b4ea:	d1d6      	bne.n	800b49a <_vfiprintf_r+0x19a>
 800b4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ee:	07d9      	lsls	r1, r3, #31
 800b4f0:	d405      	bmi.n	800b4fe <_vfiprintf_r+0x1fe>
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	059a      	lsls	r2, r3, #22
 800b4f6:	d402      	bmi.n	800b4fe <_vfiprintf_r+0x1fe>
 800b4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4fa:	f7fe fb89 	bl	8009c10 <__retarget_lock_release_recursive>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	065b      	lsls	r3, r3, #25
 800b502:	f53f af1f 	bmi.w	800b344 <_vfiprintf_r+0x44>
 800b506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b508:	e71e      	b.n	800b348 <_vfiprintf_r+0x48>
 800b50a:	ab03      	add	r3, sp, #12
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	462a      	mov	r2, r5
 800b510:	4630      	mov	r0, r6
 800b512:	4b06      	ldr	r3, [pc, #24]	@ (800b52c <_vfiprintf_r+0x22c>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	f7fc fea5 	bl	8008264 <_printf_i>
 800b51a:	e7e4      	b.n	800b4e6 <_vfiprintf_r+0x1e6>
 800b51c:	0800e37e 	.word	0x0800e37e
 800b520:	0800e384 	.word	0x0800e384
 800b524:	0800e388 	.word	0x0800e388
 800b528:	08007d29 	.word	0x08007d29
 800b52c:	0800b2db 	.word	0x0800b2db

0800b530 <malloc>:
 800b530:	4b02      	ldr	r3, [pc, #8]	@ (800b53c <malloc+0xc>)
 800b532:	4601      	mov	r1, r0
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	f000 b825 	b.w	800b584 <_malloc_r>
 800b53a:	bf00      	nop
 800b53c:	20000188 	.word	0x20000188

0800b540 <sbrk_aligned>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	4e0f      	ldr	r6, [pc, #60]	@ (800b580 <sbrk_aligned+0x40>)
 800b544:	460c      	mov	r4, r1
 800b546:	6831      	ldr	r1, [r6, #0]
 800b548:	4605      	mov	r5, r0
 800b54a:	b911      	cbnz	r1, 800b552 <sbrk_aligned+0x12>
 800b54c:	f000 ff68 	bl	800c420 <_sbrk_r>
 800b550:	6030      	str	r0, [r6, #0]
 800b552:	4621      	mov	r1, r4
 800b554:	4628      	mov	r0, r5
 800b556:	f000 ff63 	bl	800c420 <_sbrk_r>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d103      	bne.n	800b566 <sbrk_aligned+0x26>
 800b55e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b562:	4620      	mov	r0, r4
 800b564:	bd70      	pop	{r4, r5, r6, pc}
 800b566:	1cc4      	adds	r4, r0, #3
 800b568:	f024 0403 	bic.w	r4, r4, #3
 800b56c:	42a0      	cmp	r0, r4
 800b56e:	d0f8      	beq.n	800b562 <sbrk_aligned+0x22>
 800b570:	1a21      	subs	r1, r4, r0
 800b572:	4628      	mov	r0, r5
 800b574:	f000 ff54 	bl	800c420 <_sbrk_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	d1f2      	bne.n	800b562 <sbrk_aligned+0x22>
 800b57c:	e7ef      	b.n	800b55e <sbrk_aligned+0x1e>
 800b57e:	bf00      	nop
 800b580:	20002c9c 	.word	0x20002c9c

0800b584 <_malloc_r>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	1ccd      	adds	r5, r1, #3
 800b58a:	f025 0503 	bic.w	r5, r5, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	2d0c      	cmp	r5, #12
 800b592:	bf38      	it	cc
 800b594:	250c      	movcc	r5, #12
 800b596:	2d00      	cmp	r5, #0
 800b598:	4606      	mov	r6, r0
 800b59a:	db01      	blt.n	800b5a0 <_malloc_r+0x1c>
 800b59c:	42a9      	cmp	r1, r5
 800b59e:	d904      	bls.n	800b5aa <_malloc_r+0x26>
 800b5a0:	230c      	movs	r3, #12
 800b5a2:	6033      	str	r3, [r6, #0]
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b680 <_malloc_r+0xfc>
 800b5ae:	f000 f923 	bl	800b7f8 <__malloc_lock>
 800b5b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b6:	461c      	mov	r4, r3
 800b5b8:	bb44      	cbnz	r4, 800b60c <_malloc_r+0x88>
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7ff ffbf 	bl	800b540 <sbrk_aligned>
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	d158      	bne.n	800b67a <_malloc_r+0xf6>
 800b5c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b5cc:	4627      	mov	r7, r4
 800b5ce:	2f00      	cmp	r7, #0
 800b5d0:	d143      	bne.n	800b65a <_malloc_r+0xd6>
 800b5d2:	2c00      	cmp	r4, #0
 800b5d4:	d04b      	beq.n	800b66e <_malloc_r+0xea>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4630      	mov	r0, r6
 800b5dc:	eb04 0903 	add.w	r9, r4, r3
 800b5e0:	f000 ff1e 	bl	800c420 <_sbrk_r>
 800b5e4:	4581      	cmp	r9, r0
 800b5e6:	d142      	bne.n	800b66e <_malloc_r+0xea>
 800b5e8:	6821      	ldr	r1, [r4, #0]
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	1a6d      	subs	r5, r5, r1
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7ff ffa6 	bl	800b540 <sbrk_aligned>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d03a      	beq.n	800b66e <_malloc_r+0xea>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	442b      	add	r3, r5
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	bb62      	cbnz	r2, 800b660 <_malloc_r+0xdc>
 800b606:	f8c8 7000 	str.w	r7, [r8]
 800b60a:	e00f      	b.n	800b62c <_malloc_r+0xa8>
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	1b52      	subs	r2, r2, r5
 800b610:	d420      	bmi.n	800b654 <_malloc_r+0xd0>
 800b612:	2a0b      	cmp	r2, #11
 800b614:	d917      	bls.n	800b646 <_malloc_r+0xc2>
 800b616:	1961      	adds	r1, r4, r5
 800b618:	42a3      	cmp	r3, r4
 800b61a:	6025      	str	r5, [r4, #0]
 800b61c:	bf18      	it	ne
 800b61e:	6059      	strne	r1, [r3, #4]
 800b620:	6863      	ldr	r3, [r4, #4]
 800b622:	bf08      	it	eq
 800b624:	f8c8 1000 	streq.w	r1, [r8]
 800b628:	5162      	str	r2, [r4, r5]
 800b62a:	604b      	str	r3, [r1, #4]
 800b62c:	4630      	mov	r0, r6
 800b62e:	f000 f8e9 	bl	800b804 <__malloc_unlock>
 800b632:	f104 000b 	add.w	r0, r4, #11
 800b636:	1d23      	adds	r3, r4, #4
 800b638:	f020 0007 	bic.w	r0, r0, #7
 800b63c:	1ac2      	subs	r2, r0, r3
 800b63e:	bf1c      	itt	ne
 800b640:	1a1b      	subne	r3, r3, r0
 800b642:	50a3      	strne	r3, [r4, r2]
 800b644:	e7af      	b.n	800b5a6 <_malloc_r+0x22>
 800b646:	6862      	ldr	r2, [r4, #4]
 800b648:	42a3      	cmp	r3, r4
 800b64a:	bf0c      	ite	eq
 800b64c:	f8c8 2000 	streq.w	r2, [r8]
 800b650:	605a      	strne	r2, [r3, #4]
 800b652:	e7eb      	b.n	800b62c <_malloc_r+0xa8>
 800b654:	4623      	mov	r3, r4
 800b656:	6864      	ldr	r4, [r4, #4]
 800b658:	e7ae      	b.n	800b5b8 <_malloc_r+0x34>
 800b65a:	463c      	mov	r4, r7
 800b65c:	687f      	ldr	r7, [r7, #4]
 800b65e:	e7b6      	b.n	800b5ce <_malloc_r+0x4a>
 800b660:	461a      	mov	r2, r3
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	42a3      	cmp	r3, r4
 800b666:	d1fb      	bne.n	800b660 <_malloc_r+0xdc>
 800b668:	2300      	movs	r3, #0
 800b66a:	6053      	str	r3, [r2, #4]
 800b66c:	e7de      	b.n	800b62c <_malloc_r+0xa8>
 800b66e:	230c      	movs	r3, #12
 800b670:	4630      	mov	r0, r6
 800b672:	6033      	str	r3, [r6, #0]
 800b674:	f000 f8c6 	bl	800b804 <__malloc_unlock>
 800b678:	e794      	b.n	800b5a4 <_malloc_r+0x20>
 800b67a:	6005      	str	r5, [r0, #0]
 800b67c:	e7d6      	b.n	800b62c <_malloc_r+0xa8>
 800b67e:	bf00      	nop
 800b680:	20002ca0 	.word	0x20002ca0

0800b684 <__ascii_mbtowc>:
 800b684:	b082      	sub	sp, #8
 800b686:	b901      	cbnz	r1, 800b68a <__ascii_mbtowc+0x6>
 800b688:	a901      	add	r1, sp, #4
 800b68a:	b142      	cbz	r2, 800b69e <__ascii_mbtowc+0x1a>
 800b68c:	b14b      	cbz	r3, 800b6a2 <__ascii_mbtowc+0x1e>
 800b68e:	7813      	ldrb	r3, [r2, #0]
 800b690:	600b      	str	r3, [r1, #0]
 800b692:	7812      	ldrb	r2, [r2, #0]
 800b694:	1e10      	subs	r0, r2, #0
 800b696:	bf18      	it	ne
 800b698:	2001      	movne	r0, #1
 800b69a:	b002      	add	sp, #8
 800b69c:	4770      	bx	lr
 800b69e:	4610      	mov	r0, r2
 800b6a0:	e7fb      	b.n	800b69a <__ascii_mbtowc+0x16>
 800b6a2:	f06f 0001 	mvn.w	r0, #1
 800b6a6:	e7f8      	b.n	800b69a <__ascii_mbtowc+0x16>

0800b6a8 <__sflush_r>:
 800b6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	0716      	lsls	r6, r2, #28
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	d454      	bmi.n	800b760 <__sflush_r+0xb8>
 800b6b6:	684b      	ldr	r3, [r1, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dc02      	bgt.n	800b6c2 <__sflush_r+0x1a>
 800b6bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	dd48      	ble.n	800b754 <__sflush_r+0xac>
 800b6c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6c4:	2e00      	cmp	r6, #0
 800b6c6:	d045      	beq.n	800b754 <__sflush_r+0xac>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6ce:	682f      	ldr	r7, [r5, #0]
 800b6d0:	6a21      	ldr	r1, [r4, #32]
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	d030      	beq.n	800b738 <__sflush_r+0x90>
 800b6d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	0759      	lsls	r1, r3, #29
 800b6dc:	d505      	bpl.n	800b6ea <__sflush_r+0x42>
 800b6de:	6863      	ldr	r3, [r4, #4]
 800b6e0:	1ad2      	subs	r2, r2, r3
 800b6e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6e4:	b10b      	cbz	r3, 800b6ea <__sflush_r+0x42>
 800b6e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6e8:	1ad2      	subs	r2, r2, r3
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6f0:	6a21      	ldr	r1, [r4, #32]
 800b6f2:	47b0      	blx	r6
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	d106      	bne.n	800b708 <__sflush_r+0x60>
 800b6fa:	6829      	ldr	r1, [r5, #0]
 800b6fc:	291d      	cmp	r1, #29
 800b6fe:	d82b      	bhi.n	800b758 <__sflush_r+0xb0>
 800b700:	4a28      	ldr	r2, [pc, #160]	@ (800b7a4 <__sflush_r+0xfc>)
 800b702:	410a      	asrs	r2, r1
 800b704:	07d6      	lsls	r6, r2, #31
 800b706:	d427      	bmi.n	800b758 <__sflush_r+0xb0>
 800b708:	2200      	movs	r2, #0
 800b70a:	6062      	str	r2, [r4, #4]
 800b70c:	6922      	ldr	r2, [r4, #16]
 800b70e:	04d9      	lsls	r1, r3, #19
 800b710:	6022      	str	r2, [r4, #0]
 800b712:	d504      	bpl.n	800b71e <__sflush_r+0x76>
 800b714:	1c42      	adds	r2, r0, #1
 800b716:	d101      	bne.n	800b71c <__sflush_r+0x74>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b903      	cbnz	r3, 800b71e <__sflush_r+0x76>
 800b71c:	6560      	str	r0, [r4, #84]	@ 0x54
 800b71e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b720:	602f      	str	r7, [r5, #0]
 800b722:	b1b9      	cbz	r1, 800b754 <__sflush_r+0xac>
 800b724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b728:	4299      	cmp	r1, r3
 800b72a:	d002      	beq.n	800b732 <__sflush_r+0x8a>
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7ff f8e7 	bl	800a900 <_free_r>
 800b732:	2300      	movs	r3, #0
 800b734:	6363      	str	r3, [r4, #52]	@ 0x34
 800b736:	e00d      	b.n	800b754 <__sflush_r+0xac>
 800b738:	2301      	movs	r3, #1
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b0      	blx	r6
 800b73e:	4602      	mov	r2, r0
 800b740:	1c50      	adds	r0, r2, #1
 800b742:	d1c9      	bne.n	800b6d8 <__sflush_r+0x30>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0c6      	beq.n	800b6d8 <__sflush_r+0x30>
 800b74a:	2b1d      	cmp	r3, #29
 800b74c:	d001      	beq.n	800b752 <__sflush_r+0xaa>
 800b74e:	2b16      	cmp	r3, #22
 800b750:	d11d      	bne.n	800b78e <__sflush_r+0xe6>
 800b752:	602f      	str	r7, [r5, #0]
 800b754:	2000      	movs	r0, #0
 800b756:	e021      	b.n	800b79c <__sflush_r+0xf4>
 800b758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b75c:	b21b      	sxth	r3, r3
 800b75e:	e01a      	b.n	800b796 <__sflush_r+0xee>
 800b760:	690f      	ldr	r7, [r1, #16]
 800b762:	2f00      	cmp	r7, #0
 800b764:	d0f6      	beq.n	800b754 <__sflush_r+0xac>
 800b766:	0793      	lsls	r3, r2, #30
 800b768:	bf18      	it	ne
 800b76a:	2300      	movne	r3, #0
 800b76c:	680e      	ldr	r6, [r1, #0]
 800b76e:	bf08      	it	eq
 800b770:	694b      	ldreq	r3, [r1, #20]
 800b772:	1bf6      	subs	r6, r6, r7
 800b774:	600f      	str	r7, [r1, #0]
 800b776:	608b      	str	r3, [r1, #8]
 800b778:	2e00      	cmp	r6, #0
 800b77a:	ddeb      	ble.n	800b754 <__sflush_r+0xac>
 800b77c:	4633      	mov	r3, r6
 800b77e:	463a      	mov	r2, r7
 800b780:	4628      	mov	r0, r5
 800b782:	6a21      	ldr	r1, [r4, #32]
 800b784:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b788:	47e0      	blx	ip
 800b78a:	2800      	cmp	r0, #0
 800b78c:	dc07      	bgt.n	800b79e <__sflush_r+0xf6>
 800b78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b796:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b79a:	81a3      	strh	r3, [r4, #12]
 800b79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b79e:	4407      	add	r7, r0
 800b7a0:	1a36      	subs	r6, r6, r0
 800b7a2:	e7e9      	b.n	800b778 <__sflush_r+0xd0>
 800b7a4:	dfbffffe 	.word	0xdfbffffe

0800b7a8 <_fflush_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	690b      	ldr	r3, [r1, #16]
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b913      	cbnz	r3, 800b7b8 <_fflush_r+0x10>
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	b118      	cbz	r0, 800b7c2 <_fflush_r+0x1a>
 800b7ba:	6a03      	ldr	r3, [r0, #32]
 800b7bc:	b90b      	cbnz	r3, 800b7c2 <_fflush_r+0x1a>
 800b7be:	f7fd f9e1 	bl	8008b84 <__sinit>
 800b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0f3      	beq.n	800b7b2 <_fflush_r+0xa>
 800b7ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7cc:	07d0      	lsls	r0, r2, #31
 800b7ce:	d404      	bmi.n	800b7da <_fflush_r+0x32>
 800b7d0:	0599      	lsls	r1, r3, #22
 800b7d2:	d402      	bmi.n	800b7da <_fflush_r+0x32>
 800b7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7d6:	f7fe fa1a 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800b7da:	4628      	mov	r0, r5
 800b7dc:	4621      	mov	r1, r4
 800b7de:	f7ff ff63 	bl	800b6a8 <__sflush_r>
 800b7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	07da      	lsls	r2, r3, #31
 800b7e8:	d4e4      	bmi.n	800b7b4 <_fflush_r+0xc>
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	059b      	lsls	r3, r3, #22
 800b7ee:	d4e1      	bmi.n	800b7b4 <_fflush_r+0xc>
 800b7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7f2:	f7fe fa0d 	bl	8009c10 <__retarget_lock_release_recursive>
 800b7f6:	e7dd      	b.n	800b7b4 <_fflush_r+0xc>

0800b7f8 <__malloc_lock>:
 800b7f8:	4801      	ldr	r0, [pc, #4]	@ (800b800 <__malloc_lock+0x8>)
 800b7fa:	f7fe ba08 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 800b7fe:	bf00      	nop
 800b800:	20002c98 	.word	0x20002c98

0800b804 <__malloc_unlock>:
 800b804:	4801      	ldr	r0, [pc, #4]	@ (800b80c <__malloc_unlock+0x8>)
 800b806:	f7fe ba03 	b.w	8009c10 <__retarget_lock_release_recursive>
 800b80a:	bf00      	nop
 800b80c:	20002c98 	.word	0x20002c98

0800b810 <_Balloc>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	69c6      	ldr	r6, [r0, #28]
 800b814:	4604      	mov	r4, r0
 800b816:	460d      	mov	r5, r1
 800b818:	b976      	cbnz	r6, 800b838 <_Balloc+0x28>
 800b81a:	2010      	movs	r0, #16
 800b81c:	f7ff fe88 	bl	800b530 <malloc>
 800b820:	4602      	mov	r2, r0
 800b822:	61e0      	str	r0, [r4, #28]
 800b824:	b920      	cbnz	r0, 800b830 <_Balloc+0x20>
 800b826:	216b      	movs	r1, #107	@ 0x6b
 800b828:	4b17      	ldr	r3, [pc, #92]	@ (800b888 <_Balloc+0x78>)
 800b82a:	4818      	ldr	r0, [pc, #96]	@ (800b88c <_Balloc+0x7c>)
 800b82c:	f000 fe1a 	bl	800c464 <__assert_func>
 800b830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b834:	6006      	str	r6, [r0, #0]
 800b836:	60c6      	str	r6, [r0, #12]
 800b838:	69e6      	ldr	r6, [r4, #28]
 800b83a:	68f3      	ldr	r3, [r6, #12]
 800b83c:	b183      	cbz	r3, 800b860 <_Balloc+0x50>
 800b83e:	69e3      	ldr	r3, [r4, #28]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b846:	b9b8      	cbnz	r0, 800b878 <_Balloc+0x68>
 800b848:	2101      	movs	r1, #1
 800b84a:	fa01 f605 	lsl.w	r6, r1, r5
 800b84e:	1d72      	adds	r2, r6, #5
 800b850:	4620      	mov	r0, r4
 800b852:	0092      	lsls	r2, r2, #2
 800b854:	f000 fe24 	bl	800c4a0 <_calloc_r>
 800b858:	b160      	cbz	r0, 800b874 <_Balloc+0x64>
 800b85a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b85e:	e00e      	b.n	800b87e <_Balloc+0x6e>
 800b860:	2221      	movs	r2, #33	@ 0x21
 800b862:	2104      	movs	r1, #4
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fe1b 	bl	800c4a0 <_calloc_r>
 800b86a:	69e3      	ldr	r3, [r4, #28]
 800b86c:	60f0      	str	r0, [r6, #12]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e4      	bne.n	800b83e <_Balloc+0x2e>
 800b874:	2000      	movs	r0, #0
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	6802      	ldr	r2, [r0, #0]
 800b87a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b87e:	2300      	movs	r3, #0
 800b880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b884:	e7f7      	b.n	800b876 <_Balloc+0x66>
 800b886:	bf00      	nop
 800b888:	0800e29e 	.word	0x0800e29e
 800b88c:	0800e38f 	.word	0x0800e38f

0800b890 <_Bfree>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	69c6      	ldr	r6, [r0, #28]
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b976      	cbnz	r6, 800b8b8 <_Bfree+0x28>
 800b89a:	2010      	movs	r0, #16
 800b89c:	f7ff fe48 	bl	800b530 <malloc>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	61e8      	str	r0, [r5, #28]
 800b8a4:	b920      	cbnz	r0, 800b8b0 <_Bfree+0x20>
 800b8a6:	218f      	movs	r1, #143	@ 0x8f
 800b8a8:	4b08      	ldr	r3, [pc, #32]	@ (800b8cc <_Bfree+0x3c>)
 800b8aa:	4809      	ldr	r0, [pc, #36]	@ (800b8d0 <_Bfree+0x40>)
 800b8ac:	f000 fdda 	bl	800c464 <__assert_func>
 800b8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8b4:	6006      	str	r6, [r0, #0]
 800b8b6:	60c6      	str	r6, [r0, #12]
 800b8b8:	b13c      	cbz	r4, 800b8ca <_Bfree+0x3a>
 800b8ba:	69eb      	ldr	r3, [r5, #28]
 800b8bc:	6862      	ldr	r2, [r4, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8c4:	6021      	str	r1, [r4, #0]
 800b8c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	0800e29e 	.word	0x0800e29e
 800b8d0:	0800e38f 	.word	0x0800e38f

0800b8d4 <__multadd>:
 800b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	4607      	mov	r7, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	461e      	mov	r6, r3
 800b8de:	2000      	movs	r0, #0
 800b8e0:	690d      	ldr	r5, [r1, #16]
 800b8e2:	f101 0c14 	add.w	ip, r1, #20
 800b8e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	b299      	uxth	r1, r3
 800b8ee:	fb02 6101 	mla	r1, r2, r1, r6
 800b8f2:	0c1e      	lsrs	r6, r3, #16
 800b8f4:	0c0b      	lsrs	r3, r1, #16
 800b8f6:	fb02 3306 	mla	r3, r2, r6, r3
 800b8fa:	b289      	uxth	r1, r1
 800b8fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b900:	4285      	cmp	r5, r0
 800b902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b906:	f84c 1b04 	str.w	r1, [ip], #4
 800b90a:	dcec      	bgt.n	800b8e6 <__multadd+0x12>
 800b90c:	b30e      	cbz	r6, 800b952 <__multadd+0x7e>
 800b90e:	68a3      	ldr	r3, [r4, #8]
 800b910:	42ab      	cmp	r3, r5
 800b912:	dc19      	bgt.n	800b948 <__multadd+0x74>
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	4638      	mov	r0, r7
 800b918:	3101      	adds	r1, #1
 800b91a:	f7ff ff79 	bl	800b810 <_Balloc>
 800b91e:	4680      	mov	r8, r0
 800b920:	b928      	cbnz	r0, 800b92e <__multadd+0x5a>
 800b922:	4602      	mov	r2, r0
 800b924:	21ba      	movs	r1, #186	@ 0xba
 800b926:	4b0c      	ldr	r3, [pc, #48]	@ (800b958 <__multadd+0x84>)
 800b928:	480c      	ldr	r0, [pc, #48]	@ (800b95c <__multadd+0x88>)
 800b92a:	f000 fd9b 	bl	800c464 <__assert_func>
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	f104 010c 	add.w	r1, r4, #12
 800b934:	3202      	adds	r2, #2
 800b936:	0092      	lsls	r2, r2, #2
 800b938:	300c      	adds	r0, #12
 800b93a:	f7fe f978 	bl	8009c2e <memcpy>
 800b93e:	4621      	mov	r1, r4
 800b940:	4638      	mov	r0, r7
 800b942:	f7ff ffa5 	bl	800b890 <_Bfree>
 800b946:	4644      	mov	r4, r8
 800b948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b94c:	3501      	adds	r5, #1
 800b94e:	615e      	str	r6, [r3, #20]
 800b950:	6125      	str	r5, [r4, #16]
 800b952:	4620      	mov	r0, r4
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	0800e30d 	.word	0x0800e30d
 800b95c:	0800e38f 	.word	0x0800e38f

0800b960 <__s2b>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	4615      	mov	r5, r2
 800b966:	2209      	movs	r2, #9
 800b968:	461f      	mov	r7, r3
 800b96a:	3308      	adds	r3, #8
 800b96c:	460c      	mov	r4, r1
 800b96e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b972:	4606      	mov	r6, r0
 800b974:	2201      	movs	r2, #1
 800b976:	2100      	movs	r1, #0
 800b978:	429a      	cmp	r2, r3
 800b97a:	db09      	blt.n	800b990 <__s2b+0x30>
 800b97c:	4630      	mov	r0, r6
 800b97e:	f7ff ff47 	bl	800b810 <_Balloc>
 800b982:	b940      	cbnz	r0, 800b996 <__s2b+0x36>
 800b984:	4602      	mov	r2, r0
 800b986:	21d3      	movs	r1, #211	@ 0xd3
 800b988:	4b18      	ldr	r3, [pc, #96]	@ (800b9ec <__s2b+0x8c>)
 800b98a:	4819      	ldr	r0, [pc, #100]	@ (800b9f0 <__s2b+0x90>)
 800b98c:	f000 fd6a 	bl	800c464 <__assert_func>
 800b990:	0052      	lsls	r2, r2, #1
 800b992:	3101      	adds	r1, #1
 800b994:	e7f0      	b.n	800b978 <__s2b+0x18>
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	2d09      	cmp	r5, #9
 800b99a:	6143      	str	r3, [r0, #20]
 800b99c:	f04f 0301 	mov.w	r3, #1
 800b9a0:	6103      	str	r3, [r0, #16]
 800b9a2:	dd16      	ble.n	800b9d2 <__s2b+0x72>
 800b9a4:	f104 0909 	add.w	r9, r4, #9
 800b9a8:	46c8      	mov	r8, r9
 800b9aa:	442c      	add	r4, r5
 800b9ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	220a      	movs	r2, #10
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	3b30      	subs	r3, #48	@ 0x30
 800b9b8:	f7ff ff8c 	bl	800b8d4 <__multadd>
 800b9bc:	45a0      	cmp	r8, r4
 800b9be:	d1f5      	bne.n	800b9ac <__s2b+0x4c>
 800b9c0:	f1a5 0408 	sub.w	r4, r5, #8
 800b9c4:	444c      	add	r4, r9
 800b9c6:	1b2d      	subs	r5, r5, r4
 800b9c8:	1963      	adds	r3, r4, r5
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	db04      	blt.n	800b9d8 <__s2b+0x78>
 800b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	2509      	movs	r5, #9
 800b9d4:	340a      	adds	r4, #10
 800b9d6:	e7f6      	b.n	800b9c6 <__s2b+0x66>
 800b9d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9dc:	4601      	mov	r1, r0
 800b9de:	220a      	movs	r2, #10
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	3b30      	subs	r3, #48	@ 0x30
 800b9e4:	f7ff ff76 	bl	800b8d4 <__multadd>
 800b9e8:	e7ee      	b.n	800b9c8 <__s2b+0x68>
 800b9ea:	bf00      	nop
 800b9ec:	0800e30d 	.word	0x0800e30d
 800b9f0:	0800e38f 	.word	0x0800e38f

0800b9f4 <__hi0bits>:
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9fa:	bf3a      	itte	cc
 800b9fc:	0403      	lslcc	r3, r0, #16
 800b9fe:	2010      	movcc	r0, #16
 800ba00:	2000      	movcs	r0, #0
 800ba02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba06:	bf3c      	itt	cc
 800ba08:	021b      	lslcc	r3, r3, #8
 800ba0a:	3008      	addcc	r0, #8
 800ba0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba10:	bf3c      	itt	cc
 800ba12:	011b      	lslcc	r3, r3, #4
 800ba14:	3004      	addcc	r0, #4
 800ba16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba1a:	bf3c      	itt	cc
 800ba1c:	009b      	lslcc	r3, r3, #2
 800ba1e:	3002      	addcc	r0, #2
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	db05      	blt.n	800ba30 <__hi0bits+0x3c>
 800ba24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba28:	f100 0001 	add.w	r0, r0, #1
 800ba2c:	bf08      	it	eq
 800ba2e:	2020      	moveq	r0, #32
 800ba30:	4770      	bx	lr

0800ba32 <__lo0bits>:
 800ba32:	6803      	ldr	r3, [r0, #0]
 800ba34:	4602      	mov	r2, r0
 800ba36:	f013 0007 	ands.w	r0, r3, #7
 800ba3a:	d00b      	beq.n	800ba54 <__lo0bits+0x22>
 800ba3c:	07d9      	lsls	r1, r3, #31
 800ba3e:	d421      	bmi.n	800ba84 <__lo0bits+0x52>
 800ba40:	0798      	lsls	r0, r3, #30
 800ba42:	bf49      	itett	mi
 800ba44:	085b      	lsrmi	r3, r3, #1
 800ba46:	089b      	lsrpl	r3, r3, #2
 800ba48:	2001      	movmi	r0, #1
 800ba4a:	6013      	strmi	r3, [r2, #0]
 800ba4c:	bf5c      	itt	pl
 800ba4e:	2002      	movpl	r0, #2
 800ba50:	6013      	strpl	r3, [r2, #0]
 800ba52:	4770      	bx	lr
 800ba54:	b299      	uxth	r1, r3
 800ba56:	b909      	cbnz	r1, 800ba5c <__lo0bits+0x2a>
 800ba58:	2010      	movs	r0, #16
 800ba5a:	0c1b      	lsrs	r3, r3, #16
 800ba5c:	b2d9      	uxtb	r1, r3
 800ba5e:	b909      	cbnz	r1, 800ba64 <__lo0bits+0x32>
 800ba60:	3008      	adds	r0, #8
 800ba62:	0a1b      	lsrs	r3, r3, #8
 800ba64:	0719      	lsls	r1, r3, #28
 800ba66:	bf04      	itt	eq
 800ba68:	091b      	lsreq	r3, r3, #4
 800ba6a:	3004      	addeq	r0, #4
 800ba6c:	0799      	lsls	r1, r3, #30
 800ba6e:	bf04      	itt	eq
 800ba70:	089b      	lsreq	r3, r3, #2
 800ba72:	3002      	addeq	r0, #2
 800ba74:	07d9      	lsls	r1, r3, #31
 800ba76:	d403      	bmi.n	800ba80 <__lo0bits+0x4e>
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	f100 0001 	add.w	r0, r0, #1
 800ba7e:	d003      	beq.n	800ba88 <__lo0bits+0x56>
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	4770      	bx	lr
 800ba84:	2000      	movs	r0, #0
 800ba86:	4770      	bx	lr
 800ba88:	2020      	movs	r0, #32
 800ba8a:	4770      	bx	lr

0800ba8c <__i2b>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	460c      	mov	r4, r1
 800ba90:	2101      	movs	r1, #1
 800ba92:	f7ff febd 	bl	800b810 <_Balloc>
 800ba96:	4602      	mov	r2, r0
 800ba98:	b928      	cbnz	r0, 800baa6 <__i2b+0x1a>
 800ba9a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba9e:	4b04      	ldr	r3, [pc, #16]	@ (800bab0 <__i2b+0x24>)
 800baa0:	4804      	ldr	r0, [pc, #16]	@ (800bab4 <__i2b+0x28>)
 800baa2:	f000 fcdf 	bl	800c464 <__assert_func>
 800baa6:	2301      	movs	r3, #1
 800baa8:	6144      	str	r4, [r0, #20]
 800baaa:	6103      	str	r3, [r0, #16]
 800baac:	bd10      	pop	{r4, pc}
 800baae:	bf00      	nop
 800bab0:	0800e30d 	.word	0x0800e30d
 800bab4:	0800e38f 	.word	0x0800e38f

0800bab8 <__multiply>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4614      	mov	r4, r2
 800babe:	690a      	ldr	r2, [r1, #16]
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	460f      	mov	r7, r1
 800bac4:	429a      	cmp	r2, r3
 800bac6:	bfa2      	ittt	ge
 800bac8:	4623      	movge	r3, r4
 800baca:	460c      	movge	r4, r1
 800bacc:	461f      	movge	r7, r3
 800bace:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bad2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bad6:	68a3      	ldr	r3, [r4, #8]
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	eb0a 0609 	add.w	r6, sl, r9
 800bade:	42b3      	cmp	r3, r6
 800bae0:	b085      	sub	sp, #20
 800bae2:	bfb8      	it	lt
 800bae4:	3101      	addlt	r1, #1
 800bae6:	f7ff fe93 	bl	800b810 <_Balloc>
 800baea:	b930      	cbnz	r0, 800bafa <__multiply+0x42>
 800baec:	4602      	mov	r2, r0
 800baee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baf2:	4b43      	ldr	r3, [pc, #268]	@ (800bc00 <__multiply+0x148>)
 800baf4:	4843      	ldr	r0, [pc, #268]	@ (800bc04 <__multiply+0x14c>)
 800baf6:	f000 fcb5 	bl	800c464 <__assert_func>
 800bafa:	f100 0514 	add.w	r5, r0, #20
 800bafe:	462b      	mov	r3, r5
 800bb00:	2200      	movs	r2, #0
 800bb02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb06:	4543      	cmp	r3, r8
 800bb08:	d321      	bcc.n	800bb4e <__multiply+0x96>
 800bb0a:	f107 0114 	add.w	r1, r7, #20
 800bb0e:	f104 0214 	add.w	r2, r4, #20
 800bb12:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb16:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb1a:	9302      	str	r3, [sp, #8]
 800bb1c:	1b13      	subs	r3, r2, r4
 800bb1e:	3b15      	subs	r3, #21
 800bb20:	f023 0303 	bic.w	r3, r3, #3
 800bb24:	3304      	adds	r3, #4
 800bb26:	f104 0715 	add.w	r7, r4, #21
 800bb2a:	42ba      	cmp	r2, r7
 800bb2c:	bf38      	it	cc
 800bb2e:	2304      	movcc	r3, #4
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	9b02      	ldr	r3, [sp, #8]
 800bb34:	9103      	str	r1, [sp, #12]
 800bb36:	428b      	cmp	r3, r1
 800bb38:	d80c      	bhi.n	800bb54 <__multiply+0x9c>
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	dd03      	ble.n	800bb46 <__multiply+0x8e>
 800bb3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d05a      	beq.n	800bbfc <__multiply+0x144>
 800bb46:	6106      	str	r6, [r0, #16]
 800bb48:	b005      	add	sp, #20
 800bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	f843 2b04 	str.w	r2, [r3], #4
 800bb52:	e7d8      	b.n	800bb06 <__multiply+0x4e>
 800bb54:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb58:	f1ba 0f00 	cmp.w	sl, #0
 800bb5c:	d023      	beq.n	800bba6 <__multiply+0xee>
 800bb5e:	46a9      	mov	r9, r5
 800bb60:	f04f 0c00 	mov.w	ip, #0
 800bb64:	f104 0e14 	add.w	lr, r4, #20
 800bb68:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb6c:	f8d9 3000 	ldr.w	r3, [r9]
 800bb70:	fa1f fb87 	uxth.w	fp, r7
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb7a:	4463      	add	r3, ip
 800bb7c:	f8d9 c000 	ldr.w	ip, [r9]
 800bb80:	0c3f      	lsrs	r7, r7, #16
 800bb82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bb86:	fb0a c707 	mla	r7, sl, r7, ip
 800bb8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb94:	4572      	cmp	r2, lr
 800bb96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb9a:	f849 3b04 	str.w	r3, [r9], #4
 800bb9e:	d8e3      	bhi.n	800bb68 <__multiply+0xb0>
 800bba0:	9b01      	ldr	r3, [sp, #4]
 800bba2:	f845 c003 	str.w	ip, [r5, r3]
 800bba6:	9b03      	ldr	r3, [sp, #12]
 800bba8:	3104      	adds	r1, #4
 800bbaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbae:	f1b9 0f00 	cmp.w	r9, #0
 800bbb2:	d021      	beq.n	800bbf8 <__multiply+0x140>
 800bbb4:	46ae      	mov	lr, r5
 800bbb6:	f04f 0a00 	mov.w	sl, #0
 800bbba:	682b      	ldr	r3, [r5, #0]
 800bbbc:	f104 0c14 	add.w	ip, r4, #20
 800bbc0:	f8bc b000 	ldrh.w	fp, [ip]
 800bbc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	fb09 770b 	mla	r7, r9, fp, r7
 800bbce:	4457      	add	r7, sl
 800bbd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbd4:	f84e 3b04 	str.w	r3, [lr], #4
 800bbd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbe0:	f8be 3000 	ldrh.w	r3, [lr]
 800bbe4:	4562      	cmp	r2, ip
 800bbe6:	fb09 330a 	mla	r3, r9, sl, r3
 800bbea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bbee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf2:	d8e5      	bhi.n	800bbc0 <__multiply+0x108>
 800bbf4:	9f01      	ldr	r7, [sp, #4]
 800bbf6:	51eb      	str	r3, [r5, r7]
 800bbf8:	3504      	adds	r5, #4
 800bbfa:	e79a      	b.n	800bb32 <__multiply+0x7a>
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	e79c      	b.n	800bb3a <__multiply+0x82>
 800bc00:	0800e30d 	.word	0x0800e30d
 800bc04:	0800e38f 	.word	0x0800e38f

0800bc08 <__pow5mult>:
 800bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	f012 0203 	ands.w	r2, r2, #3
 800bc12:	4607      	mov	r7, r0
 800bc14:	460e      	mov	r6, r1
 800bc16:	d007      	beq.n	800bc28 <__pow5mult+0x20>
 800bc18:	4c25      	ldr	r4, [pc, #148]	@ (800bcb0 <__pow5mult+0xa8>)
 800bc1a:	3a01      	subs	r2, #1
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc22:	f7ff fe57 	bl	800b8d4 <__multadd>
 800bc26:	4606      	mov	r6, r0
 800bc28:	10ad      	asrs	r5, r5, #2
 800bc2a:	d03d      	beq.n	800bca8 <__pow5mult+0xa0>
 800bc2c:	69fc      	ldr	r4, [r7, #28]
 800bc2e:	b97c      	cbnz	r4, 800bc50 <__pow5mult+0x48>
 800bc30:	2010      	movs	r0, #16
 800bc32:	f7ff fc7d 	bl	800b530 <malloc>
 800bc36:	4602      	mov	r2, r0
 800bc38:	61f8      	str	r0, [r7, #28]
 800bc3a:	b928      	cbnz	r0, 800bc48 <__pow5mult+0x40>
 800bc3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc40:	4b1c      	ldr	r3, [pc, #112]	@ (800bcb4 <__pow5mult+0xac>)
 800bc42:	481d      	ldr	r0, [pc, #116]	@ (800bcb8 <__pow5mult+0xb0>)
 800bc44:	f000 fc0e 	bl	800c464 <__assert_func>
 800bc48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc4c:	6004      	str	r4, [r0, #0]
 800bc4e:	60c4      	str	r4, [r0, #12]
 800bc50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc58:	b94c      	cbnz	r4, 800bc6e <__pow5mult+0x66>
 800bc5a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f7ff ff14 	bl	800ba8c <__i2b>
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	f04f 0900 	mov.w	r9, #0
 800bc72:	07eb      	lsls	r3, r5, #31
 800bc74:	d50a      	bpl.n	800bc8c <__pow5mult+0x84>
 800bc76:	4631      	mov	r1, r6
 800bc78:	4622      	mov	r2, r4
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	f7ff ff1c 	bl	800bab8 <__multiply>
 800bc80:	4680      	mov	r8, r0
 800bc82:	4631      	mov	r1, r6
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff fe03 	bl	800b890 <_Bfree>
 800bc8a:	4646      	mov	r6, r8
 800bc8c:	106d      	asrs	r5, r5, #1
 800bc8e:	d00b      	beq.n	800bca8 <__pow5mult+0xa0>
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	b938      	cbnz	r0, 800bca4 <__pow5mult+0x9c>
 800bc94:	4622      	mov	r2, r4
 800bc96:	4621      	mov	r1, r4
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff ff0d 	bl	800bab8 <__multiply>
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	f8c0 9000 	str.w	r9, [r0]
 800bca4:	4604      	mov	r4, r0
 800bca6:	e7e4      	b.n	800bc72 <__pow5mult+0x6a>
 800bca8:	4630      	mov	r0, r6
 800bcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcae:	bf00      	nop
 800bcb0:	0800e3e8 	.word	0x0800e3e8
 800bcb4:	0800e29e 	.word	0x0800e29e
 800bcb8:	0800e38f 	.word	0x0800e38f

0800bcbc <__lshift>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	4691      	mov	r9, r2
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	6849      	ldr	r1, [r1, #4]
 800bcca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcce:	68a3      	ldr	r3, [r4, #8]
 800bcd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcd4:	f108 0601 	add.w	r6, r8, #1
 800bcd8:	42b3      	cmp	r3, r6
 800bcda:	db0b      	blt.n	800bcf4 <__lshift+0x38>
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff fd97 	bl	800b810 <_Balloc>
 800bce2:	4605      	mov	r5, r0
 800bce4:	b948      	cbnz	r0, 800bcfa <__lshift+0x3e>
 800bce6:	4602      	mov	r2, r0
 800bce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcec:	4b27      	ldr	r3, [pc, #156]	@ (800bd8c <__lshift+0xd0>)
 800bcee:	4828      	ldr	r0, [pc, #160]	@ (800bd90 <__lshift+0xd4>)
 800bcf0:	f000 fbb8 	bl	800c464 <__assert_func>
 800bcf4:	3101      	adds	r1, #1
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	e7ee      	b.n	800bcd8 <__lshift+0x1c>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f100 0114 	add.w	r1, r0, #20
 800bd00:	f100 0210 	add.w	r2, r0, #16
 800bd04:	4618      	mov	r0, r3
 800bd06:	4553      	cmp	r3, sl
 800bd08:	db33      	blt.n	800bd72 <__lshift+0xb6>
 800bd0a:	6920      	ldr	r0, [r4, #16]
 800bd0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd10:	f104 0314 	add.w	r3, r4, #20
 800bd14:	f019 091f 	ands.w	r9, r9, #31
 800bd18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd20:	d02b      	beq.n	800bd7a <__lshift+0xbe>
 800bd22:	468a      	mov	sl, r1
 800bd24:	2200      	movs	r2, #0
 800bd26:	f1c9 0e20 	rsb	lr, r9, #32
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd30:	4310      	orrs	r0, r2
 800bd32:	f84a 0b04 	str.w	r0, [sl], #4
 800bd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3a:	459c      	cmp	ip, r3
 800bd3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd40:	d8f3      	bhi.n	800bd2a <__lshift+0x6e>
 800bd42:	ebac 0304 	sub.w	r3, ip, r4
 800bd46:	3b15      	subs	r3, #21
 800bd48:	f023 0303 	bic.w	r3, r3, #3
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	f104 0015 	add.w	r0, r4, #21
 800bd52:	4584      	cmp	ip, r0
 800bd54:	bf38      	it	cc
 800bd56:	2304      	movcc	r3, #4
 800bd58:	50ca      	str	r2, [r1, r3]
 800bd5a:	b10a      	cbz	r2, 800bd60 <__lshift+0xa4>
 800bd5c:	f108 0602 	add.w	r6, r8, #2
 800bd60:	3e01      	subs	r6, #1
 800bd62:	4638      	mov	r0, r7
 800bd64:	4621      	mov	r1, r4
 800bd66:	612e      	str	r6, [r5, #16]
 800bd68:	f7ff fd92 	bl	800b890 <_Bfree>
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd76:	3301      	adds	r3, #1
 800bd78:	e7c5      	b.n	800bd06 <__lshift+0x4a>
 800bd7a:	3904      	subs	r1, #4
 800bd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd80:	459c      	cmp	ip, r3
 800bd82:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd86:	d8f9      	bhi.n	800bd7c <__lshift+0xc0>
 800bd88:	e7ea      	b.n	800bd60 <__lshift+0xa4>
 800bd8a:	bf00      	nop
 800bd8c:	0800e30d 	.word	0x0800e30d
 800bd90:	0800e38f 	.word	0x0800e38f

0800bd94 <__mcmp>:
 800bd94:	4603      	mov	r3, r0
 800bd96:	690a      	ldr	r2, [r1, #16]
 800bd98:	6900      	ldr	r0, [r0, #16]
 800bd9a:	b530      	push	{r4, r5, lr}
 800bd9c:	1a80      	subs	r0, r0, r2
 800bd9e:	d10e      	bne.n	800bdbe <__mcmp+0x2a>
 800bda0:	3314      	adds	r3, #20
 800bda2:	3114      	adds	r1, #20
 800bda4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bda8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdb4:	4295      	cmp	r5, r2
 800bdb6:	d003      	beq.n	800bdc0 <__mcmp+0x2c>
 800bdb8:	d205      	bcs.n	800bdc6 <__mcmp+0x32>
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdbe:	bd30      	pop	{r4, r5, pc}
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	d3f3      	bcc.n	800bdac <__mcmp+0x18>
 800bdc4:	e7fb      	b.n	800bdbe <__mcmp+0x2a>
 800bdc6:	2001      	movs	r0, #1
 800bdc8:	e7f9      	b.n	800bdbe <__mcmp+0x2a>
	...

0800bdcc <__mdiff>:
 800bdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4648      	mov	r0, r9
 800bdd8:	4614      	mov	r4, r2
 800bdda:	f7ff ffdb 	bl	800bd94 <__mcmp>
 800bdde:	1e05      	subs	r5, r0, #0
 800bde0:	d112      	bne.n	800be08 <__mdiff+0x3c>
 800bde2:	4629      	mov	r1, r5
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff fd13 	bl	800b810 <_Balloc>
 800bdea:	4602      	mov	r2, r0
 800bdec:	b928      	cbnz	r0, 800bdfa <__mdiff+0x2e>
 800bdee:	f240 2137 	movw	r1, #567	@ 0x237
 800bdf2:	4b3e      	ldr	r3, [pc, #248]	@ (800beec <__mdiff+0x120>)
 800bdf4:	483e      	ldr	r0, [pc, #248]	@ (800bef0 <__mdiff+0x124>)
 800bdf6:	f000 fb35 	bl	800c464 <__assert_func>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be00:	4610      	mov	r0, r2
 800be02:	b003      	add	sp, #12
 800be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be08:	bfbc      	itt	lt
 800be0a:	464b      	movlt	r3, r9
 800be0c:	46a1      	movlt	r9, r4
 800be0e:	4630      	mov	r0, r6
 800be10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be14:	bfba      	itte	lt
 800be16:	461c      	movlt	r4, r3
 800be18:	2501      	movlt	r5, #1
 800be1a:	2500      	movge	r5, #0
 800be1c:	f7ff fcf8 	bl	800b810 <_Balloc>
 800be20:	4602      	mov	r2, r0
 800be22:	b918      	cbnz	r0, 800be2c <__mdiff+0x60>
 800be24:	f240 2145 	movw	r1, #581	@ 0x245
 800be28:	4b30      	ldr	r3, [pc, #192]	@ (800beec <__mdiff+0x120>)
 800be2a:	e7e3      	b.n	800bdf4 <__mdiff+0x28>
 800be2c:	f100 0b14 	add.w	fp, r0, #20
 800be30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be34:	f109 0310 	add.w	r3, r9, #16
 800be38:	60c5      	str	r5, [r0, #12]
 800be3a:	f04f 0c00 	mov.w	ip, #0
 800be3e:	f109 0514 	add.w	r5, r9, #20
 800be42:	46d9      	mov	r9, fp
 800be44:	6926      	ldr	r6, [r4, #16]
 800be46:	f104 0e14 	add.w	lr, r4, #20
 800be4a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be4e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be5e:	b281      	uxth	r1, r0
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	fa1f f38a 	uxth.w	r3, sl
 800be66:	1a5b      	subs	r3, r3, r1
 800be68:	0c00      	lsrs	r0, r0, #16
 800be6a:	4463      	add	r3, ip
 800be6c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be70:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be74:	b29b      	uxth	r3, r3
 800be76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be7a:	4576      	cmp	r6, lr
 800be7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be80:	f849 3b04 	str.w	r3, [r9], #4
 800be84:	d8e6      	bhi.n	800be54 <__mdiff+0x88>
 800be86:	1b33      	subs	r3, r6, r4
 800be88:	3b15      	subs	r3, #21
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	3415      	adds	r4, #21
 800be90:	3304      	adds	r3, #4
 800be92:	42a6      	cmp	r6, r4
 800be94:	bf38      	it	cc
 800be96:	2304      	movcc	r3, #4
 800be98:	441d      	add	r5, r3
 800be9a:	445b      	add	r3, fp
 800be9c:	461e      	mov	r6, r3
 800be9e:	462c      	mov	r4, r5
 800bea0:	4544      	cmp	r4, r8
 800bea2:	d30e      	bcc.n	800bec2 <__mdiff+0xf6>
 800bea4:	f108 0103 	add.w	r1, r8, #3
 800bea8:	1b49      	subs	r1, r1, r5
 800beaa:	f021 0103 	bic.w	r1, r1, #3
 800beae:	3d03      	subs	r5, #3
 800beb0:	45a8      	cmp	r8, r5
 800beb2:	bf38      	it	cc
 800beb4:	2100      	movcc	r1, #0
 800beb6:	440b      	add	r3, r1
 800beb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bebc:	b199      	cbz	r1, 800bee6 <__mdiff+0x11a>
 800bebe:	6117      	str	r7, [r2, #16]
 800bec0:	e79e      	b.n	800be00 <__mdiff+0x34>
 800bec2:	46e6      	mov	lr, ip
 800bec4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bec8:	fa1f fc81 	uxth.w	ip, r1
 800becc:	44f4      	add	ip, lr
 800bece:	0c08      	lsrs	r0, r1, #16
 800bed0:	4471      	add	r1, lr
 800bed2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bed6:	b289      	uxth	r1, r1
 800bed8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bedc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bee0:	f846 1b04 	str.w	r1, [r6], #4
 800bee4:	e7dc      	b.n	800bea0 <__mdiff+0xd4>
 800bee6:	3f01      	subs	r7, #1
 800bee8:	e7e6      	b.n	800beb8 <__mdiff+0xec>
 800beea:	bf00      	nop
 800beec:	0800e30d 	.word	0x0800e30d
 800bef0:	0800e38f 	.word	0x0800e38f

0800bef4 <__ulp>:
 800bef4:	4b0e      	ldr	r3, [pc, #56]	@ (800bf30 <__ulp+0x3c>)
 800bef6:	400b      	ands	r3, r1
 800bef8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc08      	bgt.n	800bf12 <__ulp+0x1e>
 800bf00:	425b      	negs	r3, r3
 800bf02:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf0a:	da04      	bge.n	800bf16 <__ulp+0x22>
 800bf0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf10:	4113      	asrs	r3, r2
 800bf12:	2200      	movs	r2, #0
 800bf14:	e008      	b.n	800bf28 <__ulp+0x34>
 800bf16:	f1a2 0314 	sub.w	r3, r2, #20
 800bf1a:	2b1e      	cmp	r3, #30
 800bf1c:	bfd6      	itet	le
 800bf1e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf22:	2201      	movgt	r2, #1
 800bf24:	40da      	lsrle	r2, r3
 800bf26:	2300      	movs	r3, #0
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	7ff00000 	.word	0x7ff00000

0800bf34 <__b2d>:
 800bf34:	6902      	ldr	r2, [r0, #16]
 800bf36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf38:	f100 0614 	add.w	r6, r0, #20
 800bf3c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bf40:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bf44:	4f1e      	ldr	r7, [pc, #120]	@ (800bfc0 <__b2d+0x8c>)
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7ff fd54 	bl	800b9f4 <__hi0bits>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f1c0 0020 	rsb	r0, r0, #32
 800bf52:	2b0a      	cmp	r3, #10
 800bf54:	f1a2 0504 	sub.w	r5, r2, #4
 800bf58:	6008      	str	r0, [r1, #0]
 800bf5a:	dc12      	bgt.n	800bf82 <__b2d+0x4e>
 800bf5c:	42ae      	cmp	r6, r5
 800bf5e:	bf2c      	ite	cs
 800bf60:	2200      	movcs	r2, #0
 800bf62:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bf66:	f1c3 0c0b 	rsb	ip, r3, #11
 800bf6a:	3315      	adds	r3, #21
 800bf6c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bf70:	fa04 f303 	lsl.w	r3, r4, r3
 800bf74:	fa22 f20c 	lsr.w	r2, r2, ip
 800bf78:	ea4e 0107 	orr.w	r1, lr, r7
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf82:	42ae      	cmp	r6, r5
 800bf84:	bf36      	itet	cc
 800bf86:	f1a2 0508 	subcc.w	r5, r2, #8
 800bf8a:	2200      	movcs	r2, #0
 800bf8c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bf90:	3b0b      	subs	r3, #11
 800bf92:	d012      	beq.n	800bfba <__b2d+0x86>
 800bf94:	f1c3 0720 	rsb	r7, r3, #32
 800bf98:	fa22 f107 	lsr.w	r1, r2, r7
 800bf9c:	409c      	lsls	r4, r3
 800bf9e:	430c      	orrs	r4, r1
 800bfa0:	42b5      	cmp	r5, r6
 800bfa2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bfa6:	bf94      	ite	ls
 800bfa8:	2400      	movls	r4, #0
 800bfaa:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bfae:	409a      	lsls	r2, r3
 800bfb0:	40fc      	lsrs	r4, r7
 800bfb2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bfb6:	4322      	orrs	r2, r4
 800bfb8:	e7e1      	b.n	800bf7e <__b2d+0x4a>
 800bfba:	ea44 0107 	orr.w	r1, r4, r7
 800bfbe:	e7de      	b.n	800bf7e <__b2d+0x4a>
 800bfc0:	3ff00000 	.word	0x3ff00000

0800bfc4 <__d2b>:
 800bfc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bfc8:	2101      	movs	r1, #1
 800bfca:	4690      	mov	r8, r2
 800bfcc:	4699      	mov	r9, r3
 800bfce:	9e08      	ldr	r6, [sp, #32]
 800bfd0:	f7ff fc1e 	bl	800b810 <_Balloc>
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	b930      	cbnz	r0, 800bfe6 <__d2b+0x22>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfde:	4b23      	ldr	r3, [pc, #140]	@ (800c06c <__d2b+0xa8>)
 800bfe0:	4823      	ldr	r0, [pc, #140]	@ (800c070 <__d2b+0xac>)
 800bfe2:	f000 fa3f 	bl	800c464 <__assert_func>
 800bfe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfee:	b10d      	cbz	r5, 800bff4 <__d2b+0x30>
 800bff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	f1b8 0300 	subs.w	r3, r8, #0
 800bffa:	d024      	beq.n	800c046 <__d2b+0x82>
 800bffc:	4668      	mov	r0, sp
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	f7ff fd17 	bl	800ba32 <__lo0bits>
 800c004:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c008:	b1d8      	cbz	r0, 800c042 <__d2b+0x7e>
 800c00a:	f1c0 0320 	rsb	r3, r0, #32
 800c00e:	fa02 f303 	lsl.w	r3, r2, r3
 800c012:	430b      	orrs	r3, r1
 800c014:	40c2      	lsrs	r2, r0
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	9201      	str	r2, [sp, #4]
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bf0c      	ite	eq
 800c020:	2201      	moveq	r2, #1
 800c022:	2202      	movne	r2, #2
 800c024:	61a3      	str	r3, [r4, #24]
 800c026:	6122      	str	r2, [r4, #16]
 800c028:	b1ad      	cbz	r5, 800c056 <__d2b+0x92>
 800c02a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c02e:	4405      	add	r5, r0
 800c030:	6035      	str	r5, [r6, #0]
 800c032:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c038:	6018      	str	r0, [r3, #0]
 800c03a:	4620      	mov	r0, r4
 800c03c:	b002      	add	sp, #8
 800c03e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c042:	6161      	str	r1, [r4, #20]
 800c044:	e7e9      	b.n	800c01a <__d2b+0x56>
 800c046:	a801      	add	r0, sp, #4
 800c048:	f7ff fcf3 	bl	800ba32 <__lo0bits>
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	6163      	str	r3, [r4, #20]
 800c052:	3020      	adds	r0, #32
 800c054:	e7e7      	b.n	800c026 <__d2b+0x62>
 800c056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c05a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c05e:	6030      	str	r0, [r6, #0]
 800c060:	6918      	ldr	r0, [r3, #16]
 800c062:	f7ff fcc7 	bl	800b9f4 <__hi0bits>
 800c066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c06a:	e7e4      	b.n	800c036 <__d2b+0x72>
 800c06c:	0800e30d 	.word	0x0800e30d
 800c070:	0800e38f 	.word	0x0800e38f

0800c074 <__ratio>:
 800c074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c078:	b085      	sub	sp, #20
 800c07a:	e9cd 1000 	strd	r1, r0, [sp]
 800c07e:	a902      	add	r1, sp, #8
 800c080:	f7ff ff58 	bl	800bf34 <__b2d>
 800c084:	468b      	mov	fp, r1
 800c086:	4606      	mov	r6, r0
 800c088:	460f      	mov	r7, r1
 800c08a:	9800      	ldr	r0, [sp, #0]
 800c08c:	a903      	add	r1, sp, #12
 800c08e:	f7ff ff51 	bl	800bf34 <__b2d>
 800c092:	460d      	mov	r5, r1
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	4689      	mov	r9, r1
 800c098:	6919      	ldr	r1, [r3, #16]
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	4604      	mov	r4, r0
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	1ac9      	subs	r1, r1, r3
 800c0a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c0a8:	1a9b      	subs	r3, r3, r2
 800c0aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	bfcd      	iteet	gt
 800c0b2:	463a      	movgt	r2, r7
 800c0b4:	462a      	movle	r2, r5
 800c0b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0ba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c0be:	bfd8      	it	le
 800c0c0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	4622      	mov	r2, r4
 800c0c8:	4659      	mov	r1, fp
 800c0ca:	f7f4 fb2f 	bl	800072c <__aeabi_ddiv>
 800c0ce:	b005      	add	sp, #20
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0d4 <__copybits>:
 800c0d4:	3901      	subs	r1, #1
 800c0d6:	b570      	push	{r4, r5, r6, lr}
 800c0d8:	1149      	asrs	r1, r1, #5
 800c0da:	6914      	ldr	r4, [r2, #16]
 800c0dc:	3101      	adds	r1, #1
 800c0de:	f102 0314 	add.w	r3, r2, #20
 800c0e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0ea:	1f05      	subs	r5, r0, #4
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	d30c      	bcc.n	800c10a <__copybits+0x36>
 800c0f0:	1aa3      	subs	r3, r4, r2
 800c0f2:	3b11      	subs	r3, #17
 800c0f4:	f023 0303 	bic.w	r3, r3, #3
 800c0f8:	3211      	adds	r2, #17
 800c0fa:	42a2      	cmp	r2, r4
 800c0fc:	bf88      	it	hi
 800c0fe:	2300      	movhi	r3, #0
 800c100:	4418      	add	r0, r3
 800c102:	2300      	movs	r3, #0
 800c104:	4288      	cmp	r0, r1
 800c106:	d305      	bcc.n	800c114 <__copybits+0x40>
 800c108:	bd70      	pop	{r4, r5, r6, pc}
 800c10a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c10e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c112:	e7eb      	b.n	800c0ec <__copybits+0x18>
 800c114:	f840 3b04 	str.w	r3, [r0], #4
 800c118:	e7f4      	b.n	800c104 <__copybits+0x30>

0800c11a <__any_on>:
 800c11a:	f100 0214 	add.w	r2, r0, #20
 800c11e:	6900      	ldr	r0, [r0, #16]
 800c120:	114b      	asrs	r3, r1, #5
 800c122:	4298      	cmp	r0, r3
 800c124:	b510      	push	{r4, lr}
 800c126:	db11      	blt.n	800c14c <__any_on+0x32>
 800c128:	dd0a      	ble.n	800c140 <__any_on+0x26>
 800c12a:	f011 011f 	ands.w	r1, r1, #31
 800c12e:	d007      	beq.n	800c140 <__any_on+0x26>
 800c130:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c134:	fa24 f001 	lsr.w	r0, r4, r1
 800c138:	fa00 f101 	lsl.w	r1, r0, r1
 800c13c:	428c      	cmp	r4, r1
 800c13e:	d10b      	bne.n	800c158 <__any_on+0x3e>
 800c140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c144:	4293      	cmp	r3, r2
 800c146:	d803      	bhi.n	800c150 <__any_on+0x36>
 800c148:	2000      	movs	r0, #0
 800c14a:	bd10      	pop	{r4, pc}
 800c14c:	4603      	mov	r3, r0
 800c14e:	e7f7      	b.n	800c140 <__any_on+0x26>
 800c150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c154:	2900      	cmp	r1, #0
 800c156:	d0f5      	beq.n	800c144 <__any_on+0x2a>
 800c158:	2001      	movs	r0, #1
 800c15a:	e7f6      	b.n	800c14a <__any_on+0x30>

0800c15c <__sread>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c164:	f000 f94a 	bl	800c3fc <_read_r>
 800c168:	2800      	cmp	r0, #0
 800c16a:	bfab      	itete	ge
 800c16c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c16e:	89a3      	ldrhlt	r3, [r4, #12]
 800c170:	181b      	addge	r3, r3, r0
 800c172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c176:	bfac      	ite	ge
 800c178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c17a:	81a3      	strhlt	r3, [r4, #12]
 800c17c:	bd10      	pop	{r4, pc}

0800c17e <__swrite>:
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	461f      	mov	r7, r3
 800c184:	898b      	ldrh	r3, [r1, #12]
 800c186:	4605      	mov	r5, r0
 800c188:	05db      	lsls	r3, r3, #23
 800c18a:	460c      	mov	r4, r1
 800c18c:	4616      	mov	r6, r2
 800c18e:	d505      	bpl.n	800c19c <__swrite+0x1e>
 800c190:	2302      	movs	r3, #2
 800c192:	2200      	movs	r2, #0
 800c194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c198:	f000 f91e 	bl	800c3d8 <_lseek_r>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	4632      	mov	r2, r6
 800c1a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	463b      	mov	r3, r7
 800c1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b2:	f000 b945 	b.w	800c440 <_write_r>

0800c1b6 <__sseek>:
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1be:	f000 f90b 	bl	800c3d8 <_lseek_r>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	bf15      	itete	ne
 800c1c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1d2:	81a3      	strheq	r3, [r4, #12]
 800c1d4:	bf18      	it	ne
 800c1d6:	81a3      	strhne	r3, [r4, #12]
 800c1d8:	bd10      	pop	{r4, pc}

0800c1da <__sclose>:
 800c1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1de:	f000 b8eb 	b.w	800c3b8 <_close_r>

0800c1e2 <_realloc_r>:
 800c1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e6:	4680      	mov	r8, r0
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	b921      	cbnz	r1, 800c1f8 <_realloc_r+0x16>
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	f7ff b9c6 	b.w	800b584 <_malloc_r>
 800c1f8:	b92a      	cbnz	r2, 800c206 <_realloc_r+0x24>
 800c1fa:	f7fe fb81 	bl	800a900 <_free_r>
 800c1fe:	2400      	movs	r4, #0
 800c200:	4620      	mov	r0, r4
 800c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c206:	f000 f95f 	bl	800c4c8 <_malloc_usable_size_r>
 800c20a:	4285      	cmp	r5, r0
 800c20c:	4606      	mov	r6, r0
 800c20e:	d802      	bhi.n	800c216 <_realloc_r+0x34>
 800c210:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c214:	d8f4      	bhi.n	800c200 <_realloc_r+0x1e>
 800c216:	4629      	mov	r1, r5
 800c218:	4640      	mov	r0, r8
 800c21a:	f7ff f9b3 	bl	800b584 <_malloc_r>
 800c21e:	4607      	mov	r7, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	d0ec      	beq.n	800c1fe <_realloc_r+0x1c>
 800c224:	42b5      	cmp	r5, r6
 800c226:	462a      	mov	r2, r5
 800c228:	4621      	mov	r1, r4
 800c22a:	bf28      	it	cs
 800c22c:	4632      	movcs	r2, r6
 800c22e:	f7fd fcfe 	bl	8009c2e <memcpy>
 800c232:	4621      	mov	r1, r4
 800c234:	4640      	mov	r0, r8
 800c236:	f7fe fb63 	bl	800a900 <_free_r>
 800c23a:	463c      	mov	r4, r7
 800c23c:	e7e0      	b.n	800c200 <_realloc_r+0x1e>

0800c23e <__swbuf_r>:
 800c23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c240:	460e      	mov	r6, r1
 800c242:	4614      	mov	r4, r2
 800c244:	4605      	mov	r5, r0
 800c246:	b118      	cbz	r0, 800c250 <__swbuf_r+0x12>
 800c248:	6a03      	ldr	r3, [r0, #32]
 800c24a:	b90b      	cbnz	r3, 800c250 <__swbuf_r+0x12>
 800c24c:	f7fc fc9a 	bl	8008b84 <__sinit>
 800c250:	69a3      	ldr	r3, [r4, #24]
 800c252:	60a3      	str	r3, [r4, #8]
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	071a      	lsls	r2, r3, #28
 800c258:	d501      	bpl.n	800c25e <__swbuf_r+0x20>
 800c25a:	6923      	ldr	r3, [r4, #16]
 800c25c:	b943      	cbnz	r3, 800c270 <__swbuf_r+0x32>
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f000 f82b 	bl	800c2bc <__swsetup_r>
 800c266:	b118      	cbz	r0, 800c270 <__swbuf_r+0x32>
 800c268:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c26c:	4638      	mov	r0, r7
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c270:	6823      	ldr	r3, [r4, #0]
 800c272:	6922      	ldr	r2, [r4, #16]
 800c274:	b2f6      	uxtb	r6, r6
 800c276:	1a98      	subs	r0, r3, r2
 800c278:	6963      	ldr	r3, [r4, #20]
 800c27a:	4637      	mov	r7, r6
 800c27c:	4283      	cmp	r3, r0
 800c27e:	dc05      	bgt.n	800c28c <__swbuf_r+0x4e>
 800c280:	4621      	mov	r1, r4
 800c282:	4628      	mov	r0, r5
 800c284:	f7ff fa90 	bl	800b7a8 <_fflush_r>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d1ed      	bne.n	800c268 <__swbuf_r+0x2a>
 800c28c:	68a3      	ldr	r3, [r4, #8]
 800c28e:	3b01      	subs	r3, #1
 800c290:	60a3      	str	r3, [r4, #8]
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	6022      	str	r2, [r4, #0]
 800c298:	701e      	strb	r6, [r3, #0]
 800c29a:	6962      	ldr	r2, [r4, #20]
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d004      	beq.n	800c2ac <__swbuf_r+0x6e>
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	07db      	lsls	r3, r3, #31
 800c2a6:	d5e1      	bpl.n	800c26c <__swbuf_r+0x2e>
 800c2a8:	2e0a      	cmp	r6, #10
 800c2aa:	d1df      	bne.n	800c26c <__swbuf_r+0x2e>
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f7ff fa7a 	bl	800b7a8 <_fflush_r>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d0d9      	beq.n	800c26c <__swbuf_r+0x2e>
 800c2b8:	e7d6      	b.n	800c268 <__swbuf_r+0x2a>
	...

0800c2bc <__swsetup_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4b29      	ldr	r3, [pc, #164]	@ (800c364 <__swsetup_r+0xa8>)
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	b118      	cbz	r0, 800c2d0 <__swsetup_r+0x14>
 800c2c8:	6a03      	ldr	r3, [r0, #32]
 800c2ca:	b90b      	cbnz	r3, 800c2d0 <__swsetup_r+0x14>
 800c2cc:	f7fc fc5a 	bl	8008b84 <__sinit>
 800c2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d4:	0719      	lsls	r1, r3, #28
 800c2d6:	d422      	bmi.n	800c31e <__swsetup_r+0x62>
 800c2d8:	06da      	lsls	r2, r3, #27
 800c2da:	d407      	bmi.n	800c2ec <__swsetup_r+0x30>
 800c2dc:	2209      	movs	r2, #9
 800c2de:	602a      	str	r2, [r5, #0]
 800c2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	e033      	b.n	800c354 <__swsetup_r+0x98>
 800c2ec:	0758      	lsls	r0, r3, #29
 800c2ee:	d512      	bpl.n	800c316 <__swsetup_r+0x5a>
 800c2f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2f2:	b141      	cbz	r1, 800c306 <__swsetup_r+0x4a>
 800c2f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	d002      	beq.n	800c302 <__swsetup_r+0x46>
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f7fe faff 	bl	800a900 <_free_r>
 800c302:	2300      	movs	r3, #0
 800c304:	6363      	str	r3, [r4, #52]	@ 0x34
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	2300      	movs	r3, #0
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f043 0308 	orr.w	r3, r3, #8
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	b94b      	cbnz	r3, 800c336 <__swsetup_r+0x7a>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c32c:	d003      	beq.n	800c336 <__swsetup_r+0x7a>
 800c32e:	4621      	mov	r1, r4
 800c330:	4628      	mov	r0, r5
 800c332:	f7fd fafe 	bl	8009932 <__smakebuf_r>
 800c336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33a:	f013 0201 	ands.w	r2, r3, #1
 800c33e:	d00a      	beq.n	800c356 <__swsetup_r+0x9a>
 800c340:	2200      	movs	r2, #0
 800c342:	60a2      	str	r2, [r4, #8]
 800c344:	6962      	ldr	r2, [r4, #20]
 800c346:	4252      	negs	r2, r2
 800c348:	61a2      	str	r2, [r4, #24]
 800c34a:	6922      	ldr	r2, [r4, #16]
 800c34c:	b942      	cbnz	r2, 800c360 <__swsetup_r+0xa4>
 800c34e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c352:	d1c5      	bne.n	800c2e0 <__swsetup_r+0x24>
 800c354:	bd38      	pop	{r3, r4, r5, pc}
 800c356:	0799      	lsls	r1, r3, #30
 800c358:	bf58      	it	pl
 800c35a:	6962      	ldrpl	r2, [r4, #20]
 800c35c:	60a2      	str	r2, [r4, #8]
 800c35e:	e7f4      	b.n	800c34a <__swsetup_r+0x8e>
 800c360:	2000      	movs	r0, #0
 800c362:	e7f7      	b.n	800c354 <__swsetup_r+0x98>
 800c364:	20000188 	.word	0x20000188

0800c368 <__ascii_wctomb>:
 800c368:	4603      	mov	r3, r0
 800c36a:	4608      	mov	r0, r1
 800c36c:	b141      	cbz	r1, 800c380 <__ascii_wctomb+0x18>
 800c36e:	2aff      	cmp	r2, #255	@ 0xff
 800c370:	d904      	bls.n	800c37c <__ascii_wctomb+0x14>
 800c372:	228a      	movs	r2, #138	@ 0x8a
 800c374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	4770      	bx	lr
 800c37c:	2001      	movs	r0, #1
 800c37e:	700a      	strb	r2, [r1, #0]
 800c380:	4770      	bx	lr

0800c382 <memmove>:
 800c382:	4288      	cmp	r0, r1
 800c384:	b510      	push	{r4, lr}
 800c386:	eb01 0402 	add.w	r4, r1, r2
 800c38a:	d902      	bls.n	800c392 <memmove+0x10>
 800c38c:	4284      	cmp	r4, r0
 800c38e:	4623      	mov	r3, r4
 800c390:	d807      	bhi.n	800c3a2 <memmove+0x20>
 800c392:	1e43      	subs	r3, r0, #1
 800c394:	42a1      	cmp	r1, r4
 800c396:	d008      	beq.n	800c3aa <memmove+0x28>
 800c398:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c39c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3a0:	e7f8      	b.n	800c394 <memmove+0x12>
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	4402      	add	r2, r0
 800c3a6:	428a      	cmp	r2, r1
 800c3a8:	d100      	bne.n	800c3ac <memmove+0x2a>
 800c3aa:	bd10      	pop	{r4, pc}
 800c3ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3b4:	e7f7      	b.n	800c3a6 <memmove+0x24>
	...

0800c3b8 <_close_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4d05      	ldr	r5, [pc, #20]	@ (800c3d4 <_close_r+0x1c>)
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	f7f7 fa87 	bl	80038d6 <_close>
 800c3c8:	1c43      	adds	r3, r0, #1
 800c3ca:	d102      	bne.n	800c3d2 <_close_r+0x1a>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	b103      	cbz	r3, 800c3d2 <_close_r+0x1a>
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	20002c94 	.word	0x20002c94

0800c3d8 <_lseek_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	4611      	mov	r1, r2
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4d05      	ldr	r5, [pc, #20]	@ (800c3f8 <_lseek_r+0x20>)
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f7f7 fa99 	bl	800391e <_lseek>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_lseek_r+0x1e>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_lseek_r+0x1e>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	20002c94 	.word	0x20002c94

0800c3fc <_read_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	4611      	mov	r1, r2
 800c404:	2200      	movs	r2, #0
 800c406:	4d05      	ldr	r5, [pc, #20]	@ (800c41c <_read_r+0x20>)
 800c408:	602a      	str	r2, [r5, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	f7f7 fa46 	bl	800389c <_read>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	d102      	bne.n	800c41a <_read_r+0x1e>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	b103      	cbz	r3, 800c41a <_read_r+0x1e>
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	20002c94 	.word	0x20002c94

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	2300      	movs	r3, #0
 800c424:	4d05      	ldr	r5, [pc, #20]	@ (800c43c <_sbrk_r+0x1c>)
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f7 fa84 	bl	8003938 <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	20002c94 	.word	0x20002c94

0800c440 <_write_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	2200      	movs	r2, #0
 800c44a:	4d05      	ldr	r5, [pc, #20]	@ (800c460 <_write_r+0x20>)
 800c44c:	602a      	str	r2, [r5, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	f7f7 faae 	bl	80039b0 <_write>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_write_r+0x1e>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_write_r+0x1e>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	20002c94 	.word	0x20002c94

0800c464 <__assert_func>:
 800c464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c466:	4614      	mov	r4, r2
 800c468:	461a      	mov	r2, r3
 800c46a:	4b09      	ldr	r3, [pc, #36]	@ (800c490 <__assert_func+0x2c>)
 800c46c:	4605      	mov	r5, r0
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68d8      	ldr	r0, [r3, #12]
 800c472:	b954      	cbnz	r4, 800c48a <__assert_func+0x26>
 800c474:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <__assert_func+0x30>)
 800c476:	461c      	mov	r4, r3
 800c478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c47c:	9100      	str	r1, [sp, #0]
 800c47e:	462b      	mov	r3, r5
 800c480:	4905      	ldr	r1, [pc, #20]	@ (800c498 <__assert_func+0x34>)
 800c482:	f000 f829 	bl	800c4d8 <fiprintf>
 800c486:	f000 f839 	bl	800c4fc <abort>
 800c48a:	4b04      	ldr	r3, [pc, #16]	@ (800c49c <__assert_func+0x38>)
 800c48c:	e7f4      	b.n	800c478 <__assert_func+0x14>
 800c48e:	bf00      	nop
 800c490:	20000188 	.word	0x20000188
 800c494:	0800e523 	.word	0x0800e523
 800c498:	0800e4f5 	.word	0x0800e4f5
 800c49c:	0800e4e8 	.word	0x0800e4e8

0800c4a0 <_calloc_r>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	fba1 5402 	umull	r5, r4, r1, r2
 800c4a6:	b93c      	cbnz	r4, 800c4b8 <_calloc_r+0x18>
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7ff f86b 	bl	800b584 <_malloc_r>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	b928      	cbnz	r0, 800c4be <_calloc_r+0x1e>
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	220c      	movs	r2, #12
 800c4ba:	6002      	str	r2, [r0, #0]
 800c4bc:	e7f9      	b.n	800c4b2 <_calloc_r+0x12>
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7fd faf5 	bl	8009ab0 <memset>
 800c4c6:	e7f5      	b.n	800c4b4 <_calloc_r+0x14>

0800c4c8 <_malloc_usable_size_r>:
 800c4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4cc:	1f18      	subs	r0, r3, #4
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bfbc      	itt	lt
 800c4d2:	580b      	ldrlt	r3, [r1, r0]
 800c4d4:	18c0      	addlt	r0, r0, r3
 800c4d6:	4770      	bx	lr

0800c4d8 <fiprintf>:
 800c4d8:	b40e      	push	{r1, r2, r3}
 800c4da:	b503      	push	{r0, r1, lr}
 800c4dc:	4601      	mov	r1, r0
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	4805      	ldr	r0, [pc, #20]	@ (800c4f8 <fiprintf+0x20>)
 800c4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e6:	6800      	ldr	r0, [r0, #0]
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	f7fe ff09 	bl	800b300 <_vfiprintf_r>
 800c4ee:	b002      	add	sp, #8
 800c4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f4:	b003      	add	sp, #12
 800c4f6:	4770      	bx	lr
 800c4f8:	20000188 	.word	0x20000188

0800c4fc <abort>:
 800c4fc:	2006      	movs	r0, #6
 800c4fe:	b508      	push	{r3, lr}
 800c500:	f000 f82c 	bl	800c55c <raise>
 800c504:	2001      	movs	r0, #1
 800c506:	f7f7 f9be 	bl	8003886 <_exit>

0800c50a <_raise_r>:
 800c50a:	291f      	cmp	r1, #31
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4605      	mov	r5, r0
 800c510:	460c      	mov	r4, r1
 800c512:	d904      	bls.n	800c51e <_raise_r+0x14>
 800c514:	2316      	movs	r3, #22
 800c516:	6003      	str	r3, [r0, #0]
 800c518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c51c:	bd38      	pop	{r3, r4, r5, pc}
 800c51e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c520:	b112      	cbz	r2, 800c528 <_raise_r+0x1e>
 800c522:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c526:	b94b      	cbnz	r3, 800c53c <_raise_r+0x32>
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 f831 	bl	800c590 <_getpid_r>
 800c52e:	4622      	mov	r2, r4
 800c530:	4601      	mov	r1, r0
 800c532:	4628      	mov	r0, r5
 800c534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c538:	f000 b818 	b.w	800c56c <_kill_r>
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d00a      	beq.n	800c556 <_raise_r+0x4c>
 800c540:	1c59      	adds	r1, r3, #1
 800c542:	d103      	bne.n	800c54c <_raise_r+0x42>
 800c544:	2316      	movs	r3, #22
 800c546:	6003      	str	r3, [r0, #0]
 800c548:	2001      	movs	r0, #1
 800c54a:	e7e7      	b.n	800c51c <_raise_r+0x12>
 800c54c:	2100      	movs	r1, #0
 800c54e:	4620      	mov	r0, r4
 800c550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c554:	4798      	blx	r3
 800c556:	2000      	movs	r0, #0
 800c558:	e7e0      	b.n	800c51c <_raise_r+0x12>
	...

0800c55c <raise>:
 800c55c:	4b02      	ldr	r3, [pc, #8]	@ (800c568 <raise+0xc>)
 800c55e:	4601      	mov	r1, r0
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f7ff bfd2 	b.w	800c50a <_raise_r>
 800c566:	bf00      	nop
 800c568:	20000188 	.word	0x20000188

0800c56c <_kill_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	2300      	movs	r3, #0
 800c570:	4d06      	ldr	r5, [pc, #24]	@ (800c58c <_kill_r+0x20>)
 800c572:	4604      	mov	r4, r0
 800c574:	4608      	mov	r0, r1
 800c576:	4611      	mov	r1, r2
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	f7f7 f974 	bl	8003866 <_kill>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	d102      	bne.n	800c588 <_kill_r+0x1c>
 800c582:	682b      	ldr	r3, [r5, #0]
 800c584:	b103      	cbz	r3, 800c588 <_kill_r+0x1c>
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	bd38      	pop	{r3, r4, r5, pc}
 800c58a:	bf00      	nop
 800c58c:	20002c94 	.word	0x20002c94

0800c590 <_getpid_r>:
 800c590:	f7f7 b962 	b.w	8003858 <_getpid>

0800c594 <pow>:
 800c594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c598:	4614      	mov	r4, r2
 800c59a:	461d      	mov	r5, r3
 800c59c:	4680      	mov	r8, r0
 800c59e:	4689      	mov	r9, r1
 800c5a0:	f000 faa6 	bl	800caf0 <__ieee754_pow>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f4 fa2c 	bl	8000a0c <__aeabi_dcmpun>
 800c5b4:	bbc8      	cbnz	r0, 800c62a <pow+0x96>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4649      	mov	r1, r9
 800c5be:	f7f4 f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 800c5c2:	b1b8      	cbz	r0, 800c5f4 <pow+0x60>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f4 f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d141      	bne.n	800c658 <pow+0xc4>
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f000 f868 	bl	800c6ac <finite>
 800c5dc:	b328      	cbz	r0, 800c62a <pow+0x96>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7f4 f9e9 	bl	80009bc <__aeabi_dcmplt>
 800c5ea:	b1f0      	cbz	r0, 800c62a <pow+0x96>
 800c5ec:	f7fd fae4 	bl	8009bb8 <__errno>
 800c5f0:	2322      	movs	r3, #34	@ 0x22
 800c5f2:	e019      	b.n	800c628 <pow+0x94>
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f000 f858 	bl	800c6ac <finite>
 800c5fc:	b9c8      	cbnz	r0, 800c632 <pow+0x9e>
 800c5fe:	4640      	mov	r0, r8
 800c600:	4649      	mov	r1, r9
 800c602:	f000 f853 	bl	800c6ac <finite>
 800c606:	b1a0      	cbz	r0, 800c632 <pow+0x9e>
 800c608:	4620      	mov	r0, r4
 800c60a:	4629      	mov	r1, r5
 800c60c:	f000 f84e 	bl	800c6ac <finite>
 800c610:	b178      	cbz	r0, 800c632 <pow+0x9e>
 800c612:	4632      	mov	r2, r6
 800c614:	463b      	mov	r3, r7
 800c616:	4630      	mov	r0, r6
 800c618:	4639      	mov	r1, r7
 800c61a:	f7f4 f9f7 	bl	8000a0c <__aeabi_dcmpun>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d0e4      	beq.n	800c5ec <pow+0x58>
 800c622:	f7fd fac9 	bl	8009bb8 <__errno>
 800c626:	2321      	movs	r3, #33	@ 0x21
 800c628:	6003      	str	r3, [r0, #0]
 800c62a:	4630      	mov	r0, r6
 800c62c:	4639      	mov	r1, r7
 800c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c632:	2200      	movs	r2, #0
 800c634:	2300      	movs	r3, #0
 800c636:	4630      	mov	r0, r6
 800c638:	4639      	mov	r1, r7
 800c63a:	f7f4 f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d0f3      	beq.n	800c62a <pow+0x96>
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f000 f831 	bl	800c6ac <finite>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0ed      	beq.n	800c62a <pow+0x96>
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f000 f82b 	bl	800c6ac <finite>
 800c656:	e7c8      	b.n	800c5ea <pow+0x56>
 800c658:	2600      	movs	r6, #0
 800c65a:	4f01      	ldr	r7, [pc, #4]	@ (800c660 <pow+0xcc>)
 800c65c:	e7e5      	b.n	800c62a <pow+0x96>
 800c65e:	bf00      	nop
 800c660:	3ff00000 	.word	0x3ff00000

0800c664 <sqrt>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	4606      	mov	r6, r0
 800c668:	460f      	mov	r7, r1
 800c66a:	f000 f825 	bl	800c6b8 <__ieee754_sqrt>
 800c66e:	4632      	mov	r2, r6
 800c670:	4604      	mov	r4, r0
 800c672:	460d      	mov	r5, r1
 800c674:	463b      	mov	r3, r7
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f4 f9c7 	bl	8000a0c <__aeabi_dcmpun>
 800c67e:	b990      	cbnz	r0, 800c6a6 <sqrt+0x42>
 800c680:	2200      	movs	r2, #0
 800c682:	2300      	movs	r3, #0
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f4 f998 	bl	80009bc <__aeabi_dcmplt>
 800c68c:	b158      	cbz	r0, 800c6a6 <sqrt+0x42>
 800c68e:	f7fd fa93 	bl	8009bb8 <__errno>
 800c692:	2321      	movs	r3, #33	@ 0x21
 800c694:	2200      	movs	r2, #0
 800c696:	6003      	str	r3, [r0, #0]
 800c698:	2300      	movs	r3, #0
 800c69a:	4610      	mov	r0, r2
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7f4 f845 	bl	800072c <__aeabi_ddiv>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	460d      	mov	r5, r1
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6ac <finite>:
 800c6ac:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800c6b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c6b4:	0fc0      	lsrs	r0, r0, #31
 800c6b6:	4770      	bx	lr

0800c6b8 <__ieee754_sqrt>:
 800c6b8:	4a67      	ldr	r2, [pc, #412]	@ (800c858 <__ieee754_sqrt+0x1a0>)
 800c6ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6be:	438a      	bics	r2, r1
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	d10e      	bne.n	800c6e8 <__ieee754_sqrt+0x30>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	f7f3 ff04 	bl	80004d8 <__aeabi_dmul>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	f7f3 fd48 	bl	800016c <__adddf3>
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	dc0c      	bgt.n	800c706 <__ieee754_sqrt+0x4e>
 800c6ec:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c6f0:	4302      	orrs	r2, r0
 800c6f2:	d0f5      	beq.n	800c6e0 <__ieee754_sqrt+0x28>
 800c6f4:	b189      	cbz	r1, 800c71a <__ieee754_sqrt+0x62>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	f7f3 fd36 	bl	8000168 <__aeabi_dsub>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	f7f4 f814 	bl	800072c <__aeabi_ddiv>
 800c704:	e7ea      	b.n	800c6dc <__ieee754_sqrt+0x24>
 800c706:	150a      	asrs	r2, r1, #20
 800c708:	d115      	bne.n	800c736 <__ieee754_sqrt+0x7e>
 800c70a:	2100      	movs	r1, #0
 800c70c:	e009      	b.n	800c722 <__ieee754_sqrt+0x6a>
 800c70e:	0ae3      	lsrs	r3, r4, #11
 800c710:	3a15      	subs	r2, #21
 800c712:	0564      	lsls	r4, r4, #21
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0fa      	beq.n	800c70e <__ieee754_sqrt+0x56>
 800c718:	e7f7      	b.n	800c70a <__ieee754_sqrt+0x52>
 800c71a:	460a      	mov	r2, r1
 800c71c:	e7fa      	b.n	800c714 <__ieee754_sqrt+0x5c>
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	3101      	adds	r1, #1
 800c722:	02d8      	lsls	r0, r3, #11
 800c724:	d5fb      	bpl.n	800c71e <__ieee754_sqrt+0x66>
 800c726:	1e48      	subs	r0, r1, #1
 800c728:	1a12      	subs	r2, r2, r0
 800c72a:	f1c1 0020 	rsb	r0, r1, #32
 800c72e:	fa24 f000 	lsr.w	r0, r4, r0
 800c732:	4303      	orrs	r3, r0
 800c734:	408c      	lsls	r4, r1
 800c736:	2600      	movs	r6, #0
 800c738:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c73c:	2116      	movs	r1, #22
 800c73e:	07d2      	lsls	r2, r2, #31
 800c740:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c744:	4632      	mov	r2, r6
 800c746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c74a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c74e:	bf5c      	itt	pl
 800c750:	005b      	lslpl	r3, r3, #1
 800c752:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c756:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c75a:	bf58      	it	pl
 800c75c:	0064      	lslpl	r4, r4, #1
 800c75e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c762:	107f      	asrs	r7, r7, #1
 800c764:	0064      	lsls	r4, r4, #1
 800c766:	1815      	adds	r5, r2, r0
 800c768:	429d      	cmp	r5, r3
 800c76a:	bfde      	ittt	le
 800c76c:	182a      	addle	r2, r5, r0
 800c76e:	1b5b      	suble	r3, r3, r5
 800c770:	1836      	addle	r6, r6, r0
 800c772:	0fe5      	lsrs	r5, r4, #31
 800c774:	3901      	subs	r1, #1
 800c776:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c77a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c77e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c782:	d1f0      	bne.n	800c766 <__ieee754_sqrt+0xae>
 800c784:	460d      	mov	r5, r1
 800c786:	f04f 0a20 	mov.w	sl, #32
 800c78a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c78e:	429a      	cmp	r2, r3
 800c790:	eb01 0c00 	add.w	ip, r1, r0
 800c794:	db02      	blt.n	800c79c <__ieee754_sqrt+0xe4>
 800c796:	d113      	bne.n	800c7c0 <__ieee754_sqrt+0x108>
 800c798:	45a4      	cmp	ip, r4
 800c79a:	d811      	bhi.n	800c7c0 <__ieee754_sqrt+0x108>
 800c79c:	f1bc 0f00 	cmp.w	ip, #0
 800c7a0:	eb0c 0100 	add.w	r1, ip, r0
 800c7a4:	da42      	bge.n	800c82c <__ieee754_sqrt+0x174>
 800c7a6:	2900      	cmp	r1, #0
 800c7a8:	db40      	blt.n	800c82c <__ieee754_sqrt+0x174>
 800c7aa:	f102 0e01 	add.w	lr, r2, #1
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	4672      	mov	r2, lr
 800c7b2:	45a4      	cmp	ip, r4
 800c7b4:	bf88      	it	hi
 800c7b6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800c7ba:	eba4 040c 	sub.w	r4, r4, ip
 800c7be:	4405      	add	r5, r0
 800c7c0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c7c4:	f1ba 0a01 	subs.w	sl, sl, #1
 800c7c8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c7cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c7d0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c7d4:	d1db      	bne.n	800c78e <__ieee754_sqrt+0xd6>
 800c7d6:	431c      	orrs	r4, r3
 800c7d8:	d01a      	beq.n	800c810 <__ieee754_sqrt+0x158>
 800c7da:	4c20      	ldr	r4, [pc, #128]	@ (800c85c <__ieee754_sqrt+0x1a4>)
 800c7dc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c860 <__ieee754_sqrt+0x1a8>
 800c7e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7e8:	f7f3 fcbe 	bl	8000168 <__aeabi_dsub>
 800c7ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f4 f8ea 	bl	80009d0 <__aeabi_dcmple>
 800c7fc:	b140      	cbz	r0, 800c810 <__ieee754_sqrt+0x158>
 800c7fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c802:	e9db 2300 	ldrd	r2, r3, [fp]
 800c806:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800c80a:	d111      	bne.n	800c830 <__ieee754_sqrt+0x178>
 800c80c:	4655      	mov	r5, sl
 800c80e:	3601      	adds	r6, #1
 800c810:	1072      	asrs	r2, r6, #1
 800c812:	086b      	lsrs	r3, r5, #1
 800c814:	07f1      	lsls	r1, r6, #31
 800c816:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c81a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c81e:	bf48      	it	mi
 800c820:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c824:	4618      	mov	r0, r3
 800c826:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c82a:	e757      	b.n	800c6dc <__ieee754_sqrt+0x24>
 800c82c:	4696      	mov	lr, r2
 800c82e:	e7be      	b.n	800c7ae <__ieee754_sqrt+0xf6>
 800c830:	f7f3 fc9c 	bl	800016c <__adddf3>
 800c834:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4640      	mov	r0, r8
 800c83e:	4649      	mov	r1, r9
 800c840:	f7f4 f8bc 	bl	80009bc <__aeabi_dcmplt>
 800c844:	b120      	cbz	r0, 800c850 <__ieee754_sqrt+0x198>
 800c846:	1ca8      	adds	r0, r5, #2
 800c848:	bf08      	it	eq
 800c84a:	3601      	addeq	r6, #1
 800c84c:	3502      	adds	r5, #2
 800c84e:	e7df      	b.n	800c810 <__ieee754_sqrt+0x158>
 800c850:	1c6b      	adds	r3, r5, #1
 800c852:	f023 0501 	bic.w	r5, r3, #1
 800c856:	e7db      	b.n	800c810 <__ieee754_sqrt+0x158>
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	200001e0 	.word	0x200001e0
 800c860:	200001d8 	.word	0x200001d8
 800c864:	00000000 	.word	0x00000000

0800c868 <ceil>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c870:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800c874:	2e13      	cmp	r6, #19
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	460c      	mov	r4, r1
 800c87c:	4605      	mov	r5, r0
 800c87e:	4680      	mov	r8, r0
 800c880:	dc2f      	bgt.n	800c8e2 <ceil+0x7a>
 800c882:	2e00      	cmp	r6, #0
 800c884:	da11      	bge.n	800c8aa <ceil+0x42>
 800c886:	a332      	add	r3, pc, #200	@ (adr r3, 800c950 <ceil+0xe8>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fc6e 	bl	800016c <__adddf3>
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	f7f4 f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 800c898:	b120      	cbz	r0, 800c8a4 <ceil+0x3c>
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	db51      	blt.n	800c942 <ceil+0xda>
 800c89e:	4325      	orrs	r5, r4
 800c8a0:	d153      	bne.n	800c94a <ceil+0xe2>
 800c8a2:	462c      	mov	r4, r5
 800c8a4:	4623      	mov	r3, r4
 800c8a6:	462a      	mov	r2, r5
 800c8a8:	e024      	b.n	800c8f4 <ceil+0x8c>
 800c8aa:	4f2b      	ldr	r7, [pc, #172]	@ (800c958 <ceil+0xf0>)
 800c8ac:	4137      	asrs	r7, r6
 800c8ae:	ea01 0c07 	and.w	ip, r1, r7
 800c8b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c8b6:	d01d      	beq.n	800c8f4 <ceil+0x8c>
 800c8b8:	a325      	add	r3, pc, #148	@ (adr r3, 800c950 <ceil+0xe8>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 fc55 	bl	800016c <__adddf3>
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f7f4 f897 	bl	80009f8 <__aeabi_dcmpgt>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d0ea      	beq.n	800c8a4 <ceil+0x3c>
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	bfc2      	ittt	gt
 800c8d2:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800c8d6:	4133      	asrgt	r3, r6
 800c8d8:	18e4      	addgt	r4, r4, r3
 800c8da:	2500      	movs	r5, #0
 800c8dc:	ea24 0407 	bic.w	r4, r4, r7
 800c8e0:	e7e0      	b.n	800c8a4 <ceil+0x3c>
 800c8e2:	2e33      	cmp	r6, #51	@ 0x33
 800c8e4:	dd0a      	ble.n	800c8fc <ceil+0x94>
 800c8e6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c8ea:	d103      	bne.n	800c8f4 <ceil+0x8c>
 800c8ec:	f7f3 fc3e 	bl	800016c <__adddf3>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c900:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800c904:	fa2c f707 	lsr.w	r7, ip, r7
 800c908:	4238      	tst	r0, r7
 800c90a:	d0f3      	beq.n	800c8f4 <ceil+0x8c>
 800c90c:	a310      	add	r3, pc, #64	@ (adr r3, 800c950 <ceil+0xe8>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f7f3 fc2b 	bl	800016c <__adddf3>
 800c916:	2200      	movs	r2, #0
 800c918:	2300      	movs	r3, #0
 800c91a:	f7f4 f86d 	bl	80009f8 <__aeabi_dcmpgt>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d0c0      	beq.n	800c8a4 <ceil+0x3c>
 800c922:	2c00      	cmp	r4, #0
 800c924:	dd0a      	ble.n	800c93c <ceil+0xd4>
 800c926:	2e14      	cmp	r6, #20
 800c928:	d101      	bne.n	800c92e <ceil+0xc6>
 800c92a:	3401      	adds	r4, #1
 800c92c:	e006      	b.n	800c93c <ceil+0xd4>
 800c92e:	2301      	movs	r3, #1
 800c930:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c934:	40b3      	lsls	r3, r6
 800c936:	441d      	add	r5, r3
 800c938:	45a8      	cmp	r8, r5
 800c93a:	d8f6      	bhi.n	800c92a <ceil+0xc2>
 800c93c:	ea25 0507 	bic.w	r5, r5, r7
 800c940:	e7b0      	b.n	800c8a4 <ceil+0x3c>
 800c942:	2500      	movs	r5, #0
 800c944:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800c948:	e7ac      	b.n	800c8a4 <ceil+0x3c>
 800c94a:	2500      	movs	r5, #0
 800c94c:	4c03      	ldr	r4, [pc, #12]	@ (800c95c <ceil+0xf4>)
 800c94e:	e7a9      	b.n	800c8a4 <ceil+0x3c>
 800c950:	8800759c 	.word	0x8800759c
 800c954:	7e37e43c 	.word	0x7e37e43c
 800c958:	000fffff 	.word	0x000fffff
 800c95c:	3ff00000 	.word	0x3ff00000

0800c960 <floor>:
 800c960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c964:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c968:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800c96c:	2e13      	cmp	r6, #19
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	460c      	mov	r4, r1
 800c974:	4605      	mov	r5, r0
 800c976:	4680      	mov	r8, r0
 800c978:	dc35      	bgt.n	800c9e6 <floor+0x86>
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	da17      	bge.n	800c9ae <floor+0x4e>
 800c97e:	a334      	add	r3, pc, #208	@ (adr r3, 800ca50 <floor+0xf0>)
 800c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c984:	f7f3 fbf2 	bl	800016c <__adddf3>
 800c988:	2200      	movs	r2, #0
 800c98a:	2300      	movs	r3, #0
 800c98c:	f7f4 f834 	bl	80009f8 <__aeabi_dcmpgt>
 800c990:	b150      	cbz	r0, 800c9a8 <floor+0x48>
 800c992:	2c00      	cmp	r4, #0
 800c994:	da57      	bge.n	800ca46 <floor+0xe6>
 800c996:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c99a:	432c      	orrs	r4, r5
 800c99c:	2500      	movs	r5, #0
 800c99e:	42ac      	cmp	r4, r5
 800c9a0:	4c2d      	ldr	r4, [pc, #180]	@ (800ca58 <floor+0xf8>)
 800c9a2:	bf08      	it	eq
 800c9a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c9a8:	4623      	mov	r3, r4
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	e024      	b.n	800c9f8 <floor+0x98>
 800c9ae:	4f2b      	ldr	r7, [pc, #172]	@ (800ca5c <floor+0xfc>)
 800c9b0:	4137      	asrs	r7, r6
 800c9b2:	ea01 0c07 	and.w	ip, r1, r7
 800c9b6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c9ba:	d01d      	beq.n	800c9f8 <floor+0x98>
 800c9bc:	a324      	add	r3, pc, #144	@ (adr r3, 800ca50 <floor+0xf0>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fbd3 	bl	800016c <__adddf3>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f7f4 f815 	bl	80009f8 <__aeabi_dcmpgt>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d0ea      	beq.n	800c9a8 <floor+0x48>
 800c9d2:	2c00      	cmp	r4, #0
 800c9d4:	bfbe      	ittt	lt
 800c9d6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c9da:	4133      	asrlt	r3, r6
 800c9dc:	18e4      	addlt	r4, r4, r3
 800c9de:	2500      	movs	r5, #0
 800c9e0:	ea24 0407 	bic.w	r4, r4, r7
 800c9e4:	e7e0      	b.n	800c9a8 <floor+0x48>
 800c9e6:	2e33      	cmp	r6, #51	@ 0x33
 800c9e8:	dd0a      	ble.n	800ca00 <floor+0xa0>
 800c9ea:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c9ee:	d103      	bne.n	800c9f8 <floor+0x98>
 800c9f0:	f7f3 fbbc 	bl	800016c <__adddf3>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca00:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ca04:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800ca08:	fa2c f707 	lsr.w	r7, ip, r7
 800ca0c:	4207      	tst	r7, r0
 800ca0e:	d0f3      	beq.n	800c9f8 <floor+0x98>
 800ca10:	a30f      	add	r3, pc, #60	@ (adr r3, 800ca50 <floor+0xf0>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f7f3 fba9 	bl	800016c <__adddf3>
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f7f3 ffeb 	bl	80009f8 <__aeabi_dcmpgt>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d0c0      	beq.n	800c9a8 <floor+0x48>
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	da0a      	bge.n	800ca40 <floor+0xe0>
 800ca2a:	2e14      	cmp	r6, #20
 800ca2c:	d101      	bne.n	800ca32 <floor+0xd2>
 800ca2e:	3401      	adds	r4, #1
 800ca30:	e006      	b.n	800ca40 <floor+0xe0>
 800ca32:	2301      	movs	r3, #1
 800ca34:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ca38:	40b3      	lsls	r3, r6
 800ca3a:	441d      	add	r5, r3
 800ca3c:	4545      	cmp	r5, r8
 800ca3e:	d3f6      	bcc.n	800ca2e <floor+0xce>
 800ca40:	ea25 0507 	bic.w	r5, r5, r7
 800ca44:	e7b0      	b.n	800c9a8 <floor+0x48>
 800ca46:	2500      	movs	r5, #0
 800ca48:	462c      	mov	r4, r5
 800ca4a:	e7ad      	b.n	800c9a8 <floor+0x48>
 800ca4c:	f3af 8000 	nop.w
 800ca50:	8800759c 	.word	0x8800759c
 800ca54:	7e37e43c 	.word	0x7e37e43c
 800ca58:	bff00000 	.word	0xbff00000
 800ca5c:	000fffff 	.word	0x000fffff

0800ca60 <round>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ca66:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800ca6a:	2a13      	cmp	r2, #19
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	460b      	mov	r3, r1
 800ca72:	dc1a      	bgt.n	800caaa <round+0x4a>
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	da0b      	bge.n	800ca90 <round+0x30>
 800ca78:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ca7c:	3201      	adds	r2, #1
 800ca7e:	bf04      	itt	eq
 800ca80:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca84:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ca88:	2200      	movs	r2, #0
 800ca8a:	461d      	mov	r5, r3
 800ca8c:	4614      	mov	r4, r2
 800ca8e:	e016      	b.n	800cabe <round+0x5e>
 800ca90:	4815      	ldr	r0, [pc, #84]	@ (800cae8 <round+0x88>)
 800ca92:	4110      	asrs	r0, r2
 800ca94:	4001      	ands	r1, r0
 800ca96:	4321      	orrs	r1, r4
 800ca98:	d011      	beq.n	800cabe <round+0x5e>
 800ca9a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ca9e:	fa41 f202 	asr.w	r2, r1, r2
 800caa2:	4413      	add	r3, r2
 800caa4:	ea23 0300 	bic.w	r3, r3, r0
 800caa8:	e7ee      	b.n	800ca88 <round+0x28>
 800caaa:	2a33      	cmp	r2, #51	@ 0x33
 800caac:	dd0a      	ble.n	800cac4 <round+0x64>
 800caae:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800cab2:	d104      	bne.n	800cabe <round+0x5e>
 800cab4:	4602      	mov	r2, r0
 800cab6:	f7f3 fb59 	bl	800016c <__adddf3>
 800caba:	4604      	mov	r4, r0
 800cabc:	460d      	mov	r5, r1
 800cabe:	4620      	mov	r0, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cac8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800cacc:	40f8      	lsrs	r0, r7
 800cace:	4220      	tst	r0, r4
 800cad0:	d0f5      	beq.n	800cabe <round+0x5e>
 800cad2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800cad6:	2201      	movs	r2, #1
 800cad8:	408a      	lsls	r2, r1
 800cada:	1912      	adds	r2, r2, r4
 800cadc:	bf28      	it	cs
 800cade:	3301      	addcs	r3, #1
 800cae0:	ea22 0200 	bic.w	r2, r2, r0
 800cae4:	e7d1      	b.n	800ca8a <round+0x2a>
 800cae6:	bf00      	nop
 800cae8:	000fffff 	.word	0x000fffff
 800caec:	00000000 	.word	0x00000000

0800caf0 <__ieee754_pow>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b091      	sub	sp, #68	@ 0x44
 800caf6:	e9cd 2300 	strd	r2, r3, [sp]
 800cafa:	468b      	mov	fp, r1
 800cafc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800cb00:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800cb04:	4682      	mov	sl, r0
 800cb06:	ea57 0001 	orrs.w	r0, r7, r1
 800cb0a:	d112      	bne.n	800cb32 <__ieee754_pow+0x42>
 800cb0c:	4653      	mov	r3, sl
 800cb0e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800cb12:	18db      	adds	r3, r3, r3
 800cb14:	4152      	adcs	r2, r2
 800cb16:	4298      	cmp	r0, r3
 800cb18:	4b91      	ldr	r3, [pc, #580]	@ (800cd60 <__ieee754_pow+0x270>)
 800cb1a:	4193      	sbcs	r3, r2
 800cb1c:	f080 84ce 	bcs.w	800d4bc <__ieee754_pow+0x9cc>
 800cb20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb24:	4650      	mov	r0, sl
 800cb26:	4659      	mov	r1, fp
 800cb28:	f7f3 fb20 	bl	800016c <__adddf3>
 800cb2c:	b011      	add	sp, #68	@ 0x44
 800cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb32:	4b8c      	ldr	r3, [pc, #560]	@ (800cd64 <__ieee754_pow+0x274>)
 800cb34:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800cb38:	429e      	cmp	r6, r3
 800cb3a:	465d      	mov	r5, fp
 800cb3c:	46d1      	mov	r9, sl
 800cb3e:	d807      	bhi.n	800cb50 <__ieee754_pow+0x60>
 800cb40:	d102      	bne.n	800cb48 <__ieee754_pow+0x58>
 800cb42:	f1ba 0f00 	cmp.w	sl, #0
 800cb46:	d1eb      	bne.n	800cb20 <__ieee754_pow+0x30>
 800cb48:	429f      	cmp	r7, r3
 800cb4a:	d801      	bhi.n	800cb50 <__ieee754_pow+0x60>
 800cb4c:	d10f      	bne.n	800cb6e <__ieee754_pow+0x7e>
 800cb4e:	b171      	cbz	r1, 800cb6e <__ieee754_pow+0x7e>
 800cb50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cb54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cb58:	ea55 0509 	orrs.w	r5, r5, r9
 800cb5c:	d1e0      	bne.n	800cb20 <__ieee754_pow+0x30>
 800cb5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb62:	18db      	adds	r3, r3, r3
 800cb64:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cb68:	4152      	adcs	r2, r2
 800cb6a:	429d      	cmp	r5, r3
 800cb6c:	e7d4      	b.n	800cb18 <__ieee754_pow+0x28>
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	4633      	mov	r3, r6
 800cb72:	da39      	bge.n	800cbe8 <__ieee754_pow+0xf8>
 800cb74:	4a7c      	ldr	r2, [pc, #496]	@ (800cd68 <__ieee754_pow+0x278>)
 800cb76:	4297      	cmp	r7, r2
 800cb78:	d84e      	bhi.n	800cc18 <__ieee754_pow+0x128>
 800cb7a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cb7e:	4297      	cmp	r7, r2
 800cb80:	f240 84ab 	bls.w	800d4da <__ieee754_pow+0x9ea>
 800cb84:	153a      	asrs	r2, r7, #20
 800cb86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cb8a:	2a14      	cmp	r2, #20
 800cb8c:	dd0f      	ble.n	800cbae <__ieee754_pow+0xbe>
 800cb8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cb92:	fa21 f402 	lsr.w	r4, r1, r2
 800cb96:	fa04 f202 	lsl.w	r2, r4, r2
 800cb9a:	428a      	cmp	r2, r1
 800cb9c:	f040 849d 	bne.w	800d4da <__ieee754_pow+0x9ea>
 800cba0:	f004 0401 	and.w	r4, r4, #1
 800cba4:	f1c4 0402 	rsb	r4, r4, #2
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d15a      	bne.n	800cc62 <__ieee754_pow+0x172>
 800cbac:	e00e      	b.n	800cbcc <__ieee754_pow+0xdc>
 800cbae:	2900      	cmp	r1, #0
 800cbb0:	d156      	bne.n	800cc60 <__ieee754_pow+0x170>
 800cbb2:	f1c2 0214 	rsb	r2, r2, #20
 800cbb6:	fa47 f402 	asr.w	r4, r7, r2
 800cbba:	fa04 f202 	lsl.w	r2, r4, r2
 800cbbe:	42ba      	cmp	r2, r7
 800cbc0:	f040 8488 	bne.w	800d4d4 <__ieee754_pow+0x9e4>
 800cbc4:	f004 0401 	and.w	r4, r4, #1
 800cbc8:	f1c4 0402 	rsb	r4, r4, #2
 800cbcc:	4a67      	ldr	r2, [pc, #412]	@ (800cd6c <__ieee754_pow+0x27c>)
 800cbce:	4297      	cmp	r7, r2
 800cbd0:	d130      	bne.n	800cc34 <__ieee754_pow+0x144>
 800cbd2:	f1b8 0f00 	cmp.w	r8, #0
 800cbd6:	f280 8479 	bge.w	800d4cc <__ieee754_pow+0x9dc>
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	2000      	movs	r0, #0
 800cbe0:	4962      	ldr	r1, [pc, #392]	@ (800cd6c <__ieee754_pow+0x27c>)
 800cbe2:	f7f3 fda3 	bl	800072c <__aeabi_ddiv>
 800cbe6:	e7a1      	b.n	800cb2c <__ieee754_pow+0x3c>
 800cbe8:	2400      	movs	r4, #0
 800cbea:	2900      	cmp	r1, #0
 800cbec:	d139      	bne.n	800cc62 <__ieee754_pow+0x172>
 800cbee:	4a5d      	ldr	r2, [pc, #372]	@ (800cd64 <__ieee754_pow+0x274>)
 800cbf0:	4297      	cmp	r7, r2
 800cbf2:	d1eb      	bne.n	800cbcc <__ieee754_pow+0xdc>
 800cbf4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800cbf8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cbfc:	ea53 0309 	orrs.w	r3, r3, r9
 800cc00:	f000 845c 	beq.w	800d4bc <__ieee754_pow+0x9cc>
 800cc04:	4b5a      	ldr	r3, [pc, #360]	@ (800cd70 <__ieee754_pow+0x280>)
 800cc06:	429e      	cmp	r6, r3
 800cc08:	d908      	bls.n	800cc1c <__ieee754_pow+0x12c>
 800cc0a:	f1b8 0f00 	cmp.w	r8, #0
 800cc0e:	f2c0 8459 	blt.w	800d4c4 <__ieee754_pow+0x9d4>
 800cc12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc16:	e789      	b.n	800cb2c <__ieee754_pow+0x3c>
 800cc18:	2402      	movs	r4, #2
 800cc1a:	e7e6      	b.n	800cbea <__ieee754_pow+0xfa>
 800cc1c:	f1b8 0f00 	cmp.w	r8, #0
 800cc20:	f04f 0000 	mov.w	r0, #0
 800cc24:	f04f 0100 	mov.w	r1, #0
 800cc28:	da80      	bge.n	800cb2c <__ieee754_pow+0x3c>
 800cc2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cc2e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc32:	e77b      	b.n	800cb2c <__ieee754_pow+0x3c>
 800cc34:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800cc38:	d106      	bne.n	800cc48 <__ieee754_pow+0x158>
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	4650      	mov	r0, sl
 800cc40:	4659      	mov	r1, fp
 800cc42:	f7f3 fc49 	bl	80004d8 <__aeabi_dmul>
 800cc46:	e771      	b.n	800cb2c <__ieee754_pow+0x3c>
 800cc48:	4a4a      	ldr	r2, [pc, #296]	@ (800cd74 <__ieee754_pow+0x284>)
 800cc4a:	4590      	cmp	r8, r2
 800cc4c:	d109      	bne.n	800cc62 <__ieee754_pow+0x172>
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	db07      	blt.n	800cc62 <__ieee754_pow+0x172>
 800cc52:	4650      	mov	r0, sl
 800cc54:	4659      	mov	r1, fp
 800cc56:	b011      	add	sp, #68	@ 0x44
 800cc58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	f7ff bd2c 	b.w	800c6b8 <__ieee754_sqrt>
 800cc60:	2400      	movs	r4, #0
 800cc62:	4650      	mov	r0, sl
 800cc64:	4659      	mov	r1, fp
 800cc66:	9302      	str	r3, [sp, #8]
 800cc68:	f000 fc91 	bl	800d58e <fabs>
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	f1b9 0f00 	cmp.w	r9, #0
 800cc72:	d127      	bne.n	800ccc4 <__ieee754_pow+0x1d4>
 800cc74:	4a3d      	ldr	r2, [pc, #244]	@ (800cd6c <__ieee754_pow+0x27c>)
 800cc76:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800cc7a:	4594      	cmp	ip, r2
 800cc7c:	d000      	beq.n	800cc80 <__ieee754_pow+0x190>
 800cc7e:	bb0e      	cbnz	r6, 800ccc4 <__ieee754_pow+0x1d4>
 800cc80:	f1b8 0f00 	cmp.w	r8, #0
 800cc84:	da05      	bge.n	800cc92 <__ieee754_pow+0x1a2>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	4937      	ldr	r1, [pc, #220]	@ (800cd6c <__ieee754_pow+0x27c>)
 800cc8e:	f7f3 fd4d 	bl	800072c <__aeabi_ddiv>
 800cc92:	2d00      	cmp	r5, #0
 800cc94:	f6bf af4a 	bge.w	800cb2c <__ieee754_pow+0x3c>
 800cc98:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800cc9c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800cca0:	4326      	orrs	r6, r4
 800cca2:	d108      	bne.n	800ccb6 <__ieee754_pow+0x1c6>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4610      	mov	r0, r2
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f7f3 fa5c 	bl	8000168 <__aeabi_dsub>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	e795      	b.n	800cbe2 <__ieee754_pow+0xf2>
 800ccb6:	2c01      	cmp	r4, #1
 800ccb8:	f47f af38 	bne.w	800cb2c <__ieee754_pow+0x3c>
 800ccbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	e733      	b.n	800cb2c <__ieee754_pow+0x3c>
 800ccc4:	0fea      	lsrs	r2, r5, #31
 800ccc6:	3a01      	subs	r2, #1
 800ccc8:	ea52 0c04 	orrs.w	ip, r2, r4
 800cccc:	d102      	bne.n	800ccd4 <__ieee754_pow+0x1e4>
 800ccce:	4652      	mov	r2, sl
 800ccd0:	465b      	mov	r3, fp
 800ccd2:	e7e9      	b.n	800cca8 <__ieee754_pow+0x1b8>
 800ccd4:	f04f 0900 	mov.w	r9, #0
 800ccd8:	3c01      	subs	r4, #1
 800ccda:	4314      	orrs	r4, r2
 800ccdc:	bf14      	ite	ne
 800ccde:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800cd6c <__ieee754_pow+0x27c>
 800cce2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800cd78 <__ieee754_pow+0x288>
 800cce6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800ccea:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800ccee:	f240 8107 	bls.w	800cf00 <__ieee754_pow+0x410>
 800ccf2:	4b22      	ldr	r3, [pc, #136]	@ (800cd7c <__ieee754_pow+0x28c>)
 800ccf4:	429f      	cmp	r7, r3
 800ccf6:	4b1e      	ldr	r3, [pc, #120]	@ (800cd70 <__ieee754_pow+0x280>)
 800ccf8:	d913      	bls.n	800cd22 <__ieee754_pow+0x232>
 800ccfa:	429e      	cmp	r6, r3
 800ccfc:	d808      	bhi.n	800cd10 <__ieee754_pow+0x220>
 800ccfe:	f1b8 0f00 	cmp.w	r8, #0
 800cd02:	da08      	bge.n	800cd16 <__ieee754_pow+0x226>
 800cd04:	2000      	movs	r0, #0
 800cd06:	b011      	add	sp, #68	@ 0x44
 800cd08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	f000 bc3a 	b.w	800d584 <__math_oflow>
 800cd10:	f1b8 0f00 	cmp.w	r8, #0
 800cd14:	dcf6      	bgt.n	800cd04 <__ieee754_pow+0x214>
 800cd16:	2000      	movs	r0, #0
 800cd18:	b011      	add	sp, #68	@ 0x44
 800cd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1e:	f000 bc2c 	b.w	800d57a <__math_uflow>
 800cd22:	429e      	cmp	r6, r3
 800cd24:	d20c      	bcs.n	800cd40 <__ieee754_pow+0x250>
 800cd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f7f3 fe45 	bl	80009bc <__aeabi_dcmplt>
 800cd32:	3800      	subs	r0, #0
 800cd34:	bf18      	it	ne
 800cd36:	2001      	movne	r0, #1
 800cd38:	f1b8 0f00 	cmp.w	r8, #0
 800cd3c:	daec      	bge.n	800cd18 <__ieee754_pow+0x228>
 800cd3e:	e7e2      	b.n	800cd06 <__ieee754_pow+0x216>
 800cd40:	4b0a      	ldr	r3, [pc, #40]	@ (800cd6c <__ieee754_pow+0x27c>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	429e      	cmp	r6, r3
 800cd46:	d91b      	bls.n	800cd80 <__ieee754_pow+0x290>
 800cd48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f7f3 fe35 	bl	80009bc <__aeabi_dcmplt>
 800cd52:	3800      	subs	r0, #0
 800cd54:	bf18      	it	ne
 800cd56:	2001      	movne	r0, #1
 800cd58:	f1b8 0f00 	cmp.w	r8, #0
 800cd5c:	dcd3      	bgt.n	800cd06 <__ieee754_pow+0x216>
 800cd5e:	e7db      	b.n	800cd18 <__ieee754_pow+0x228>
 800cd60:	fff00000 	.word	0xfff00000
 800cd64:	7ff00000 	.word	0x7ff00000
 800cd68:	433fffff 	.word	0x433fffff
 800cd6c:	3ff00000 	.word	0x3ff00000
 800cd70:	3fefffff 	.word	0x3fefffff
 800cd74:	3fe00000 	.word	0x3fe00000
 800cd78:	bff00000 	.word	0xbff00000
 800cd7c:	43f00000 	.word	0x43f00000
 800cd80:	4b5b      	ldr	r3, [pc, #364]	@ (800cef0 <__ieee754_pow+0x400>)
 800cd82:	f7f3 f9f1 	bl	8000168 <__aeabi_dsub>
 800cd86:	a352      	add	r3, pc, #328	@ (adr r3, 800ced0 <__ieee754_pow+0x3e0>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	460d      	mov	r5, r1
 800cd90:	f7f3 fba2 	bl	80004d8 <__aeabi_dmul>
 800cd94:	a350      	add	r3, pc, #320	@ (adr r3, 800ced8 <__ieee754_pow+0x3e8>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fb99 	bl	80004d8 <__aeabi_dmul>
 800cda6:	2200      	movs	r2, #0
 800cda8:	4682      	mov	sl, r0
 800cdaa:	468b      	mov	fp, r1
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4b50      	ldr	r3, [pc, #320]	@ (800cef4 <__ieee754_pow+0x404>)
 800cdb2:	f7f3 fb91 	bl	80004d8 <__aeabi_dmul>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	a149      	add	r1, pc, #292	@ (adr r1, 800cee0 <__ieee754_pow+0x3f0>)
 800cdbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdc0:	f7f3 f9d2 	bl	8000168 <__aeabi_dsub>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	462b      	mov	r3, r5
 800cdc8:	f7f3 fb86 	bl	80004d8 <__aeabi_dmul>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	4949      	ldr	r1, [pc, #292]	@ (800cef8 <__ieee754_pow+0x408>)
 800cdd4:	f7f3 f9c8 	bl	8000168 <__aeabi_dsub>
 800cdd8:	4622      	mov	r2, r4
 800cdda:	4680      	mov	r8, r0
 800cddc:	4689      	mov	r9, r1
 800cdde:	462b      	mov	r3, r5
 800cde0:	4620      	mov	r0, r4
 800cde2:	4629      	mov	r1, r5
 800cde4:	f7f3 fb78 	bl	80004d8 <__aeabi_dmul>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4640      	mov	r0, r8
 800cdee:	4649      	mov	r1, r9
 800cdf0:	f7f3 fb72 	bl	80004d8 <__aeabi_dmul>
 800cdf4:	a33c      	add	r3, pc, #240	@ (adr r3, 800cee8 <__ieee754_pow+0x3f8>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	f7f3 fb6d 	bl	80004d8 <__aeabi_dmul>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4650      	mov	r0, sl
 800ce04:	4659      	mov	r1, fp
 800ce06:	f7f3 f9af 	bl	8000168 <__aeabi_dsub>
 800ce0a:	2400      	movs	r4, #0
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	4680      	mov	r8, r0
 800ce12:	4689      	mov	r9, r1
 800ce14:	4630      	mov	r0, r6
 800ce16:	4639      	mov	r1, r7
 800ce18:	f7f3 f9a8 	bl	800016c <__adddf3>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	463b      	mov	r3, r7
 800ce20:	4620      	mov	r0, r4
 800ce22:	460d      	mov	r5, r1
 800ce24:	f7f3 f9a0 	bl	8000168 <__aeabi_dsub>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	4649      	mov	r1, r9
 800ce30:	f7f3 f99a 	bl	8000168 <__aeabi_dsub>
 800ce34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ce44:	4606      	mov	r6, r0
 800ce46:	460f      	mov	r7, r1
 800ce48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce4c:	4652      	mov	r2, sl
 800ce4e:	465b      	mov	r3, fp
 800ce50:	f7f3 f98a 	bl	8000168 <__aeabi_dsub>
 800ce54:	4622      	mov	r2, r4
 800ce56:	462b      	mov	r3, r5
 800ce58:	f7f3 fb3e 	bl	80004d8 <__aeabi_dmul>
 800ce5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce60:	4680      	mov	r8, r0
 800ce62:	4689      	mov	r9, r1
 800ce64:	4630      	mov	r0, r6
 800ce66:	4639      	mov	r1, r7
 800ce68:	f7f3 fb36 	bl	80004d8 <__aeabi_dmul>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	4640      	mov	r0, r8
 800ce72:	4649      	mov	r1, r9
 800ce74:	f7f3 f97a 	bl	800016c <__adddf3>
 800ce78:	4652      	mov	r2, sl
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fb28 	bl	80004d8 <__aeabi_dmul>
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	4689      	mov	r9, r1
 800ce90:	4630      	mov	r0, r6
 800ce92:	4639      	mov	r1, r7
 800ce94:	f7f3 f96a 	bl	800016c <__adddf3>
 800ce98:	4b18      	ldr	r3, [pc, #96]	@ (800cefc <__ieee754_pow+0x40c>)
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	460d      	mov	r5, r1
 800cea0:	468a      	mov	sl, r1
 800cea2:	468b      	mov	fp, r1
 800cea4:	f340 82e0 	ble.w	800d468 <__ieee754_pow+0x978>
 800cea8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ceac:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ceb0:	4303      	orrs	r3, r0
 800ceb2:	f000 81df 	beq.w	800d274 <__ieee754_pow+0x784>
 800ceb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	2300      	movs	r3, #0
 800cebe:	f7f3 fd7d 	bl	80009bc <__aeabi_dcmplt>
 800cec2:	3800      	subs	r0, #0
 800cec4:	bf18      	it	ne
 800cec6:	2001      	movne	r0, #1
 800cec8:	e71d      	b.n	800cd06 <__ieee754_pow+0x216>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	60000000 	.word	0x60000000
 800ced4:	3ff71547 	.word	0x3ff71547
 800ced8:	f85ddf44 	.word	0xf85ddf44
 800cedc:	3e54ae0b 	.word	0x3e54ae0b
 800cee0:	55555555 	.word	0x55555555
 800cee4:	3fd55555 	.word	0x3fd55555
 800cee8:	652b82fe 	.word	0x652b82fe
 800ceec:	3ff71547 	.word	0x3ff71547
 800cef0:	3ff00000 	.word	0x3ff00000
 800cef4:	3fd00000 	.word	0x3fd00000
 800cef8:	3fe00000 	.word	0x3fe00000
 800cefc:	408fffff 	.word	0x408fffff
 800cf00:	4ad3      	ldr	r2, [pc, #844]	@ (800d250 <__ieee754_pow+0x760>)
 800cf02:	402a      	ands	r2, r5
 800cf04:	2a00      	cmp	r2, #0
 800cf06:	f040 817a 	bne.w	800d1fe <__ieee754_pow+0x70e>
 800cf0a:	4bd2      	ldr	r3, [pc, #840]	@ (800d254 <__ieee754_pow+0x764>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f7f3 fae3 	bl	80004d8 <__aeabi_dmul>
 800cf12:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800cf16:	460b      	mov	r3, r1
 800cf18:	151a      	asrs	r2, r3, #20
 800cf1a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cf1e:	4422      	add	r2, r4
 800cf20:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf22:	4acd      	ldr	r2, [pc, #820]	@ (800d258 <__ieee754_pow+0x768>)
 800cf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf28:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cf32:	dd08      	ble.n	800cf46 <__ieee754_pow+0x456>
 800cf34:	4ac9      	ldr	r2, [pc, #804]	@ (800d25c <__ieee754_pow+0x76c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	f340 8163 	ble.w	800d202 <__ieee754_pow+0x712>
 800cf3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf3e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800cf42:	3301      	adds	r3, #1
 800cf44:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf46:	2600      	movs	r6, #0
 800cf48:	00f3      	lsls	r3, r6, #3
 800cf4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf4c:	4bc4      	ldr	r3, [pc, #784]	@ (800d260 <__ieee754_pow+0x770>)
 800cf4e:	4629      	mov	r1, r5
 800cf50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cf5e:	4623      	mov	r3, r4
 800cf60:	4682      	mov	sl, r0
 800cf62:	f7f3 f901 	bl	8000168 <__aeabi_dsub>
 800cf66:	4652      	mov	r2, sl
 800cf68:	462b      	mov	r3, r5
 800cf6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800cf6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf72:	f7f3 f8fb 	bl	800016c <__adddf3>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	49b9      	ldr	r1, [pc, #740]	@ (800d264 <__ieee754_pow+0x774>)
 800cf7e:	f7f3 fbd5 	bl	800072c <__aeabi_ddiv>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cf8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf8e:	f7f3 faa3 	bl	80004d8 <__aeabi_dmul>
 800cf92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cf9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	46ab      	mov	fp, r5
 800cfa4:	106d      	asrs	r5, r5, #1
 800cfa6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cfb0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cfb4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cfb8:	4640      	mov	r0, r8
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	f7f3 fa8a 	bl	80004d8 <__aeabi_dmul>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfcc:	f7f3 f8cc 	bl	8000168 <__aeabi_dsub>
 800cfd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	4629      	mov	r1, r5
 800cfdc:	f7f3 f8c4 	bl	8000168 <__aeabi_dsub>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	4659      	mov	r1, fp
 800cfe8:	f7f3 f8be 	bl	8000168 <__aeabi_dsub>
 800cfec:	4642      	mov	r2, r8
 800cfee:	464b      	mov	r3, r9
 800cff0:	f7f3 fa72 	bl	80004d8 <__aeabi_dmul>
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	4630      	mov	r0, r6
 800cffa:	4639      	mov	r1, r7
 800cffc:	f7f3 f8b4 	bl	8000168 <__aeabi_dsub>
 800d000:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d004:	f7f3 fa68 	bl	80004d8 <__aeabi_dmul>
 800d008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d00c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d010:	4610      	mov	r0, r2
 800d012:	4619      	mov	r1, r3
 800d014:	f7f3 fa60 	bl	80004d8 <__aeabi_dmul>
 800d018:	a37b      	add	r3, pc, #492	@ (adr r3, 800d208 <__ieee754_pow+0x718>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	4604      	mov	r4, r0
 800d020:	460d      	mov	r5, r1
 800d022:	f7f3 fa59 	bl	80004d8 <__aeabi_dmul>
 800d026:	a37a      	add	r3, pc, #488	@ (adr r3, 800d210 <__ieee754_pow+0x720>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f7f3 f89e 	bl	800016c <__adddf3>
 800d030:	4622      	mov	r2, r4
 800d032:	462b      	mov	r3, r5
 800d034:	f7f3 fa50 	bl	80004d8 <__aeabi_dmul>
 800d038:	a377      	add	r3, pc, #476	@ (adr r3, 800d218 <__ieee754_pow+0x728>)
 800d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03e:	f7f3 f895 	bl	800016c <__adddf3>
 800d042:	4622      	mov	r2, r4
 800d044:	462b      	mov	r3, r5
 800d046:	f7f3 fa47 	bl	80004d8 <__aeabi_dmul>
 800d04a:	a375      	add	r3, pc, #468	@ (adr r3, 800d220 <__ieee754_pow+0x730>)
 800d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d050:	f7f3 f88c 	bl	800016c <__adddf3>
 800d054:	4622      	mov	r2, r4
 800d056:	462b      	mov	r3, r5
 800d058:	f7f3 fa3e 	bl	80004d8 <__aeabi_dmul>
 800d05c:	a372      	add	r3, pc, #456	@ (adr r3, 800d228 <__ieee754_pow+0x738>)
 800d05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d062:	f7f3 f883 	bl	800016c <__adddf3>
 800d066:	4622      	mov	r2, r4
 800d068:	462b      	mov	r3, r5
 800d06a:	f7f3 fa35 	bl	80004d8 <__aeabi_dmul>
 800d06e:	a370      	add	r3, pc, #448	@ (adr r3, 800d230 <__ieee754_pow+0x740>)
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f7f3 f87a 	bl	800016c <__adddf3>
 800d078:	4622      	mov	r2, r4
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	462b      	mov	r3, r5
 800d080:	4620      	mov	r0, r4
 800d082:	4629      	mov	r1, r5
 800d084:	f7f3 fa28 	bl	80004d8 <__aeabi_dmul>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	4630      	mov	r0, r6
 800d08e:	4639      	mov	r1, r7
 800d090:	f7f3 fa22 	bl	80004d8 <__aeabi_dmul>
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d09c:	4642      	mov	r2, r8
 800d09e:	464b      	mov	r3, r9
 800d0a0:	f7f3 f864 	bl	800016c <__adddf3>
 800d0a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0a8:	f7f3 fa16 	bl	80004d8 <__aeabi_dmul>
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 f85c 	bl	800016c <__adddf3>
 800d0b4:	4642      	mov	r2, r8
 800d0b6:	4682      	mov	sl, r0
 800d0b8:	468b      	mov	fp, r1
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	4640      	mov	r0, r8
 800d0be:	4649      	mov	r1, r9
 800d0c0:	f7f3 fa0a 	bl	80004d8 <__aeabi_dmul>
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	4b68      	ldr	r3, [pc, #416]	@ (800d268 <__ieee754_pow+0x778>)
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	460f      	mov	r7, r1
 800d0cc:	f7f3 f84e 	bl	800016c <__adddf3>
 800d0d0:	4652      	mov	r2, sl
 800d0d2:	465b      	mov	r3, fp
 800d0d4:	f7f3 f84a 	bl	800016c <__adddf3>
 800d0d8:	2400      	movs	r4, #0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	4622      	mov	r2, r4
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 f9f8 	bl	80004d8 <__aeabi_dmul>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4b5d      	ldr	r3, [pc, #372]	@ (800d268 <__ieee754_pow+0x778>)
 800d0f4:	f7f3 f838 	bl	8000168 <__aeabi_dsub>
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	f7f3 f834 	bl	8000168 <__aeabi_dsub>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	4650      	mov	r0, sl
 800d106:	4659      	mov	r1, fp
 800d108:	f7f3 f82e 	bl	8000168 <__aeabi_dsub>
 800d10c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d110:	f7f3 f9e2 	bl	80004d8 <__aeabi_dmul>
 800d114:	4622      	mov	r2, r4
 800d116:	4606      	mov	r6, r0
 800d118:	460f      	mov	r7, r1
 800d11a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d11e:	462b      	mov	r3, r5
 800d120:	f7f3 f9da 	bl	80004d8 <__aeabi_dmul>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4630      	mov	r0, r6
 800d12a:	4639      	mov	r1, r7
 800d12c:	f7f3 f81e 	bl	800016c <__adddf3>
 800d130:	2400      	movs	r4, #0
 800d132:	4606      	mov	r6, r0
 800d134:	460f      	mov	r7, r1
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4640      	mov	r0, r8
 800d13c:	4649      	mov	r1, r9
 800d13e:	f7f3 f815 	bl	800016c <__adddf3>
 800d142:	a33d      	add	r3, pc, #244	@ (adr r3, 800d238 <__ieee754_pow+0x748>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	4620      	mov	r0, r4
 800d14a:	460d      	mov	r5, r1
 800d14c:	f7f3 f9c4 	bl	80004d8 <__aeabi_dmul>
 800d150:	4642      	mov	r2, r8
 800d152:	464b      	mov	r3, r9
 800d154:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d158:	4620      	mov	r0, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	f7f3 f804 	bl	8000168 <__aeabi_dsub>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4630      	mov	r0, r6
 800d166:	4639      	mov	r1, r7
 800d168:	f7f2 fffe 	bl	8000168 <__aeabi_dsub>
 800d16c:	a334      	add	r3, pc, #208	@ (adr r3, 800d240 <__ieee754_pow+0x750>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 f9b1 	bl	80004d8 <__aeabi_dmul>
 800d176:	a334      	add	r3, pc, #208	@ (adr r3, 800d248 <__ieee754_pow+0x758>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4606      	mov	r6, r0
 800d17e:	460f      	mov	r7, r1
 800d180:	4620      	mov	r0, r4
 800d182:	4629      	mov	r1, r5
 800d184:	f7f3 f9a8 	bl	80004d8 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f2 ffec 	bl	800016c <__adddf3>
 800d194:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d196:	4b35      	ldr	r3, [pc, #212]	@ (800d26c <__ieee754_pow+0x77c>)
 800d198:	2400      	movs	r4, #0
 800d19a:	4413      	add	r3, r2
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f2 ffe4 	bl	800016c <__adddf3>
 800d1a4:	4682      	mov	sl, r0
 800d1a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1a8:	468b      	mov	fp, r1
 800d1aa:	f7f3 f92b 	bl	8000404 <__aeabi_i2d>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1b4:	4b2e      	ldr	r3, [pc, #184]	@ (800d270 <__ieee754_pow+0x780>)
 800d1b6:	4413      	add	r3, r2
 800d1b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1bc:	4652      	mov	r2, sl
 800d1be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1c2:	465b      	mov	r3, fp
 800d1c4:	f7f2 ffd2 	bl	800016c <__adddf3>
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	464b      	mov	r3, r9
 800d1cc:	f7f2 ffce 	bl	800016c <__adddf3>
 800d1d0:	4632      	mov	r2, r6
 800d1d2:	463b      	mov	r3, r7
 800d1d4:	f7f2 ffca 	bl	800016c <__adddf3>
 800d1d8:	4632      	mov	r2, r6
 800d1da:	463b      	mov	r3, r7
 800d1dc:	4620      	mov	r0, r4
 800d1de:	460d      	mov	r5, r1
 800d1e0:	f7f2 ffc2 	bl	8000168 <__aeabi_dsub>
 800d1e4:	4642      	mov	r2, r8
 800d1e6:	464b      	mov	r3, r9
 800d1e8:	f7f2 ffbe 	bl	8000168 <__aeabi_dsub>
 800d1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1f0:	f7f2 ffba 	bl	8000168 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4650      	mov	r0, sl
 800d1fa:	4659      	mov	r1, fp
 800d1fc:	e618      	b.n	800ce30 <__ieee754_pow+0x340>
 800d1fe:	2400      	movs	r4, #0
 800d200:	e68a      	b.n	800cf18 <__ieee754_pow+0x428>
 800d202:	2601      	movs	r6, #1
 800d204:	e6a0      	b.n	800cf48 <__ieee754_pow+0x458>
 800d206:	bf00      	nop
 800d208:	4a454eef 	.word	0x4a454eef
 800d20c:	3fca7e28 	.word	0x3fca7e28
 800d210:	93c9db65 	.word	0x93c9db65
 800d214:	3fcd864a 	.word	0x3fcd864a
 800d218:	a91d4101 	.word	0xa91d4101
 800d21c:	3fd17460 	.word	0x3fd17460
 800d220:	518f264d 	.word	0x518f264d
 800d224:	3fd55555 	.word	0x3fd55555
 800d228:	db6fabff 	.word	0xdb6fabff
 800d22c:	3fdb6db6 	.word	0x3fdb6db6
 800d230:	33333303 	.word	0x33333303
 800d234:	3fe33333 	.word	0x3fe33333
 800d238:	e0000000 	.word	0xe0000000
 800d23c:	3feec709 	.word	0x3feec709
 800d240:	dc3a03fd 	.word	0xdc3a03fd
 800d244:	3feec709 	.word	0x3feec709
 800d248:	145b01f5 	.word	0x145b01f5
 800d24c:	be3e2fe0 	.word	0xbe3e2fe0
 800d250:	7ff00000 	.word	0x7ff00000
 800d254:	43400000 	.word	0x43400000
 800d258:	0003988e 	.word	0x0003988e
 800d25c:	000bb679 	.word	0x000bb679
 800d260:	0800e548 	.word	0x0800e548
 800d264:	3ff00000 	.word	0x3ff00000
 800d268:	40080000 	.word	0x40080000
 800d26c:	0800e528 	.word	0x0800e528
 800d270:	0800e538 	.word	0x0800e538
 800d274:	a39a      	add	r3, pc, #616	@ (adr r3, 800d4e0 <__ieee754_pow+0x9f0>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	4630      	mov	r0, r6
 800d27c:	4639      	mov	r1, r7
 800d27e:	f7f2 ff75 	bl	800016c <__adddf3>
 800d282:	4642      	mov	r2, r8
 800d284:	e9cd 0100 	strd	r0, r1, [sp]
 800d288:	464b      	mov	r3, r9
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f2 ff6b 	bl	8000168 <__aeabi_dsub>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d29a:	f7f3 fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	f47f ae09 	bne.w	800ceb6 <__ieee754_pow+0x3c6>
 800d2a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d2a8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d2ac:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d2b0:	fa43 fa0a 	asr.w	sl, r3, sl
 800d2b4:	44da      	add	sl, fp
 800d2b6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d2ba:	489b      	ldr	r0, [pc, #620]	@ (800d528 <__ieee754_pow+0xa38>)
 800d2bc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d2c0:	4108      	asrs	r0, r1
 800d2c2:	ea00 030a 	and.w	r3, r0, sl
 800d2c6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d2ca:	f1c1 0114 	rsb	r1, r1, #20
 800d2ce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	fa4a fa01 	asr.w	sl, sl, r1
 800d2d8:	f1bb 0f00 	cmp.w	fp, #0
 800d2dc:	4649      	mov	r1, r9
 800d2de:	f04f 0200 	mov.w	r2, #0
 800d2e2:	bfb8      	it	lt
 800d2e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800d2e8:	f7f2 ff3e 	bl	8000168 <__aeabi_dsub>
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	4689      	mov	r9, r1
 800d2f0:	2400      	movs	r4, #0
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f2 ff37 	bl	800016c <__adddf3>
 800d2fe:	a37a      	add	r3, pc, #488	@ (adr r3, 800d4e8 <__ieee754_pow+0x9f8>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	4620      	mov	r0, r4
 800d306:	460d      	mov	r5, r1
 800d308:	f7f3 f8e6 	bl	80004d8 <__aeabi_dmul>
 800d30c:	4642      	mov	r2, r8
 800d30e:	464b      	mov	r3, r9
 800d310:	e9cd 0100 	strd	r0, r1, [sp]
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f2 ff26 	bl	8000168 <__aeabi_dsub>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4630      	mov	r0, r6
 800d322:	4639      	mov	r1, r7
 800d324:	f7f2 ff20 	bl	8000168 <__aeabi_dsub>
 800d328:	a371      	add	r3, pc, #452	@ (adr r3, 800d4f0 <__ieee754_pow+0xa00>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f3 f8d3 	bl	80004d8 <__aeabi_dmul>
 800d332:	a371      	add	r3, pc, #452	@ (adr r3, 800d4f8 <__ieee754_pow+0xa08>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	4680      	mov	r8, r0
 800d33a:	4689      	mov	r9, r1
 800d33c:	4620      	mov	r0, r4
 800d33e:	4629      	mov	r1, r5
 800d340:	f7f3 f8ca 	bl	80004d8 <__aeabi_dmul>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f2 ff0e 	bl	800016c <__adddf3>
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d35c:	f7f2 ff06 	bl	800016c <__adddf3>
 800d360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d364:	4680      	mov	r8, r0
 800d366:	4689      	mov	r9, r1
 800d368:	f7f2 fefe 	bl	8000168 <__aeabi_dsub>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4620      	mov	r0, r4
 800d372:	4629      	mov	r1, r5
 800d374:	f7f2 fef8 	bl	8000168 <__aeabi_dsub>
 800d378:	4642      	mov	r2, r8
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	464b      	mov	r3, r9
 800d380:	4640      	mov	r0, r8
 800d382:	4649      	mov	r1, r9
 800d384:	f7f3 f8a8 	bl	80004d8 <__aeabi_dmul>
 800d388:	a35d      	add	r3, pc, #372	@ (adr r3, 800d500 <__ieee754_pow+0xa10>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	f7f3 f8a1 	bl	80004d8 <__aeabi_dmul>
 800d396:	a35c      	add	r3, pc, #368	@ (adr r3, 800d508 <__ieee754_pow+0xa18>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f2 fee4 	bl	8000168 <__aeabi_dsub>
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	462b      	mov	r3, r5
 800d3a4:	f7f3 f898 	bl	80004d8 <__aeabi_dmul>
 800d3a8:	a359      	add	r3, pc, #356	@ (adr r3, 800d510 <__ieee754_pow+0xa20>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	f7f2 fedd 	bl	800016c <__adddf3>
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	462b      	mov	r3, r5
 800d3b6:	f7f3 f88f 	bl	80004d8 <__aeabi_dmul>
 800d3ba:	a357      	add	r3, pc, #348	@ (adr r3, 800d518 <__ieee754_pow+0xa28>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f2 fed2 	bl	8000168 <__aeabi_dsub>
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	462b      	mov	r3, r5
 800d3c8:	f7f3 f886 	bl	80004d8 <__aeabi_dmul>
 800d3cc:	a354      	add	r3, pc, #336	@ (adr r3, 800d520 <__ieee754_pow+0xa30>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 fecb 	bl	800016c <__adddf3>
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	462b      	mov	r3, r5
 800d3da:	f7f3 f87d 	bl	80004d8 <__aeabi_dmul>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	4649      	mov	r1, r9
 800d3e6:	f7f2 febf 	bl	8000168 <__aeabi_dsub>
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	f7f3 f86f 	bl	80004d8 <__aeabi_dmul>
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d404:	4620      	mov	r0, r4
 800d406:	4629      	mov	r1, r5
 800d408:	f7f2 feae 	bl	8000168 <__aeabi_dsub>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d414:	f7f3 f98a 	bl	800072c <__aeabi_ddiv>
 800d418:	4632      	mov	r2, r6
 800d41a:	4604      	mov	r4, r0
 800d41c:	460d      	mov	r5, r1
 800d41e:	463b      	mov	r3, r7
 800d420:	4640      	mov	r0, r8
 800d422:	4649      	mov	r1, r9
 800d424:	f7f3 f858 	bl	80004d8 <__aeabi_dmul>
 800d428:	4632      	mov	r2, r6
 800d42a:	463b      	mov	r3, r7
 800d42c:	f7f2 fe9e 	bl	800016c <__adddf3>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4620      	mov	r0, r4
 800d436:	4629      	mov	r1, r5
 800d438:	f7f2 fe96 	bl	8000168 <__aeabi_dsub>
 800d43c:	4642      	mov	r2, r8
 800d43e:	464b      	mov	r3, r9
 800d440:	f7f2 fe92 	bl	8000168 <__aeabi_dsub>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	2000      	movs	r0, #0
 800d44a:	4938      	ldr	r1, [pc, #224]	@ (800d52c <__ieee754_pow+0xa3c>)
 800d44c:	f7f2 fe8c 	bl	8000168 <__aeabi_dsub>
 800d450:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d454:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d458:	da2e      	bge.n	800d4b8 <__ieee754_pow+0x9c8>
 800d45a:	4652      	mov	r2, sl
 800d45c:	f000 f89c 	bl	800d598 <scalbn>
 800d460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d464:	f7ff bbed 	b.w	800cc42 <__ieee754_pow+0x152>
 800d468:	4c31      	ldr	r4, [pc, #196]	@ (800d530 <__ieee754_pow+0xa40>)
 800d46a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d46e:	42a3      	cmp	r3, r4
 800d470:	d91a      	bls.n	800d4a8 <__ieee754_pow+0x9b8>
 800d472:	4b30      	ldr	r3, [pc, #192]	@ (800d534 <__ieee754_pow+0xa44>)
 800d474:	440b      	add	r3, r1
 800d476:	4303      	orrs	r3, r0
 800d478:	d009      	beq.n	800d48e <__ieee754_pow+0x99e>
 800d47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47e:	2200      	movs	r2, #0
 800d480:	2300      	movs	r3, #0
 800d482:	f7f3 fa9b 	bl	80009bc <__aeabi_dcmplt>
 800d486:	3800      	subs	r0, #0
 800d488:	bf18      	it	ne
 800d48a:	2001      	movne	r0, #1
 800d48c:	e444      	b.n	800cd18 <__ieee754_pow+0x228>
 800d48e:	4642      	mov	r2, r8
 800d490:	464b      	mov	r3, r9
 800d492:	f7f2 fe69 	bl	8000168 <__aeabi_dsub>
 800d496:	4632      	mov	r2, r6
 800d498:	463b      	mov	r3, r7
 800d49a:	f7f3 faa3 	bl	80009e4 <__aeabi_dcmpge>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d1eb      	bne.n	800d47a <__ieee754_pow+0x98a>
 800d4a2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800d538 <__ieee754_pow+0xa48>
 800d4a6:	e6fd      	b.n	800d2a4 <__ieee754_pow+0x7b4>
 800d4a8:	469a      	mov	sl, r3
 800d4aa:	4b24      	ldr	r3, [pc, #144]	@ (800d53c <__ieee754_pow+0xa4c>)
 800d4ac:	459a      	cmp	sl, r3
 800d4ae:	f63f aef9 	bhi.w	800d2a4 <__ieee754_pow+0x7b4>
 800d4b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d4b6:	e71b      	b.n	800d2f0 <__ieee754_pow+0x800>
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	e7d1      	b.n	800d460 <__ieee754_pow+0x970>
 800d4bc:	2000      	movs	r0, #0
 800d4be:	491b      	ldr	r1, [pc, #108]	@ (800d52c <__ieee754_pow+0xa3c>)
 800d4c0:	f7ff bb34 	b.w	800cb2c <__ieee754_pow+0x3c>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	f7ff bb30 	b.w	800cb2c <__ieee754_pow+0x3c>
 800d4cc:	4650      	mov	r0, sl
 800d4ce:	4659      	mov	r1, fp
 800d4d0:	f7ff bb2c 	b.w	800cb2c <__ieee754_pow+0x3c>
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	f7ff bb79 	b.w	800cbcc <__ieee754_pow+0xdc>
 800d4da:	2400      	movs	r4, #0
 800d4dc:	f7ff bb64 	b.w	800cba8 <__ieee754_pow+0xb8>
 800d4e0:	652b82fe 	.word	0x652b82fe
 800d4e4:	3c971547 	.word	0x3c971547
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	3fe62e43 	.word	0x3fe62e43
 800d4f0:	fefa39ef 	.word	0xfefa39ef
 800d4f4:	3fe62e42 	.word	0x3fe62e42
 800d4f8:	0ca86c39 	.word	0x0ca86c39
 800d4fc:	be205c61 	.word	0xbe205c61
 800d500:	72bea4d0 	.word	0x72bea4d0
 800d504:	3e663769 	.word	0x3e663769
 800d508:	c5d26bf1 	.word	0xc5d26bf1
 800d50c:	3ebbbd41 	.word	0x3ebbbd41
 800d510:	af25de2c 	.word	0xaf25de2c
 800d514:	3f11566a 	.word	0x3f11566a
 800d518:	16bebd93 	.word	0x16bebd93
 800d51c:	3f66c16c 	.word	0x3f66c16c
 800d520:	5555553e 	.word	0x5555553e
 800d524:	3fc55555 	.word	0x3fc55555
 800d528:	fff00000 	.word	0xfff00000
 800d52c:	3ff00000 	.word	0x3ff00000
 800d530:	4090cbff 	.word	0x4090cbff
 800d534:	3f6f3400 	.word	0x3f6f3400
 800d538:	4090cc00 	.word	0x4090cc00
 800d53c:	3fe00000 	.word	0x3fe00000

0800d540 <with_errno>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	4604      	mov	r4, r0
 800d544:	460d      	mov	r5, r1
 800d546:	4616      	mov	r6, r2
 800d548:	f7fc fb36 	bl	8009bb8 <__errno>
 800d54c:	4629      	mov	r1, r5
 800d54e:	6006      	str	r6, [r0, #0]
 800d550:	4620      	mov	r0, r4
 800d552:	bd70      	pop	{r4, r5, r6, pc}

0800d554 <xflow>:
 800d554:	b513      	push	{r0, r1, r4, lr}
 800d556:	4604      	mov	r4, r0
 800d558:	4619      	mov	r1, r3
 800d55a:	4610      	mov	r0, r2
 800d55c:	b10c      	cbz	r4, 800d562 <xflow+0xe>
 800d55e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d562:	e9cd 2300 	strd	r2, r3, [sp]
 800d566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d56a:	f7f2 ffb5 	bl	80004d8 <__aeabi_dmul>
 800d56e:	2222      	movs	r2, #34	@ 0x22
 800d570:	b002      	add	sp, #8
 800d572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d576:	f7ff bfe3 	b.w	800d540 <with_errno>

0800d57a <__math_uflow>:
 800d57a:	2200      	movs	r2, #0
 800d57c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d580:	f7ff bfe8 	b.w	800d554 <xflow>

0800d584 <__math_oflow>:
 800d584:	2200      	movs	r2, #0
 800d586:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800d58a:	f7ff bfe3 	b.w	800d554 <xflow>

0800d58e <fabs>:
 800d58e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d592:	4619      	mov	r1, r3
 800d594:	4770      	bx	lr
	...

0800d598 <scalbn>:
 800d598:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d59c:	4616      	mov	r6, r2
 800d59e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5a2:	4683      	mov	fp, r0
 800d5a4:	468c      	mov	ip, r1
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	b982      	cbnz	r2, 800d5cc <scalbn+0x34>
 800d5aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d5ae:	4303      	orrs	r3, r0
 800d5b0:	d039      	beq.n	800d626 <scalbn+0x8e>
 800d5b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d670 <scalbn+0xd8>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f7f2 ff8f 	bl	80004d8 <__aeabi_dmul>
 800d5ba:	4b2e      	ldr	r3, [pc, #184]	@ (800d674 <scalbn+0xdc>)
 800d5bc:	4683      	mov	fp, r0
 800d5be:	429e      	cmp	r6, r3
 800d5c0:	468c      	mov	ip, r1
 800d5c2:	da0d      	bge.n	800d5e0 <scalbn+0x48>
 800d5c4:	a326      	add	r3, pc, #152	@ (adr r3, 800d660 <scalbn+0xc8>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	e01b      	b.n	800d604 <scalbn+0x6c>
 800d5cc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800d5d0:	42ba      	cmp	r2, r7
 800d5d2:	d109      	bne.n	800d5e8 <scalbn+0x50>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	f7f2 fdc9 	bl	800016c <__adddf3>
 800d5da:	4683      	mov	fp, r0
 800d5dc:	468c      	mov	ip, r1
 800d5de:	e022      	b.n	800d626 <scalbn+0x8e>
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5e6:	3a36      	subs	r2, #54	@ 0x36
 800d5e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d5ec:	428e      	cmp	r6, r1
 800d5ee:	dd0c      	ble.n	800d60a <scalbn+0x72>
 800d5f0:	a31d      	add	r3, pc, #116	@ (adr r3, 800d668 <scalbn+0xd0>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800d5fc:	f361 74df 	bfi	r4, r1, #31, #1
 800d600:	4621      	mov	r1, r4
 800d602:	481d      	ldr	r0, [pc, #116]	@ (800d678 <scalbn+0xe0>)
 800d604:	f7f2 ff68 	bl	80004d8 <__aeabi_dmul>
 800d608:	e7e7      	b.n	800d5da <scalbn+0x42>
 800d60a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d60e:	4432      	add	r2, r6
 800d610:	428a      	cmp	r2, r1
 800d612:	dced      	bgt.n	800d5f0 <scalbn+0x58>
 800d614:	2a00      	cmp	r2, #0
 800d616:	dd0a      	ble.n	800d62e <scalbn+0x96>
 800d618:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d61c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d620:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d624:	46ac      	mov	ip, r5
 800d626:	4658      	mov	r0, fp
 800d628:	4661      	mov	r1, ip
 800d62a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d62e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d632:	da09      	bge.n	800d648 <scalbn+0xb0>
 800d634:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800d638:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800d63c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800d640:	480e      	ldr	r0, [pc, #56]	@ (800d67c <scalbn+0xe4>)
 800d642:	f041 011f 	orr.w	r1, r1, #31
 800d646:	e7bd      	b.n	800d5c4 <scalbn+0x2c>
 800d648:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d64c:	3236      	adds	r2, #54	@ 0x36
 800d64e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d652:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d656:	4658      	mov	r0, fp
 800d658:	4629      	mov	r1, r5
 800d65a:	2200      	movs	r2, #0
 800d65c:	4b08      	ldr	r3, [pc, #32]	@ (800d680 <scalbn+0xe8>)
 800d65e:	e7d1      	b.n	800d604 <scalbn+0x6c>
 800d660:	c2f8f359 	.word	0xc2f8f359
 800d664:	01a56e1f 	.word	0x01a56e1f
 800d668:	8800759c 	.word	0x8800759c
 800d66c:	7e37e43c 	.word	0x7e37e43c
 800d670:	43500000 	.word	0x43500000
 800d674:	ffff3cb0 	.word	0xffff3cb0
 800d678:	8800759c 	.word	0x8800759c
 800d67c:	c2f8f359 	.word	0xc2f8f359
 800d680:	3c900000 	.word	0x3c900000

0800d684 <_init>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr

0800d690 <_fini>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr
