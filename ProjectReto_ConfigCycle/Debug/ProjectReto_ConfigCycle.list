
ProjectReto_ConfigCycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fdc  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08007110  08007110  00008110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d88  08007d88  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d90  08007d90  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d94  08007d94  00008d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007d98  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001e0  08007f78  000091e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007f78  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ffb  00000000  00000000  00009209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001016  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000378  00000000  00000000  0000d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000261  00000000  00000000  0000d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000395e  00000000  00000000  0000d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000046ab  00000000  00000000  00011157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b4c6  00000000  00000000  00015802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f3c  00000000  00000000  00020d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00022c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e0 	.word	0x200001e0
 800014c:	00000000 	.word	0x00000000
 8000150:	080070f4 	.word	0x080070f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e4 	.word	0x200001e4
 800016c:	080070f4 	.word	0x080070f4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	@ 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000df6:	2afd      	cmp	r2, #253	@ 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	@ 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	@ 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b092      	sub	sp, #72	@ 0x48
 8001048:	af00      	add	r7, sp, #0
 800104a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800104e:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fcc8 	bl	80009f0 <__aeabi_dcmple>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d020      	beq.n	80010a8 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800106a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	f7ff f888 	bl	8000188 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4614      	mov	r4, r2
 800107e:	461d      	mov	r5, r3
 8001080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001082:	3308      	adds	r3, #8
 8001084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff f87b 	bl	8000188 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff fb57 	bl	800074c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80010a6:	e08e      	b.n	80011c6 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80010a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010b0:	4413      	add	r3, r2
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ba:	f7ff fc8f 	bl	80009dc <__aeabi_dcmplt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d04d      	beq.n	8001160 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80010c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[0U];
 80010d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 80010d6:	e016      	b.n	8001106 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80010d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e8:	f7ff fc78 	bl	80009dc <__aeabi_dcmplt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80010f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010f6:	e001      	b.n	80010fc <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80010f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010fa:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80010fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001100:	4413      	add	r3, r2
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 8001106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d8e3      	bhi.n	80010d8 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001116:	4413      	add	r3, r2
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001120:	f7ff f832 	bl	8000188 <__aeabi_dsub>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800112e:	3301      	adds	r3, #1
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001134:	4413      	add	r3, r2
 8001136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001140:	4413      	add	r3, r2
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f81f 	bl	8000188 <__aeabi_dsub>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fafb 	bl	800074c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800115e:	e032      	b.n	80011c6 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001170:	3b01      	subs	r3, #1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001176:	4413      	add	r3, r2
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001180:	f7ff f802 	bl	8000188 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4614      	mov	r4, r2
 800118a:	461d      	mov	r5, r3
 800118c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001194:	4413      	add	r3, r2
 8001196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80011a2:	3b01      	subs	r3, #1
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7fe ffeb 	bl	8000188 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fac7 	bl	800074c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80011c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80011ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d0:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80011d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011dc:	f7ff fc08 	bl	80009f0 <__aeabi_dcmple>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80011ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f4:	f7fe ffc8 	bl	8000188 <__aeabi_dsub>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001202:	3308      	adds	r3, #8
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7fe ffbb 	bl	8000188 <__aeabi_dsub>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fa97 	bl	800074c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001226:	e095      	b.n	8001354 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001232:	4413      	add	r3, r2
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123c:	f7ff fbce 	bl	80009dc <__aeabi_dcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d04f      	beq.n	80012e6 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[1U];
 8001254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 800125c:	e016      	b.n	800128c <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800125e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001264:	4413      	add	r3, r2
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126e:	f7ff fbb5 	bl	80009dc <__aeabi_dcmplt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800127c:	e001      	b.n	8001282 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800127e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001282:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	4413      	add	r3, r2
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 800128c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800128e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d8e3      	bhi.n	800125e <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800129c:	4413      	add	r3, r2
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a6:	f7fe ff6f 	bl	8000188 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	3301      	adds	r3, #1
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012c6:	4413      	add	r3, r2
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ff5c 	bl	8000188 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff fa38 	bl	800074c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80012e4:	e036      	b.n	8001354 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80012e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80012f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80012fa:	3b01      	subs	r3, #1
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001300:	4413      	add	r3, r2
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f7fe ff3d 	bl	8000188 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4614      	mov	r4, r2
 8001314:	461d      	mov	r5, r3
 8001316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001320:	4413      	add	r3, r2
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001330:	3b01      	subs	r3, #1
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001336:	4413      	add	r3, r2
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff24 	bl	8000188 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff fa00 	bl	800074c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001356:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001358:	fb03 f202 	mul.w	r2, r3, r2
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	4413      	add	r3, r2
 8001360:	63bb      	str	r3, [r7, #56]	@ 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8001362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001364:	3301      	adds	r3, #1
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800136a:	4413      	add	r3, r2
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001376:	4413      	add	r3, r2
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7fe ff04 	bl	8000188 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800138c:	f7ff f8b4 	bl	80004f8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800139e:	4413      	add	r3, r2
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fef2 	bl	800018c <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  bpIdx += stride;
 80013b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013b4:	4413      	add	r3, r2
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80013b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ba:	3301      	adds	r3, #1
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013cc:	4413      	add	r3, r2
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe fed9 	bl	8000188 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e2:	f7ff f889 	bl	80004f8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7fe fec7 	bl	800018c <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800140a:	f7fe febd 	bl	8000188 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800141a:	f7ff f86d 	bl	80004f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800142a:	f7fe feaf 	bl	800018c <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
}
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	3748      	adds	r7, #72	@ 0x48
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}

0800143c <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff facc 	bl	80009f0 <__aeabi_dcmple>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d020      	beq.n	80014a0 <look1_binlxpw+0x64>
    iLeft = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146c:	f7fe fe8c 	bl	8000188 <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3308      	adds	r3, #8
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe fe7f 	bl	8000188 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f95b 	bl	800074c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800149e:	e087      	b.n	80015b0 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80014a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b0:	f7ff fa94 	bl	80009dc <__aeabi_dcmplt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d04b      	beq.n	8001552 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80014ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80014c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c6:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80014c8:	e016      	b.n	80014f8 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014da:	f7ff fa7f 	bl	80009dc <__aeabi_dcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <look1_binlxpw+0xae>
        iRght = bpIdx;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e001      	b.n	80014ee <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4413      	add	r3, r2
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d8e3      	bhi.n	80014ca <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001512:	f7fe fe39 	bl	8000188 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4614      	mov	r4, r2
 800151c:	461d      	mov	r5, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3301      	adds	r3, #1
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7fe fe26 	bl	8000188 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f902 	bl	800074c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001550:	e02e      	b.n	80015b0 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001554:	3b01      	subs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800155e:	3b01      	subs	r3, #1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156e:	f7fe fe0b 	bl	8000188 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001588:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800158c:	3b01      	subs	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe fdf6 	bl	8000188 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f8d2 	bl	800074c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	3301      	adds	r3, #1
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fddd 	bl	8000188 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015da:	f7fe ff8d 	bl	80004f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7fe fdcb 	bl	800018c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
}
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}

08001604 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 800160c:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 800160e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001612:	3b01      	subs	r3, #1
 8001614:	2b03      	cmp	r3, #3
 8001616:	d86c      	bhi.n	80016f2 <EngTrModel_gear_state+0xee>
 8001618:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <EngTrModel_gear_state+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001651 	.word	0x08001651
 8001628:	0800166f 	.word	0x0800166f
 800162c:	080016a9 	.word	0x080016a9
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d155      	bne.n	80016e4 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001638:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 800163a:	2203      	movs	r2, #3
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 8001640:	492f      	ldr	r1, [pc, #188]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 800164e:	e049      	b.n	80016e4 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d147      	bne.n	80016e8 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 800165a:	2204      	movs	r2, #4
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 8001660:	4927      	ldr	r1, [pc, #156]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <EngTrModel_gear_state+0x100>)
 8001668:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 800166c:	e03c      	b.n	80016e8 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <EngTrModel_gear_state+0x8c>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d138      	bne.n	80016ec <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 800167c:	2204      	movs	r2, #4
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 8001682:	491f      	ldr	r1, [pc, #124]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <EngTrModel_gear_state+0x100>)
 800168a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 800168e:	e00a      	b.n	80016a6 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 1.0;
 8001698:	4919      	ldr	r1, [pc, #100]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <EngTrModel_gear_state+0x104>)
 80016a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80016a4:	bf00      	nop
    }
    break;
 80016a6:	e021      	b.n	80016ec <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <EngTrModel_gear_state+0xc6>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11d      	bne.n	80016f0 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 4.0;
 80016bc:	4910      	ldr	r1, [pc, #64]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <EngTrModel_gear_state+0x108>)
 80016c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80016c8:	e00b      	b.n	80016e2 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <EngTrModel_gear_state+0xf8>)
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 80016d2:	490b      	ldr	r1, [pc, #44]	@ (8001700 <EngTrModel_gear_state+0xfc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80016e0:	bf00      	nop
    }
    break;
 80016e2:	e005      	b.n	80016f0 <EngTrModel_gear_state+0xec>
    break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016f0:	bf00      	nop
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000230 	.word	0x20000230
 8001700:	20000200 	.word	0x20000200
 8001704:	40080000 	.word	0x40080000
 8001708:	3ff00000 	.word	0x3ff00000
 800170c:	40100000 	.word	0x40100000

08001710 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800171a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800171e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001722:	f001 fd8b 	bl	800323c <rtIsNaN>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <rt_powd_snf+0x2a>
 800172c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001730:	f001 fd84 	bl	800323c <rtIsNaN>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <rt_powd_snf+0x36>
    y = (rtNaN);
 800173a:	4b7e      	ldr	r3, [pc, #504]	@ (8001934 <rt_powd_snf+0x224>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001744:	e0ef      	b.n	8001926 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001756:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 800175a:	68bc      	ldr	r4, [r7, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001762:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176a:	f001 fd43 	bl	80031f4 <rtIsInf>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d049      	beq.n	8001808 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b6f      	ldr	r3, [pc, #444]	@ (8001938 <rt_powd_snf+0x228>)
 800177a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800177e:	f7ff f923 	bl	80009c8 <__aeabi_dcmpeq>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <rt_powd_snf+0x84>
        y = 1.0;
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <rt_powd_snf+0x228>)
 800178e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001792:	e0c8      	b.n	8001926 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <rt_powd_snf+0x228>)
 800179a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800179e:	f7ff f93b 	bl	8000a18 <__aeabi_dcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b4:	f7ff f930 	bl	8000a18 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <rt_powd_snf+0xba>
          y = (rtInf);
 80017be:	4b5f      	ldr	r3, [pc, #380]	@ (800193c <rt_powd_snf+0x22c>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017c8:	e0ad      	b.n	8001926 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017d6:	e0a6      	b.n	8001926 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e4:	f7ff f918 	bl	8000a18 <__aeabi_dcmpgt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <rt_powd_snf+0xec>
        y = 0.0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017fa:	e094      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80017fc:	4b4f      	ldr	r3, [pc, #316]	@ (800193c <rt_powd_snf+0x22c>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001806:	e08e      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001814:	f7ff f8d8 	bl	80009c8 <__aeabi_dcmpeq>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <rt_powd_snf+0x11a>
      y = 1.0;
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <rt_powd_snf+0x228>)
 8001824:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001828:	e07d      	b.n	8001926 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <rt_powd_snf+0x228>)
 8001830:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001834:	f7ff f8c8 	bl	80009c8 <__aeabi_dcmpeq>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01b      	beq.n	8001876 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184a:	f7ff f8e5 	bl	8000a18 <__aeabi_dcmpgt>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <rt_powd_snf+0x14e>
        y = u0;
 8001854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001858:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800185c:	e063      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800185e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	4934      	ldr	r1, [pc, #208]	@ (8001938 <rt_powd_snf+0x228>)
 8001868:	f7fe ff70 	bl	800074c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001874:	e057      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800187e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001882:	f7ff f8a1 	bl	80009c8 <__aeabi_dcmpeq>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <rt_powd_snf+0x192>
      y = u0 * u0;
 800188c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001890:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001894:	f7fe fe30 	bl	80004f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018a0:	e041      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <rt_powd_snf+0x230>)
 80018a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ac:	f7ff f88c 	bl	80009c8 <__aeabi_dcmpeq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <rt_powd_snf+0x1ca>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c2:	f7ff f89f 	bl	8000a04 <__aeabi_dcmpge>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 80018cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d0:	f004 fc02 	bl	80060d8 <sqrt>
 80018d4:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80018d8:	e025      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7ff f879 	bl	80009dc <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <rt_powd_snf+0x206>
 80018f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f4:	f004 fd6c 	bl	80063d0 <floor>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001900:	f7ff f88a 	bl	8000a18 <__aeabi_dcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <rt_powd_snf+0x206>
      y = (rtNaN);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <rt_powd_snf+0x224>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001914:	e007      	b.n	8001926 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800191a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191e:	f004 fb73 	bl	8006008 <pow>
 8001922:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    }
  }

  return y;
 8001926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	3730      	adds	r7, #48	@ 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	200002a8 	.word	0x200002a8
 8001938:	3ff00000 	.word	0x3ff00000
 800193c:	20000298 	.word	0x20000298
 8001940:	3fe00000 	.word	0x3fe00000
 8001944:	00000000 	.word	0x00000000

08001948 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b08c      	sub	sp, #48	@ 0x30
 800194c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 800194e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b80 <EngTrModel_step+0x238>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	498b      	ldr	r1, [pc, #556]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001956:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 800195a:	4b8a      	ldr	r3, [pc, #552]	@ (8001b84 <EngTrModel_step+0x23c>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	4989      	ldr	r1, [pc, #548]	@ (8001b88 <EngTrModel_step+0x240>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001966:	4b86      	ldr	r3, [pc, #536]	@ (8001b80 <EngTrModel_step+0x238>)
 8001968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800196c:	a380      	add	r3, pc, #512	@ (adr r3, 8001b70 <EngTrModel_step+0x228>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fdc1 	bl	80004f8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 800197e:	a37e      	add	r3, pc, #504	@ (adr r3, 8001b78 <EngTrModel_step+0x230>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fdb8 	bl	80004f8 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800198c:	497d      	ldr	r1, [pc, #500]	@ (8001b84 <EngTrModel_step+0x23c>)
 800198e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001996:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001998:	4b79      	ldr	r3, [pc, #484]	@ (8001b80 <EngTrModel_step+0x238>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a0:	d004      	beq.n	80019ac <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <EngTrModel_step+0x238>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a75      	ldr	r2, [pc, #468]	@ (8001b80 <EngTrModel_step+0x238>)
 80019aa:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80019ac:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <EngTrModel_step+0x238>)
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11a      	bne.n	80019ec <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80019b6:	4b72      	ldr	r3, [pc, #456]	@ (8001b80 <EngTrModel_step+0x238>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 80019be:	4b70      	ldr	r3, [pc, #448]	@ (8001b80 <EngTrModel_step+0x238>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80019c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b80 <EngTrModel_step+0x238>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    EngTrModel_B.Gear = 1.0;
 80019ce:	496d      	ldr	r1, [pc, #436]	@ (8001b84 <EngTrModel_step+0x23c>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <EngTrModel_step+0x244>)
 80019d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 80019da:	4b69      	ldr	r3, [pc, #420]	@ (8001b80 <EngTrModel_step+0x238>)
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80019e2:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <EngTrModel_step+0x238>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80019ea:	e0e4      	b.n	8001bb6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 80019ec:	4b64      	ldr	r3, [pc, #400]	@ (8001b80 <EngTrModel_step+0x238>)
 80019ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe03 	bl	8001604 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 80019fe:	4b60      	ldr	r3, [pc, #384]	@ (8001b80 <EngTrModel_step+0x238>)
 8001a00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80d6 	beq.w	8001bb6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a0a:	4b61      	ldr	r3, [pc, #388]	@ (8001b90 <EngTrModel_step+0x248>)
 8001a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a10:	4b5c      	ldr	r3, [pc, #368]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001a12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a16:	2406      	movs	r4, #6
 8001a18:	9404      	str	r4, [sp, #16]
 8001a1a:	4c5e      	ldr	r4, [pc, #376]	@ (8001b94 <EngTrModel_step+0x24c>)
 8001a1c:	9403      	str	r4, [sp, #12]
 8001a1e:	4c5e      	ldr	r4, [pc, #376]	@ (8001b98 <EngTrModel_step+0x250>)
 8001a20:	9402      	str	r4, [sp, #8]
 8001a22:	4c5e      	ldr	r4, [pc, #376]	@ (8001b9c <EngTrModel_step+0x254>)
 8001a24:	9401      	str	r4, [sp, #4]
 8001a26:	4c5e      	ldr	r4, [pc, #376]	@ (8001ba0 <EngTrModel_step+0x258>)
 8001a28:	9400      	str	r4, [sp, #0]
 8001a2a:	f7ff fb0b 	bl	8001044 <look2_binlxpw>
 8001a2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a32:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <EngTrModel_step+0x248>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	4b52      	ldr	r3, [pc, #328]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001a3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a3e:	2406      	movs	r4, #6
 8001a40:	9404      	str	r4, [sp, #16]
 8001a42:	4c54      	ldr	r4, [pc, #336]	@ (8001b94 <EngTrModel_step+0x24c>)
 8001a44:	9403      	str	r4, [sp, #12]
 8001a46:	4c57      	ldr	r4, [pc, #348]	@ (8001ba4 <EngTrModel_step+0x25c>)
 8001a48:	9402      	str	r4, [sp, #8]
 8001a4a:	4c54      	ldr	r4, [pc, #336]	@ (8001b9c <EngTrModel_step+0x254>)
 8001a4c:	9401      	str	r4, [sp, #4]
 8001a4e:	4c56      	ldr	r4, [pc, #344]	@ (8001ba8 <EngTrModel_step+0x260>)
 8001a50:	9400      	str	r4, [sp, #0]
 8001a52:	f7ff faf7 	bl	8001044 <look2_binlxpw>
 8001a56:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <EngTrModel_step+0x238>)
 8001a5c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d05a      	beq.n	8001b1a <EngTrModel_step+0x1d2>
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	f300 80a6 	bgt.w	8001bb6 <EngTrModel_step+0x26e>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <EngTrModel_step+0x12c>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d02e      	beq.n	8001ad0 <EngTrModel_step+0x188>
 8001a72:	e0a0      	b.n	8001bb6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a74:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <EngTrModel_step+0x238>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d919      	bls.n	8001ab0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a86:	f7fe ffbd 	bl	8000a04 <__aeabi_dcmpge>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00f      	beq.n	8001ab0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001a94:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <EngTrModel_step+0x238>)
 8001a96:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fdaf 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001aa6:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <EngTrModel_step+0x238>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001aae:	e082      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001ab0:	4b34      	ldr	r3, [pc, #208]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001ab2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aba:	f7fe ff8f 	bl	80009dc <__aeabi_dcmplt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <EngTrModel_step+0x17e>
        break;
 8001ac4:	e077      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <EngTrModel_step+0x238>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001ace:	e072      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001ad2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ada:	f7fe ff7f 	bl	80009dc <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <EngTrModel_step+0x238>)
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <EngTrModel_step+0x238>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001af2:	e060      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001af4:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001af6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afe:	f7fe ff8b 	bl	8000a18 <__aeabi_dcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <EngTrModel_step+0x1c2>
        break;
 8001b08:	e055      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <EngTrModel_step+0x238>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <EngTrModel_step+0x238>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
        break;
 8001b18:	e04d      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <EngTrModel_step+0x238>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d919      	bls.n	8001b56 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001b24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe ff60 	bl	80009f0 <__aeabi_dcmple>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <EngTrModel_step+0x238>)
 8001b3c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd5c 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <EngTrModel_step+0x238>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001b54:	e02e      	b.n	8001bb4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <EngTrModel_step+0x23c>)
 8001b58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b60:	f7fe ff5a 	bl	8000a18 <__aeabi_dcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d120      	bne.n	8001bac <EngTrModel_step+0x264>
        break;
 8001b6a:	e023      	b.n	8001bb4 <EngTrModel_step+0x26c>
 8001b6c:	f3af 8000 	nop.w
 8001b70:	54442d18 	.word	0x54442d18
 8001b74:	401921fb 	.word	0x401921fb
 8001b78:	745d1746 	.word	0x745d1746
 8001b7c:	3f8745d1 	.word	0x3f8745d1
 8001b80:	20000230 	.word	0x20000230
 8001b84:	20000200 	.word	0x20000200
 8001b88:	20000268 	.word	0x20000268
 8001b8c:	3ff00000 	.word	0x3ff00000
 8001b90:	20000258 	.word	0x20000258
 8001b94:	08007998 	.word	0x08007998
 8001b98:	08007168 	.word	0x08007168
 8001b9c:	08007258 	.word	0x08007258
 8001ba0:	08007228 	.word	0x08007228
 8001ba4:	08007278 	.word	0x08007278
 8001ba8:	08007338 	.word	0x08007338
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bac:	4b84      	ldr	r3, [pc, #528]	@ (8001dc0 <EngTrModel_step+0x478>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001bb4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001bb6:	4b83      	ldr	r3, [pc, #524]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001bb8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b81      	ldr	r3, [pc, #516]	@ (8001dc8 <EngTrModel_step+0x480>)
 8001bc2:	4a82      	ldr	r2, [pc, #520]	@ (8001dcc <EngTrModel_step+0x484>)
 8001bc4:	f7ff fc3a 	bl	800143c <look1_binlxpw>
 8001bc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc0 <EngTrModel_step+0x478>)
 8001bce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bd2:	a375      	add	r3, pc, #468	@ (adr r3, 8001da8 <EngTrModel_step+0x460>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fc8e 	bl	80004f8 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4978      	ldr	r1, [pc, #480]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001be2:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001be6:	4b77      	ldr	r3, [pc, #476]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe fee8 	bl	80009c8 <__aeabi_dcmpeq>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001bfe:	4b71      	ldr	r3, [pc, #452]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001c00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c08:	f7fe fc76 	bl	80004f8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fd97 	bl	800074c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c26:	e005      	b.n	8001c34 <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c34:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001c36:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c3a:	2314      	movs	r3, #20
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	@ (8001dd0 <EngTrModel_step+0x488>)
 8001c40:	4a64      	ldr	r2, [pc, #400]	@ (8001dd4 <EngTrModel_step+0x48c>)
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	f7ff fbf9 	bl	800143c <look1_binlxpw>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fd7b 	bl	800074c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c66:	f7ff fd53 	bl	8001710 <rt_powd_snf>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4955      	ldr	r1, [pc, #340]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001c70:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c74:	2314      	movs	r3, #20
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b57      	ldr	r3, [pc, #348]	@ (8001dd8 <EngTrModel_step+0x490>)
 8001c7a:	4a56      	ldr	r2, [pc, #344]	@ (8001dd4 <EngTrModel_step+0x48c>)
 8001c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c80:	f7ff fbdc 	bl	800143c <look1_binlxpw>
 8001c84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001c88:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001c8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c92:	f7fe fc31 	bl	80004f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ca2:	f7fe fc29 	bl	80004f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4946      	ldr	r1, [pc, #280]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001cac:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001cb0:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001cb2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cb6:	4949      	ldr	r1, [pc, #292]	@ (8001ddc <EngTrModel_step+0x494>)
 8001cb8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001cbc:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001cbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cc2:	4946      	ldr	r1, [pc, #280]	@ (8001ddc <EngTrModel_step+0x494>)
 8001cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001cc8:	4b45      	ldr	r3, [pc, #276]	@ (8001de0 <EngTrModel_step+0x498>)
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	240a      	movs	r4, #10
 8001cd6:	9404      	str	r4, [sp, #16]
 8001cd8:	4c42      	ldr	r4, [pc, #264]	@ (8001de4 <EngTrModel_step+0x49c>)
 8001cda:	9403      	str	r4, [sp, #12]
 8001cdc:	4c42      	ldr	r4, [pc, #264]	@ (8001de8 <EngTrModel_step+0x4a0>)
 8001cde:	9402      	str	r4, [sp, #8]
 8001ce0:	4c42      	ldr	r4, [pc, #264]	@ (8001dec <EngTrModel_step+0x4a4>)
 8001ce2:	9401      	str	r4, [sp, #4]
 8001ce4:	4c42      	ldr	r4, [pc, #264]	@ (8001df0 <EngTrModel_step+0x4a8>)
 8001ce6:	9400      	str	r4, [sp, #0]
 8001ce8:	f7ff f9ac 	bl	8001044 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001cec:	4b35      	ldr	r3, [pc, #212]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001cee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cf2:	f7fe fa49 	bl	8000188 <__aeabi_dsub>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001cfe:	a32c      	add	r3, pc, #176	@ (adr r3, 8001db0 <EngTrModel_step+0x468>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fbf8 	bl	80004f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	a329      	add	r3, pc, #164	@ (adr r3, 8001db8 <EngTrModel_step+0x470>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fbef 	bl	80004f8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <EngTrModel_step+0x478>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fa30 	bl	800018c <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4923      	ldr	r1, [pc, #140]	@ (8001dc0 <EngTrModel_step+0x478>)
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001d36:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001d38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fe4a 	bl	80009dc <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <EngTrModel_step+0x4ac>)
 8001d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d58:	e055      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001d5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f7fe fe56 	bl	8000a18 <__aeabi_dcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <EngTrModel_step+0x4b0>)
 8001d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d7c:	e043      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <EngTrModel_step+0x47c>)
 8001d80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	f7fe fe1c 	bl	80009c8 <__aeabi_dcmpeq>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d032      	beq.n	8001dfc <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001da2:	e030      	b.n	8001e06 <EngTrModel_step+0x4be>
 8001da4:	f3af 8000 	nop.w
 8001da8:	3d70a3d7 	.word	0x3d70a3d7
 8001dac:	4009d70a 	.word	0x4009d70a
 8001db0:	0865b653 	.word	0x0865b653
 8001db4:	4046bc6f 	.word	0x4046bc6f
 8001db8:	47ae147b 	.word	0x47ae147b
 8001dbc:	3fa47ae1 	.word	0x3fa47ae1
 8001dc0:	20000230 	.word	0x20000230
 8001dc4:	20000200 	.word	0x20000200
 8001dc8:	08007780 	.word	0x08007780
 8001dcc:	08007258 	.word	0x08007258
 8001dd0:	080077a0 	.word	0x080077a0
 8001dd4:	08007848 	.word	0x08007848
 8001dd8:	080078f0 	.word	0x080078f0
 8001ddc:	20000268 	.word	0x20000268
 8001de0:	20000258 	.word	0x20000258
 8001de4:	080079a0 	.word	0x080079a0
 8001de8:	08007368 	.word	0x08007368
 8001dec:	08007728 	.word	0x08007728
 8001df0:	080076d8 	.word	0x080076d8
 8001df4:	bff00000 	.word	0xbff00000
 8001df8:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <EngTrModel_step+0x5a0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e06:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <EngTrModel_step+0x5a4>)
 8001e08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e0c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001ec8 <EngTrModel_step+0x580>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fb71 	bl	80004f8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e1e:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <EngTrModel_step+0x5a4>)
 8001e20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e2c:	f7ff fc70 	bl	8001710 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e30:	a327      	add	r3, pc, #156	@ (adr r3, 8001ed0 <EngTrModel_step+0x588>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fb5f 	bl	80004f8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <EngTrModel_step+0x5a8>)
 8001e48:	f7fe f9a0 	bl	800018c <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <EngTrModel_step+0x5ac>)
 8001e56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e5a:	f7fe f997 	bl	800018c <__adddf3>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6a:	f7fe fb45 	bl	80004f8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f987 	bl	8000188 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e82:	a315      	add	r3, pc, #84	@ (adr r3, 8001ed8 <EngTrModel_step+0x590>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb36 	bl	80004f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a312      	add	r3, pc, #72	@ (adr r3, 8001ee0 <EngTrModel_step+0x598>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb2d 	bl	80004f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <EngTrModel_step+0x5b0>)
 8001ea8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eac:	f7fe f96e 	bl	800018c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4910      	ldr	r1, [pc, #64]	@ (8001ef8 <EngTrModel_step+0x5b0>)
 8001eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	3d70a3d7 	.word	0x3d70a3d7
 8001ecc:	4009d70a 	.word	0x4009d70a
 8001ed0:	47ae147b 	.word	0x47ae147b
 8001ed4:	3f947ae1 	.word	0x3f947ae1
 8001ed8:	b3bfa695 	.word	0xb3bfa695
 8001edc:	3fb52ad1 	.word	0x3fb52ad1
 8001ee0:	47ae147b 	.word	0x47ae147b
 8001ee4:	3fa47ae1 	.word	0x3fa47ae1
 8001ee8:	200002a8 	.word	0x200002a8
 8001eec:	20000200 	.word	0x20000200
 8001ef0:	40440000 	.word	0x40440000
 8001ef4:	20000258 	.word	0x20000258
 8001ef8:	20000230 	.word	0x20000230

08001efc <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f00:	2008      	movs	r0, #8
 8001f02:	f001 f93f 	bl	8003184 <rt_InitInfAndNaN>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <KEYPAD_Init>:
    {'7', '8', '9'},  // Tercera fila
    {'*', '0', '#'}   // Cuarta fila
};

void KEYPAD_Init(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
    // Configura PA5 (fila 1) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 20U);  // Limpia la configuración anterior de PA5
 8001f10:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a33      	ldr	r2, [pc, #204]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001f1a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 20U);   // Entrada con pull-down
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a30      	ldr	r2, [pc, #192]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f26:	6013      	str	r3, [r2, #0]

    // Configura PA8 (fila 2) como entrada con resistencia pull-down
    GPIOA->CRH &= ~(0xFUL << 0U);  // Limpia la configuración anterior de PA8
 8001f28:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f2e:	f023 030f 	bic.w	r3, r3, #15
 8001f32:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x8UL << 0U);   // Entrada con pull-down
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6053      	str	r3, [r2, #4]

    // Configura PA1 (fila 3) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 4U);  // Limpia la configuración anterior de PA1
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f4a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 4U);   // Entrada con pull-down
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	6013      	str	r3, [r2, #0]

    // Configura PA4 (fila 4) como entrada con resistencia pull-down
    GPIOA->CRL &= ~(0xFUL << 16U);  // Limpia la configuración anterior de PA4
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f5e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001f62:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x8UL << 16U);   // Entrada con pull-down
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f6e:	6013      	str	r3, [r2, #0]

    // Configura PA6 (columna 1) como salida push-pull
    GPIOA->CRL &= ~(0xFUL << 24U);  // Limpia la configuración anterior de PA6
 8001f70:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f76:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001f7a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x1UL << 24U);   // Salida push-pull
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

    // Configura PA7 (columna 2) como salida push-pull
    GPIOA->CRL &= ~(0xFUL << 28U);  // Limpia la configuración anterior de PA7
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f92:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x1UL << 28U);   // Salida push-pull
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	6013      	str	r3, [r2, #0]

    // Configura PA10 (columna 3) como salida push-pull
    GPIOA->CRH &= ~(0xFUL << 8U);  // Limpia la configuración anterior de PA10
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001faa:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x1UL << 8U);   // Salida push-pull
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6053      	str	r3, [r2, #4]

    // Inicializa todas las columnas (PA6, PA7 y PA10) en estado LOW (desactivadas)
    GPIOA->ODR &= ~(0x1UL << 6);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fc2:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR &= ~(0x1UL << 7);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fce:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR &= ~(0x1UL << 10);
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a03      	ldr	r2, [pc, #12]	@ (8001fe4 <KEYPAD_Init+0xd8>)
 8001fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40010800 	.word	0x40010800

08001fe8 <KEYPAD_ReadKey>:

char KEYPAD_ReadKey(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b08f      	sub	sp, #60	@ 0x3c
 8001fec:	af00      	add	r7, sp, #0
    char key = '\0';  // Inicializa sin carácter presionado
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Activa PA6 (columna 1) en HIGH
    GPIOA->ODR |= (0x1UL << 6);
 8001ff4:	4b91      	ldr	r3, [pc, #580]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a90      	ldr	r2, [pc, #576]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8001ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ffe:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 8002000:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00e      	beq.n	800202a <KEYPAD_ReadKey+0x42>
    {
        for (volatile int i = 0; i < 10000; i++);
 800200c:	2300      	movs	r3, #0
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002010:	e002      	b.n	8002018 <KEYPAD_ReadKey+0x30>
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	3301      	adds	r3, #1
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
 8002018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800201e:	4293      	cmp	r3, r2
 8002020:	ddf7      	ble.n	8002012 <KEYPAD_ReadKey+0x2a>
        key = KEYPAD_MAP[0][0];  // Retorna '1'
 8002022:	2331      	movs	r3, #49	@ 0x31
 8002024:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002028:	e03d      	b.n	80020a6 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 800202a:	4b84      	ldr	r3, [pc, #528]	@ (800223c <KEYPAD_ReadKey+0x254>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00e      	beq.n	8002054 <KEYPAD_ReadKey+0x6c>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203a:	e002      	b.n	8002042 <KEYPAD_ReadKey+0x5a>
 800203c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203e:	3301      	adds	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002044:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002048:	4293      	cmp	r3, r2
 800204a:	ddf7      	ble.n	800203c <KEYPAD_ReadKey+0x54>
        key = KEYPAD_MAP[1][0];  // Retorna '4'
 800204c:	2334      	movs	r3, #52	@ 0x34
 800204e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002052:	e028      	b.n	80020a6 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 8002054:	4b79      	ldr	r3, [pc, #484]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <KEYPAD_ReadKey+0x96>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002064:	e002      	b.n	800206c <KEYPAD_ReadKey+0x84>
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	3301      	adds	r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002072:	4293      	cmp	r3, r2
 8002074:	ddf7      	ble.n	8002066 <KEYPAD_ReadKey+0x7e>
        key = KEYPAD_MAP[2][0];  // Retorna '7'
 8002076:	2337      	movs	r3, #55	@ 0x37
 8002078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800207c:	e013      	b.n	80020a6 <KEYPAD_ReadKey+0xbe>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 800207e:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <KEYPAD_ReadKey+0xbe>
    {
        for (volatile int i = 0; i < 10000; i++);
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	e002      	b.n	8002096 <KEYPAD_ReadKey+0xae>
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	3301      	adds	r3, #1
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800209c:	4293      	cmp	r3, r2
 800209e:	ddf7      	ble.n	8002090 <KEYPAD_ReadKey+0xa8>
        key = KEYPAD_MAP[3][0];  // Retorna 'A'
 80020a0:	232a      	movs	r3, #42	@ 0x2a
 80020a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA6 (columna 1) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 6);
 80020a6:	4b65      	ldr	r3, [pc, #404]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a64      	ldr	r2, [pc, #400]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020b0:	60d3      	str	r3, [r2, #12]

    // Activa PA7 (columna 2) en HIGH
    GPIOA->ODR |= (0x1UL << 7);
 80020b2:	4b62      	ldr	r3, [pc, #392]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020bc:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 80020be:	4b5f      	ldr	r3, [pc, #380]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00e      	beq.n	80020e8 <KEYPAD_ReadKey+0x100>
    {
        for (volatile int i = 0; i < 10000; i++);
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	e002      	b.n	80020d6 <KEYPAD_ReadKey+0xee>
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	3301      	adds	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020dc:	4293      	cmp	r3, r2
 80020de:	ddf7      	ble.n	80020d0 <KEYPAD_ReadKey+0xe8>
        key = KEYPAD_MAP[0][1];  // Retorna '2'
 80020e0:	2332      	movs	r3, #50	@ 0x32
 80020e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80020e6:	e03d      	b.n	8002164 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 80020e8:	4b54      	ldr	r3, [pc, #336]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <KEYPAD_ReadKey+0x12a>
    {
        for (volatile int i = 0; i < 10000; i++);
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e002      	b.n	8002100 <KEYPAD_ReadKey+0x118>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002106:	4293      	cmp	r3, r2
 8002108:	ddf7      	ble.n	80020fa <KEYPAD_ReadKey+0x112>
        key = KEYPAD_MAP[1][1];  // Retorna '5'
 800210a:	2335      	movs	r3, #53	@ 0x35
 800210c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002110:	e028      	b.n	8002164 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00e      	beq.n	800213c <KEYPAD_ReadKey+0x154>
    {
        for (volatile int i = 0; i < 10000; i++);
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e002      	b.n	800212a <KEYPAD_ReadKey+0x142>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3301      	adds	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002130:	4293      	cmp	r3, r2
 8002132:	ddf7      	ble.n	8002124 <KEYPAD_ReadKey+0x13c>
        key = KEYPAD_MAP[2][1];  // Retorna '8'
 8002134:	2338      	movs	r3, #56	@ 0x38
 8002136:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800213a:	e013      	b.n	8002164 <KEYPAD_ReadKey+0x17c>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 800213c:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <KEYPAD_ReadKey+0x254>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <KEYPAD_ReadKey+0x17c>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e002      	b.n	8002154 <KEYPAD_ReadKey+0x16c>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f242 720f 	movw	r2, #9999	@ 0x270f
 800215a:	4293      	cmp	r3, r2
 800215c:	ddf7      	ble.n	800214e <KEYPAD_ReadKey+0x166>
        key = KEYPAD_MAP[3][1];  // Retorna 'B'
 800215e:	2330      	movs	r3, #48	@ 0x30
 8002160:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA7 (columna 2) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 7);
 8002164:	4b35      	ldr	r3, [pc, #212]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a34      	ldr	r2, [pc, #208]	@ (800223c <KEYPAD_ReadKey+0x254>)
 800216a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800216e:	60d3      	str	r3, [r2, #12]

    // Activa PA10 (columna 3) en HIGH
    GPIOA->ODR |= (0x1UL << 10);
 8002170:	4b32      	ldr	r3, [pc, #200]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a31      	ldr	r2, [pc, #196]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	60d3      	str	r3, [r2, #12]

    // Verifica cada fila (PA5, PA8, PA1, PA4)
    if (GPIOA->IDR & (0x1UL << 5))
 800217c:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <KEYPAD_ReadKey+0x254>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <KEYPAD_ReadKey+0x1be>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e002      	b.n	8002194 <KEYPAD_ReadKey+0x1ac>
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	3301      	adds	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f242 720f 	movw	r2, #9999	@ 0x270f
 800219a:	4293      	cmp	r3, r2
 800219c:	ddf7      	ble.n	800218e <KEYPAD_ReadKey+0x1a6>
        key = KEYPAD_MAP[0][2];  // Retorna '3'
 800219e:	2333      	movs	r3, #51	@ 0x33
 80021a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021a4:	e03d      	b.n	8002222 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 8))
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <KEYPAD_ReadKey+0x1e8>
    {
        for (volatile int i = 0; i < 10000; i++);
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e002      	b.n	80021be <KEYPAD_ReadKey+0x1d6>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021c4:	4293      	cmp	r3, r2
 80021c6:	ddf7      	ble.n	80021b8 <KEYPAD_ReadKey+0x1d0>
        key = KEYPAD_MAP[1][2];  // Retorna '6'
 80021c8:	2336      	movs	r3, #54	@ 0x36
 80021ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021ce:	e028      	b.n	8002222 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 1))
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <KEYPAD_ReadKey+0x212>
    {
        for (volatile int i = 0; i < 10000; i++);
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	e002      	b.n	80021e8 <KEYPAD_ReadKey+0x200>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021ee:	4293      	cmp	r3, r2
 80021f0:	ddf7      	ble.n	80021e2 <KEYPAD_ReadKey+0x1fa>
        key = KEYPAD_MAP[2][2];  // Retorna '9'
 80021f2:	2339      	movs	r3, #57	@ 0x39
 80021f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80021f8:	e013      	b.n	8002222 <KEYPAD_ReadKey+0x23a>
    }
    else if (GPIOA->IDR & (0x1UL << 4))
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <KEYPAD_ReadKey+0x254>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <KEYPAD_ReadKey+0x23a>
    {
        for (volatile int i = 0; i < 10000; i++);
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e002      	b.n	8002212 <KEYPAD_ReadKey+0x22a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002218:	4293      	cmp	r3, r2
 800221a:	ddf7      	ble.n	800220c <KEYPAD_ReadKey+0x224>
        key = KEYPAD_MAP[3][2];  // Retorna 'C'
 800221c:	2323      	movs	r3, #35	@ 0x23
 800221e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    // Desactiva PA10 (columna 3) volviéndola a LOW
    GPIOA->ODR &= ~(0x1UL << 10);
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <KEYPAD_ReadKey+0x254>)
 8002228:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800222c:	60d3      	str	r3, [r2, #12]

    return key;
 800222e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002232:	4618      	mov	r0, r3
 8002234:	373c      	adds	r7, #60	@ 0x3c
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40010800 	.word	0x40010800

08002240 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Configuracion de todos los pines hacia el LCD general purpose output push-pull, 10 MHz speed
  */
	RCC->APB2ENR	|=	 ( 0x1UL <<  4U );//			IO port C clock enable
 8002246:	4b62      	ldr	r3, [pc, #392]	@ (80023d0 <LCD_Init+0x190>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	4a61      	ldr	r2, [pc, #388]	@ (80023d0 <LCD_Init+0x190>)
 800224c:	f043 0310 	orr.w	r3, r3, #16
 8002250:	6193      	str	r3, [r2, #24]
	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8002252:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <LCD_Init+0x194>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5f      	ldr	r2, [pc, #380]	@ (80023d4 <LCD_Init+0x194>)
 8002258:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800225c:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 800225e:	4b5d      	ldr	r3, [pc, #372]	@ (80023d4 <LCD_Init+0x194>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5c      	ldr	r2, [pc, #368]	@ (80023d4 <LCD_Init+0x194>)
 8002264:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 8002268:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 800226a:	4b5a      	ldr	r3, [pc, #360]	@ (80023d4 <LCD_Init+0x194>)
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4959      	ldr	r1, [pc, #356]	@ (80023d4 <LCD_Init+0x194>)
 8002270:	4b59      	ldr	r3, [pc, #356]	@ (80023d8 <LCD_Init+0x198>)
 8002272:	4013      	ands	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 8002276:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <LCD_Init+0x194>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4956      	ldr	r1, [pc, #344]	@ (80023d4 <LCD_Init+0x194>)
 800227c:	4b57      	ldr	r3, [pc, #348]	@ (80023dc <LCD_Init+0x19c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002282:	4b54      	ldr	r3, [pc, #336]	@ (80023d4 <LCD_Init+0x194>)
 8002284:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002288:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 800228a:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <LCD_Init+0x194>)
 800228c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002290:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 8002292:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <LCD_Init+0x194>)
 8002294:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002298:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <LCD_Init+0x194>)
 800229c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022a0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 80022a2:	4b4c      	ldr	r3, [pc, #304]	@ (80023d4 <LCD_Init+0x194>)
 80022a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80022aa:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <LCD_Init+0x194>)
 80022ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022b0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80022b2:	4b48      	ldr	r3, [pc, #288]	@ (80023d4 <LCD_Init+0x194>)
 80022b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b8:	611a      	str	r2, [r3, #16]

	tim2_delay(TIM2_TIME_50MS);//  50ms
 80022ba:	4849      	ldr	r0, [pc, #292]	@ (80023e0 <LCD_Init+0x1a0>)
 80022bc:	f001 f93c 	bl	8003538 <tim2_delay>

	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80022c0:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <LCD_Init+0x194>)
 80022c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80022c8:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <LCD_Init+0x194>)
 80022ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ce:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <LCD_Init+0x194>)
 80022d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022d6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80022d8:	4b3e      	ldr	r3, [pc, #248]	@ (80023d4 <LCD_Init+0x194>)
 80022da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022de:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80022e0:	f000 fa24 	bl	800272c <LCD_Pulse_EN>
	tim2_delay(TIM2_TIME_5MS);//	5ms
 80022e4:	483f      	ldr	r0, [pc, #252]	@ (80023e4 <LCD_Init+0x1a4>)
 80022e6:	f001 f927 	bl	8003538 <tim2_delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80022ea:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <LCD_Init+0x194>)
 80022ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80022f2:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <LCD_Init+0x194>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022f8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80022fa:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <LCD_Init+0x194>)
 80022fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002300:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002302:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <LCD_Init+0x194>)
 8002304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002308:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 800230a:	f000 fa0f 	bl	800272c <LCD_Pulse_EN>
	tim2_delay(TIM2_TIME_100uS);//	100us
 800230e:	4836      	ldr	r0, [pc, #216]	@ (80023e8 <LCD_Init+0x1a8>)
 8002310:	f001 f912 	bl	8003538 <tim2_delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002314:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <LCD_Init+0x194>)
 8002316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800231c:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <LCD_Init+0x194>)
 800231e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002322:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002324:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <LCD_Init+0x194>)
 8002326:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800232a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800232c:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <LCD_Init+0x194>)
 800232e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002332:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002334:	f000 f9fa 	bl	800272c <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 8002338:	bf00      	nop
 800233a:	f000 f9a3 	bl	8002684 <LCD_Busy>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1fa      	bne.n	800233a <LCD_Init+0xfa>
	/* Initial 'Function Set' to change 4-bit mode 			*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <LCD_Init+0x194>)
 8002346:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <LCD_Init+0x194>)
 800234e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002352:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <LCD_Init+0x194>)
 8002356:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800235a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <LCD_Init+0x194>)
 800235e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002362:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002364:	f000 f9e2 	bl	800272c <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 8002368:	bf00      	nop
 800236a:	f000 f98b 	bl	8002684 <LCD_Busy>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1fa      	bne.n	800236a <LCD_Init+0x12a>
	/* 'Function Set' (I=1, N and F as required)			*/
	LCD_Write_Cmd( 0x28U );//					2-line display, 5x7 dot
 8002374:	2028      	movs	r0, #40	@ 0x28
 8002376:	f000 f8a1 	bl	80024bc <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)			*/
	LCD_Write_Cmd( 0x08U );//					display, cursor and blinking off
 800237a:	2008      	movs	r0, #8
 800237c:	f000 f89e 	bl	80024bc <LCD_Write_Cmd>
	/* 'Clear Display'						*/
	LCD_Write_Cmd( 0x01U );//
 8002380:	2001      	movs	r0, #1
 8002382:	f000 f89b 	bl	80024bc <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)			*/
	LCD_Write_Cmd( 0x06U );//					cursor increment by 1, shift off
 8002386:	2006      	movs	r0, #6
 8002388:	f000 f898 	bl	80024bc <LCD_Write_Cmd>
	/* Initialization Ends						*/
	LCD_Write_Cmd( 0x0FU );//					display, cursor and blinking on
 800238c:	200f      	movs	r0, #15
 800238e:	f000 f895 	bl	80024bc <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 8002392:	2040      	movs	r0, #64	@ 0x40
 8002394:	f000 f892 	bl	80024bc <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8002398:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <LCD_Init+0x1ac>)
 800239a:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800239c:	2300      	movs	r3, #0
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	e00c      	b.n	80023bc <LCD_Init+0x17c>
		LCD_Put_Char( *p );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f993 3000 	ldrsb.w	r3, [r3]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f89a 	bl	80024e4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3301      	adds	r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b3f      	cmp	r3, #63	@ 0x3f
 80023c0:	d9ef      	bls.n	80023a2 <LCD_Init+0x162>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 80023c2:	2080      	movs	r0, #128	@ 0x80
 80023c4:	f000 f87a 	bl	80024bc <LCD_Write_Cmd>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40011000 	.word	0x40011000
 80023d8:	fff11111 	.word	0xfff11111
 80023dc:	00011111 	.word	0x00011111
 80023e0:	3d4ccccd 	.word	0x3d4ccccd
 80023e4:	3ba3d70a 	.word	0x3ba3d70a
 80023e8:	38d1b717 	.word	0x38d1b717
 80023ec:	080079a8 	.word	0x080079a8

080023f0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//				Bit[0]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <LCD_Out_Data4+0x84>)
 8002406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	e003      	b.n	8002416 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <LCD_Out_Data4+0x84>)
 8002410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002414:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//				Bit[1]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8002420:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <LCD_Out_Data4+0x84>)
 8002422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	e003      	b.n	8002432 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <LCD_Out_Data4+0x84>)
 800242c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002430:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//				Bit[2]
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 800243c:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <LCD_Out_Data4+0x84>)
 800243e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	e003      	b.n	800244e <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <LCD_Out_Data4+0x84>)
 8002448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800244c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//				Bit[3]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <LCD_Out_Data4+0x84>)
 800245a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800245e:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 8002460:	e003      	b.n	800246a <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 8002462:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <LCD_Out_Data4+0x84>)
 8002464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002468:	611a      	str	r2, [r3, #16]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40011000 	.word	0x40011000

08002478 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ffb1 	bl	80023f0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800248e:	f000 f94d 	bl	800272c <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ffa8 	bl	80023f0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80024a0:	f000 f944 	bl	800272c <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80024a4:	bf00      	nop
 80024a6:	f000 f8ed 	bl	8002684 <LCD_Busy>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1fa      	bne.n	80024a6 <LCD_Write_Byte+0x2e>
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;//			RS=0 (seleccion de comando)
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <LCD_Write_Cmd+0x24>)
 80024c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80024cc:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ffd1 	bl	8002478 <LCD_Write_Byte>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40011000 	.word	0x40011000

080024e4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;//			RS=1 (seleccion de caracteres)
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <LCD_Put_Char+0x20>)
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ffbe 	bl	8002478 <LCD_Write_Byte>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40011000 	.word	0x40011000

08002508 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	460a      	mov	r2, r1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	4613      	mov	r3, r2
 8002516:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	3b01      	subs	r3, #1
 800251c:	71bb      	strb	r3, [r7, #6]
	line--;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	3b01      	subs	r3, #1
 8002522:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	b2da      	uxtb	r2, r3
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4413      	add	r3, r2
 800252e:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3b80      	subs	r3, #128	@ 0x80
 800253a:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffbc 	bl	80024bc <LCD_Write_Cmd>
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8002554:	2300      	movs	r3, #0
 8002556:	81fb      	strh	r3, [r7, #14]
 8002558:	e00d      	b.n	8002576 <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );//				envia 1 byte al LCD
 800255a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffbd 	bl	80024e4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 800256a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256e:	b29b      	uxth	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	b29b      	uxth	r3, r3
 8002574:	81fb      	strh	r3, [r7, #14]
 8002576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	dc06      	bgt.n	800258c <LCD_Put_Str+0x40>
 800257e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e6      	bne.n	800255a <LCD_Put_Str+0xe>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
	int16_t p;
	int16_t f = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	82bb      	strh	r3, [r7, #20]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 80025a2:	2300      	movs	r3, #0
 80025a4:	827b      	strh	r3, [r7, #18]
 80025a6:	e064      	b.n	8002672 <LCD_Put_Num+0xde>
		p = 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	f1c3 0304 	rsb	r3, r3, #4
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	823b      	strh	r3, [r7, #16]
 80025b6:	e00c      	b.n	80025d2 <LCD_Put_Num+0x3e>
			p = p * 10;
 80025b8:	8afb      	ldrh	r3, [r7, #22]
 80025ba:	461a      	mov	r2, r3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 80025c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	823b      	strh	r3, [r7, #16]
 80025d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dcee      	bgt.n	80025b8 <LCD_Put_Num+0x24>
		ch[ i ] = ( num / p );
 80025da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025e2:	fb92 f2f3 	sdiv	r2, r2, r3
 80025e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025ea:	b252      	sxtb	r2, r2
 80025ec:	3318      	adds	r3, #24
 80025ee:	443b      	add	r3, r7
 80025f0:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( num >= p && !f )
 80025f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	db05      	blt.n	800260c <LCD_Put_Num+0x78>
 8002600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <LCD_Put_Num+0x78>
			f = 1;
 8002608:	2301      	movs	r3, #1
 800260a:	82bb      	strh	r3, [r7, #20]
		num = num - ch[ i ] * p;
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002612:	3318      	adds	r3, #24
 8002614:	443b      	add	r3, r7
 8002616:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 800261a:	b29b      	uxth	r3, r3
 800261c:	8af9      	ldrh	r1, [r7, #22]
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	b29b      	uxth	r3, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b29b      	uxth	r3, r3
 8002628:	80fb      	strh	r3, [r7, #6]
		ch[ i ] = ch[ i ] + 48;
 800262a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800262e:	3318      	adds	r3, #24
 8002630:	443b      	add	r3, r7
 8002632:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3330      	adds	r3, #48	@ 0x30
 800263a:	b2da      	uxtb	r2, r3
 800263c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002640:	b252      	sxtb	r2, r2
 8002642:	3318      	adds	r3, #24
 8002644:	443b      	add	r3, r7
 8002646:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( f )
 800264a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <LCD_Put_Num+0xd2>
			LCD_Put_Char( ch[ i ] );
 8002652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002656:	3318      	adds	r3, #24
 8002658:	443b      	add	r3, r7
 800265a:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff3f 	bl	80024e4 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 8002666:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	827b      	strh	r3, [r7, #18]
 8002672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002676:	2b04      	cmp	r3, #4
 8002678:	dd96      	ble.n	80025a8 <LCD_Put_Num+0x14>
	}
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 8002688:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <LCD_Busy+0xa0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a25      	ldr	r2, [pc, #148]	@ (8002724 <LCD_Busy+0xa0>)
 800268e:	f423 2330 	bic.w	r3, r3, #720896	@ 0xb0000
 8002692:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 8002694:	4b23      	ldr	r3, [pc, #140]	@ (8002724 <LCD_Busy+0xa0>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a22      	ldr	r2, [pc, #136]	@ (8002724 <LCD_Busy+0xa0>)
 800269a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800269e:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 80026a0:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <LCD_Busy+0xa0>)
 80026a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026a6:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <LCD_Busy+0xa0>)
 80026aa:	2280      	movs	r2, #128	@ 0x80
 80026ac:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <LCD_Busy+0xa0>)
 80026b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b4:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_100uS) ;//	100us
 80026b6:	481c      	ldr	r0, [pc, #112]	@ (8002728 <LCD_Busy+0xa4>)
 80026b8:	f000 ff3e 	bl	8003538 <tim2_delay>
	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) {//			if D7 is set, then
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <LCD_Busy+0xa0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <LCD_Busy+0x70>
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <LCD_Busy+0xa0>)
 80026ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026ce:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <LCD_Busy+0xa0>)
 80026d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026d6:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <LCD_Busy+0xa0>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <LCD_Busy+0xa0>)
 80026de:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80026e2:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <LCD_Busy+0xa0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <LCD_Busy+0xa0>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	6053      	str	r3, [r2, #4]
		return 1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e014      	b.n	800271e <LCD_Busy+0x9a>
	} else {
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <LCD_Busy+0xa0>)
 80026f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026fa:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <LCD_Busy+0xa0>)
 80026fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002702:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002704:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <LCD_Busy+0xa0>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <LCD_Busy+0xa0>)
 800270a:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 800270e:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <LCD_Busy+0xa0>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a03      	ldr	r2, [pc, #12]	@ (8002724 <LCD_Busy+0xa0>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6053      	str	r3, [r2, #4]
		return 0;
 800271c:	2300      	movs	r3, #0
	}
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40011000 	.word	0x40011000
 8002728:	38d1b717 	.word	0x38d1b717

0800272c <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <LCD_Pulse_EN+0x34>)
 8002732:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002736:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_10uS) ;//	10us
 8002738:	480a      	ldr	r0, [pc, #40]	@ (8002764 <LCD_Pulse_EN+0x38>)
 800273a:	f000 fefd 	bl	8003538 <tim2_delay>
	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;//			habilita pin EN ON
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <LCD_Pulse_EN+0x34>)
 8002740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002744:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_10uS) ;//	10us
 8002746:	4807      	ldr	r0, [pc, #28]	@ (8002764 <LCD_Pulse_EN+0x38>)
 8002748:	f000 fef6 	bl	8003538 <tim2_delay>
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//			habilita pin EN OFF
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <LCD_Pulse_EN+0x34>)
 800274e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002752:	611a      	str	r2, [r3, #16]
	tim2_delay(TIM2_TIME_1MS) ;//	1ms
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <LCD_Pulse_EN+0x3c>)
 8002756:	f000 feef 	bl	8003538 <tim2_delay>
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40011000 	.word	0x40011000
 8002764:	3727c5ac 	.word	0x3727c5ac
 8002768:	3a83126f 	.word	0x3a83126f

0800276c <main>:

float time;
uint16_t start, end, total;

int main(void)
{
 800276c:	b598      	push	{r3, r4, r7, lr}
 800276e:	af00      	add	r7, sp, #0

//.............. TASK INIT .....................
	TIM4->CNT = 0;   // Reiniciar el contador
 8002770:	4b99      	ldr	r3, [pc, #612]	@ (80029d8 <main+0x26c>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 8002776:	4b98      	ldr	r3, [pc, #608]	@ (80029d8 <main+0x26c>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b97      	ldr	r3, [pc, #604]	@ (80029dc <main+0x270>)
 800277e:	801a      	strh	r2, [r3, #0]
	Task1_Init();   // Ejecutar la tarea
 8002780:	f000 f9f8 	bl	8002b74 <Task1_Init>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 8002784:	4b94      	ldr	r3, [pc, #592]	@ (80029d8 <main+0x26c>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b95      	ldr	r3, [pc, #596]	@ (80029e0 <main+0x274>)
 800278c:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 800278e:	4b94      	ldr	r3, [pc, #592]	@ (80029e0 <main+0x274>)
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	4b92      	ldr	r3, [pc, #584]	@ (80029dc <main+0x270>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b92      	ldr	r3, [pc, #584]	@ (80029e4 <main+0x278>)
 800279c:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 800279e:	4b91      	ldr	r3, [pc, #580]	@ (80029e4 <main+0x278>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe faaa 	bl	8000cfc <__aeabi_i2f>
 80027a8:	4603      	mov	r3, r0
 80027aa:	498f      	ldr	r1, [pc, #572]	@ (80029e8 <main+0x27c>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe faf9 	bl	8000da4 <__aeabi_fmul>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461c      	mov	r4, r3
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <main+0x26c>)
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	3301      	adds	r3, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa99 	bl	8000cf4 <__aeabi_ui2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7fe faec 	bl	8000da4 <__aeabi_fmul>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b86      	ldr	r3, [pc, #536]	@ (80029ec <main+0x280>)
 80027d2:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 80027d4:	4b85      	ldr	r3, [pc, #532]	@ (80029ec <main+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe35 	bl	8000448 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4883      	ldr	r0, [pc, #524]	@ (80029f0 <main+0x284>)
 80027e4:	f001 fc90 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 80027e8:	4b7b      	ldr	r3, [pc, #492]	@ (80029d8 <main+0x26c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 80027ee:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <main+0x26c>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b79      	ldr	r3, [pc, #484]	@ (80029dc <main+0x270>)
 80027f6:	801a      	strh	r2, [r3, #0]
	Task2_Init();   // Ejecutar la tarea
 80027f8:	f000 fa80 	bl	8002cfc <Task2_Init>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 80027fc:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <main+0x26c>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b77      	ldr	r3, [pc, #476]	@ (80029e0 <main+0x274>)
 8002804:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 8002806:	4b76      	ldr	r3, [pc, #472]	@ (80029e0 <main+0x274>)
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	4b74      	ldr	r3, [pc, #464]	@ (80029dc <main+0x270>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b74      	ldr	r3, [pc, #464]	@ (80029e4 <main+0x278>)
 8002814:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 8002816:	4b73      	ldr	r3, [pc, #460]	@ (80029e4 <main+0x278>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fa6e 	bl	8000cfc <__aeabi_i2f>
 8002820:	4603      	mov	r3, r0
 8002822:	4971      	ldr	r1, [pc, #452]	@ (80029e8 <main+0x27c>)
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fabd 	bl	8000da4 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	461c      	mov	r4, r3
 800282e:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <main+0x26c>)
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	3301      	adds	r3, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fa5d 	bl	8000cf4 <__aeabi_ui2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4619      	mov	r1, r3
 800283e:	4620      	mov	r0, r4
 8002840:	f7fe fab0 	bl	8000da4 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	4b68      	ldr	r3, [pc, #416]	@ (80029ec <main+0x280>)
 800284a:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 800284c:	4b67      	ldr	r3, [pc, #412]	@ (80029ec <main+0x280>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fdf9 	bl	8000448 <__aeabi_f2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4865      	ldr	r0, [pc, #404]	@ (80029f0 <main+0x284>)
 800285c:	f001 fc54 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 8002860:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <main+0x26c>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 8002866:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <main+0x26c>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b5b      	ldr	r3, [pc, #364]	@ (80029dc <main+0x270>)
 800286e:	801a      	strh	r2, [r3, #0]
	Task3_Init();   // Ejecutar la tarea
 8002870:	f000 fa4c 	bl	8002d0c <Task3_Init>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 8002874:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <main+0x26c>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b59      	ldr	r3, [pc, #356]	@ (80029e0 <main+0x274>)
 800287c:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 800287e:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <main+0x274>)
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	4b56      	ldr	r3, [pc, #344]	@ (80029dc <main+0x270>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b56      	ldr	r3, [pc, #344]	@ (80029e4 <main+0x278>)
 800288c:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 800288e:	4b55      	ldr	r3, [pc, #340]	@ (80029e4 <main+0x278>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fa32 	bl	8000cfc <__aeabi_i2f>
 8002898:	4603      	mov	r3, r0
 800289a:	4953      	ldr	r1, [pc, #332]	@ (80029e8 <main+0x27c>)
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fa81 	bl	8000da4 <__aeabi_fmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461c      	mov	r4, r3
 80028a6:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <main+0x26c>)
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	3301      	adds	r3, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fa21 	bl	8000cf4 <__aeabi_ui2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4619      	mov	r1, r3
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7fe fa74 	bl	8000da4 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b4a      	ldr	r3, [pc, #296]	@ (80029ec <main+0x280>)
 80028c2:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 80028c4:	4b49      	ldr	r3, [pc, #292]	@ (80029ec <main+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fdbd 	bl	8000448 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4847      	ldr	r0, [pc, #284]	@ (80029f0 <main+0x284>)
 80028d4:	f001 fc18 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 80028d8:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <main+0x26c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 80028de:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <main+0x26c>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <main+0x270>)
 80028e6:	801a      	strh	r2, [r3, #0]
	Task4_Init();   // Ejecutar la tarea
 80028e8:	f000 fa24 	bl	8002d34 <Task4_Init>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 80028ec:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <main+0x26c>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b3b      	ldr	r3, [pc, #236]	@ (80029e0 <main+0x274>)
 80028f4:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 80028f6:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <main+0x274>)
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	4b38      	ldr	r3, [pc, #224]	@ (80029dc <main+0x270>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <main+0x278>)
 8002904:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <main+0x278>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f9f6 	bl	8000cfc <__aeabi_i2f>
 8002910:	4603      	mov	r3, r0
 8002912:	4935      	ldr	r1, [pc, #212]	@ (80029e8 <main+0x27c>)
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fa45 	bl	8000da4 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	461c      	mov	r4, r3
 800291e:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <main+0x26c>)
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	3301      	adds	r3, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9e5 	bl	8000cf4 <__aeabi_ui2f>
 800292a:	4603      	mov	r3, r0
 800292c:	4619      	mov	r1, r3
 800292e:	4620      	mov	r0, r4
 8002930:	f7fe fa38 	bl	8000da4 <__aeabi_fmul>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <main+0x280>)
 800293a:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <main+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fd81 	bl	8000448 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4829      	ldr	r0, [pc, #164]	@ (80029f0 <main+0x284>)
 800294c:	f001 fbdc 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 8002950:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <main+0x26c>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <main+0x26c>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b1f      	ldr	r3, [pc, #124]	@ (80029dc <main+0x270>)
 800295e:	801a      	strh	r2, [r3, #0]
	Task1();   // Ejecutar la tarea
 8002960:	f000 f9ee 	bl	8002d40 <Task1>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <main+0x26c>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <main+0x274>)
 800296c:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <main+0x274>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <main+0x270>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29a      	uxth	r2, r3
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <main+0x278>)
 800297c:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 800297e:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <main+0x278>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe f9ba 	bl	8000cfc <__aeabi_i2f>
 8002988:	4603      	mov	r3, r0
 800298a:	4917      	ldr	r1, [pc, #92]	@ (80029e8 <main+0x27c>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fa09 	bl	8000da4 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	461c      	mov	r4, r3
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <main+0x26c>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	3301      	adds	r3, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe f9a9 	bl	8000cf4 <__aeabi_ui2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4619      	mov	r1, r3
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7fe f9fc 	bl	8000da4 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <main+0x280>)
 80029b2:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <main+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd45 	bl	8000448 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	480b      	ldr	r0, [pc, #44]	@ (80029f0 <main+0x284>)
 80029c4:	f001 fba0 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <main+0x26c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 80029ce:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <main+0x26c>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	e00e      	b.n	80029f4 <main+0x288>
 80029d6:	bf00      	nop
 80029d8:	40000800 	.word	0x40000800
 80029dc:	2000028c 	.word	0x2000028c
 80029e0:	2000028e 	.word	0x2000028e
 80029e4:	20000290 	.word	0x20000290
 80029e8:	328637bd 	.word	0x328637bd
 80029ec:	20000288 	.word	0x20000288
 80029f0:	08007118 	.word	0x08007118
 80029f4:	4b58      	ldr	r3, [pc, #352]	@ (8002b58 <main+0x3ec>)
 80029f6:	801a      	strh	r2, [r3, #0]
	Task2();   // Ejecutar la tarea
 80029f8:	f000 f9ae 	bl	8002d58 <Task2>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 80029fc:	4b57      	ldr	r3, [pc, #348]	@ (8002b5c <main+0x3f0>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b57      	ldr	r3, [pc, #348]	@ (8002b60 <main+0x3f4>)
 8002a04:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 8002a06:	4b56      	ldr	r3, [pc, #344]	@ (8002b60 <main+0x3f4>)
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	4b53      	ldr	r3, [pc, #332]	@ (8002b58 <main+0x3ec>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <main+0x3f8>)
 8002a14:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 8002a16:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <main+0x3f8>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f96e 	bl	8000cfc <__aeabi_i2f>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4951      	ldr	r1, [pc, #324]	@ (8002b68 <main+0x3fc>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f9bd 	bl	8000da4 <__aeabi_fmul>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b5c <main+0x3f0>)
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	3301      	adds	r3, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f95d 	bl	8000cf4 <__aeabi_ui2f>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f9b0 	bl	8000da4 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <main+0x400>)
 8002a4a:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 8002a4c:	4b47      	ldr	r3, [pc, #284]	@ (8002b6c <main+0x400>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fcf9 	bl	8000448 <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4845      	ldr	r0, [pc, #276]	@ (8002b70 <main+0x404>)
 8002a5c:	f001 fb54 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 8002a60:	4b3e      	ldr	r3, [pc, #248]	@ (8002b5c <main+0x3f0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 8002a66:	4b3d      	ldr	r3, [pc, #244]	@ (8002b5c <main+0x3f0>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <main+0x3ec>)
 8002a6e:	801a      	strh	r2, [r3, #0]
	Task3();   // Ejecutar la tarea
 8002a70:	f000 f9da 	bl	8002e28 <Task3>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <main+0x3f0>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <main+0x3f4>)
 8002a7c:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <main+0x3f4>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <main+0x3ec>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <main+0x3f8>)
 8002a8c:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 8002a8e:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <main+0x3f8>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f932 	bl	8000cfc <__aeabi_i2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4933      	ldr	r1, [pc, #204]	@ (8002b68 <main+0x3fc>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f981 	bl	8000da4 <__aeabi_fmul>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461c      	mov	r4, r3
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <main+0x3f0>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f921 	bl	8000cf4 <__aeabi_ui2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7fe f974 	bl	8000da4 <__aeabi_fmul>
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <main+0x400>)
 8002ac2:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 8002ac4:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <main+0x400>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fcbd 	bl	8000448 <__aeabi_f2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4827      	ldr	r0, [pc, #156]	@ (8002b70 <main+0x404>)
 8002ad4:	f001 fb18 	bl	8004108 <iprintf>

	TIM4->CNT = 0;   // Reiniciar el contador
 8002ad8:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <main+0x3f0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
	start = TIM4->CNT;  // Leer el contador al inicio de la tarea
 8002ade:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <main+0x3f0>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <main+0x3ec>)
 8002ae6:	801a      	strh	r2, [r3, #0]
	Task4();   // Ejecutar la tarea
 8002ae8:	f000 f9c6 	bl	8002e78 <Task4>
	end = TIM4->CNT;  // Leer el contador al final de la tarea
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <main+0x3f0>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <main+0x3f4>)
 8002af4:	801a      	strh	r2, [r3, #0]
	total = end - start;  // Calcular el tiempo total transcurrido
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <main+0x3f4>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <main+0x3ec>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <main+0x3f8>)
 8002b04:	801a      	strh	r2, [r3, #0]
	time = T_HCLK * total * (TIM4->PSC + 1);  // Calcular el tiempo en segundos
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <main+0x3f8>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f8f6 	bl	8000cfc <__aeabi_i2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4915      	ldr	r1, [pc, #84]	@ (8002b68 <main+0x3fc>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f945 	bl	8000da4 <__aeabi_fmul>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <main+0x3f0>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	3301      	adds	r3, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe f8e5 	bl	8000cf4 <__aeabi_ui2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fe f938 	bl	8000da4 <__aeabi_fmul>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <main+0x400>)
 8002b3a:	601a      	str	r2, [r3, #0]
	printf("Time is: %f\r\n", time);  // Imprimir el tiempo
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <main+0x400>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fc81 	bl	8000448 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4809      	ldr	r0, [pc, #36]	@ (8002b70 <main+0x404>)
 8002b4c:	f001 fadc 	bl	8004108 <iprintf>
 8002b50:	2300      	movs	r3, #0
//		Task1();
//		Task2();
//		Task3();
//		Task4();
//	}
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd98      	pop	{r3, r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000028c 	.word	0x2000028c
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	2000028e 	.word	0x2000028e
 8002b64:	20000290 	.word	0x20000290
 8002b68:	328637bd 	.word	0x328637bd
 8002b6c:	20000288 	.word	0x20000288
 8002b70:	08007118 	.word	0x08007118

08002b74 <Task1_Init>:

void Task1_Init (void){
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
	/*System Clock (SYSCLK) Configuration or */
	FLASH->ACR		&=	~( 0X5UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
 8002b78:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce8 <Task1_Init+0x174>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce8 <Task1_Init+0x174>)
 8002b7e:	f023 0305 	bic.w	r3, r3, #5
 8002b82:	6013      	str	r3, [r2, #0]
	FLASH->ACR		|=	 ( 0X2UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
 8002b84:	4b58      	ldr	r3, [pc, #352]	@ (8002ce8 <Task1_Init+0x174>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a57      	ldr	r2, [pc, #348]	@ (8002ce8 <Task1_Init+0x174>)
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	6013      	str	r3, [r2, #0]
	RCC->CFGR		&=	~( 0x1UL << 16U)  // PLL HSI Clock /2 selected as PLL input clock
 8002b90:	4b56      	ldr	r3, [pc, #344]	@ (8002cec <Task1_Init+0x178>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a55      	ldr	r2, [pc, #340]	@ (8002cec <Task1_Init+0x178>)
 8002b96:	f423 339d 	bic.w	r3, r3, #80384	@ 0x13a00
 8002b9a:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8002b9e:	6053      	str	r3, [r2, #4]
					&	~( 0x7UL << 11U)  // APB2 prescaler /1
					&	~( 0x3UL <<  8U)  // APB1 prescaler /2 (APB1 must not exceeed 36Mhz)
					&	~( 0xFUL <<  4U); // AHB perscaler /1
	RCC->CFGR		|=	 ( 0xFUL << 18U)  // PLL input clock x 16 (PLLMUL bits)
 8002ba0:	4b52      	ldr	r3, [pc, #328]	@ (8002cec <Task1_Init+0x178>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a51      	ldr	r2, [pc, #324]	@ (8002cec <Task1_Init+0x178>)
 8002ba6:	f443 1370 	orr.w	r3, r3, #3932160	@ 0x3c0000
 8002baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bae:	6053      	str	r3, [r2, #4]
					|	 ( 0x4UL <<  8U); // APB1 Prescaler /2
	RCC->CR			|= 	 ( 0x1UL << 24U); // PLL2 ON
 8002bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8002cec <Task1_Init+0x178>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cec <Task1_Init+0x178>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bba:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & ~(0x1UL << 25U )));// Wait until PLL is locked
 8002bbc:	bf00      	nop
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002cec <Task1_Init+0x178>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f9      	beq.n	8002bbe <Task1_Init+0x4a>
	RCC->CFGR 		&=  ~( 0x1UL <<  0U); // PLL used as system clock (SW bits)
 8002bca:	4b48      	ldr	r3, [pc, #288]	@ (8002cec <Task1_Init+0x178>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a47      	ldr	r2, [pc, #284]	@ (8002cec <Task1_Init+0x178>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]
	RCC->CFGR		|=	 ( 0x2UL <<  0U); // PLL used as system clock (SW bits)
 8002bd6:	4b45      	ldr	r3, [pc, #276]	@ (8002cec <Task1_Init+0x178>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a44      	ldr	r2, [pc, #272]	@ (8002cec <Task1_Init+0x178>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6053      	str	r3, [r2, #4]
	while( 0x8UL != (RCC->CFGR & 0xCUL)); // wait until PLL is switched
 8002be2:	bf00      	nop
 8002be4:	4b41      	ldr	r3, [pc, #260]	@ (8002cec <Task1_Init+0x178>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d1f9      	bne.n	8002be4 <Task1_Init+0x70>

//-------------------------------------------------------------------------------

	// Enable clock for required peripherals
	RCC->APB2ENR    |=  ( 0x1UL <<  2U )    // IO port A clock enable
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cec <Task1_Init+0x178>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8002cec <Task1_Init+0x178>)
 8002bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6193      	str	r3, [r2, #24]
					|   ( 0x1UL << 14U ); 	// USART 1 clock enable
	RCC->APB2ENR    |=  ( 0x1UL <<  4U );   // IO port C clock enable
 8002c00:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <Task1_Init+0x178>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a39      	ldr	r2, [pc, #228]	@ (8002cec <Task1_Init+0x178>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR    |=  ( 0x1UL <<  9U );   // ADC1 clock enable
 8002c0c:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <Task1_Init+0x178>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a36      	ldr	r2, [pc, #216]	@ (8002cec <Task1_Init+0x178>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c16:	6193      	str	r3, [r2, #24]

//-------------------------------------------------------------------------------

	// Configure ADC1 clock peripheral
	RCC->CFGR		|= 	( 0x3  <<  14);	// PCLK2 divided by 8
 8002c18:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <Task1_Init+0x178>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a33      	ldr	r2, [pc, #204]	@ (8002cec <Task1_Init+0x178>)
 8002c1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c22:	6053      	str	r3, [r2, #4]


    // CONFIGURE THE ADC1 PIN3 TO INPUT THE VOLTAGE
    // GPIOx_BSRR modified to reset pin 0 of port A
	GPIOA->BSRR |= (0x1UL << 16U); // Immediate value
 8002c24:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <Task1_Init+0x17c>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a31      	ldr	r2, [pc, #196]	@ (8002cf0 <Task1_Init+0x17c>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6113      	str	r3, [r2, #16]
	// GPIOx_CRL modified to configure pin 0 as input analog
	GPIOA->CRL  &=  ~(0x3UL << 2U) & ~(0x3UL << 0U);
 8002c30:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <Task1_Init+0x17c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <Task1_Init+0x17c>)
 8002c36:	f023 030f 	bic.w	r3, r3, #15
 8002c3a:	6013      	str	r3, [r2, #0]


	// INITIALIZE AND ENABLE THE ADC1 PERIPHERAL
	ADC1->CR1		&=	~(0xF << 16UL);
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <Task1_Init+0x180>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <Task1_Init+0x180>)
 8002c42:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8002c46:	6053      	str	r3, [r2, #4]
	// DETERMINE THE RESULT FORMAT
	ADC1->CR2		&= ~(0x1  << 11UL)  // Right Alignment
 8002c48:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <Task1_Init+0x180>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a29      	ldr	r2, [pc, #164]	@ (8002cf4 <Task1_Init+0x180>)
 8002c4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c52:	6093      	str	r3, [r2, #8]
					|	(0x1  <<  1UL); // Continuos conversion mode

	// DETERMINE THE SAMPLE TIME
	// ¿Cómo se determina el Sample time adecuado?
	ADC1->SMPR2		&= ~(0x7  <<  0UL); // 1.5 Cycles
 8002c54:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <Task1_Init+0x180>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4a26      	ldr	r2, [pc, #152]	@ (8002cf4 <Task1_Init+0x180>)
 8002c5a:	f023 0307 	bic.w	r3, r3, #7
 8002c5e:	6113      	str	r3, [r2, #16]
	// THE SECUENCES AND/OR THE NUMBER OF CONVERSACIONS FOR THE ADC REGULAR CHANNELS
	ADC1->SQR1		&= ~(0xF  <<  20UL);// 1 Conversion for regular channels
 8002c60:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <Task1_Init+0x180>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <Task1_Init+0x180>)
 8002c66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	// SELECT THE CHANNEL FOR THE FIRST ADC CONVERSATION
	ADC1->SQR3		&= ~(0x1F  << 0UL);// first conversion in channel 0
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <Task1_Init+0x180>)
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c70:	4a20      	ldr	r2, [pc, #128]	@ (8002cf4 <Task1_Init+0x180>)
 8002c72:	f023 031f 	bic.w	r3, r3, #31
 8002c76:	6353      	str	r3, [r2, #52]	@ 0x34

	// ENABLE THE ADC MODULE
	ADC1->CR2		|=  (0x1  <<  0UL); // ADC Enable and start conversion
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <Task1_Init+0x180>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <Task1_Init+0x180>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6093      	str	r3, [r2, #8]
	// ADC Calibration
	ADC1->CR2		|=  (0x1  <<  2UL); // Start the calibration
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <Task1_Init+0x180>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <Task1_Init+0x180>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6093      	str	r3, [r2, #8]
    // Wait until after calibration is complete
    while((ADC1->CR2 & (0x1UL << 2U)) == 0){}
 8002c90:	bf00      	nop
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <Task1_Init+0x180>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f9      	beq.n	8002c92 <Task1_Init+0x11e>

//-------------------------------------------------------------------------------

	// Reset pin11 of port B
	GPIOB->BSRR = (0x1UL << 27U); // Immediate value
 8002c9e:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <Task1_Init+0x184>)
 8002ca0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ca4:	611a      	str	r2, [r3, #16]

	// Configure pin11 as output
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <Task1_Init+0x184>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <Task1_Init+0x184>)
			   & ~(0x3UL << 12U)    // Clear CNF11[1:0] bits
			   & ~(0x2UL << 10U);   // Clear MODE11_1 bit
 8002cac:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cb0:	6053      	str	r3, [r2, #4]

	// Select pin11 max speed of 10MHz
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <Task1_Init+0x184>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <Task1_Init+0x184>)
			   | (0x1UL << 10U);    // Set MODE11_0 bit
 8002cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cbc:	6053      	str	r3, [r2, #4]

	// Reset pin12 of port B
	GPIOB->BSRR = (0x1UL << 28U); // Immediate value
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <Task1_Init+0x184>)
 8002cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cc4:	611a      	str	r2, [r3, #16]

	// Configure pin12 as output
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <Task1_Init+0x184>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf8 <Task1_Init+0x184>)
			   & ~(0x3UL << 16U)    // Clear CNF12[1:0] bits
			   & ~(0x2UL << 14U);   // Clear MODE12_1 bit
 8002ccc:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cd0:	6053      	str	r3, [r2, #4]

	// Select pin12 max speed of 10MHz
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <Task1_Init+0x184>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <Task1_Init+0x184>)
			   | (0x1UL << 14U);    // Set MODE12_0 bit
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
	GPIOB->CRH = GPIOB->CRH         // Actual value
 8002cdc:	6053      	str	r3, [r2, #4]

//-------------------------------------------------------------------------------

}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	40012400 	.word	0x40012400
 8002cf8:	40010c00 	.word	0x40010c00

08002cfc <Task2_Init>:

void Task2_Init (void){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

	KEYPAD_Init();
 8002d00:	f7ff f904 	bl	8001f0c <KEYPAD_Init>
	EngTrModel_initialize();
 8002d04:	f7ff f8fa 	bl	8001efc <EngTrModel_initialize>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <Task3_Init>:

void Task3_Init (void){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	// Configure USART1_TX pin (PA9) as alternate function output push-pull, max speed 10MHz
    GPIOA->CRH  &=  ~( 0x1UL <<  6U )
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <Task3_Init+0x24>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <Task3_Init+0x24>)
 8002d16:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002d1a:	6053      	str	r3, [r2, #4]
                &   ~( 0x2UL <<  4U );
    GPIOA->CRH  |=  ( 0x2UL <<  6U )
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <Task3_Init+0x24>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a03      	ldr	r2, [pc, #12]	@ (8002d30 <Task3_Init+0x24>)
 8002d22:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d26:	6053      	str	r3, [r2, #4]
                |   ( 0x1UL <<  4U );

	USER_USART1_Init();
 8002d28:	f000 fc7c 	bl	8003624 <USER_USART1_Init>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40010800 	.word	0x40010800

08002d34 <Task4_Init>:

void Task4_Init (void){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	LCD_Init();
 8002d38:	f7ff fa82 	bl	8002240 <LCD_Init>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <Task1>:

void Task1 (void){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	readValue = USE_ADC1_MODULE();
 8002d44:	f000 f8ee 	bl	8002f24 <USE_ADC1_MODULE>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b01      	ldr	r3, [pc, #4]	@ (8002d54 <Task1+0x14>)
 8002d4e:	801a      	strh	r2, [r3, #0]
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000282 	.word	0x20000282

08002d58 <Task2>:

void Task2 (void){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0

	ThrottleValue = ((readValue*100)/4095);
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <Task2+0xa8>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	2364      	movs	r3, #100	@ 0x64
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <Task2+0xac>)
 8002d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d6e:	441a      	add	r2, r3
 8002d70:	12d2      	asrs	r2, r2, #11
 8002d72:	17db      	asrs	r3, r3, #31
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <Task2+0xb0>)
 8002d78:	6013      	str	r3, [r2, #0]

	if (ThrottleValue < 5){
 8002d7a:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <Task2+0xb0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	dc02      	bgt.n	8002d88 <Task2+0x30>
		ThrottleValue = 5;
 8002d82:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <Task2+0xb0>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	601a      	str	r2, [r3, #0]
	}

	EngTrModel_U.Throttle = ThrottleValue;
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <Task2+0xb0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fb49 	bl	8000424 <__aeabi_i2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	491d      	ldr	r1, [pc, #116]	@ (8002e0c <Task2+0xb4>)
 8002d98:	e9c1 2300 	strd	r2, r3, [r1]

	pressedButton = KEYPAD_ReadKey();
 8002d9c:	f7ff f924 	bl	8001fe8 <KEYPAD_ReadKey>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <Task2+0xb8>)
 8002da6:	701a      	strb	r2, [r3, #0]

	if(pressedButton == '2')
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <Task2+0xb8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b32      	cmp	r3, #50	@ 0x32
 8002db0:	d109      	bne.n	8002dc6 <Task2+0x6e>
	{
		EngTrModel_U.BrakeTorque = 100.0;
 8002db2:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <Task2+0xb4>)
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <Task2+0xbc>)
 8002dba:	e9c1 2302 	strd	r2, r3, [r1, #8]
		direccion = "Break";
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <Task2+0xc0>)
 8002dc0:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <Task2+0xc4>)
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e018      	b.n	8002df8 <Task2+0xa0>
	}
	else if(pressedButton == '1')
 8002dc6:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <Task2+0xb8>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b31      	cmp	r3, #49	@ 0x31
 8002dce:	d103      	bne.n	8002dd8 <Task2+0x80>
	{
		direccion = "Left";
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <Task2+0xc0>)
 8002dd2:	4a13      	ldr	r2, [pc, #76]	@ (8002e20 <Task2+0xc8>)
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e00f      	b.n	8002df8 <Task2+0xa0>
	}
	else if(pressedButton == '3')
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <Task2+0xb8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b33      	cmp	r3, #51	@ 0x33
 8002de0:	d103      	bne.n	8002dea <Task2+0x92>
	{
		direccion = "Right";
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <Task2+0xc0>)
 8002de4:	4a0f      	ldr	r2, [pc, #60]	@ (8002e24 <Task2+0xcc>)
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e006      	b.n	8002df8 <Task2+0xa0>
	}
	else
	{
		EngTrModel_U.BrakeTorque = 0.0;
 8002dea:	4908      	ldr	r1, [pc, #32]	@ (8002e0c <Task2+0xb4>)
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	// Update the values into the vehicle model
	EngTrModel_step();
 8002df8:	f7fe fda6 	bl	8001948 <EngTrModel_step>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000282 	.word	0x20000282
 8002e04:	80080081 	.word	0x80080081
 8002e08:	20000284 	.word	0x20000284
 8002e0c:	20000258 	.word	0x20000258
 8002e10:	20000280 	.word	0x20000280
 8002e14:	40590000 	.word	0x40590000
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	08007128 	.word	0x08007128
 8002e20:	08007130 	.word	0x08007130
 8002e24:	08007138 	.word	0x08007138

08002e28 <Task3>:

void Task3 (void){
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af06      	add	r7, sp, #24
	// Send the output values
	printf("%f,%f,%f,%s\n\r", EngTrModel_Y.VehicleSpeed, EngTrModel_Y.Gear ,EngTrModel_Y.EngineSpeed, direccion);
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <Task3+0x40>)
 8002e30:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <Task3+0x40>)
 8002e36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e3a:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <Task3+0x40>)
 8002e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e40:	4e0a      	ldr	r6, [pc, #40]	@ (8002e6c <Task3+0x44>)
 8002e42:	6836      	ldr	r6, [r6, #0]
 8002e44:	9604      	str	r6, [sp, #16]
 8002e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <Task3+0x48>)
 8002e54:	f001 f958 	bl	8004108 <iprintf>
	tim2_delay(TIM2_TIME_50MS);
 8002e58:	4806      	ldr	r0, [pc, #24]	@ (8002e74 <Task3+0x4c>)
 8002e5a:	f000 fb6d 	bl	8003538 <tim2_delay>
}
 8002e5e:	bf00      	nop
 8002e60:	3704      	adds	r7, #4
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000268 	.word	0x20000268
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	08007140 	.word	0x08007140
 8002e74:	3d4ccccd 	.word	0x3d4ccccd

08002e78 <Task4>:

void Task4 (void){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	LCD_Clear();
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff fb1d 	bl	80024bc <LCD_Write_Cmd>
//	LCD_Set_Cursor( 1, 1 );
//	LCD_Put_Str( "RPM:" );
//	CD_Put_Num( EngTrModel_B.EngineRPM );
//	tim2_delay(TIM2_TIME_200MS);

	LCD_Set_Cursor( 1, 1 );
 8002e82:	2101      	movs	r1, #1
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7ff fb3f 	bl	8002508 <LCD_Set_Cursor>
	LCD_Put_Str( "VS:" );
 8002e8a:	481f      	ldr	r0, [pc, #124]	@ (8002f08 <Task4+0x90>)
 8002e8c:	f7ff fb5e 	bl	800254c <LCD_Put_Str>
	LCD_Put_Num( EngTrModel_Y.VehicleSpeed );
 8002e90:	4b1e      	ldr	r3, [pc, #120]	@ (8002f0c <Task4+0x94>)
 8002e92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7fd fddd 	bl	8000a58 <__aeabi_d2iz>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb76 	bl	8002594 <LCD_Put_Num>
	LCD_Put_Str( "   G:");
 8002ea8:	4819      	ldr	r0, [pc, #100]	@ (8002f10 <Task4+0x98>)
 8002eaa:	f7ff fb4f 	bl	800254c <LCD_Put_Str>
	LCD_Put_Num( EngTrModel_Y.Gear );
 8002eae:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <Task4+0x94>)
 8002eb0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7fd fdce 	bl	8000a58 <__aeabi_d2iz>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fb67 	bl	8002594 <LCD_Put_Num>
	LCD_Set_Cursor( 2, 1 );
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f7ff fb1d 	bl	8002508 <LCD_Set_Cursor>
	LCD_Put_Str( "ES:");
 8002ece:	4811      	ldr	r0, [pc, #68]	@ (8002f14 <Task4+0x9c>)
 8002ed0:	f7ff fb3c 	bl	800254c <LCD_Put_Str>
	LCD_Put_Num( EngTrModel_Y.EngineSpeed );
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <Task4+0x94>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fdbb 	bl	8000a58 <__aeabi_d2iz>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fb54 	bl	8002594 <LCD_Put_Num>
	LCD_Put_Str( " D: ");
 8002eec:	480a      	ldr	r0, [pc, #40]	@ (8002f18 <Task4+0xa0>)
 8002eee:	f7ff fb2d 	bl	800254c <LCD_Put_Str>
	LCD_Put_Str( direccion );
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <Task4+0xa4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fb28 	bl	800254c <LCD_Put_Str>
	tim2_delay(TIM2_TIME_200MS);
 8002efc:	4808      	ldr	r0, [pc, #32]	@ (8002f20 <Task4+0xa8>)
 8002efe:	f000 fb1b 	bl	8003538 <tim2_delay>
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	08007150 	.word	0x08007150
 8002f0c:	20000268 	.word	0x20000268
 8002f10:	08007154 	.word	0x08007154
 8002f14:	0800715c 	.word	0x0800715c
 8002f18:	08007160 	.word	0x08007160
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	3e4ccccd 	.word	0x3e4ccccd

08002f24 <USE_ADC1_MODULE>:

uint16_t USE_ADC1_MODULE(void){
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
	ADC1->CR2	|=  (0x1  <<  0UL); // ADC Enable and start conversion
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <USE_ADC1_MODULE+0x34>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <USE_ADC1_MODULE+0x34>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6093      	str	r3, [r2, #8]

	// Wait until conversation is done (SR reg EOC bit)
    while ((ADC1->SR & (0x1UL << 1U)) == 0);
 8002f36:	bf00      	nop
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <USE_ADC1_MODULE+0x34>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f9      	beq.n	8002f38 <USE_ADC1_MODULE+0x14>

    // Read the value in DR(15:0) of ADC1
    uint16_t readValue = ADC1->DR & 0xFFFF;
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <USE_ADC1_MODULE+0x34>)
 8002f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f48:	80fb      	strh	r3, [r7, #6]

    return readValue;
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40012400 	.word	0x40012400

08002f5c <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002f62:	2340      	movs	r3, #64	@ 0x40
 8002f64:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d10a      	bne.n	8002f8e <rtGetInf+0x32>
    inf = rtGetInfF();
 8002f78:	f000 f836 	bl	8002fe8 <rtGetInfF>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa62 	bl	8000448 <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002f8c:	e022      	b.n	8002fd4 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <rtGetInf+0x54>
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d009      	beq.n	8002fc2 <rtGetInf+0x66>
 8002fae:	e011      	b.n	8002fd4 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <rtGetInf+0x88>)
 8002fb2:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8002fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002fc0:	e008      	b.n	8002fd4 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <rtGetInf+0x88>)
 8002fc4:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8002fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fce:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002fd2:	bf00      	nop
      }
    }
  }

  return inf;
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	7ff00000 	.word	0x7ff00000

08002fe8 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002fee:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002ff2:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002ff4:	687b      	ldr	r3, [r7, #4]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003006:	2340      	movs	r3, #64	@ 0x40
 8003008:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b20      	cmp	r3, #32
 800301a:	d10a      	bne.n	8003032 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 800301c:	f000 f836 	bl	800308c <rtGetMinusInfF>
 8003020:	4603      	mov	r3, r0
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa10 	bl	8000448 <__aeabi_f2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003030:	e022      	b.n	8003078 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <rtGetMinusInf+0x54>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d009      	beq.n	8003066 <rtGetMinusInf+0x66>
 8003052:	e011      	b.n	8003078 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <rtGetMinusInf+0x88>)
 8003056:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 800305c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003060:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003064:	e008      	b.n	8003078 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <rtGetMinusInf+0x88>)
 8003068:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 800306e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003072:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003076:	bf00      	nop
      }
    }
  }

  return minf;
 8003078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	fff00000 	.word	0xfff00000

0800308c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8003092:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <rtGetMinusInfF+0x18>)
 8003094:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8003096:	687b      	ldr	r3, [r7, #4]
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	ff800000 	.word	0xff800000

080030a8 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80030ae:	2340      	movs	r3, #64	@ 0x40
 80030b0:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d10a      	bne.n	80030da <rtGetNaN+0x32>
    nan = rtGetNaNF();
 80030c4:	f000 f838 	bl	8003138 <rtGetNaNF>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd f9bc 	bl	8000448 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80030d8:	e024      	b.n	8003124 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80030de:	f107 0310 	add.w	r3, r7, #16
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <rtGetNaN+0x54>
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d009      	beq.n	800310e <rtGetNaN+0x66>
 80030fa:	e013      	b.n	8003124 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <rtGetNaN+0x8c>)
 80030fe:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800310c:	e00a      	b.n	8003124 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 800310e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003112:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003118:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 800311a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003122:	bf00      	nop
      }
    }
  }

  return nan;
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	fff80000 	.word	0xfff80000

08003138 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 8003144:	2301      	movs	r3, #1
 8003146:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <rtGetNaNF+0x2c>
 800315e:	2b01      	cmp	r3, #1
 8003160:	d003      	beq.n	800316a <rtGetNaNF+0x32>
 8003162:	e006      	b.n	8003172 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <rtGetNaNF+0x48>)
 8003166:	60bb      	str	r3, [r7, #8]
      break;
 8003168:	e003      	b.n	8003172 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 800316a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800316e:	60bb      	str	r3, [r7, #8]
      break;
 8003170:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8003172:	68bb      	ldr	r3, [r7, #8]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	ffc00000 	.word	0xffc00000

08003184 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800318c:	f7ff ff8c 	bl	80030a8 <rtGetNaN>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4911      	ldr	r1, [pc, #68]	@ (80031dc <rt_InitInfAndNaN+0x58>)
 8003196:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800319a:	f7ff ffcd 	bl	8003138 <rtGetNaNF>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a0f      	ldr	r2, [pc, #60]	@ (80031e0 <rt_InitInfAndNaN+0x5c>)
 80031a2:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 80031a4:	f7ff feda 	bl	8002f5c <rtGetInf>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	490d      	ldr	r1, [pc, #52]	@ (80031e4 <rt_InitInfAndNaN+0x60>)
 80031ae:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 80031b2:	f7ff ff19 	bl	8002fe8 <rtGetInfF>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a0b      	ldr	r2, [pc, #44]	@ (80031e8 <rt_InitInfAndNaN+0x64>)
 80031ba:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 80031bc:	f7ff ff20 	bl	8003000 <rtGetMinusInf>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4909      	ldr	r1, [pc, #36]	@ (80031ec <rt_InitInfAndNaN+0x68>)
 80031c6:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80031ca:	f7ff ff5f 	bl	800308c <rtGetMinusInfF>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <rt_InitInfAndNaN+0x6c>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200002a8 	.word	0x200002a8
 80031e0:	200002b8 	.word	0x200002b8
 80031e4:	20000298 	.word	0x20000298
 80031e8:	200002b0 	.word	0x200002b0
 80031ec:	200002a0 	.word	0x200002a0
 80031f0:	200002b4 	.word	0x200002b4

080031f4 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80031fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <rtIsInf+0x40>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003208:	f7fd fbde 	bl	80009c8 <__aeabi_dcmpeq>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <rtIsInf+0x32>
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <rtIsInf+0x44>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800321c:	f7fd fbd4 	bl	80009c8 <__aeabi_dcmpeq>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <rtIsInf+0x36>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <rtIsInf+0x38>
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000298 	.word	0x20000298
 8003238:	200002a0 	.word	0x200002a0

0800323c <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b20      	cmp	r3, #32
 8003254:	d10b      	bne.n	800326e <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 8003256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800325a:	f7fd fc45 	bl	8000ae8 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f84d 	bl	8003300 <rtIsNaNF>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800326c:	e040      	b.n	80032f0 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 800326e:	2301      	movs	r3, #1
 8003270:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003272:	f107 031c 	add.w	r3, r7, #28
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <rtIsNaN+0x54>
 800328a:	2b01      	cmp	r3, #1
 800328c:	d018      	beq.n	80032c0 <rtIsNaN+0x84>
 800328e:	e02f      	b.n	80032f0 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003294:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <rtIsNaN+0xc0>)
 800329c:	4013      	ands	r3, r2
                             0x7FF00000 &&
 800329e:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <rtIsNaN+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d109      	bne.n	80032b8 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80032ae:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <rtIsNaN+0x7e>
 80032b8:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80032ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80032be:	e017      	b.n	80032f0 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80032c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <rtIsNaN+0xc0>)
 80032cc:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80032ce:	4a0b      	ldr	r2, [pc, #44]	@ (80032fc <rtIsNaN+0xc0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d109      	bne.n	80032e8 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80032de:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <rtIsNaN+0xac>
                             0x7FF00000 &&
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <rtIsNaN+0xae>
 80032e8:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80032ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80032ee:	bf00      	nop
      }
    }
  }

  return result;
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	@ 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	7ff00000 	.word	0x7ff00000

08003300 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 8003312:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003316:	d106      	bne.n	8003326 <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <rtIsNaNF+0x26>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <rtIsNaNF+0x28>
 8003326:	2300      	movs	r3, #0
 8003328:	b2db      	uxtb	r3, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return 1;
 8003338:	2301      	movs	r3, #1
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <_kill>:

int _kill(int pid, int sig)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800334c:	f000 fefa 	bl	8004144 <__errno>
 8003350:	4603      	mov	r3, r0
 8003352:	2216      	movs	r2, #22
 8003354:	601a      	str	r2, [r3, #0]
  return -1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_exit>:

void _exit (int status)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800336a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ffe7 	bl	8003342 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <_exit+0x12>

08003378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e00a      	b.n	80033a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4601      	mov	r1, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	60ba      	str	r2, [r7, #8]
 8003396:	b2ca      	uxtb	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbf0      	blt.n	800338a <_read+0x12>
  }

  return len;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033d8:	605a      	str	r2, [r3, #4]
  return 0;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <_isatty>:

int _isatty(int file)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033ee:	2301      	movs	r3, #1
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
	...

08003414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <_sbrk+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <_sbrk+0x60>)
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003428:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003430:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <_sbrk+0x64>)
 8003432:	4a12      	ldr	r2, [pc, #72]	@ (800347c <_sbrk+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003436:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003444:	f000 fe7e 	bl	8004144 <__errno>
 8003448:	4603      	mov	r3, r0
 800344a:	220c      	movs	r2, #12
 800344c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003452:	e009      	b.n	8003468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	4a05      	ldr	r2, [pc, #20]	@ (8003478 <_sbrk+0x64>)
 8003464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20005000 	.word	0x20005000
 8003474:	00000400 	.word	0x00000400
 8003478:	200002bc 	.word	0x200002bc
 800347c:	20000410 	.word	0x20000410

08003480 <tim2_get_prescaler>:

#include "timers.h"
#include "main.h"
#include <math.h>

uint16_t tim2_get_prescaler(float time) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
    return (uint16_t)(ceil((time / (T_HCLK * ((65535 + 1) - 0))) - 1));
 8003488:	490f      	ldr	r1, [pc, #60]	@ (80034c8 <tim2_get_prescaler+0x48>)
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fd3e 	bl	8000f0c <__aeabi_fdiv>
 8003490:	4603      	mov	r3, r0
 8003492:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd fb7a 	bl	8000b90 <__aeabi_fsub>
 800349c:	4603      	mov	r3, r0
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc ffd2 	bl	8000448 <__aeabi_f2d>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f002 ff14 	bl	80062d8 <ceil>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd faf6 	bl	8000aa8 <__aeabi_d2uiz>
 80034bc:	4603      	mov	r3, r0
 80034be:	b29b      	uxth	r3, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	3a8637bd 	.word	0x3a8637bd

080034cc <tim2_get_init_count>:

uint16_t tim2_get_init_count(float time, uint16_t prescaler) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
    return (uint16_t)((65535 + 1) - (round(time / (T_HCLK * (prescaler + 1)))));
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	3301      	adds	r3, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fc0d 	bl	8000cfc <__aeabi_i2f>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4912      	ldr	r1, [pc, #72]	@ (8003530 <tim2_get_init_count+0x64>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fc5c 	bl	8000da4 <__aeabi_fmul>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd fd0b 	bl	8000f0c <__aeabi_fdiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fc ffa5 	bl	8000448 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f002 ffe3 	bl	80064d0 <round>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	4908      	ldr	r1, [pc, #32]	@ (8003534 <tim2_get_init_count+0x68>)
 8003514:	f7fc fe38 	bl	8000188 <__aeabi_dsub>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd fac2 	bl	8000aa8 <__aeabi_d2uiz>
 8003524:	4603      	mov	r3, r0
 8003526:	b29b      	uxth	r3, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	328637bd 	.word	0x328637bd
 8003534:	40f00000 	.word	0x40f00000

08003538 <tim2_delay>:

void tim2_delay(float time) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    uint16_t prescaler = tim2_get_prescaler(time);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff9d 	bl	8003480 <tim2_get_prescaler>
 8003546:	4603      	mov	r3, r0
 8003548:	81fb      	strh	r3, [r7, #14]
    uint16_t init_count = tim2_get_init_count(time, prescaler);
 800354a:	89fb      	ldrh	r3, [r7, #14]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffbc 	bl	80034cc <tim2_get_init_count>
 8003554:	4603      	mov	r3, r0
 8003556:	81bb      	strh	r3, [r7, #12]

    // Enable Timer 2 clock
    RCC->APB1ENR |= (0x1 << 0U);
 8003558:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <tim2_delay+0x9c>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <tim2_delay+0x9c>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	61d3      	str	r3, [r2, #28]

    RCC->APB2ENR    |=  ( 0x1UL <<  4U );
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <tim2_delay+0x9c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <tim2_delay+0x9c>)
 800356a:	f043 0310 	orr.w	r3, r3, #16
 800356e:	6193      	str	r3, [r2, #24]

    // Clear control register 1 of Timer 2 to reset configuration
    TIM2->CR1 &= ~(0x72);
 8003570:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800357a:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 800357e:	6013      	str	r3, [r2, #0]

    // Clear status register of Timer 2 to reset any pending flags
    TIM2->SR &= ~(0x1UL << 0U);
 8003580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6113      	str	r3, [r2, #16]

    // Set auto-reload register of Timer 2 to maximum value for longest delay
    TIM2->ARR = 65535;
 8003590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set counter register of Timer 2 to initial value for desired delay
    TIM2->CNT = init_count;
 800359a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800359e:	89bb      	ldrh	r3, [r7, #12]
 80035a0:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set prescaler register of Timer 2 for desired time base
    TIM2->PSC = prescaler;
 80035a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	6293      	str	r3, [r2, #40]	@ 0x28

    // Start Timer 2 by setting control register 1
    TIM2->CR1 |= (0x1 << 0U);
 80035aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6013      	str	r3, [r2, #0]

    // Wait until Timer 2 update event occurs
    while ((TIM2->SR & (0x1UL << 0U)) == 0);
 80035ba:	bf00      	nop
 80035bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f8      	beq.n	80035bc <tim2_delay+0x84>

}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000

080035d8 <_write>:
#include "main.h"
#include "uart.h"

static void USER_USART1_Send_8bit( uint8_t Data );

int _write(int  file, char *ptr, int len){
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e00f      	b.n	800360a <_write+0x32>
		while(!( USART1 -> SR & USART_SR_TXE ));
 80035ea:	bf00      	nop
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <_write+0x48>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f9      	beq.n	80035ec <_write+0x14>
		USART1 -> DR = *ptr++;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	60ba      	str	r2, [r7, #8]
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <_write+0x48>)
 8003602:	605a      	str	r2, [r3, #4]
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	dbeb      	blt.n	80035ea <_write+0x12>
	}
	return len;
 8003612:	687b      	ldr	r3, [r7, #4]
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40013800 	.word	0x40013800

08003624 <USER_USART1_Init>:

void USER_USART1_Init( void ){
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <USER_USART1_Init+0x50>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <USER_USART1_Init+0x50>)
 800362e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003632:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 8003634:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <USER_USART1_Init+0x50>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a0e      	ldr	r2, [pc, #56]	@ (8003674 <USER_USART1_Init+0x50>)
 800363a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800363e:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <USER_USART1_Init+0x50>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	4a0b      	ldr	r2, [pc, #44]	@ (8003674 <USER_USART1_Init+0x50>)
 8003646:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800364a:	6113      	str	r3, [r2, #16]
	USART1->BRR	 =	 USARTDIV;//		Step 5 Desired baud rate
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <USER_USART1_Init+0x50>)
 800364e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8003652:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 8003654:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <USER_USART1_Init+0x50>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <USER_USART1_Init+0x50>)
 800365a:	f043 0308 	orr.w	r3, r3, #8
 800365e:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <USER_USART1_Init+0x50>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a03      	ldr	r2, [pc, #12]	@ (8003674 <USER_USART1_Init+0x50>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40013800 	.word	0x40013800

08003678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003678:	480d      	ldr	r0, [pc, #52]	@ (80036b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800367c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003680:	480c      	ldr	r0, [pc, #48]	@ (80036b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003682:	490d      	ldr	r1, [pc, #52]	@ (80036b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003684:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <LoopForever+0xe>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003698:	4c0a      	ldr	r4, [pc, #40]	@ (80036c4 <LoopForever+0x16>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036a6:	f000 fd53 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036aa:	f7ff f85f 	bl	800276c <main>

080036ae <LoopForever>:

LoopForever:
  b LoopForever
 80036ae:	e7fe      	b.n	80036ae <LoopForever>
  ldr   r0, =_estack
 80036b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80036bc:	08007d98 	.word	0x08007d98
  ldr r2, =_sbss
 80036c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80036c4:	2000040c 	.word	0x2000040c

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>

080036ca <__cvt>:
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d0:	461d      	mov	r5, r3
 80036d2:	bfbb      	ittet	lt
 80036d4:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80036d8:	461d      	movlt	r5, r3
 80036da:	2300      	movge	r3, #0
 80036dc:	232d      	movlt	r3, #45	@ 0x2d
 80036de:	b088      	sub	sp, #32
 80036e0:	4614      	mov	r4, r2
 80036e2:	bfb8      	it	lt
 80036e4:	4614      	movlt	r4, r2
 80036e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80036e8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80036ea:	7013      	strb	r3, [r2, #0]
 80036ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80036ee:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80036f2:	f023 0820 	bic.w	r8, r3, #32
 80036f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036fa:	d005      	beq.n	8003708 <__cvt+0x3e>
 80036fc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003700:	d100      	bne.n	8003704 <__cvt+0x3a>
 8003702:	3601      	adds	r6, #1
 8003704:	2302      	movs	r3, #2
 8003706:	e000      	b.n	800370a <__cvt+0x40>
 8003708:	2303      	movs	r3, #3
 800370a:	aa07      	add	r2, sp, #28
 800370c:	9204      	str	r2, [sp, #16]
 800370e:	aa06      	add	r2, sp, #24
 8003710:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003714:	e9cd 3600 	strd	r3, r6, [sp]
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	f000 fdd8 	bl	80042d0 <_dtoa_r>
 8003720:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003724:	4607      	mov	r7, r0
 8003726:	d119      	bne.n	800375c <__cvt+0x92>
 8003728:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800372a:	07db      	lsls	r3, r3, #31
 800372c:	d50e      	bpl.n	800374c <__cvt+0x82>
 800372e:	eb00 0906 	add.w	r9, r0, r6
 8003732:	2200      	movs	r2, #0
 8003734:	2300      	movs	r3, #0
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f7fd f945 	bl	80009c8 <__aeabi_dcmpeq>
 800373e:	b108      	cbz	r0, 8003744 <__cvt+0x7a>
 8003740:	f8cd 901c 	str.w	r9, [sp, #28]
 8003744:	2230      	movs	r2, #48	@ 0x30
 8003746:	9b07      	ldr	r3, [sp, #28]
 8003748:	454b      	cmp	r3, r9
 800374a:	d31e      	bcc.n	800378a <__cvt+0xc0>
 800374c:	4638      	mov	r0, r7
 800374e:	9b07      	ldr	r3, [sp, #28]
 8003750:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003752:	1bdb      	subs	r3, r3, r7
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	b008      	add	sp, #32
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003760:	eb00 0906 	add.w	r9, r0, r6
 8003764:	d1e5      	bne.n	8003732 <__cvt+0x68>
 8003766:	7803      	ldrb	r3, [r0, #0]
 8003768:	2b30      	cmp	r3, #48	@ 0x30
 800376a:	d10a      	bne.n	8003782 <__cvt+0xb8>
 800376c:	2200      	movs	r2, #0
 800376e:	2300      	movs	r3, #0
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fd f928 	bl	80009c8 <__aeabi_dcmpeq>
 8003778:	b918      	cbnz	r0, 8003782 <__cvt+0xb8>
 800377a:	f1c6 0601 	rsb	r6, r6, #1
 800377e:	f8ca 6000 	str.w	r6, [sl]
 8003782:	f8da 3000 	ldr.w	r3, [sl]
 8003786:	4499      	add	r9, r3
 8003788:	e7d3      	b.n	8003732 <__cvt+0x68>
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	9107      	str	r1, [sp, #28]
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e7d9      	b.n	8003746 <__cvt+0x7c>

08003792 <__exponent>:
 8003792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003794:	2900      	cmp	r1, #0
 8003796:	bfb6      	itet	lt
 8003798:	232d      	movlt	r3, #45	@ 0x2d
 800379a:	232b      	movge	r3, #43	@ 0x2b
 800379c:	4249      	neglt	r1, r1
 800379e:	2909      	cmp	r1, #9
 80037a0:	7002      	strb	r2, [r0, #0]
 80037a2:	7043      	strb	r3, [r0, #1]
 80037a4:	dd29      	ble.n	80037fa <__exponent+0x68>
 80037a6:	f10d 0307 	add.w	r3, sp, #7
 80037aa:	461d      	mov	r5, r3
 80037ac:	270a      	movs	r7, #10
 80037ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80037b2:	461a      	mov	r2, r3
 80037b4:	fb07 1416 	mls	r4, r7, r6, r1
 80037b8:	3430      	adds	r4, #48	@ 0x30
 80037ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80037be:	460c      	mov	r4, r1
 80037c0:	2c63      	cmp	r4, #99	@ 0x63
 80037c2:	4631      	mov	r1, r6
 80037c4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80037c8:	dcf1      	bgt.n	80037ae <__exponent+0x1c>
 80037ca:	3130      	adds	r1, #48	@ 0x30
 80037cc:	1e94      	subs	r4, r2, #2
 80037ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80037d2:	4623      	mov	r3, r4
 80037d4:	1c41      	adds	r1, r0, #1
 80037d6:	42ab      	cmp	r3, r5
 80037d8:	d30a      	bcc.n	80037f0 <__exponent+0x5e>
 80037da:	f10d 0309 	add.w	r3, sp, #9
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	42ac      	cmp	r4, r5
 80037e2:	bf88      	it	hi
 80037e4:	2300      	movhi	r3, #0
 80037e6:	3302      	adds	r3, #2
 80037e8:	4403      	add	r3, r0
 80037ea:	1a18      	subs	r0, r3, r0
 80037ec:	b003      	add	sp, #12
 80037ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80037f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80037f8:	e7ed      	b.n	80037d6 <__exponent+0x44>
 80037fa:	2330      	movs	r3, #48	@ 0x30
 80037fc:	3130      	adds	r1, #48	@ 0x30
 80037fe:	7083      	strb	r3, [r0, #2]
 8003800:	70c1      	strb	r1, [r0, #3]
 8003802:	1d03      	adds	r3, r0, #4
 8003804:	e7f1      	b.n	80037ea <__exponent+0x58>
	...

08003808 <_printf_float>:
 8003808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	b091      	sub	sp, #68	@ 0x44
 800380e:	460c      	mov	r4, r1
 8003810:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003814:	4616      	mov	r6, r2
 8003816:	461f      	mov	r7, r3
 8003818:	4605      	mov	r5, r0
 800381a:	f000 fc8f 	bl	800413c <_localeconv_r>
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	9308      	str	r3, [sp, #32]
 8003824:	f7fc fca4 	bl	8000170 <strlen>
 8003828:	2300      	movs	r3, #0
 800382a:	930e      	str	r3, [sp, #56]	@ 0x38
 800382c:	f8d8 3000 	ldr.w	r3, [r8]
 8003830:	9009      	str	r0, [sp, #36]	@ 0x24
 8003832:	3307      	adds	r3, #7
 8003834:	f023 0307 	bic.w	r3, r3, #7
 8003838:	f103 0208 	add.w	r2, r3, #8
 800383c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003840:	f8d4 b000 	ldr.w	fp, [r4]
 8003844:	f8c8 2000 	str.w	r2, [r8]
 8003848:	e9d3 8900 	ldrd	r8, r9, [r3]
 800384c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003852:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800385a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800385e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003862:	4b9c      	ldr	r3, [pc, #624]	@ (8003ad4 <_printf_float+0x2cc>)
 8003864:	f7fd f8e2 	bl	8000a2c <__aeabi_dcmpun>
 8003868:	bb70      	cbnz	r0, 80038c8 <_printf_float+0xc0>
 800386a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800386e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003872:	4b98      	ldr	r3, [pc, #608]	@ (8003ad4 <_printf_float+0x2cc>)
 8003874:	f7fd f8bc 	bl	80009f0 <__aeabi_dcmple>
 8003878:	bb30      	cbnz	r0, 80038c8 <_printf_float+0xc0>
 800387a:	2200      	movs	r2, #0
 800387c:	2300      	movs	r3, #0
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f7fd f8ab 	bl	80009dc <__aeabi_dcmplt>
 8003886:	b110      	cbz	r0, 800388e <_printf_float+0x86>
 8003888:	232d      	movs	r3, #45	@ 0x2d
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388e:	4a92      	ldr	r2, [pc, #584]	@ (8003ad8 <_printf_float+0x2d0>)
 8003890:	4b92      	ldr	r3, [pc, #584]	@ (8003adc <_printf_float+0x2d4>)
 8003892:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003896:	bf94      	ite	ls
 8003898:	4690      	movls	r8, r2
 800389a:	4698      	movhi	r8, r3
 800389c:	2303      	movs	r3, #3
 800389e:	f04f 0900 	mov.w	r9, #0
 80038a2:	6123      	str	r3, [r4, #16]
 80038a4:	f02b 0304 	bic.w	r3, fp, #4
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	4633      	mov	r3, r6
 80038ac:	4621      	mov	r1, r4
 80038ae:	4628      	mov	r0, r5
 80038b0:	9700      	str	r7, [sp, #0]
 80038b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80038b4:	f000 f9d4 	bl	8003c60 <_printf_common>
 80038b8:	3001      	adds	r0, #1
 80038ba:	f040 8090 	bne.w	80039de <_printf_float+0x1d6>
 80038be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038c2:	b011      	add	sp, #68	@ 0x44
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	4640      	mov	r0, r8
 80038ce:	4649      	mov	r1, r9
 80038d0:	f7fd f8ac 	bl	8000a2c <__aeabi_dcmpun>
 80038d4:	b148      	cbz	r0, 80038ea <_printf_float+0xe2>
 80038d6:	464b      	mov	r3, r9
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bfb8      	it	lt
 80038dc:	232d      	movlt	r3, #45	@ 0x2d
 80038de:	4a80      	ldr	r2, [pc, #512]	@ (8003ae0 <_printf_float+0x2d8>)
 80038e0:	bfb8      	it	lt
 80038e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80038e6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae4 <_printf_float+0x2dc>)
 80038e8:	e7d3      	b.n	8003892 <_printf_float+0x8a>
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	d13f      	bne.n	8003974 <_printf_float+0x16c>
 80038f4:	2306      	movs	r3, #6
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	9206      	str	r2, [sp, #24]
 8003902:	aa0e      	add	r2, sp, #56	@ 0x38
 8003904:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003908:	aa0d      	add	r2, sp, #52	@ 0x34
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003910:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	4642      	mov	r2, r8
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	4628      	mov	r0, r5
 800391c:	464b      	mov	r3, r9
 800391e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003920:	f7ff fed3 	bl	80036ca <__cvt>
 8003924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003926:	4680      	mov	r8, r0
 8003928:	2947      	cmp	r1, #71	@ 0x47
 800392a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800392c:	d128      	bne.n	8003980 <_printf_float+0x178>
 800392e:	1cc8      	adds	r0, r1, #3
 8003930:	db02      	blt.n	8003938 <_printf_float+0x130>
 8003932:	6863      	ldr	r3, [r4, #4]
 8003934:	4299      	cmp	r1, r3
 8003936:	dd40      	ble.n	80039ba <_printf_float+0x1b2>
 8003938:	f1aa 0a02 	sub.w	sl, sl, #2
 800393c:	fa5f fa8a 	uxtb.w	sl, sl
 8003940:	4652      	mov	r2, sl
 8003942:	3901      	subs	r1, #1
 8003944:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003948:	910d      	str	r1, [sp, #52]	@ 0x34
 800394a:	f7ff ff22 	bl	8003792 <__exponent>
 800394e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003950:	4681      	mov	r9, r0
 8003952:	1813      	adds	r3, r2, r0
 8003954:	2a01      	cmp	r2, #1
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	dc02      	bgt.n	8003960 <_printf_float+0x158>
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	07d2      	lsls	r2, r2, #31
 800395e:	d501      	bpl.n	8003964 <_printf_float+0x15c>
 8003960:	3301      	adds	r3, #1
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003968:	2b00      	cmp	r3, #0
 800396a:	d09e      	beq.n	80038aa <_printf_float+0xa2>
 800396c:	232d      	movs	r3, #45	@ 0x2d
 800396e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003972:	e79a      	b.n	80038aa <_printf_float+0xa2>
 8003974:	2947      	cmp	r1, #71	@ 0x47
 8003976:	d1bf      	bne.n	80038f8 <_printf_float+0xf0>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1bd      	bne.n	80038f8 <_printf_float+0xf0>
 800397c:	2301      	movs	r3, #1
 800397e:	e7ba      	b.n	80038f6 <_printf_float+0xee>
 8003980:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003984:	d9dc      	bls.n	8003940 <_printf_float+0x138>
 8003986:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800398a:	d118      	bne.n	80039be <_printf_float+0x1b6>
 800398c:	2900      	cmp	r1, #0
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	dd0b      	ble.n	80039aa <_printf_float+0x1a2>
 8003992:	6121      	str	r1, [r4, #16]
 8003994:	b913      	cbnz	r3, 800399c <_printf_float+0x194>
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	07d0      	lsls	r0, r2, #31
 800399a:	d502      	bpl.n	80039a2 <_printf_float+0x19a>
 800399c:	3301      	adds	r3, #1
 800399e:	440b      	add	r3, r1
 80039a0:	6123      	str	r3, [r4, #16]
 80039a2:	f04f 0900 	mov.w	r9, #0
 80039a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80039a8:	e7dc      	b.n	8003964 <_printf_float+0x15c>
 80039aa:	b913      	cbnz	r3, 80039b2 <_printf_float+0x1aa>
 80039ac:	6822      	ldr	r2, [r4, #0]
 80039ae:	07d2      	lsls	r2, r2, #31
 80039b0:	d501      	bpl.n	80039b6 <_printf_float+0x1ae>
 80039b2:	3302      	adds	r3, #2
 80039b4:	e7f4      	b.n	80039a0 <_printf_float+0x198>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e7f2      	b.n	80039a0 <_printf_float+0x198>
 80039ba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80039be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80039c0:	4299      	cmp	r1, r3
 80039c2:	db05      	blt.n	80039d0 <_printf_float+0x1c8>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	6121      	str	r1, [r4, #16]
 80039c8:	07d8      	lsls	r0, r3, #31
 80039ca:	d5ea      	bpl.n	80039a2 <_printf_float+0x19a>
 80039cc:	1c4b      	adds	r3, r1, #1
 80039ce:	e7e7      	b.n	80039a0 <_printf_float+0x198>
 80039d0:	2900      	cmp	r1, #0
 80039d2:	bfcc      	ite	gt
 80039d4:	2201      	movgt	r2, #1
 80039d6:	f1c1 0202 	rsble	r2, r1, #2
 80039da:	4413      	add	r3, r2
 80039dc:	e7e0      	b.n	80039a0 <_printf_float+0x198>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	055a      	lsls	r2, r3, #21
 80039e2:	d407      	bmi.n	80039f4 <_printf_float+0x1ec>
 80039e4:	6923      	ldr	r3, [r4, #16]
 80039e6:	4642      	mov	r2, r8
 80039e8:	4631      	mov	r1, r6
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b8      	blx	r7
 80039ee:	3001      	adds	r0, #1
 80039f0:	d12b      	bne.n	8003a4a <_printf_float+0x242>
 80039f2:	e764      	b.n	80038be <_printf_float+0xb6>
 80039f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039f8:	f240 80dc 	bls.w	8003bb4 <_printf_float+0x3ac>
 80039fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a00:	2200      	movs	r2, #0
 8003a02:	2300      	movs	r3, #0
 8003a04:	f7fc ffe0 	bl	80009c8 <__aeabi_dcmpeq>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d033      	beq.n	8003a74 <_printf_float+0x26c>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4631      	mov	r1, r6
 8003a10:	4628      	mov	r0, r5
 8003a12:	4a35      	ldr	r2, [pc, #212]	@ (8003ae8 <_printf_float+0x2e0>)
 8003a14:	47b8      	blx	r7
 8003a16:	3001      	adds	r0, #1
 8003a18:	f43f af51 	beq.w	80038be <_printf_float+0xb6>
 8003a1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003a20:	4543      	cmp	r3, r8
 8003a22:	db02      	blt.n	8003a2a <_printf_float+0x222>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	07d8      	lsls	r0, r3, #31
 8003a28:	d50f      	bpl.n	8003a4a <_printf_float+0x242>
 8003a2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4628      	mov	r0, r5
 8003a32:	47b8      	blx	r7
 8003a34:	3001      	adds	r0, #1
 8003a36:	f43f af42 	beq.w	80038be <_printf_float+0xb6>
 8003a3a:	f04f 0900 	mov.w	r9, #0
 8003a3e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003a42:	f104 0a1a 	add.w	sl, r4, #26
 8003a46:	45c8      	cmp	r8, r9
 8003a48:	dc09      	bgt.n	8003a5e <_printf_float+0x256>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	079b      	lsls	r3, r3, #30
 8003a4e:	f100 8102 	bmi.w	8003c56 <_printf_float+0x44e>
 8003a52:	68e0      	ldr	r0, [r4, #12]
 8003a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a56:	4298      	cmp	r0, r3
 8003a58:	bfb8      	it	lt
 8003a5a:	4618      	movlt	r0, r3
 8003a5c:	e731      	b.n	80038c2 <_printf_float+0xba>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4652      	mov	r2, sl
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f43f af28 	beq.w	80038be <_printf_float+0xb6>
 8003a6e:	f109 0901 	add.w	r9, r9, #1
 8003a72:	e7e8      	b.n	8003a46 <_printf_float+0x23e>
 8003a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	dc38      	bgt.n	8003aec <_printf_float+0x2e4>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4628      	mov	r0, r5
 8003a80:	4a19      	ldr	r2, [pc, #100]	@ (8003ae8 <_printf_float+0x2e0>)
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	f43f af1a 	beq.w	80038be <_printf_float+0xb6>
 8003a8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003a8e:	ea59 0303 	orrs.w	r3, r9, r3
 8003a92:	d102      	bne.n	8003a9a <_printf_float+0x292>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	d5d7      	bpl.n	8003a4a <_printf_float+0x242>
 8003a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b8      	blx	r7
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f43f af0a 	beq.w	80038be <_printf_float+0xb6>
 8003aaa:	f04f 0a00 	mov.w	sl, #0
 8003aae:	f104 0b1a 	add.w	fp, r4, #26
 8003ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	4553      	cmp	r3, sl
 8003ab8:	dc01      	bgt.n	8003abe <_printf_float+0x2b6>
 8003aba:	464b      	mov	r3, r9
 8003abc:	e793      	b.n	80039e6 <_printf_float+0x1de>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	465a      	mov	r2, fp
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	f43f aef8 	beq.w	80038be <_printf_float+0xb6>
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
 8003ad2:	e7ee      	b.n	8003ab2 <_printf_float+0x2aa>
 8003ad4:	7fefffff 	.word	0x7fefffff
 8003ad8:	080079e8 	.word	0x080079e8
 8003adc:	080079ec 	.word	0x080079ec
 8003ae0:	080079f0 	.word	0x080079f0
 8003ae4:	080079f4 	.word	0x080079f4
 8003ae8:	080079f8 	.word	0x080079f8
 8003aec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003aee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003af2:	4553      	cmp	r3, sl
 8003af4:	bfa8      	it	ge
 8003af6:	4653      	movge	r3, sl
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	4699      	mov	r9, r3
 8003afc:	dc36      	bgt.n	8003b6c <_printf_float+0x364>
 8003afe:	f04f 0b00 	mov.w	fp, #0
 8003b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b06:	f104 021a 	add.w	r2, r4, #26
 8003b0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b0e:	eba3 0309 	sub.w	r3, r3, r9
 8003b12:	455b      	cmp	r3, fp
 8003b14:	dc31      	bgt.n	8003b7a <_printf_float+0x372>
 8003b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b18:	459a      	cmp	sl, r3
 8003b1a:	dc3a      	bgt.n	8003b92 <_printf_float+0x38a>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	07da      	lsls	r2, r3, #31
 8003b20:	d437      	bmi.n	8003b92 <_printf_float+0x38a>
 8003b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b24:	ebaa 0903 	sub.w	r9, sl, r3
 8003b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8003b2e:	4599      	cmp	r9, r3
 8003b30:	bfa8      	it	ge
 8003b32:	4699      	movge	r9, r3
 8003b34:	f1b9 0f00 	cmp.w	r9, #0
 8003b38:	dc33      	bgt.n	8003ba2 <_printf_float+0x39a>
 8003b3a:	f04f 0800 	mov.w	r8, #0
 8003b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b42:	f104 0b1a 	add.w	fp, r4, #26
 8003b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b48:	ebaa 0303 	sub.w	r3, sl, r3
 8003b4c:	eba3 0309 	sub.w	r3, r3, r9
 8003b50:	4543      	cmp	r3, r8
 8003b52:	f77f af7a 	ble.w	8003a4a <_printf_float+0x242>
 8003b56:	2301      	movs	r3, #1
 8003b58:	465a      	mov	r2, fp
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b8      	blx	r7
 8003b60:	3001      	adds	r0, #1
 8003b62:	f43f aeac 	beq.w	80038be <_printf_float+0xb6>
 8003b66:	f108 0801 	add.w	r8, r8, #1
 8003b6a:	e7ec      	b.n	8003b46 <_printf_float+0x33e>
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	d1c2      	bne.n	8003afe <_printf_float+0x2f6>
 8003b78:	e6a1      	b.n	80038be <_printf_float+0xb6>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4628      	mov	r0, r5
 8003b80:	920a      	str	r2, [sp, #40]	@ 0x28
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	f43f ae9a 	beq.w	80038be <_printf_float+0xb6>
 8003b8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b8c:	f10b 0b01 	add.w	fp, fp, #1
 8003b90:	e7bb      	b.n	8003b0a <_printf_float+0x302>
 8003b92:	4631      	mov	r1, r6
 8003b94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b8      	blx	r7
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d1c0      	bne.n	8003b22 <_printf_float+0x31a>
 8003ba0:	e68d      	b.n	80038be <_printf_float+0xb6>
 8003ba2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	4442      	add	r2, r8
 8003bac:	47b8      	blx	r7
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d1c3      	bne.n	8003b3a <_printf_float+0x332>
 8003bb2:	e684      	b.n	80038be <_printf_float+0xb6>
 8003bb4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003bb8:	f1ba 0f01 	cmp.w	sl, #1
 8003bbc:	dc01      	bgt.n	8003bc2 <_printf_float+0x3ba>
 8003bbe:	07db      	lsls	r3, r3, #31
 8003bc0:	d536      	bpl.n	8003c30 <_printf_float+0x428>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	4631      	mov	r1, r6
 8003bc8:	4628      	mov	r0, r5
 8003bca:	47b8      	blx	r7
 8003bcc:	3001      	adds	r0, #1
 8003bce:	f43f ae76 	beq.w	80038be <_printf_float+0xb6>
 8003bd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	4628      	mov	r0, r5
 8003bda:	47b8      	blx	r7
 8003bdc:	3001      	adds	r0, #1
 8003bde:	f43f ae6e 	beq.w	80038be <_printf_float+0xb6>
 8003be2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003be6:	2200      	movs	r2, #0
 8003be8:	2300      	movs	r3, #0
 8003bea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003bee:	f7fc feeb 	bl	80009c8 <__aeabi_dcmpeq>
 8003bf2:	b9c0      	cbnz	r0, 8003c26 <_printf_float+0x41e>
 8003bf4:	4653      	mov	r3, sl
 8003bf6:	f108 0201 	add.w	r2, r8, #1
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	d10c      	bne.n	8003c1e <_printf_float+0x416>
 8003c04:	e65b      	b.n	80038be <_printf_float+0xb6>
 8003c06:	2301      	movs	r3, #1
 8003c08:	465a      	mov	r2, fp
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	47b8      	blx	r7
 8003c10:	3001      	adds	r0, #1
 8003c12:	f43f ae54 	beq.w	80038be <_printf_float+0xb6>
 8003c16:	f108 0801 	add.w	r8, r8, #1
 8003c1a:	45d0      	cmp	r8, sl
 8003c1c:	dbf3      	blt.n	8003c06 <_printf_float+0x3fe>
 8003c1e:	464b      	mov	r3, r9
 8003c20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003c24:	e6e0      	b.n	80039e8 <_printf_float+0x1e0>
 8003c26:	f04f 0800 	mov.w	r8, #0
 8003c2a:	f104 0b1a 	add.w	fp, r4, #26
 8003c2e:	e7f4      	b.n	8003c1a <_printf_float+0x412>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4642      	mov	r2, r8
 8003c34:	e7e1      	b.n	8003bfa <_printf_float+0x3f2>
 8003c36:	2301      	movs	r3, #1
 8003c38:	464a      	mov	r2, r9
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	f43f ae3c 	beq.w	80038be <_printf_float+0xb6>
 8003c46:	f108 0801 	add.w	r8, r8, #1
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003c4e:	1a5b      	subs	r3, r3, r1
 8003c50:	4543      	cmp	r3, r8
 8003c52:	dcf0      	bgt.n	8003c36 <_printf_float+0x42e>
 8003c54:	e6fd      	b.n	8003a52 <_printf_float+0x24a>
 8003c56:	f04f 0800 	mov.w	r8, #0
 8003c5a:	f104 0919 	add.w	r9, r4, #25
 8003c5e:	e7f4      	b.n	8003c4a <_printf_float+0x442>

08003c60 <_printf_common>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	4616      	mov	r6, r2
 8003c66:	4698      	mov	r8, r3
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	690b      	ldr	r3, [r1, #16]
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bfb8      	it	lt
 8003c72:	4613      	movlt	r3, r2
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c80:	b10a      	cbz	r2, 8003c86 <_printf_common+0x26>
 8003c82:	3301      	adds	r3, #1
 8003c84:	6033      	str	r3, [r6, #0]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	0699      	lsls	r1, r3, #26
 8003c8a:	bf42      	ittt	mi
 8003c8c:	6833      	ldrmi	r3, [r6, #0]
 8003c8e:	3302      	addmi	r3, #2
 8003c90:	6033      	strmi	r3, [r6, #0]
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	f015 0506 	ands.w	r5, r5, #6
 8003c98:	d106      	bne.n	8003ca8 <_printf_common+0x48>
 8003c9a:	f104 0a19 	add.w	sl, r4, #25
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	6832      	ldr	r2, [r6, #0]
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	dc2b      	bgt.n	8003d00 <_printf_common+0xa0>
 8003ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	3b00      	subs	r3, #0
 8003cb0:	bf18      	it	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	0692      	lsls	r2, r2, #26
 8003cb6:	d430      	bmi.n	8003d1a <_printf_common+0xba>
 8003cb8:	4641      	mov	r1, r8
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cc0:	47c8      	blx	r9
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d023      	beq.n	8003d0e <_printf_common+0xae>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	6922      	ldr	r2, [r4, #16]
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf14      	ite	ne
 8003cd2:	2500      	movne	r5, #0
 8003cd4:	6833      	ldreq	r3, [r6, #0]
 8003cd6:	f04f 0600 	mov.w	r6, #0
 8003cda:	bf08      	it	eq
 8003cdc:	68e5      	ldreq	r5, [r4, #12]
 8003cde:	f104 041a 	add.w	r4, r4, #26
 8003ce2:	bf08      	it	eq
 8003ce4:	1aed      	subeq	r5, r5, r3
 8003ce6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cea:	bf08      	it	eq
 8003cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bfc4      	itt	gt
 8003cf4:	1a9b      	subgt	r3, r3, r2
 8003cf6:	18ed      	addgt	r5, r5, r3
 8003cf8:	42b5      	cmp	r5, r6
 8003cfa:	d11a      	bne.n	8003d32 <_printf_common+0xd2>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e008      	b.n	8003d12 <_printf_common+0xb2>
 8003d00:	2301      	movs	r3, #1
 8003d02:	4652      	mov	r2, sl
 8003d04:	4641      	mov	r1, r8
 8003d06:	4638      	mov	r0, r7
 8003d08:	47c8      	blx	r9
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d103      	bne.n	8003d16 <_printf_common+0xb6>
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d16:	3501      	adds	r5, #1
 8003d18:	e7c1      	b.n	8003c9e <_printf_common+0x3e>
 8003d1a:	2030      	movs	r0, #48	@ 0x30
 8003d1c:	18e1      	adds	r1, r4, r3
 8003d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d28:	4422      	add	r2, r4
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d30:	e7c2      	b.n	8003cb8 <_printf_common+0x58>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4622      	mov	r2, r4
 8003d36:	4641      	mov	r1, r8
 8003d38:	4638      	mov	r0, r7
 8003d3a:	47c8      	blx	r9
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d0e6      	beq.n	8003d0e <_printf_common+0xae>
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7d9      	b.n	8003cf8 <_printf_common+0x98>

08003d44 <_printf_i>:
 8003d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	7e0f      	ldrb	r7, [r1, #24]
 8003d4a:	4691      	mov	r9, r2
 8003d4c:	2f78      	cmp	r7, #120	@ 0x78
 8003d4e:	4680      	mov	r8, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	469a      	mov	sl, r3
 8003d54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d5a:	d807      	bhi.n	8003d6c <_printf_i+0x28>
 8003d5c:	2f62      	cmp	r7, #98	@ 0x62
 8003d5e:	d80a      	bhi.n	8003d76 <_printf_i+0x32>
 8003d60:	2f00      	cmp	r7, #0
 8003d62:	f000 80d3 	beq.w	8003f0c <_printf_i+0x1c8>
 8003d66:	2f58      	cmp	r7, #88	@ 0x58
 8003d68:	f000 80ba 	beq.w	8003ee0 <_printf_i+0x19c>
 8003d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d74:	e03a      	b.n	8003dec <_printf_i+0xa8>
 8003d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d7a:	2b15      	cmp	r3, #21
 8003d7c:	d8f6      	bhi.n	8003d6c <_printf_i+0x28>
 8003d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d84 <_printf_i+0x40>)
 8003d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003d6d 	.word	0x08003d6d
 8003d90:	08003d6d 	.word	0x08003d6d
 8003d94:	08003d6d 	.word	0x08003d6d
 8003d98:	08003d6d 	.word	0x08003d6d
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003d6d 	.word	0x08003d6d
 8003da4:	08003d6d 	.word	0x08003d6d
 8003da8:	08003d6d 	.word	0x08003d6d
 8003dac:	08003d6d 	.word	0x08003d6d
 8003db0:	08003ef3 	.word	0x08003ef3
 8003db4:	08003e1b 	.word	0x08003e1b
 8003db8:	08003ead 	.word	0x08003ead
 8003dbc:	08003d6d 	.word	0x08003d6d
 8003dc0:	08003d6d 	.word	0x08003d6d
 8003dc4:	08003f15 	.word	0x08003f15
 8003dc8:	08003d6d 	.word	0x08003d6d
 8003dcc:	08003e1b 	.word	0x08003e1b
 8003dd0:	08003d6d 	.word	0x08003d6d
 8003dd4:	08003d6d 	.word	0x08003d6d
 8003dd8:	08003eb5 	.word	0x08003eb5
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6032      	str	r2, [r6, #0]
 8003de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dec:	2301      	movs	r3, #1
 8003dee:	e09e      	b.n	8003f2e <_printf_i+0x1ea>
 8003df0:	6833      	ldr	r3, [r6, #0]
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	1d19      	adds	r1, r3, #4
 8003df6:	6031      	str	r1, [r6, #0]
 8003df8:	0606      	lsls	r6, r0, #24
 8003dfa:	d501      	bpl.n	8003e00 <_printf_i+0xbc>
 8003dfc:	681d      	ldr	r5, [r3, #0]
 8003dfe:	e003      	b.n	8003e08 <_printf_i+0xc4>
 8003e00:	0645      	lsls	r5, r0, #25
 8003e02:	d5fb      	bpl.n	8003dfc <_printf_i+0xb8>
 8003e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e08:	2d00      	cmp	r5, #0
 8003e0a:	da03      	bge.n	8003e14 <_printf_i+0xd0>
 8003e0c:	232d      	movs	r3, #45	@ 0x2d
 8003e0e:	426d      	negs	r5, r5
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e14:	230a      	movs	r3, #10
 8003e16:	4859      	ldr	r0, [pc, #356]	@ (8003f7c <_printf_i+0x238>)
 8003e18:	e011      	b.n	8003e3e <_printf_i+0xfa>
 8003e1a:	6821      	ldr	r1, [r4, #0]
 8003e1c:	6833      	ldr	r3, [r6, #0]
 8003e1e:	0608      	lsls	r0, r1, #24
 8003e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e24:	d402      	bmi.n	8003e2c <_printf_i+0xe8>
 8003e26:	0649      	lsls	r1, r1, #25
 8003e28:	bf48      	it	mi
 8003e2a:	b2ad      	uxthmi	r5, r5
 8003e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e2e:	6033      	str	r3, [r6, #0]
 8003e30:	bf14      	ite	ne
 8003e32:	230a      	movne	r3, #10
 8003e34:	2308      	moveq	r3, #8
 8003e36:	4851      	ldr	r0, [pc, #324]	@ (8003f7c <_printf_i+0x238>)
 8003e38:	2100      	movs	r1, #0
 8003e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e3e:	6866      	ldr	r6, [r4, #4]
 8003e40:	2e00      	cmp	r6, #0
 8003e42:	bfa8      	it	ge
 8003e44:	6821      	ldrge	r1, [r4, #0]
 8003e46:	60a6      	str	r6, [r4, #8]
 8003e48:	bfa4      	itt	ge
 8003e4a:	f021 0104 	bicge.w	r1, r1, #4
 8003e4e:	6021      	strge	r1, [r4, #0]
 8003e50:	b90d      	cbnz	r5, 8003e56 <_printf_i+0x112>
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	d04b      	beq.n	8003eee <_printf_i+0x1aa>
 8003e56:	4616      	mov	r6, r2
 8003e58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e60:	5dc7      	ldrb	r7, [r0, r7]
 8003e62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e66:	462f      	mov	r7, r5
 8003e68:	42bb      	cmp	r3, r7
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	d9f4      	bls.n	8003e58 <_printf_i+0x114>
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10b      	bne.n	8003e8a <_printf_i+0x146>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	07df      	lsls	r7, r3, #31
 8003e76:	d508      	bpl.n	8003e8a <_printf_i+0x146>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	6861      	ldr	r1, [r4, #4]
 8003e7c:	4299      	cmp	r1, r3
 8003e7e:	bfde      	ittt	le
 8003e80:	2330      	movle	r3, #48	@ 0x30
 8003e82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e8a:	1b92      	subs	r2, r2, r6
 8003e8c:	6122      	str	r2, [r4, #16]
 8003e8e:	464b      	mov	r3, r9
 8003e90:	4621      	mov	r1, r4
 8003e92:	4640      	mov	r0, r8
 8003e94:	f8cd a000 	str.w	sl, [sp]
 8003e98:	aa03      	add	r2, sp, #12
 8003e9a:	f7ff fee1 	bl	8003c60 <_printf_common>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d14a      	bne.n	8003f38 <_printf_i+0x1f4>
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ea6:	b004      	add	sp, #16
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	2778      	movs	r7, #120	@ 0x78
 8003eb6:	4832      	ldr	r0, [pc, #200]	@ (8003f80 <_printf_i+0x23c>)
 8003eb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	6831      	ldr	r1, [r6, #0]
 8003ec0:	061f      	lsls	r7, r3, #24
 8003ec2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ec6:	d402      	bmi.n	8003ece <_printf_i+0x18a>
 8003ec8:	065f      	lsls	r7, r3, #25
 8003eca:	bf48      	it	mi
 8003ecc:	b2ad      	uxthmi	r5, r5
 8003ece:	6031      	str	r1, [r6, #0]
 8003ed0:	07d9      	lsls	r1, r3, #31
 8003ed2:	bf44      	itt	mi
 8003ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ed8:	6023      	strmi	r3, [r4, #0]
 8003eda:	b11d      	cbz	r5, 8003ee4 <_printf_i+0x1a0>
 8003edc:	2310      	movs	r3, #16
 8003ede:	e7ab      	b.n	8003e38 <_printf_i+0xf4>
 8003ee0:	4826      	ldr	r0, [pc, #152]	@ (8003f7c <_printf_i+0x238>)
 8003ee2:	e7e9      	b.n	8003eb8 <_printf_i+0x174>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f023 0320 	bic.w	r3, r3, #32
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	e7f6      	b.n	8003edc <_printf_i+0x198>
 8003eee:	4616      	mov	r6, r2
 8003ef0:	e7bd      	b.n	8003e6e <_printf_i+0x12a>
 8003ef2:	6833      	ldr	r3, [r6, #0]
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	1d18      	adds	r0, r3, #4
 8003ef8:	6961      	ldr	r1, [r4, #20]
 8003efa:	6030      	str	r0, [r6, #0]
 8003efc:	062e      	lsls	r6, r5, #24
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	d501      	bpl.n	8003f06 <_printf_i+0x1c2>
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	e002      	b.n	8003f0c <_printf_i+0x1c8>
 8003f06:	0668      	lsls	r0, r5, #25
 8003f08:	d5fb      	bpl.n	8003f02 <_printf_i+0x1be>
 8003f0a:	8019      	strh	r1, [r3, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4616      	mov	r6, r2
 8003f10:	6123      	str	r3, [r4, #16]
 8003f12:	e7bc      	b.n	8003e8e <_printf_i+0x14a>
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	2100      	movs	r1, #0
 8003f18:	1d1a      	adds	r2, r3, #4
 8003f1a:	6032      	str	r2, [r6, #0]
 8003f1c:	681e      	ldr	r6, [r3, #0]
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	4630      	mov	r0, r6
 8003f22:	f000 f93c 	bl	800419e <memchr>
 8003f26:	b108      	cbz	r0, 8003f2c <_printf_i+0x1e8>
 8003f28:	1b80      	subs	r0, r0, r6
 8003f2a:	6060      	str	r0, [r4, #4]
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f36:	e7aa      	b.n	8003e8e <_printf_i+0x14a>
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	47d0      	blx	sl
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0ad      	beq.n	8003ea2 <_printf_i+0x15e>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	079b      	lsls	r3, r3, #30
 8003f4a:	d413      	bmi.n	8003f74 <_printf_i+0x230>
 8003f4c:	68e0      	ldr	r0, [r4, #12]
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	4298      	cmp	r0, r3
 8003f52:	bfb8      	it	lt
 8003f54:	4618      	movlt	r0, r3
 8003f56:	e7a6      	b.n	8003ea6 <_printf_i+0x162>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	4640      	mov	r0, r8
 8003f60:	47d0      	blx	sl
 8003f62:	3001      	adds	r0, #1
 8003f64:	d09d      	beq.n	8003ea2 <_printf_i+0x15e>
 8003f66:	3501      	adds	r5, #1
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	9903      	ldr	r1, [sp, #12]
 8003f6c:	1a5b      	subs	r3, r3, r1
 8003f6e:	42ab      	cmp	r3, r5
 8003f70:	dcf2      	bgt.n	8003f58 <_printf_i+0x214>
 8003f72:	e7eb      	b.n	8003f4c <_printf_i+0x208>
 8003f74:	2500      	movs	r5, #0
 8003f76:	f104 0619 	add.w	r6, r4, #25
 8003f7a:	e7f5      	b.n	8003f68 <_printf_i+0x224>
 8003f7c:	080079fa 	.word	0x080079fa
 8003f80:	08007a0b 	.word	0x08007a0b

08003f84 <std>:
 8003f84:	2300      	movs	r3, #0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f92:	6083      	str	r3, [r0, #8]
 8003f94:	8181      	strh	r1, [r0, #12]
 8003f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f98:	81c2      	strh	r2, [r0, #14]
 8003f9a:	6183      	str	r3, [r0, #24]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	305c      	adds	r0, #92	@ 0x5c
 8003fa2:	f000 f8c3 	bl	800412c <memset>
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <std+0x58>)
 8003fa8:	6224      	str	r4, [r4, #32]
 8003faa:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <std+0x5c>)
 8003fae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <std+0x60>)
 8003fb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <std+0x64>)
 8003fb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <std+0x68>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d006      	beq.n	8003fcc <std+0x48>
 8003fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fc2:	4294      	cmp	r4, r2
 8003fc4:	d002      	beq.n	8003fcc <std+0x48>
 8003fc6:	33d0      	adds	r3, #208	@ 0xd0
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d105      	bne.n	8003fd8 <std+0x54>
 8003fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd4:	f000 b8e0 	b.w	8004198 <__retarget_lock_init_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	08005a9d 	.word	0x08005a9d
 8003fe0:	08005abf 	.word	0x08005abf
 8003fe4:	08005af7 	.word	0x08005af7
 8003fe8:	08005b1b 	.word	0x08005b1b
 8003fec:	200002c0 	.word	0x200002c0

08003ff0 <stdio_exit_handler>:
 8003ff0:	4a02      	ldr	r2, [pc, #8]	@ (8003ffc <stdio_exit_handler+0xc>)
 8003ff2:	4903      	ldr	r1, [pc, #12]	@ (8004000 <stdio_exit_handler+0x10>)
 8003ff4:	4803      	ldr	r0, [pc, #12]	@ (8004004 <stdio_exit_handler+0x14>)
 8003ff6:	f000 b869 	b.w	80040cc <_fwalk_sglue>
 8003ffa:	bf00      	nop
 8003ffc:	20000004 	.word	0x20000004
 8004000:	08005335 	.word	0x08005335
 8004004:	20000014 	.word	0x20000014

08004008 <cleanup_stdio>:
 8004008:	6841      	ldr	r1, [r0, #4]
 800400a:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <cleanup_stdio+0x34>)
 800400c:	b510      	push	{r4, lr}
 800400e:	4299      	cmp	r1, r3
 8004010:	4604      	mov	r4, r0
 8004012:	d001      	beq.n	8004018 <cleanup_stdio+0x10>
 8004014:	f001 f98e 	bl	8005334 <_fflush_r>
 8004018:	68a1      	ldr	r1, [r4, #8]
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <cleanup_stdio+0x38>)
 800401c:	4299      	cmp	r1, r3
 800401e:	d002      	beq.n	8004026 <cleanup_stdio+0x1e>
 8004020:	4620      	mov	r0, r4
 8004022:	f001 f987 	bl	8005334 <_fflush_r>
 8004026:	68e1      	ldr	r1, [r4, #12]
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <cleanup_stdio+0x3c>)
 800402a:	4299      	cmp	r1, r3
 800402c:	d004      	beq.n	8004038 <cleanup_stdio+0x30>
 800402e:	4620      	mov	r0, r4
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f001 b97e 	b.w	8005334 <_fflush_r>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	bf00      	nop
 800403c:	200002c0 	.word	0x200002c0
 8004040:	20000328 	.word	0x20000328
 8004044:	20000390 	.word	0x20000390

08004048 <global_stdio_init.part.0>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <global_stdio_init.part.0+0x30>)
 800404c:	4c0b      	ldr	r4, [pc, #44]	@ (800407c <global_stdio_init.part.0+0x34>)
 800404e:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <global_stdio_init.part.0+0x38>)
 8004050:	4620      	mov	r0, r4
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	2104      	movs	r1, #4
 8004056:	2200      	movs	r2, #0
 8004058:	f7ff ff94 	bl	8003f84 <std>
 800405c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004060:	2201      	movs	r2, #1
 8004062:	2109      	movs	r1, #9
 8004064:	f7ff ff8e 	bl	8003f84 <std>
 8004068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800406c:	2202      	movs	r2, #2
 800406e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004072:	2112      	movs	r1, #18
 8004074:	f7ff bf86 	b.w	8003f84 <std>
 8004078:	200003f8 	.word	0x200003f8
 800407c:	200002c0 	.word	0x200002c0
 8004080:	08003ff1 	.word	0x08003ff1

08004084 <__sfp_lock_acquire>:
 8004084:	4801      	ldr	r0, [pc, #4]	@ (800408c <__sfp_lock_acquire+0x8>)
 8004086:	f000 b888 	b.w	800419a <__retarget_lock_acquire_recursive>
 800408a:	bf00      	nop
 800408c:	200003fd 	.word	0x200003fd

08004090 <__sfp_lock_release>:
 8004090:	4801      	ldr	r0, [pc, #4]	@ (8004098 <__sfp_lock_release+0x8>)
 8004092:	f000 b883 	b.w	800419c <__retarget_lock_release_recursive>
 8004096:	bf00      	nop
 8004098:	200003fd 	.word	0x200003fd

0800409c <__sinit>:
 800409c:	b510      	push	{r4, lr}
 800409e:	4604      	mov	r4, r0
 80040a0:	f7ff fff0 	bl	8004084 <__sfp_lock_acquire>
 80040a4:	6a23      	ldr	r3, [r4, #32]
 80040a6:	b11b      	cbz	r3, 80040b0 <__sinit+0x14>
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ac:	f7ff bff0 	b.w	8004090 <__sfp_lock_release>
 80040b0:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <__sinit+0x28>)
 80040b2:	6223      	str	r3, [r4, #32]
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <__sinit+0x2c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f5      	bne.n	80040a8 <__sinit+0xc>
 80040bc:	f7ff ffc4 	bl	8004048 <global_stdio_init.part.0>
 80040c0:	e7f2      	b.n	80040a8 <__sinit+0xc>
 80040c2:	bf00      	nop
 80040c4:	08004009 	.word	0x08004009
 80040c8:	200003f8 	.word	0x200003f8

080040cc <_fwalk_sglue>:
 80040cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d0:	4607      	mov	r7, r0
 80040d2:	4688      	mov	r8, r1
 80040d4:	4614      	mov	r4, r2
 80040d6:	2600      	movs	r6, #0
 80040d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040dc:	f1b9 0901 	subs.w	r9, r9, #1
 80040e0:	d505      	bpl.n	80040ee <_fwalk_sglue+0x22>
 80040e2:	6824      	ldr	r4, [r4, #0]
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d1f7      	bne.n	80040d8 <_fwalk_sglue+0xc>
 80040e8:	4630      	mov	r0, r6
 80040ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ee:	89ab      	ldrh	r3, [r5, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d907      	bls.n	8004104 <_fwalk_sglue+0x38>
 80040f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040f8:	3301      	adds	r3, #1
 80040fa:	d003      	beq.n	8004104 <_fwalk_sglue+0x38>
 80040fc:	4629      	mov	r1, r5
 80040fe:	4638      	mov	r0, r7
 8004100:	47c0      	blx	r8
 8004102:	4306      	orrs	r6, r0
 8004104:	3568      	adds	r5, #104	@ 0x68
 8004106:	e7e9      	b.n	80040dc <_fwalk_sglue+0x10>

08004108 <iprintf>:
 8004108:	b40f      	push	{r0, r1, r2, r3}
 800410a:	b507      	push	{r0, r1, r2, lr}
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <iprintf+0x20>)
 800410e:	ab04      	add	r3, sp, #16
 8004110:	6808      	ldr	r0, [r1, #0]
 8004112:	f853 2b04 	ldr.w	r2, [r3], #4
 8004116:	6881      	ldr	r1, [r0, #8]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	f000 fec9 	bl	8004eb0 <_vfiprintf_r>
 800411e:	b003      	add	sp, #12
 8004120:	f85d eb04 	ldr.w	lr, [sp], #4
 8004124:	b004      	add	sp, #16
 8004126:	4770      	bx	lr
 8004128:	20000010 	.word	0x20000010

0800412c <memset>:
 800412c:	4603      	mov	r3, r0
 800412e:	4402      	add	r2, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <_localeconv_r>:
 800413c:	4800      	ldr	r0, [pc, #0]	@ (8004140 <_localeconv_r+0x4>)
 800413e:	4770      	bx	lr
 8004140:	20000150 	.word	0x20000150

08004144 <__errno>:
 8004144:	4b01      	ldr	r3, [pc, #4]	@ (800414c <__errno+0x8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000010 	.word	0x20000010

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	2600      	movs	r6, #0
 8004154:	4d0c      	ldr	r5, [pc, #48]	@ (8004188 <__libc_init_array+0x38>)
 8004156:	4c0d      	ldr	r4, [pc, #52]	@ (800418c <__libc_init_array+0x3c>)
 8004158:	1b64      	subs	r4, r4, r5
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	42a6      	cmp	r6, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	f002 ffc8 	bl	80070f4 <_init>
 8004164:	2600      	movs	r6, #0
 8004166:	4d0a      	ldr	r5, [pc, #40]	@ (8004190 <__libc_init_array+0x40>)
 8004168:	4c0a      	ldr	r4, [pc, #40]	@ (8004194 <__libc_init_array+0x44>)
 800416a:	1b64      	subs	r4, r4, r5
 800416c:	10a4      	asrs	r4, r4, #2
 800416e:	42a6      	cmp	r6, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f855 3b04 	ldr.w	r3, [r5], #4
 8004178:	4798      	blx	r3
 800417a:	3601      	adds	r6, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004182:	4798      	blx	r3
 8004184:	3601      	adds	r6, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	08007d90 	.word	0x08007d90
 800418c:	08007d90 	.word	0x08007d90
 8004190:	08007d90 	.word	0x08007d90
 8004194:	08007d94 	.word	0x08007d94

08004198 <__retarget_lock_init_recursive>:
 8004198:	4770      	bx	lr

0800419a <__retarget_lock_acquire_recursive>:
 800419a:	4770      	bx	lr

0800419c <__retarget_lock_release_recursive>:
 800419c:	4770      	bx	lr

0800419e <memchr>:
 800419e:	4603      	mov	r3, r0
 80041a0:	b510      	push	{r4, lr}
 80041a2:	b2c9      	uxtb	r1, r1
 80041a4:	4402      	add	r2, r0
 80041a6:	4293      	cmp	r3, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	d101      	bne.n	80041b0 <memchr+0x12>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e003      	b.n	80041b8 <memchr+0x1a>
 80041b0:	7804      	ldrb	r4, [r0, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	428c      	cmp	r4, r1
 80041b6:	d1f6      	bne.n	80041a6 <memchr+0x8>
 80041b8:	bd10      	pop	{r4, pc}

080041ba <quorem>:
 80041ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041be:	6903      	ldr	r3, [r0, #16]
 80041c0:	690c      	ldr	r4, [r1, #16]
 80041c2:	4607      	mov	r7, r0
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	db7e      	blt.n	80042c6 <quorem+0x10c>
 80041c8:	3c01      	subs	r4, #1
 80041ca:	00a3      	lsls	r3, r4, #2
 80041cc:	f100 0514 	add.w	r5, r0, #20
 80041d0:	f101 0814 	add.w	r8, r1, #20
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041e4:	3301      	adds	r3, #1
 80041e6:	429a      	cmp	r2, r3
 80041e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80041ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041f0:	d32e      	bcc.n	8004250 <quorem+0x96>
 80041f2:	f04f 0a00 	mov.w	sl, #0
 80041f6:	46c4      	mov	ip, r8
 80041f8:	46ae      	mov	lr, r5
 80041fa:	46d3      	mov	fp, sl
 80041fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004200:	b298      	uxth	r0, r3
 8004202:	fb06 a000 	mla	r0, r6, r0, sl
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	0c02      	lsrs	r2, r0, #16
 800420a:	fb06 2303 	mla	r3, r6, r3, r2
 800420e:	f8de 2000 	ldr.w	r2, [lr]
 8004212:	b280      	uxth	r0, r0
 8004214:	b292      	uxth	r2, r2
 8004216:	1a12      	subs	r2, r2, r0
 8004218:	445a      	add	r2, fp
 800421a:	f8de 0000 	ldr.w	r0, [lr]
 800421e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004222:	b29b      	uxth	r3, r3
 8004224:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004228:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800422c:	b292      	uxth	r2, r2
 800422e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004232:	45e1      	cmp	r9, ip
 8004234:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004238:	f84e 2b04 	str.w	r2, [lr], #4
 800423c:	d2de      	bcs.n	80041fc <quorem+0x42>
 800423e:	9b00      	ldr	r3, [sp, #0]
 8004240:	58eb      	ldr	r3, [r5, r3]
 8004242:	b92b      	cbnz	r3, 8004250 <quorem+0x96>
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	3b04      	subs	r3, #4
 8004248:	429d      	cmp	r5, r3
 800424a:	461a      	mov	r2, r3
 800424c:	d32f      	bcc.n	80042ae <quorem+0xf4>
 800424e:	613c      	str	r4, [r7, #16]
 8004250:	4638      	mov	r0, r7
 8004252:	f001 fb1b 	bl	800588c <__mcmp>
 8004256:	2800      	cmp	r0, #0
 8004258:	db25      	blt.n	80042a6 <quorem+0xec>
 800425a:	4629      	mov	r1, r5
 800425c:	2000      	movs	r0, #0
 800425e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004262:	f8d1 c000 	ldr.w	ip, [r1]
 8004266:	fa1f fe82 	uxth.w	lr, r2
 800426a:	fa1f f38c 	uxth.w	r3, ip
 800426e:	eba3 030e 	sub.w	r3, r3, lr
 8004272:	4403      	add	r3, r0
 8004274:	0c12      	lsrs	r2, r2, #16
 8004276:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800427a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004284:	45c1      	cmp	r9, r8
 8004286:	ea4f 4022 	mov.w	r0, r2, asr #16
 800428a:	f841 3b04 	str.w	r3, [r1], #4
 800428e:	d2e6      	bcs.n	800425e <quorem+0xa4>
 8004290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004298:	b922      	cbnz	r2, 80042a4 <quorem+0xea>
 800429a:	3b04      	subs	r3, #4
 800429c:	429d      	cmp	r5, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	d30b      	bcc.n	80042ba <quorem+0x100>
 80042a2:	613c      	str	r4, [r7, #16]
 80042a4:	3601      	adds	r6, #1
 80042a6:	4630      	mov	r0, r6
 80042a8:	b003      	add	sp, #12
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	3b04      	subs	r3, #4
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1cb      	bne.n	800424e <quorem+0x94>
 80042b6:	3c01      	subs	r4, #1
 80042b8:	e7c6      	b.n	8004248 <quorem+0x8e>
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	3b04      	subs	r3, #4
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d1ef      	bne.n	80042a2 <quorem+0xe8>
 80042c2:	3c01      	subs	r4, #1
 80042c4:	e7ea      	b.n	800429c <quorem+0xe2>
 80042c6:	2000      	movs	r0, #0
 80042c8:	e7ee      	b.n	80042a8 <quorem+0xee>
 80042ca:	0000      	movs	r0, r0
 80042cc:	0000      	movs	r0, r0
	...

080042d0 <_dtoa_r>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	4614      	mov	r4, r2
 80042d6:	461d      	mov	r5, r3
 80042d8:	69c7      	ldr	r7, [r0, #28]
 80042da:	b097      	sub	sp, #92	@ 0x5c
 80042dc:	4683      	mov	fp, r0
 80042de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80042e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80042e4:	b97f      	cbnz	r7, 8004306 <_dtoa_r+0x36>
 80042e6:	2010      	movs	r0, #16
 80042e8:	f000 fefa 	bl	80050e0 <malloc>
 80042ec:	4602      	mov	r2, r0
 80042ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80042f2:	b920      	cbnz	r0, 80042fe <_dtoa_r+0x2e>
 80042f4:	21ef      	movs	r1, #239	@ 0xef
 80042f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004598 <_dtoa_r+0x2c8>)
 80042f8:	48a8      	ldr	r0, [pc, #672]	@ (800459c <_dtoa_r+0x2cc>)
 80042fa:	f001 fd8f 	bl	8005e1c <__assert_func>
 80042fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004302:	6007      	str	r7, [r0, #0]
 8004304:	60c7      	str	r7, [r0, #12]
 8004306:	f8db 301c 	ldr.w	r3, [fp, #28]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	b159      	cbz	r1, 8004326 <_dtoa_r+0x56>
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	2301      	movs	r3, #1
 8004312:	4093      	lsls	r3, r2
 8004314:	604a      	str	r2, [r1, #4]
 8004316:	608b      	str	r3, [r1, #8]
 8004318:	4658      	mov	r0, fp
 800431a:	f001 f87f 	bl	800541c <_Bfree>
 800431e:	2200      	movs	r2, #0
 8004320:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	1e2b      	subs	r3, r5, #0
 8004328:	bfaf      	iteee	ge
 800432a:	2300      	movge	r3, #0
 800432c:	2201      	movlt	r2, #1
 800432e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004332:	9303      	strlt	r3, [sp, #12]
 8004334:	bfa8      	it	ge
 8004336:	6033      	strge	r3, [r6, #0]
 8004338:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800433c:	4b98      	ldr	r3, [pc, #608]	@ (80045a0 <_dtoa_r+0x2d0>)
 800433e:	bfb8      	it	lt
 8004340:	6032      	strlt	r2, [r6, #0]
 8004342:	ea33 0308 	bics.w	r3, r3, r8
 8004346:	d112      	bne.n	800436e <_dtoa_r+0x9e>
 8004348:	f242 730f 	movw	r3, #9999	@ 0x270f
 800434c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004354:	4323      	orrs	r3, r4
 8004356:	f000 8550 	beq.w	8004dfa <_dtoa_r+0xb2a>
 800435a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800435c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80045a4 <_dtoa_r+0x2d4>
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8552 	beq.w	8004e0a <_dtoa_r+0xb3a>
 8004366:	f10a 0303 	add.w	r3, sl, #3
 800436a:	f000 bd4c 	b.w	8004e06 <_dtoa_r+0xb36>
 800436e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004372:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	2300      	movs	r3, #0
 800437e:	f7fc fb23 	bl	80009c8 <__aeabi_dcmpeq>
 8004382:	4607      	mov	r7, r0
 8004384:	b158      	cbz	r0, 800439e <_dtoa_r+0xce>
 8004386:	2301      	movs	r3, #1
 8004388:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800438e:	b113      	cbz	r3, 8004396 <_dtoa_r+0xc6>
 8004390:	4b85      	ldr	r3, [pc, #532]	@ (80045a8 <_dtoa_r+0x2d8>)
 8004392:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80045ac <_dtoa_r+0x2dc>
 800439a:	f000 bd36 	b.w	8004e0a <_dtoa_r+0xb3a>
 800439e:	ab14      	add	r3, sp, #80	@ 0x50
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	ab15      	add	r3, sp, #84	@ 0x54
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4658      	mov	r0, fp
 80043a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80043ac:	f001 fb1e 	bl	80059ec <__d2b>
 80043b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80043b4:	4681      	mov	r9, r0
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d077      	beq.n	80044aa <_dtoa_r+0x1da>
 80043ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80043cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80043d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80043d2:	4619      	mov	r1, r3
 80043d4:	2200      	movs	r2, #0
 80043d6:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <_dtoa_r+0x2e0>)
 80043d8:	f7fb fed6 	bl	8000188 <__aeabi_dsub>
 80043dc:	a368      	add	r3, pc, #416	@ (adr r3, 8004580 <_dtoa_r+0x2b0>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc f889 	bl	80004f8 <__aeabi_dmul>
 80043e6:	a368      	add	r3, pc, #416	@ (adr r3, 8004588 <_dtoa_r+0x2b8>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fb fece 	bl	800018c <__adddf3>
 80043f0:	4604      	mov	r4, r0
 80043f2:	4630      	mov	r0, r6
 80043f4:	460d      	mov	r5, r1
 80043f6:	f7fc f815 	bl	8000424 <__aeabi_i2d>
 80043fa:	a365      	add	r3, pc, #404	@ (adr r3, 8004590 <_dtoa_r+0x2c0>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fc f87a 	bl	80004f8 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f7fb febe 	bl	800018c <__adddf3>
 8004410:	4604      	mov	r4, r0
 8004412:	460d      	mov	r5, r1
 8004414:	f7fc fb20 	bl	8000a58 <__aeabi_d2iz>
 8004418:	2200      	movs	r2, #0
 800441a:	4607      	mov	r7, r0
 800441c:	2300      	movs	r3, #0
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc fadb 	bl	80009dc <__aeabi_dcmplt>
 8004426:	b140      	cbz	r0, 800443a <_dtoa_r+0x16a>
 8004428:	4638      	mov	r0, r7
 800442a:	f7fb fffb 	bl	8000424 <__aeabi_i2d>
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	f7fc fac9 	bl	80009c8 <__aeabi_dcmpeq>
 8004436:	b900      	cbnz	r0, 800443a <_dtoa_r+0x16a>
 8004438:	3f01      	subs	r7, #1
 800443a:	2f16      	cmp	r7, #22
 800443c:	d853      	bhi.n	80044e6 <_dtoa_r+0x216>
 800443e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004442:	4b5c      	ldr	r3, [pc, #368]	@ (80045b4 <_dtoa_r+0x2e4>)
 8004444:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc fac6 	bl	80009dc <__aeabi_dcmplt>
 8004450:	2800      	cmp	r0, #0
 8004452:	d04a      	beq.n	80044ea <_dtoa_r+0x21a>
 8004454:	2300      	movs	r3, #0
 8004456:	3f01      	subs	r7, #1
 8004458:	930f      	str	r3, [sp, #60]	@ 0x3c
 800445a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	1e5a      	subs	r2, r3, #1
 8004460:	bf46      	itte	mi
 8004462:	f1c3 0801 	rsbmi	r8, r3, #1
 8004466:	2300      	movmi	r3, #0
 8004468:	f04f 0800 	movpl.w	r8, #0
 800446c:	9209      	str	r2, [sp, #36]	@ 0x24
 800446e:	bf48      	it	mi
 8004470:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004472:	2f00      	cmp	r7, #0
 8004474:	db3b      	blt.n	80044ee <_dtoa_r+0x21e>
 8004476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004478:	970e      	str	r7, [sp, #56]	@ 0x38
 800447a:	443b      	add	r3, r7
 800447c:	9309      	str	r3, [sp, #36]	@ 0x24
 800447e:	2300      	movs	r3, #0
 8004480:	930a      	str	r3, [sp, #40]	@ 0x28
 8004482:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004484:	2b09      	cmp	r3, #9
 8004486:	d866      	bhi.n	8004556 <_dtoa_r+0x286>
 8004488:	2b05      	cmp	r3, #5
 800448a:	bfc4      	itt	gt
 800448c:	3b04      	subgt	r3, #4
 800448e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004490:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004492:	bfc8      	it	gt
 8004494:	2400      	movgt	r4, #0
 8004496:	f1a3 0302 	sub.w	r3, r3, #2
 800449a:	bfd8      	it	le
 800449c:	2401      	movle	r4, #1
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d864      	bhi.n	800456c <_dtoa_r+0x29c>
 80044a2:	e8df f003 	tbb	[pc, r3]
 80044a6:	382b      	.short	0x382b
 80044a8:	5636      	.short	0x5636
 80044aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80044ae:	441e      	add	r6, r3
 80044b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	bfc1      	itttt	gt
 80044b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80044bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80044c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80044c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80044c8:	bfd6      	itet	le
 80044ca:	f1c3 0320 	rsble	r3, r3, #32
 80044ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80044d2:	fa04 f003 	lslle.w	r0, r4, r3
 80044d6:	f7fb ff95 	bl	8000404 <__aeabi_ui2d>
 80044da:	2201      	movs	r2, #1
 80044dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044e0:	3e01      	subs	r6, #1
 80044e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80044e4:	e775      	b.n	80043d2 <_dtoa_r+0x102>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e7b6      	b.n	8004458 <_dtoa_r+0x188>
 80044ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80044ec:	e7b5      	b.n	800445a <_dtoa_r+0x18a>
 80044ee:	427b      	negs	r3, r7
 80044f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044f2:	2300      	movs	r3, #0
 80044f4:	eba8 0807 	sub.w	r8, r8, r7
 80044f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80044fa:	e7c2      	b.n	8004482 <_dtoa_r+0x1b2>
 80044fc:	2300      	movs	r3, #0
 80044fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004502:	2b00      	cmp	r3, #0
 8004504:	dc35      	bgt.n	8004572 <_dtoa_r+0x2a2>
 8004506:	2301      	movs	r3, #1
 8004508:	461a      	mov	r2, r3
 800450a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800450e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004510:	e00b      	b.n	800452a <_dtoa_r+0x25a>
 8004512:	2301      	movs	r3, #1
 8004514:	e7f3      	b.n	80044fe <_dtoa_r+0x22e>
 8004516:	2300      	movs	r3, #0
 8004518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800451a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	9308      	str	r3, [sp, #32]
 8004520:	3301      	adds	r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	9307      	str	r3, [sp, #28]
 8004526:	bfb8      	it	lt
 8004528:	2301      	movlt	r3, #1
 800452a:	2100      	movs	r1, #0
 800452c:	2204      	movs	r2, #4
 800452e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004532:	f102 0514 	add.w	r5, r2, #20
 8004536:	429d      	cmp	r5, r3
 8004538:	d91f      	bls.n	800457a <_dtoa_r+0x2aa>
 800453a:	6041      	str	r1, [r0, #4]
 800453c:	4658      	mov	r0, fp
 800453e:	f000 ff2d 	bl	800539c <_Balloc>
 8004542:	4682      	mov	sl, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d139      	bne.n	80045bc <_dtoa_r+0x2ec>
 8004548:	4602      	mov	r2, r0
 800454a:	f240 11af 	movw	r1, #431	@ 0x1af
 800454e:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <_dtoa_r+0x2e8>)
 8004550:	e6d2      	b.n	80042f8 <_dtoa_r+0x28>
 8004552:	2301      	movs	r3, #1
 8004554:	e7e0      	b.n	8004518 <_dtoa_r+0x248>
 8004556:	2401      	movs	r4, #1
 8004558:	2300      	movs	r3, #0
 800455a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800455c:	9320      	str	r3, [sp, #128]	@ 0x80
 800455e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004562:	2200      	movs	r2, #0
 8004564:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004568:	2312      	movs	r3, #18
 800456a:	e7d0      	b.n	800450e <_dtoa_r+0x23e>
 800456c:	2301      	movs	r3, #1
 800456e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004570:	e7f5      	b.n	800455e <_dtoa_r+0x28e>
 8004572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004574:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004578:	e7d7      	b.n	800452a <_dtoa_r+0x25a>
 800457a:	3101      	adds	r1, #1
 800457c:	0052      	lsls	r2, r2, #1
 800457e:	e7d8      	b.n	8004532 <_dtoa_r+0x262>
 8004580:	636f4361 	.word	0x636f4361
 8004584:	3fd287a7 	.word	0x3fd287a7
 8004588:	8b60c8b3 	.word	0x8b60c8b3
 800458c:	3fc68a28 	.word	0x3fc68a28
 8004590:	509f79fb 	.word	0x509f79fb
 8004594:	3fd34413 	.word	0x3fd34413
 8004598:	08007a29 	.word	0x08007a29
 800459c:	08007a40 	.word	0x08007a40
 80045a0:	7ff00000 	.word	0x7ff00000
 80045a4:	08007a25 	.word	0x08007a25
 80045a8:	080079f9 	.word	0x080079f9
 80045ac:	080079f8 	.word	0x080079f8
 80045b0:	3ff80000 	.word	0x3ff80000
 80045b4:	08007b48 	.word	0x08007b48
 80045b8:	08007a98 	.word	0x08007a98
 80045bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80045c0:	6018      	str	r0, [r3, #0]
 80045c2:	9b07      	ldr	r3, [sp, #28]
 80045c4:	2b0e      	cmp	r3, #14
 80045c6:	f200 80a4 	bhi.w	8004712 <_dtoa_r+0x442>
 80045ca:	2c00      	cmp	r4, #0
 80045cc:	f000 80a1 	beq.w	8004712 <_dtoa_r+0x442>
 80045d0:	2f00      	cmp	r7, #0
 80045d2:	dd33      	ble.n	800463c <_dtoa_r+0x36c>
 80045d4:	4b86      	ldr	r3, [pc, #536]	@ (80047f0 <_dtoa_r+0x520>)
 80045d6:	f007 020f 	and.w	r2, r7, #15
 80045da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045de:	05f8      	lsls	r0, r7, #23
 80045e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80045ec:	d516      	bpl.n	800461c <_dtoa_r+0x34c>
 80045ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045f2:	4b80      	ldr	r3, [pc, #512]	@ (80047f4 <_dtoa_r+0x524>)
 80045f4:	2603      	movs	r6, #3
 80045f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045fa:	f7fc f8a7 	bl	800074c <__aeabi_ddiv>
 80045fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004602:	f004 040f 	and.w	r4, r4, #15
 8004606:	4d7b      	ldr	r5, [pc, #492]	@ (80047f4 <_dtoa_r+0x524>)
 8004608:	b954      	cbnz	r4, 8004620 <_dtoa_r+0x350>
 800460a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800460e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004612:	f7fc f89b 	bl	800074c <__aeabi_ddiv>
 8004616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800461a:	e028      	b.n	800466e <_dtoa_r+0x39e>
 800461c:	2602      	movs	r6, #2
 800461e:	e7f2      	b.n	8004606 <_dtoa_r+0x336>
 8004620:	07e1      	lsls	r1, r4, #31
 8004622:	d508      	bpl.n	8004636 <_dtoa_r+0x366>
 8004624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004628:	e9d5 2300 	ldrd	r2, r3, [r5]
 800462c:	f7fb ff64 	bl	80004f8 <__aeabi_dmul>
 8004630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004634:	3601      	adds	r6, #1
 8004636:	1064      	asrs	r4, r4, #1
 8004638:	3508      	adds	r5, #8
 800463a:	e7e5      	b.n	8004608 <_dtoa_r+0x338>
 800463c:	f000 80d2 	beq.w	80047e4 <_dtoa_r+0x514>
 8004640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004644:	427c      	negs	r4, r7
 8004646:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <_dtoa_r+0x520>)
 8004648:	f004 020f 	and.w	r2, r4, #15
 800464c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ff50 	bl	80004f8 <__aeabi_dmul>
 8004658:	2602      	movs	r6, #2
 800465a:	2300      	movs	r3, #0
 800465c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004660:	4d64      	ldr	r5, [pc, #400]	@ (80047f4 <_dtoa_r+0x524>)
 8004662:	1124      	asrs	r4, r4, #4
 8004664:	2c00      	cmp	r4, #0
 8004666:	f040 80b2 	bne.w	80047ce <_dtoa_r+0x4fe>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1d3      	bne.n	8004616 <_dtoa_r+0x346>
 800466e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80b7 	beq.w	80047e8 <_dtoa_r+0x518>
 800467a:	2200      	movs	r2, #0
 800467c:	4620      	mov	r0, r4
 800467e:	4629      	mov	r1, r5
 8004680:	4b5d      	ldr	r3, [pc, #372]	@ (80047f8 <_dtoa_r+0x528>)
 8004682:	f7fc f9ab 	bl	80009dc <__aeabi_dcmplt>
 8004686:	2800      	cmp	r0, #0
 8004688:	f000 80ae 	beq.w	80047e8 <_dtoa_r+0x518>
 800468c:	9b07      	ldr	r3, [sp, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80aa 	beq.w	80047e8 <_dtoa_r+0x518>
 8004694:	9b08      	ldr	r3, [sp, #32]
 8004696:	2b00      	cmp	r3, #0
 8004698:	dd37      	ble.n	800470a <_dtoa_r+0x43a>
 800469a:	1e7b      	subs	r3, r7, #1
 800469c:	4620      	mov	r0, r4
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	2200      	movs	r2, #0
 80046a2:	4629      	mov	r1, r5
 80046a4:	4b55      	ldr	r3, [pc, #340]	@ (80047fc <_dtoa_r+0x52c>)
 80046a6:	f7fb ff27 	bl	80004f8 <__aeabi_dmul>
 80046aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ae:	9c08      	ldr	r4, [sp, #32]
 80046b0:	3601      	adds	r6, #1
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7fb feb6 	bl	8000424 <__aeabi_i2d>
 80046b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046bc:	f7fb ff1c 	bl	80004f8 <__aeabi_dmul>
 80046c0:	2200      	movs	r2, #0
 80046c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004800 <_dtoa_r+0x530>)
 80046c4:	f7fb fd62 	bl	800018c <__adddf3>
 80046c8:	4605      	mov	r5, r0
 80046ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	f040 809a 	bne.w	8004808 <_dtoa_r+0x538>
 80046d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <_dtoa_r+0x534>)
 80046dc:	f7fb fd54 	bl	8000188 <__aeabi_dsub>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046e8:	462a      	mov	r2, r5
 80046ea:	4633      	mov	r3, r6
 80046ec:	f7fc f994 	bl	8000a18 <__aeabi_dcmpgt>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f040 828e 	bne.w	8004c12 <_dtoa_r+0x942>
 80046f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046fa:	462a      	mov	r2, r5
 80046fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004700:	f7fc f96c 	bl	80009dc <__aeabi_dcmplt>
 8004704:	2800      	cmp	r0, #0
 8004706:	f040 8127 	bne.w	8004958 <_dtoa_r+0x688>
 800470a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800470e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004712:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	f2c0 8163 	blt.w	80049e0 <_dtoa_r+0x710>
 800471a:	2f0e      	cmp	r7, #14
 800471c:	f300 8160 	bgt.w	80049e0 <_dtoa_r+0x710>
 8004720:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <_dtoa_r+0x520>)
 8004722:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800472a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800472e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004730:	2b00      	cmp	r3, #0
 8004732:	da03      	bge.n	800473c <_dtoa_r+0x46c>
 8004734:	9b07      	ldr	r3, [sp, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f340 8100 	ble.w	800493c <_dtoa_r+0x66c>
 800473c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004740:	4656      	mov	r6, sl
 8004742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004746:	4620      	mov	r0, r4
 8004748:	4629      	mov	r1, r5
 800474a:	f7fb ffff 	bl	800074c <__aeabi_ddiv>
 800474e:	f7fc f983 	bl	8000a58 <__aeabi_d2iz>
 8004752:	4680      	mov	r8, r0
 8004754:	f7fb fe66 	bl	8000424 <__aeabi_i2d>
 8004758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800475c:	f7fb fecc 	bl	80004f8 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd0e 	bl	8000188 <__aeabi_dsub>
 800476c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004770:	9d07      	ldr	r5, [sp, #28]
 8004772:	f806 4b01 	strb.w	r4, [r6], #1
 8004776:	eba6 040a 	sub.w	r4, r6, sl
 800477a:	42a5      	cmp	r5, r4
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	f040 8116 	bne.w	80049b0 <_dtoa_r+0x6e0>
 8004784:	f7fb fd02 	bl	800018c <__adddf3>
 8004788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478c:	4604      	mov	r4, r0
 800478e:	460d      	mov	r5, r1
 8004790:	f7fc f942 	bl	8000a18 <__aeabi_dcmpgt>
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 80f8 	bne.w	800498a <_dtoa_r+0x6ba>
 800479a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fc f911 	bl	80009c8 <__aeabi_dcmpeq>
 80047a6:	b118      	cbz	r0, 80047b0 <_dtoa_r+0x4e0>
 80047a8:	f018 0f01 	tst.w	r8, #1
 80047ac:	f040 80ed 	bne.w	800498a <_dtoa_r+0x6ba>
 80047b0:	4649      	mov	r1, r9
 80047b2:	4658      	mov	r0, fp
 80047b4:	f000 fe32 	bl	800541c <_Bfree>
 80047b8:	2300      	movs	r3, #0
 80047ba:	7033      	strb	r3, [r6, #0]
 80047bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80047be:	3701      	adds	r7, #1
 80047c0:	601f      	str	r7, [r3, #0]
 80047c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8320 	beq.w	8004e0a <_dtoa_r+0xb3a>
 80047ca:	601e      	str	r6, [r3, #0]
 80047cc:	e31d      	b.n	8004e0a <_dtoa_r+0xb3a>
 80047ce:	07e2      	lsls	r2, r4, #31
 80047d0:	d505      	bpl.n	80047de <_dtoa_r+0x50e>
 80047d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047d6:	f7fb fe8f 	bl	80004f8 <__aeabi_dmul>
 80047da:	2301      	movs	r3, #1
 80047dc:	3601      	adds	r6, #1
 80047de:	1064      	asrs	r4, r4, #1
 80047e0:	3508      	adds	r5, #8
 80047e2:	e73f      	b.n	8004664 <_dtoa_r+0x394>
 80047e4:	2602      	movs	r6, #2
 80047e6:	e742      	b.n	800466e <_dtoa_r+0x39e>
 80047e8:	9c07      	ldr	r4, [sp, #28]
 80047ea:	9704      	str	r7, [sp, #16]
 80047ec:	e761      	b.n	80046b2 <_dtoa_r+0x3e2>
 80047ee:	bf00      	nop
 80047f0:	08007b48 	.word	0x08007b48
 80047f4:	08007b20 	.word	0x08007b20
 80047f8:	3ff00000 	.word	0x3ff00000
 80047fc:	40240000 	.word	0x40240000
 8004800:	401c0000 	.word	0x401c0000
 8004804:	40140000 	.word	0x40140000
 8004808:	4b70      	ldr	r3, [pc, #448]	@ (80049cc <_dtoa_r+0x6fc>)
 800480a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800480c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004814:	4454      	add	r4, sl
 8004816:	2900      	cmp	r1, #0
 8004818:	d045      	beq.n	80048a6 <_dtoa_r+0x5d6>
 800481a:	2000      	movs	r0, #0
 800481c:	496c      	ldr	r1, [pc, #432]	@ (80049d0 <_dtoa_r+0x700>)
 800481e:	f7fb ff95 	bl	800074c <__aeabi_ddiv>
 8004822:	4633      	mov	r3, r6
 8004824:	462a      	mov	r2, r5
 8004826:	f7fb fcaf 	bl	8000188 <__aeabi_dsub>
 800482a:	4656      	mov	r6, sl
 800482c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004834:	f7fc f910 	bl	8000a58 <__aeabi_d2iz>
 8004838:	4605      	mov	r5, r0
 800483a:	f7fb fdf3 	bl	8000424 <__aeabi_i2d>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004846:	f7fb fc9f 	bl	8000188 <__aeabi_dsub>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	3530      	adds	r5, #48	@ 0x30
 8004850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004858:	f806 5b01 	strb.w	r5, [r6], #1
 800485c:	f7fc f8be 	bl	80009dc <__aeabi_dcmplt>
 8004860:	2800      	cmp	r0, #0
 8004862:	d163      	bne.n	800492c <_dtoa_r+0x65c>
 8004864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004868:	2000      	movs	r0, #0
 800486a:	495a      	ldr	r1, [pc, #360]	@ (80049d4 <_dtoa_r+0x704>)
 800486c:	f7fb fc8c 	bl	8000188 <__aeabi_dsub>
 8004870:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004874:	f7fc f8b2 	bl	80009dc <__aeabi_dcmplt>
 8004878:	2800      	cmp	r0, #0
 800487a:	f040 8087 	bne.w	800498c <_dtoa_r+0x6bc>
 800487e:	42a6      	cmp	r6, r4
 8004880:	f43f af43 	beq.w	800470a <_dtoa_r+0x43a>
 8004884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004888:	2200      	movs	r2, #0
 800488a:	4b53      	ldr	r3, [pc, #332]	@ (80049d8 <_dtoa_r+0x708>)
 800488c:	f7fb fe34 	bl	80004f8 <__aeabi_dmul>
 8004890:	2200      	movs	r2, #0
 8004892:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489a:	4b4f      	ldr	r3, [pc, #316]	@ (80049d8 <_dtoa_r+0x708>)
 800489c:	f7fb fe2c 	bl	80004f8 <__aeabi_dmul>
 80048a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a4:	e7c4      	b.n	8004830 <_dtoa_r+0x560>
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7fb fe25 	bl	80004f8 <__aeabi_dmul>
 80048ae:	4656      	mov	r6, sl
 80048b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80048b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ba:	f7fc f8cd 	bl	8000a58 <__aeabi_d2iz>
 80048be:	4605      	mov	r5, r0
 80048c0:	f7fb fdb0 	bl	8000424 <__aeabi_i2d>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048cc:	f7fb fc5c 	bl	8000188 <__aeabi_dsub>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	3530      	adds	r5, #48	@ 0x30
 80048d6:	f806 5b01 	strb.w	r5, [r6], #1
 80048da:	42a6      	cmp	r6, r4
 80048dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	d124      	bne.n	8004930 <_dtoa_r+0x660>
 80048e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048ea:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <_dtoa_r+0x700>)
 80048ec:	f7fb fc4e 	bl	800018c <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f8:	f7fc f88e 	bl	8000a18 <__aeabi_dcmpgt>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d145      	bne.n	800498c <_dtoa_r+0x6bc>
 8004900:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004904:	2000      	movs	r0, #0
 8004906:	4932      	ldr	r1, [pc, #200]	@ (80049d0 <_dtoa_r+0x700>)
 8004908:	f7fb fc3e 	bl	8000188 <__aeabi_dsub>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004914:	f7fc f862 	bl	80009dc <__aeabi_dcmplt>
 8004918:	2800      	cmp	r0, #0
 800491a:	f43f aef6 	beq.w	800470a <_dtoa_r+0x43a>
 800491e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004920:	1e73      	subs	r3, r6, #1
 8004922:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004924:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004928:	2b30      	cmp	r3, #48	@ 0x30
 800492a:	d0f8      	beq.n	800491e <_dtoa_r+0x64e>
 800492c:	9f04      	ldr	r7, [sp, #16]
 800492e:	e73f      	b.n	80047b0 <_dtoa_r+0x4e0>
 8004930:	4b29      	ldr	r3, [pc, #164]	@ (80049d8 <_dtoa_r+0x708>)
 8004932:	f7fb fde1 	bl	80004f8 <__aeabi_dmul>
 8004936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800493a:	e7bc      	b.n	80048b6 <_dtoa_r+0x5e6>
 800493c:	d10c      	bne.n	8004958 <_dtoa_r+0x688>
 800493e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004942:	2200      	movs	r2, #0
 8004944:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <_dtoa_r+0x70c>)
 8004946:	f7fb fdd7 	bl	80004f8 <__aeabi_dmul>
 800494a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800494e:	f7fc f859 	bl	8000a04 <__aeabi_dcmpge>
 8004952:	2800      	cmp	r0, #0
 8004954:	f000 815b 	beq.w	8004c0e <_dtoa_r+0x93e>
 8004958:	2400      	movs	r4, #0
 800495a:	4625      	mov	r5, r4
 800495c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800495e:	4656      	mov	r6, sl
 8004960:	43db      	mvns	r3, r3
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	2700      	movs	r7, #0
 8004966:	4621      	mov	r1, r4
 8004968:	4658      	mov	r0, fp
 800496a:	f000 fd57 	bl	800541c <_Bfree>
 800496e:	2d00      	cmp	r5, #0
 8004970:	d0dc      	beq.n	800492c <_dtoa_r+0x65c>
 8004972:	b12f      	cbz	r7, 8004980 <_dtoa_r+0x6b0>
 8004974:	42af      	cmp	r7, r5
 8004976:	d003      	beq.n	8004980 <_dtoa_r+0x6b0>
 8004978:	4639      	mov	r1, r7
 800497a:	4658      	mov	r0, fp
 800497c:	f000 fd4e 	bl	800541c <_Bfree>
 8004980:	4629      	mov	r1, r5
 8004982:	4658      	mov	r0, fp
 8004984:	f000 fd4a 	bl	800541c <_Bfree>
 8004988:	e7d0      	b.n	800492c <_dtoa_r+0x65c>
 800498a:	9704      	str	r7, [sp, #16]
 800498c:	4633      	mov	r3, r6
 800498e:	461e      	mov	r6, r3
 8004990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004994:	2a39      	cmp	r2, #57	@ 0x39
 8004996:	d107      	bne.n	80049a8 <_dtoa_r+0x6d8>
 8004998:	459a      	cmp	sl, r3
 800499a:	d1f8      	bne.n	800498e <_dtoa_r+0x6be>
 800499c:	9a04      	ldr	r2, [sp, #16]
 800499e:	3201      	adds	r2, #1
 80049a0:	9204      	str	r2, [sp, #16]
 80049a2:	2230      	movs	r2, #48	@ 0x30
 80049a4:	f88a 2000 	strb.w	r2, [sl]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	3201      	adds	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e7bd      	b.n	800492c <_dtoa_r+0x65c>
 80049b0:	2200      	movs	r2, #0
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <_dtoa_r+0x708>)
 80049b4:	f7fb fda0 	bl	80004f8 <__aeabi_dmul>
 80049b8:	2200      	movs	r2, #0
 80049ba:	2300      	movs	r3, #0
 80049bc:	4604      	mov	r4, r0
 80049be:	460d      	mov	r5, r1
 80049c0:	f7fc f802 	bl	80009c8 <__aeabi_dcmpeq>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f43f aebc 	beq.w	8004742 <_dtoa_r+0x472>
 80049ca:	e6f1      	b.n	80047b0 <_dtoa_r+0x4e0>
 80049cc:	08007b48 	.word	0x08007b48
 80049d0:	3fe00000 	.word	0x3fe00000
 80049d4:	3ff00000 	.word	0x3ff00000
 80049d8:	40240000 	.word	0x40240000
 80049dc:	40140000 	.word	0x40140000
 80049e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	f000 80db 	beq.w	8004b9e <_dtoa_r+0x8ce>
 80049e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049ea:	2a01      	cmp	r2, #1
 80049ec:	f300 80bf 	bgt.w	8004b6e <_dtoa_r+0x89e>
 80049f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	f000 80b7 	beq.w	8004b66 <_dtoa_r+0x896>
 80049f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80049fc:	4646      	mov	r6, r8
 80049fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a02:	2101      	movs	r1, #1
 8004a04:	441a      	add	r2, r3
 8004a06:	4658      	mov	r0, fp
 8004a08:	4498      	add	r8, r3
 8004a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a0c:	f000 fdba 	bl	8005584 <__i2b>
 8004a10:	4605      	mov	r5, r0
 8004a12:	b15e      	cbz	r6, 8004a2c <_dtoa_r+0x75c>
 8004a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dd08      	ble.n	8004a2c <_dtoa_r+0x75c>
 8004a1a:	42b3      	cmp	r3, r6
 8004a1c:	bfa8      	it	ge
 8004a1e:	4633      	movge	r3, r6
 8004a20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a22:	eba8 0803 	sub.w	r8, r8, r3
 8004a26:	1af6      	subs	r6, r6, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a2e:	b1f3      	cbz	r3, 8004a6e <_dtoa_r+0x79e>
 8004a30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80b7 	beq.w	8004ba6 <_dtoa_r+0x8d6>
 8004a38:	b18c      	cbz	r4, 8004a5e <_dtoa_r+0x78e>
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4658      	mov	r0, fp
 8004a40:	f000 fe5e 	bl	8005700 <__pow5mult>
 8004a44:	464a      	mov	r2, r9
 8004a46:	4601      	mov	r1, r0
 8004a48:	4605      	mov	r5, r0
 8004a4a:	4658      	mov	r0, fp
 8004a4c:	f000 fdb0 	bl	80055b0 <__multiply>
 8004a50:	4649      	mov	r1, r9
 8004a52:	9004      	str	r0, [sp, #16]
 8004a54:	4658      	mov	r0, fp
 8004a56:	f000 fce1 	bl	800541c <_Bfree>
 8004a5a:	9b04      	ldr	r3, [sp, #16]
 8004a5c:	4699      	mov	r9, r3
 8004a5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a60:	1b1a      	subs	r2, r3, r4
 8004a62:	d004      	beq.n	8004a6e <_dtoa_r+0x79e>
 8004a64:	4649      	mov	r1, r9
 8004a66:	4658      	mov	r0, fp
 8004a68:	f000 fe4a 	bl	8005700 <__pow5mult>
 8004a6c:	4681      	mov	r9, r0
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4658      	mov	r0, fp
 8004a72:	f000 fd87 	bl	8005584 <__i2b>
 8004a76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a78:	4604      	mov	r4, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 81c9 	beq.w	8004e12 <_dtoa_r+0xb42>
 8004a80:	461a      	mov	r2, r3
 8004a82:	4601      	mov	r1, r0
 8004a84:	4658      	mov	r0, fp
 8004a86:	f000 fe3b 	bl	8005700 <__pow5mult>
 8004a8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f300 808f 	bgt.w	8004bb2 <_dtoa_r+0x8e2>
 8004a94:	9b02      	ldr	r3, [sp, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 8087 	bne.w	8004baa <_dtoa_r+0x8da>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8083 	bne.w	8004bae <_dtoa_r+0x8de>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004aae:	0d1b      	lsrs	r3, r3, #20
 8004ab0:	051b      	lsls	r3, r3, #20
 8004ab2:	b12b      	cbz	r3, 8004ac0 <_dtoa_r+0x7f0>
 8004ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab6:	f108 0801 	add.w	r8, r8, #1
 8004aba:	3301      	adds	r3, #1
 8004abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004abe:	2301      	movs	r3, #1
 8004ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 81aa 	beq.w	8004e1e <_dtoa_r+0xb4e>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ad0:	6918      	ldr	r0, [r3, #16]
 8004ad2:	f000 fd0b 	bl	80054ec <__hi0bits>
 8004ad6:	f1c0 0020 	rsb	r0, r0, #32
 8004ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004adc:	4418      	add	r0, r3
 8004ade:	f010 001f 	ands.w	r0, r0, #31
 8004ae2:	d071      	beq.n	8004bc8 <_dtoa_r+0x8f8>
 8004ae4:	f1c0 0320 	rsb	r3, r0, #32
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	dd65      	ble.n	8004bb8 <_dtoa_r+0x8e8>
 8004aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aee:	f1c0 001c 	rsb	r0, r0, #28
 8004af2:	4403      	add	r3, r0
 8004af4:	4480      	add	r8, r0
 8004af6:	4406      	add	r6, r0
 8004af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004afa:	f1b8 0f00 	cmp.w	r8, #0
 8004afe:	dd05      	ble.n	8004b0c <_dtoa_r+0x83c>
 8004b00:	4649      	mov	r1, r9
 8004b02:	4642      	mov	r2, r8
 8004b04:	4658      	mov	r0, fp
 8004b06:	f000 fe55 	bl	80057b4 <__lshift>
 8004b0a:	4681      	mov	r9, r0
 8004b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd05      	ble.n	8004b1e <_dtoa_r+0x84e>
 8004b12:	4621      	mov	r1, r4
 8004b14:	461a      	mov	r2, r3
 8004b16:	4658      	mov	r0, fp
 8004b18:	f000 fe4c 	bl	80057b4 <__lshift>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d053      	beq.n	8004bcc <_dtoa_r+0x8fc>
 8004b24:	4621      	mov	r1, r4
 8004b26:	4648      	mov	r0, r9
 8004b28:	f000 feb0 	bl	800588c <__mcmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	da4d      	bge.n	8004bcc <_dtoa_r+0x8fc>
 8004b30:	1e7b      	subs	r3, r7, #1
 8004b32:	4649      	mov	r1, r9
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	220a      	movs	r2, #10
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4658      	mov	r0, fp
 8004b3c:	f000 fc90 	bl	8005460 <__multadd>
 8004b40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b42:	4681      	mov	r9, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 816c 	beq.w	8004e22 <_dtoa_r+0xb52>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	220a      	movs	r2, #10
 8004b50:	4658      	mov	r0, fp
 8004b52:	f000 fc85 	bl	8005460 <__multadd>
 8004b56:	9b08      	ldr	r3, [sp, #32]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	dc61      	bgt.n	8004c22 <_dtoa_r+0x952>
 8004b5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	dc3b      	bgt.n	8004bdc <_dtoa_r+0x90c>
 8004b64:	e05d      	b.n	8004c22 <_dtoa_r+0x952>
 8004b66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b6c:	e746      	b.n	80049fc <_dtoa_r+0x72c>
 8004b6e:	9b07      	ldr	r3, [sp, #28]
 8004b70:	1e5c      	subs	r4, r3, #1
 8004b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	bfbf      	itttt	lt
 8004b78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004b7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004b7c:	1ae3      	sublt	r3, r4, r3
 8004b7e:	18d2      	addlt	r2, r2, r3
 8004b80:	bfa8      	it	ge
 8004b82:	1b1c      	subge	r4, r3, r4
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	bfbe      	ittt	lt
 8004b88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004b8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004b8c:	2400      	movlt	r4, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfb5      	itete	lt
 8004b92:	eba8 0603 	sublt.w	r6, r8, r3
 8004b96:	4646      	movge	r6, r8
 8004b98:	2300      	movlt	r3, #0
 8004b9a:	9b07      	ldrge	r3, [sp, #28]
 8004b9c:	e730      	b.n	8004a00 <_dtoa_r+0x730>
 8004b9e:	4646      	mov	r6, r8
 8004ba0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ba2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ba4:	e735      	b.n	8004a12 <_dtoa_r+0x742>
 8004ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ba8:	e75c      	b.n	8004a64 <_dtoa_r+0x794>
 8004baa:	2300      	movs	r3, #0
 8004bac:	e788      	b.n	8004ac0 <_dtoa_r+0x7f0>
 8004bae:	9b02      	ldr	r3, [sp, #8]
 8004bb0:	e786      	b.n	8004ac0 <_dtoa_r+0x7f0>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bb6:	e788      	b.n	8004aca <_dtoa_r+0x7fa>
 8004bb8:	d09f      	beq.n	8004afa <_dtoa_r+0x82a>
 8004bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bbc:	331c      	adds	r3, #28
 8004bbe:	441a      	add	r2, r3
 8004bc0:	4498      	add	r8, r3
 8004bc2:	441e      	add	r6, r3
 8004bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc6:	e798      	b.n	8004afa <_dtoa_r+0x82a>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	e7f6      	b.n	8004bba <_dtoa_r+0x8ea>
 8004bcc:	9b07      	ldr	r3, [sp, #28]
 8004bce:	9704      	str	r7, [sp, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dc20      	bgt.n	8004c16 <_dtoa_r+0x946>
 8004bd4:	9308      	str	r3, [sp, #32]
 8004bd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	dd1e      	ble.n	8004c1a <_dtoa_r+0x94a>
 8004bdc:	9b08      	ldr	r3, [sp, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f47f aebc 	bne.w	800495c <_dtoa_r+0x68c>
 8004be4:	4621      	mov	r1, r4
 8004be6:	2205      	movs	r2, #5
 8004be8:	4658      	mov	r0, fp
 8004bea:	f000 fc39 	bl	8005460 <__multadd>
 8004bee:	4601      	mov	r1, r0
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	4648      	mov	r0, r9
 8004bf4:	f000 fe4a 	bl	800588c <__mcmp>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f77f aeaf 	ble.w	800495c <_dtoa_r+0x68c>
 8004bfe:	2331      	movs	r3, #49	@ 0x31
 8004c00:	4656      	mov	r6, sl
 8004c02:	f806 3b01 	strb.w	r3, [r6], #1
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	e6aa      	b.n	8004964 <_dtoa_r+0x694>
 8004c0e:	9c07      	ldr	r4, [sp, #28]
 8004c10:	9704      	str	r7, [sp, #16]
 8004c12:	4625      	mov	r5, r4
 8004c14:	e7f3      	b.n	8004bfe <_dtoa_r+0x92e>
 8004c16:	9b07      	ldr	r3, [sp, #28]
 8004c18:	9308      	str	r3, [sp, #32]
 8004c1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8104 	beq.w	8004e2a <_dtoa_r+0xb5a>
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	dd05      	ble.n	8004c32 <_dtoa_r+0x962>
 8004c26:	4629      	mov	r1, r5
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4658      	mov	r0, fp
 8004c2c:	f000 fdc2 	bl	80057b4 <__lshift>
 8004c30:	4605      	mov	r5, r0
 8004c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05a      	beq.n	8004cee <_dtoa_r+0xa1e>
 8004c38:	4658      	mov	r0, fp
 8004c3a:	6869      	ldr	r1, [r5, #4]
 8004c3c:	f000 fbae 	bl	800539c <_Balloc>
 8004c40:	4606      	mov	r6, r0
 8004c42:	b928      	cbnz	r0, 8004c50 <_dtoa_r+0x980>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c4a:	4b83      	ldr	r3, [pc, #524]	@ (8004e58 <_dtoa_r+0xb88>)
 8004c4c:	f7ff bb54 	b.w	80042f8 <_dtoa_r+0x28>
 8004c50:	692a      	ldr	r2, [r5, #16]
 8004c52:	f105 010c 	add.w	r1, r5, #12
 8004c56:	3202      	adds	r2, #2
 8004c58:	0092      	lsls	r2, r2, #2
 8004c5a:	300c      	adds	r0, #12
 8004c5c:	f001 f8d0 	bl	8005e00 <memcpy>
 8004c60:	2201      	movs	r2, #1
 8004c62:	4631      	mov	r1, r6
 8004c64:	4658      	mov	r0, fp
 8004c66:	f000 fda5 	bl	80057b4 <__lshift>
 8004c6a:	462f      	mov	r7, r5
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	f10a 0301 	add.w	r3, sl, #1
 8004c72:	9307      	str	r3, [sp, #28]
 8004c74:	9b08      	ldr	r3, [sp, #32]
 8004c76:	4453      	add	r3, sl
 8004c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c7a:	9b02      	ldr	r3, [sp, #8]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c82:	9b07      	ldr	r3, [sp, #28]
 8004c84:	4621      	mov	r1, r4
 8004c86:	3b01      	subs	r3, #1
 8004c88:	4648      	mov	r0, r9
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	f7ff fa95 	bl	80041ba <quorem>
 8004c90:	4639      	mov	r1, r7
 8004c92:	9008      	str	r0, [sp, #32]
 8004c94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c98:	4648      	mov	r0, r9
 8004c9a:	f000 fdf7 	bl	800588c <__mcmp>
 8004c9e:	462a      	mov	r2, r5
 8004ca0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4658      	mov	r0, fp
 8004ca6:	f000 fe0d 	bl	80058c4 <__mdiff>
 8004caa:	68c2      	ldr	r2, [r0, #12]
 8004cac:	4606      	mov	r6, r0
 8004cae:	bb02      	cbnz	r2, 8004cf2 <_dtoa_r+0xa22>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4648      	mov	r0, r9
 8004cb4:	f000 fdea 	bl	800588c <__mcmp>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8004cc0:	f000 fbac 	bl	800541c <_Bfree>
 8004cc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004cc8:	9e07      	ldr	r6, [sp, #28]
 8004cca:	ea43 0102 	orr.w	r1, r3, r2
 8004cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cd0:	4319      	orrs	r1, r3
 8004cd2:	d110      	bne.n	8004cf6 <_dtoa_r+0xa26>
 8004cd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cd8:	d029      	beq.n	8004d2e <_dtoa_r+0xa5e>
 8004cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	dd02      	ble.n	8004ce6 <_dtoa_r+0xa16>
 8004ce0:	9b08      	ldr	r3, [sp, #32]
 8004ce2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ce6:	9b02      	ldr	r3, [sp, #8]
 8004ce8:	f883 8000 	strb.w	r8, [r3]
 8004cec:	e63b      	b.n	8004966 <_dtoa_r+0x696>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	e7bb      	b.n	8004c6a <_dtoa_r+0x99a>
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	e7e1      	b.n	8004cba <_dtoa_r+0x9ea>
 8004cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db04      	blt.n	8004d06 <_dtoa_r+0xa36>
 8004cfc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d02:	430b      	orrs	r3, r1
 8004d04:	d120      	bne.n	8004d48 <_dtoa_r+0xa78>
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	dded      	ble.n	8004ce6 <_dtoa_r+0xa16>
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4658      	mov	r0, fp
 8004d10:	f000 fd50 	bl	80057b4 <__lshift>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4681      	mov	r9, r0
 8004d18:	f000 fdb8 	bl	800588c <__mcmp>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	dc03      	bgt.n	8004d28 <_dtoa_r+0xa58>
 8004d20:	d1e1      	bne.n	8004ce6 <_dtoa_r+0xa16>
 8004d22:	f018 0f01 	tst.w	r8, #1
 8004d26:	d0de      	beq.n	8004ce6 <_dtoa_r+0xa16>
 8004d28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d2c:	d1d8      	bne.n	8004ce0 <_dtoa_r+0xa10>
 8004d2e:	2339      	movs	r3, #57	@ 0x39
 8004d30:	9a02      	ldr	r2, [sp, #8]
 8004d32:	7013      	strb	r3, [r2, #0]
 8004d34:	4633      	mov	r3, r6
 8004d36:	461e      	mov	r6, r3
 8004d38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	2a39      	cmp	r2, #57	@ 0x39
 8004d40:	d052      	beq.n	8004de8 <_dtoa_r+0xb18>
 8004d42:	3201      	adds	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e60e      	b.n	8004966 <_dtoa_r+0x696>
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	dd07      	ble.n	8004d5c <_dtoa_r+0xa8c>
 8004d4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d50:	d0ed      	beq.n	8004d2e <_dtoa_r+0xa5e>
 8004d52:	9a02      	ldr	r2, [sp, #8]
 8004d54:	f108 0301 	add.w	r3, r8, #1
 8004d58:	7013      	strb	r3, [r2, #0]
 8004d5a:	e604      	b.n	8004966 <_dtoa_r+0x696>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	9a07      	ldr	r2, [sp, #28]
 8004d60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d028      	beq.n	8004dbc <_dtoa_r+0xaec>
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	220a      	movs	r2, #10
 8004d70:	4658      	mov	r0, fp
 8004d72:	f000 fb75 	bl	8005460 <__multadd>
 8004d76:	42af      	cmp	r7, r5
 8004d78:	4681      	mov	r9, r0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 020a 	mov.w	r2, #10
 8004d82:	4639      	mov	r1, r7
 8004d84:	4658      	mov	r0, fp
 8004d86:	d107      	bne.n	8004d98 <_dtoa_r+0xac8>
 8004d88:	f000 fb6a 	bl	8005460 <__multadd>
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	4605      	mov	r5, r0
 8004d90:	9b07      	ldr	r3, [sp, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	9307      	str	r3, [sp, #28]
 8004d96:	e774      	b.n	8004c82 <_dtoa_r+0x9b2>
 8004d98:	f000 fb62 	bl	8005460 <__multadd>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4607      	mov	r7, r0
 8004da0:	2300      	movs	r3, #0
 8004da2:	220a      	movs	r2, #10
 8004da4:	4658      	mov	r0, fp
 8004da6:	f000 fb5b 	bl	8005460 <__multadd>
 8004daa:	4605      	mov	r5, r0
 8004dac:	e7f0      	b.n	8004d90 <_dtoa_r+0xac0>
 8004dae:	9b08      	ldr	r3, [sp, #32]
 8004db0:	2700      	movs	r7, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfcc      	ite	gt
 8004db6:	461e      	movgt	r6, r3
 8004db8:	2601      	movle	r6, #1
 8004dba:	4456      	add	r6, sl
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4658      	mov	r0, fp
 8004dc2:	f000 fcf7 	bl	80057b4 <__lshift>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4681      	mov	r9, r0
 8004dca:	f000 fd5f 	bl	800588c <__mcmp>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dcb0      	bgt.n	8004d34 <_dtoa_r+0xa64>
 8004dd2:	d102      	bne.n	8004dda <_dtoa_r+0xb0a>
 8004dd4:	f018 0f01 	tst.w	r8, #1
 8004dd8:	d1ac      	bne.n	8004d34 <_dtoa_r+0xa64>
 8004dda:	4633      	mov	r3, r6
 8004ddc:	461e      	mov	r6, r3
 8004dde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004de2:	2a30      	cmp	r2, #48	@ 0x30
 8004de4:	d0fa      	beq.n	8004ddc <_dtoa_r+0xb0c>
 8004de6:	e5be      	b.n	8004966 <_dtoa_r+0x696>
 8004de8:	459a      	cmp	sl, r3
 8004dea:	d1a4      	bne.n	8004d36 <_dtoa_r+0xa66>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	3301      	adds	r3, #1
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	2331      	movs	r3, #49	@ 0x31
 8004df4:	f88a 3000 	strb.w	r3, [sl]
 8004df8:	e5b5      	b.n	8004966 <_dtoa_r+0x696>
 8004dfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004dfc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004e5c <_dtoa_r+0xb8c>
 8004e00:	b11b      	cbz	r3, 8004e0a <_dtoa_r+0xb3a>
 8004e02:	f10a 0308 	add.w	r3, sl, #8
 8004e06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	b017      	add	sp, #92	@ 0x5c
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f77f ae3d 	ble.w	8004a94 <_dtoa_r+0x7c4>
 8004e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e65b      	b.n	8004ada <_dtoa_r+0x80a>
 8004e22:	9b08      	ldr	r3, [sp, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f77f aed6 	ble.w	8004bd6 <_dtoa_r+0x906>
 8004e2a:	4656      	mov	r6, sl
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4648      	mov	r0, r9
 8004e30:	f7ff f9c3 	bl	80041ba <quorem>
 8004e34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e38:	9b08      	ldr	r3, [sp, #32]
 8004e3a:	f806 8b01 	strb.w	r8, [r6], #1
 8004e3e:	eba6 020a 	sub.w	r2, r6, sl
 8004e42:	4293      	cmp	r3, r2
 8004e44:	ddb3      	ble.n	8004dae <_dtoa_r+0xade>
 8004e46:	4649      	mov	r1, r9
 8004e48:	2300      	movs	r3, #0
 8004e4a:	220a      	movs	r2, #10
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fb07 	bl	8005460 <__multadd>
 8004e52:	4681      	mov	r9, r0
 8004e54:	e7ea      	b.n	8004e2c <_dtoa_r+0xb5c>
 8004e56:	bf00      	nop
 8004e58:	08007a98 	.word	0x08007a98
 8004e5c:	08007a1c 	.word	0x08007a1c

08004e60 <__sfputc_r>:
 8004e60:	6893      	ldr	r3, [r2, #8]
 8004e62:	b410      	push	{r4}
 8004e64:	3b01      	subs	r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	6093      	str	r3, [r2, #8]
 8004e6a:	da07      	bge.n	8004e7c <__sfputc_r+0x1c>
 8004e6c:	6994      	ldr	r4, [r2, #24]
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	db01      	blt.n	8004e76 <__sfputc_r+0x16>
 8004e72:	290a      	cmp	r1, #10
 8004e74:	d102      	bne.n	8004e7c <__sfputc_r+0x1c>
 8004e76:	bc10      	pop	{r4}
 8004e78:	f000 be53 	b.w	8005b22 <__swbuf_r>
 8004e7c:	6813      	ldr	r3, [r2, #0]
 8004e7e:	1c58      	adds	r0, r3, #1
 8004e80:	6010      	str	r0, [r2, #0]
 8004e82:	7019      	strb	r1, [r3, #0]
 8004e84:	4608      	mov	r0, r1
 8004e86:	bc10      	pop	{r4}
 8004e88:	4770      	bx	lr

08004e8a <__sfputs_r>:
 8004e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	460f      	mov	r7, r1
 8004e90:	4614      	mov	r4, r2
 8004e92:	18d5      	adds	r5, r2, r3
 8004e94:	42ac      	cmp	r4, r5
 8004e96:	d101      	bne.n	8004e9c <__sfputs_r+0x12>
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e007      	b.n	8004eac <__sfputs_r+0x22>
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea4:	f7ff ffdc 	bl	8004e60 <__sfputc_r>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d1f3      	bne.n	8004e94 <__sfputs_r+0xa>
 8004eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eb0 <_vfiprintf_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	460d      	mov	r5, r1
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	4698      	mov	r8, r3
 8004eba:	4606      	mov	r6, r0
 8004ebc:	b09d      	sub	sp, #116	@ 0x74
 8004ebe:	b118      	cbz	r0, 8004ec8 <_vfiprintf_r+0x18>
 8004ec0:	6a03      	ldr	r3, [r0, #32]
 8004ec2:	b90b      	cbnz	r3, 8004ec8 <_vfiprintf_r+0x18>
 8004ec4:	f7ff f8ea 	bl	800409c <__sinit>
 8004ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eca:	07d9      	lsls	r1, r3, #31
 8004ecc:	d405      	bmi.n	8004eda <_vfiprintf_r+0x2a>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	059a      	lsls	r2, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <_vfiprintf_r+0x2a>
 8004ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ed6:	f7ff f960 	bl	800419a <__retarget_lock_acquire_recursive>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	071b      	lsls	r3, r3, #28
 8004ede:	d501      	bpl.n	8004ee4 <_vfiprintf_r+0x34>
 8004ee0:	692b      	ldr	r3, [r5, #16]
 8004ee2:	b99b      	cbnz	r3, 8004f0c <_vfiprintf_r+0x5c>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f000 fe5a 	bl	8005ba0 <__swsetup_r>
 8004eec:	b170      	cbz	r0, 8004f0c <_vfiprintf_r+0x5c>
 8004eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ef0:	07dc      	lsls	r4, r3, #31
 8004ef2:	d504      	bpl.n	8004efe <_vfiprintf_r+0x4e>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ef8:	b01d      	add	sp, #116	@ 0x74
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	0598      	lsls	r0, r3, #22
 8004f02:	d4f7      	bmi.n	8004ef4 <_vfiprintf_r+0x44>
 8004f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f06:	f7ff f949 	bl	800419c <__retarget_lock_release_recursive>
 8004f0a:	e7f3      	b.n	8004ef4 <_vfiprintf_r+0x44>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f10:	2320      	movs	r3, #32
 8004f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f16:	2330      	movs	r3, #48	@ 0x30
 8004f18:	f04f 0901 	mov.w	r9, #1
 8004f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f20:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80050cc <_vfiprintf_r+0x21c>
 8004f24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f28:	4623      	mov	r3, r4
 8004f2a:	469a      	mov	sl, r3
 8004f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f30:	b10a      	cbz	r2, 8004f36 <_vfiprintf_r+0x86>
 8004f32:	2a25      	cmp	r2, #37	@ 0x25
 8004f34:	d1f9      	bne.n	8004f2a <_vfiprintf_r+0x7a>
 8004f36:	ebba 0b04 	subs.w	fp, sl, r4
 8004f3a:	d00b      	beq.n	8004f54 <_vfiprintf_r+0xa4>
 8004f3c:	465b      	mov	r3, fp
 8004f3e:	4622      	mov	r2, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff ffa1 	bl	8004e8a <__sfputs_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f000 80a7 	beq.w	800509c <_vfiprintf_r+0x1ec>
 8004f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f50:	445a      	add	r2, fp
 8004f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f54:	f89a 3000 	ldrb.w	r3, [sl]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 809f 	beq.w	800509c <_vfiprintf_r+0x1ec>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f68:	f10a 0a01 	add.w	sl, sl, #1
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	9307      	str	r3, [sp, #28]
 8004f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f76:	4654      	mov	r4, sl
 8004f78:	2205      	movs	r2, #5
 8004f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7e:	4853      	ldr	r0, [pc, #332]	@ (80050cc <_vfiprintf_r+0x21c>)
 8004f80:	f7ff f90d 	bl	800419e <memchr>
 8004f84:	9a04      	ldr	r2, [sp, #16]
 8004f86:	b9d8      	cbnz	r0, 8004fc0 <_vfiprintf_r+0x110>
 8004f88:	06d1      	lsls	r1, r2, #27
 8004f8a:	bf44      	itt	mi
 8004f8c:	2320      	movmi	r3, #32
 8004f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f92:	0713      	lsls	r3, r2, #28
 8004f94:	bf44      	itt	mi
 8004f96:	232b      	movmi	r3, #43	@ 0x2b
 8004f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fa2:	d015      	beq.n	8004fd0 <_vfiprintf_r+0x120>
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f04f 0c0a 	mov.w	ip, #10
 8004fac:	9a07      	ldr	r2, [sp, #28]
 8004fae:	4621      	mov	r1, r4
 8004fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fb4:	3b30      	subs	r3, #48	@ 0x30
 8004fb6:	2b09      	cmp	r3, #9
 8004fb8:	d94b      	bls.n	8005052 <_vfiprintf_r+0x1a2>
 8004fba:	b1b0      	cbz	r0, 8004fea <_vfiprintf_r+0x13a>
 8004fbc:	9207      	str	r2, [sp, #28]
 8004fbe:	e014      	b.n	8004fea <_vfiprintf_r+0x13a>
 8004fc0:	eba0 0308 	sub.w	r3, r0, r8
 8004fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	46a2      	mov	sl, r4
 8004fcc:	9304      	str	r3, [sp, #16]
 8004fce:	e7d2      	b.n	8004f76 <_vfiprintf_r+0xc6>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	1d19      	adds	r1, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	9103      	str	r1, [sp, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfbb      	ittet	lt
 8004fdc:	425b      	neglt	r3, r3
 8004fde:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe2:	9307      	strge	r3, [sp, #28]
 8004fe4:	9307      	strlt	r3, [sp, #28]
 8004fe6:	bfb8      	it	lt
 8004fe8:	9204      	strlt	r2, [sp, #16]
 8004fea:	7823      	ldrb	r3, [r4, #0]
 8004fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fee:	d10a      	bne.n	8005006 <_vfiprintf_r+0x156>
 8004ff0:	7863      	ldrb	r3, [r4, #1]
 8004ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ff4:	d132      	bne.n	800505c <_vfiprintf_r+0x1ac>
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	3402      	adds	r4, #2
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	9203      	str	r2, [sp, #12]
 8005000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80050d0 <_vfiprintf_r+0x220>
 800500a:	2203      	movs	r2, #3
 800500c:	4650      	mov	r0, sl
 800500e:	7821      	ldrb	r1, [r4, #0]
 8005010:	f7ff f8c5 	bl	800419e <memchr>
 8005014:	b138      	cbz	r0, 8005026 <_vfiprintf_r+0x176>
 8005016:	2240      	movs	r2, #64	@ 0x40
 8005018:	9b04      	ldr	r3, [sp, #16]
 800501a:	eba0 000a 	sub.w	r0, r0, sl
 800501e:	4082      	lsls	r2, r0
 8005020:	4313      	orrs	r3, r2
 8005022:	3401      	adds	r4, #1
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502a:	2206      	movs	r2, #6
 800502c:	4829      	ldr	r0, [pc, #164]	@ (80050d4 <_vfiprintf_r+0x224>)
 800502e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005032:	f7ff f8b4 	bl	800419e <memchr>
 8005036:	2800      	cmp	r0, #0
 8005038:	d03f      	beq.n	80050ba <_vfiprintf_r+0x20a>
 800503a:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <_vfiprintf_r+0x228>)
 800503c:	bb1b      	cbnz	r3, 8005086 <_vfiprintf_r+0x1d6>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	3307      	adds	r3, #7
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	3308      	adds	r3, #8
 8005048:	9303      	str	r3, [sp, #12]
 800504a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504c:	443b      	add	r3, r7
 800504e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005050:	e76a      	b.n	8004f28 <_vfiprintf_r+0x78>
 8005052:	460c      	mov	r4, r1
 8005054:	2001      	movs	r0, #1
 8005056:	fb0c 3202 	mla	r2, ip, r2, r3
 800505a:	e7a8      	b.n	8004fae <_vfiprintf_r+0xfe>
 800505c:	2300      	movs	r3, #0
 800505e:	f04f 0c0a 	mov.w	ip, #10
 8005062:	4619      	mov	r1, r3
 8005064:	3401      	adds	r4, #1
 8005066:	9305      	str	r3, [sp, #20]
 8005068:	4620      	mov	r0, r4
 800506a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800506e:	3a30      	subs	r2, #48	@ 0x30
 8005070:	2a09      	cmp	r2, #9
 8005072:	d903      	bls.n	800507c <_vfiprintf_r+0x1cc>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0c6      	beq.n	8005006 <_vfiprintf_r+0x156>
 8005078:	9105      	str	r1, [sp, #20]
 800507a:	e7c4      	b.n	8005006 <_vfiprintf_r+0x156>
 800507c:	4604      	mov	r4, r0
 800507e:	2301      	movs	r3, #1
 8005080:	fb0c 2101 	mla	r1, ip, r1, r2
 8005084:	e7f0      	b.n	8005068 <_vfiprintf_r+0x1b8>
 8005086:	ab03      	add	r3, sp, #12
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	462a      	mov	r2, r5
 800508c:	4630      	mov	r0, r6
 800508e:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <_vfiprintf_r+0x22c>)
 8005090:	a904      	add	r1, sp, #16
 8005092:	f7fe fbb9 	bl	8003808 <_printf_float>
 8005096:	4607      	mov	r7, r0
 8005098:	1c78      	adds	r0, r7, #1
 800509a:	d1d6      	bne.n	800504a <_vfiprintf_r+0x19a>
 800509c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800509e:	07d9      	lsls	r1, r3, #31
 80050a0:	d405      	bmi.n	80050ae <_vfiprintf_r+0x1fe>
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	059a      	lsls	r2, r3, #22
 80050a6:	d402      	bmi.n	80050ae <_vfiprintf_r+0x1fe>
 80050a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050aa:	f7ff f877 	bl	800419c <__retarget_lock_release_recursive>
 80050ae:	89ab      	ldrh	r3, [r5, #12]
 80050b0:	065b      	lsls	r3, r3, #25
 80050b2:	f53f af1f 	bmi.w	8004ef4 <_vfiprintf_r+0x44>
 80050b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050b8:	e71e      	b.n	8004ef8 <_vfiprintf_r+0x48>
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	462a      	mov	r2, r5
 80050c0:	4630      	mov	r0, r6
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <_vfiprintf_r+0x22c>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	f7fe fe3d 	bl	8003d44 <_printf_i>
 80050ca:	e7e4      	b.n	8005096 <_vfiprintf_r+0x1e6>
 80050cc:	08007aa9 	.word	0x08007aa9
 80050d0:	08007aaf 	.word	0x08007aaf
 80050d4:	08007ab3 	.word	0x08007ab3
 80050d8:	08003809 	.word	0x08003809
 80050dc:	08004e8b 	.word	0x08004e8b

080050e0 <malloc>:
 80050e0:	4b02      	ldr	r3, [pc, #8]	@ (80050ec <malloc+0xc>)
 80050e2:	4601      	mov	r1, r0
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	f000 b825 	b.w	8005134 <_malloc_r>
 80050ea:	bf00      	nop
 80050ec:	20000010 	.word	0x20000010

080050f0 <sbrk_aligned>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005130 <sbrk_aligned+0x40>)
 80050f4:	460c      	mov	r4, r1
 80050f6:	6831      	ldr	r1, [r6, #0]
 80050f8:	4605      	mov	r5, r0
 80050fa:	b911      	cbnz	r1, 8005102 <sbrk_aligned+0x12>
 80050fc:	f000 fe5e 	bl	8005dbc <_sbrk_r>
 8005100:	6030      	str	r0, [r6, #0]
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fe59 	bl	8005dbc <_sbrk_r>
 800510a:	1c43      	adds	r3, r0, #1
 800510c:	d103      	bne.n	8005116 <sbrk_aligned+0x26>
 800510e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005112:	4620      	mov	r0, r4
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	1cc4      	adds	r4, r0, #3
 8005118:	f024 0403 	bic.w	r4, r4, #3
 800511c:	42a0      	cmp	r0, r4
 800511e:	d0f8      	beq.n	8005112 <sbrk_aligned+0x22>
 8005120:	1a21      	subs	r1, r4, r0
 8005122:	4628      	mov	r0, r5
 8005124:	f000 fe4a 	bl	8005dbc <_sbrk_r>
 8005128:	3001      	adds	r0, #1
 800512a:	d1f2      	bne.n	8005112 <sbrk_aligned+0x22>
 800512c:	e7ef      	b.n	800510e <sbrk_aligned+0x1e>
 800512e:	bf00      	nop
 8005130:	20000400 	.word	0x20000400

08005134 <_malloc_r>:
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005138:	1ccd      	adds	r5, r1, #3
 800513a:	f025 0503 	bic.w	r5, r5, #3
 800513e:	3508      	adds	r5, #8
 8005140:	2d0c      	cmp	r5, #12
 8005142:	bf38      	it	cc
 8005144:	250c      	movcc	r5, #12
 8005146:	2d00      	cmp	r5, #0
 8005148:	4606      	mov	r6, r0
 800514a:	db01      	blt.n	8005150 <_malloc_r+0x1c>
 800514c:	42a9      	cmp	r1, r5
 800514e:	d904      	bls.n	800515a <_malloc_r+0x26>
 8005150:	230c      	movs	r3, #12
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	2000      	movs	r0, #0
 8005156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005230 <_malloc_r+0xfc>
 800515e:	f000 f911 	bl	8005384 <__malloc_lock>
 8005162:	f8d8 3000 	ldr.w	r3, [r8]
 8005166:	461c      	mov	r4, r3
 8005168:	bb44      	cbnz	r4, 80051bc <_malloc_r+0x88>
 800516a:	4629      	mov	r1, r5
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff ffbf 	bl	80050f0 <sbrk_aligned>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	4604      	mov	r4, r0
 8005176:	d158      	bne.n	800522a <_malloc_r+0xf6>
 8005178:	f8d8 4000 	ldr.w	r4, [r8]
 800517c:	4627      	mov	r7, r4
 800517e:	2f00      	cmp	r7, #0
 8005180:	d143      	bne.n	800520a <_malloc_r+0xd6>
 8005182:	2c00      	cmp	r4, #0
 8005184:	d04b      	beq.n	800521e <_malloc_r+0xea>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	4639      	mov	r1, r7
 800518a:	4630      	mov	r0, r6
 800518c:	eb04 0903 	add.w	r9, r4, r3
 8005190:	f000 fe14 	bl	8005dbc <_sbrk_r>
 8005194:	4581      	cmp	r9, r0
 8005196:	d142      	bne.n	800521e <_malloc_r+0xea>
 8005198:	6821      	ldr	r1, [r4, #0]
 800519a:	4630      	mov	r0, r6
 800519c:	1a6d      	subs	r5, r5, r1
 800519e:	4629      	mov	r1, r5
 80051a0:	f7ff ffa6 	bl	80050f0 <sbrk_aligned>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d03a      	beq.n	800521e <_malloc_r+0xea>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	442b      	add	r3, r5
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	f8d8 3000 	ldr.w	r3, [r8]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	bb62      	cbnz	r2, 8005210 <_malloc_r+0xdc>
 80051b6:	f8c8 7000 	str.w	r7, [r8]
 80051ba:	e00f      	b.n	80051dc <_malloc_r+0xa8>
 80051bc:	6822      	ldr	r2, [r4, #0]
 80051be:	1b52      	subs	r2, r2, r5
 80051c0:	d420      	bmi.n	8005204 <_malloc_r+0xd0>
 80051c2:	2a0b      	cmp	r2, #11
 80051c4:	d917      	bls.n	80051f6 <_malloc_r+0xc2>
 80051c6:	1961      	adds	r1, r4, r5
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	6025      	str	r5, [r4, #0]
 80051cc:	bf18      	it	ne
 80051ce:	6059      	strne	r1, [r3, #4]
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	bf08      	it	eq
 80051d4:	f8c8 1000 	streq.w	r1, [r8]
 80051d8:	5162      	str	r2, [r4, r5]
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f8d7 	bl	8005390 <__malloc_unlock>
 80051e2:	f104 000b 	add.w	r0, r4, #11
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	f020 0007 	bic.w	r0, r0, #7
 80051ec:	1ac2      	subs	r2, r0, r3
 80051ee:	bf1c      	itt	ne
 80051f0:	1a1b      	subne	r3, r3, r0
 80051f2:	50a3      	strne	r3, [r4, r2]
 80051f4:	e7af      	b.n	8005156 <_malloc_r+0x22>
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	bf0c      	ite	eq
 80051fc:	f8c8 2000 	streq.w	r2, [r8]
 8005200:	605a      	strne	r2, [r3, #4]
 8005202:	e7eb      	b.n	80051dc <_malloc_r+0xa8>
 8005204:	4623      	mov	r3, r4
 8005206:	6864      	ldr	r4, [r4, #4]
 8005208:	e7ae      	b.n	8005168 <_malloc_r+0x34>
 800520a:	463c      	mov	r4, r7
 800520c:	687f      	ldr	r7, [r7, #4]
 800520e:	e7b6      	b.n	800517e <_malloc_r+0x4a>
 8005210:	461a      	mov	r2, r3
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	42a3      	cmp	r3, r4
 8005216:	d1fb      	bne.n	8005210 <_malloc_r+0xdc>
 8005218:	2300      	movs	r3, #0
 800521a:	6053      	str	r3, [r2, #4]
 800521c:	e7de      	b.n	80051dc <_malloc_r+0xa8>
 800521e:	230c      	movs	r3, #12
 8005220:	4630      	mov	r0, r6
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	f000 f8b4 	bl	8005390 <__malloc_unlock>
 8005228:	e794      	b.n	8005154 <_malloc_r+0x20>
 800522a:	6005      	str	r5, [r0, #0]
 800522c:	e7d6      	b.n	80051dc <_malloc_r+0xa8>
 800522e:	bf00      	nop
 8005230:	20000404 	.word	0x20000404

08005234 <__sflush_r>:
 8005234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	0716      	lsls	r6, r2, #28
 800523c:	4605      	mov	r5, r0
 800523e:	460c      	mov	r4, r1
 8005240:	d454      	bmi.n	80052ec <__sflush_r+0xb8>
 8005242:	684b      	ldr	r3, [r1, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	dc02      	bgt.n	800524e <__sflush_r+0x1a>
 8005248:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd48      	ble.n	80052e0 <__sflush_r+0xac>
 800524e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005250:	2e00      	cmp	r6, #0
 8005252:	d045      	beq.n	80052e0 <__sflush_r+0xac>
 8005254:	2300      	movs	r3, #0
 8005256:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800525a:	682f      	ldr	r7, [r5, #0]
 800525c:	6a21      	ldr	r1, [r4, #32]
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	d030      	beq.n	80052c4 <__sflush_r+0x90>
 8005262:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	0759      	lsls	r1, r3, #29
 8005268:	d505      	bpl.n	8005276 <__sflush_r+0x42>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	1ad2      	subs	r2, r2, r3
 800526e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005270:	b10b      	cbz	r3, 8005276 <__sflush_r+0x42>
 8005272:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	2300      	movs	r3, #0
 8005278:	4628      	mov	r0, r5
 800527a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	47b0      	blx	r6
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	d106      	bne.n	8005294 <__sflush_r+0x60>
 8005286:	6829      	ldr	r1, [r5, #0]
 8005288:	291d      	cmp	r1, #29
 800528a:	d82b      	bhi.n	80052e4 <__sflush_r+0xb0>
 800528c:	4a28      	ldr	r2, [pc, #160]	@ (8005330 <__sflush_r+0xfc>)
 800528e:	410a      	asrs	r2, r1
 8005290:	07d6      	lsls	r6, r2, #31
 8005292:	d427      	bmi.n	80052e4 <__sflush_r+0xb0>
 8005294:	2200      	movs	r2, #0
 8005296:	6062      	str	r2, [r4, #4]
 8005298:	6922      	ldr	r2, [r4, #16]
 800529a:	04d9      	lsls	r1, r3, #19
 800529c:	6022      	str	r2, [r4, #0]
 800529e:	d504      	bpl.n	80052aa <__sflush_r+0x76>
 80052a0:	1c42      	adds	r2, r0, #1
 80052a2:	d101      	bne.n	80052a8 <__sflush_r+0x74>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b903      	cbnz	r3, 80052aa <__sflush_r+0x76>
 80052a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80052aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ac:	602f      	str	r7, [r5, #0]
 80052ae:	b1b9      	cbz	r1, 80052e0 <__sflush_r+0xac>
 80052b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052b4:	4299      	cmp	r1, r3
 80052b6:	d002      	beq.n	80052be <__sflush_r+0x8a>
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fde1 	bl	8005e80 <_free_r>
 80052be:	2300      	movs	r3, #0
 80052c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80052c2:	e00d      	b.n	80052e0 <__sflush_r+0xac>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b0      	blx	r6
 80052ca:	4602      	mov	r2, r0
 80052cc:	1c50      	adds	r0, r2, #1
 80052ce:	d1c9      	bne.n	8005264 <__sflush_r+0x30>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0c6      	beq.n	8005264 <__sflush_r+0x30>
 80052d6:	2b1d      	cmp	r3, #29
 80052d8:	d001      	beq.n	80052de <__sflush_r+0xaa>
 80052da:	2b16      	cmp	r3, #22
 80052dc:	d11d      	bne.n	800531a <__sflush_r+0xe6>
 80052de:	602f      	str	r7, [r5, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	e021      	b.n	8005328 <__sflush_r+0xf4>
 80052e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	e01a      	b.n	8005322 <__sflush_r+0xee>
 80052ec:	690f      	ldr	r7, [r1, #16]
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	d0f6      	beq.n	80052e0 <__sflush_r+0xac>
 80052f2:	0793      	lsls	r3, r2, #30
 80052f4:	bf18      	it	ne
 80052f6:	2300      	movne	r3, #0
 80052f8:	680e      	ldr	r6, [r1, #0]
 80052fa:	bf08      	it	eq
 80052fc:	694b      	ldreq	r3, [r1, #20]
 80052fe:	1bf6      	subs	r6, r6, r7
 8005300:	600f      	str	r7, [r1, #0]
 8005302:	608b      	str	r3, [r1, #8]
 8005304:	2e00      	cmp	r6, #0
 8005306:	ddeb      	ble.n	80052e0 <__sflush_r+0xac>
 8005308:	4633      	mov	r3, r6
 800530a:	463a      	mov	r2, r7
 800530c:	4628      	mov	r0, r5
 800530e:	6a21      	ldr	r1, [r4, #32]
 8005310:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005314:	47e0      	blx	ip
 8005316:	2800      	cmp	r0, #0
 8005318:	dc07      	bgt.n	800532a <__sflush_r+0xf6>
 800531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532a:	4407      	add	r7, r0
 800532c:	1a36      	subs	r6, r6, r0
 800532e:	e7e9      	b.n	8005304 <__sflush_r+0xd0>
 8005330:	dfbffffe 	.word	0xdfbffffe

08005334 <_fflush_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	690b      	ldr	r3, [r1, #16]
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	b913      	cbnz	r3, 8005344 <_fflush_r+0x10>
 800533e:	2500      	movs	r5, #0
 8005340:	4628      	mov	r0, r5
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	b118      	cbz	r0, 800534e <_fflush_r+0x1a>
 8005346:	6a03      	ldr	r3, [r0, #32]
 8005348:	b90b      	cbnz	r3, 800534e <_fflush_r+0x1a>
 800534a:	f7fe fea7 	bl	800409c <__sinit>
 800534e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f3      	beq.n	800533e <_fflush_r+0xa>
 8005356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005358:	07d0      	lsls	r0, r2, #31
 800535a:	d404      	bmi.n	8005366 <_fflush_r+0x32>
 800535c:	0599      	lsls	r1, r3, #22
 800535e:	d402      	bmi.n	8005366 <_fflush_r+0x32>
 8005360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005362:	f7fe ff1a 	bl	800419a <__retarget_lock_acquire_recursive>
 8005366:	4628      	mov	r0, r5
 8005368:	4621      	mov	r1, r4
 800536a:	f7ff ff63 	bl	8005234 <__sflush_r>
 800536e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005370:	4605      	mov	r5, r0
 8005372:	07da      	lsls	r2, r3, #31
 8005374:	d4e4      	bmi.n	8005340 <_fflush_r+0xc>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	059b      	lsls	r3, r3, #22
 800537a:	d4e1      	bmi.n	8005340 <_fflush_r+0xc>
 800537c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800537e:	f7fe ff0d 	bl	800419c <__retarget_lock_release_recursive>
 8005382:	e7dd      	b.n	8005340 <_fflush_r+0xc>

08005384 <__malloc_lock>:
 8005384:	4801      	ldr	r0, [pc, #4]	@ (800538c <__malloc_lock+0x8>)
 8005386:	f7fe bf08 	b.w	800419a <__retarget_lock_acquire_recursive>
 800538a:	bf00      	nop
 800538c:	200003fc 	.word	0x200003fc

08005390 <__malloc_unlock>:
 8005390:	4801      	ldr	r0, [pc, #4]	@ (8005398 <__malloc_unlock+0x8>)
 8005392:	f7fe bf03 	b.w	800419c <__retarget_lock_release_recursive>
 8005396:	bf00      	nop
 8005398:	200003fc 	.word	0x200003fc

0800539c <_Balloc>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	69c6      	ldr	r6, [r0, #28]
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	b976      	cbnz	r6, 80053c4 <_Balloc+0x28>
 80053a6:	2010      	movs	r0, #16
 80053a8:	f7ff fe9a 	bl	80050e0 <malloc>
 80053ac:	4602      	mov	r2, r0
 80053ae:	61e0      	str	r0, [r4, #28]
 80053b0:	b920      	cbnz	r0, 80053bc <_Balloc+0x20>
 80053b2:	216b      	movs	r1, #107	@ 0x6b
 80053b4:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <_Balloc+0x78>)
 80053b6:	4818      	ldr	r0, [pc, #96]	@ (8005418 <_Balloc+0x7c>)
 80053b8:	f000 fd30 	bl	8005e1c <__assert_func>
 80053bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053c0:	6006      	str	r6, [r0, #0]
 80053c2:	60c6      	str	r6, [r0, #12]
 80053c4:	69e6      	ldr	r6, [r4, #28]
 80053c6:	68f3      	ldr	r3, [r6, #12]
 80053c8:	b183      	cbz	r3, 80053ec <_Balloc+0x50>
 80053ca:	69e3      	ldr	r3, [r4, #28]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053d2:	b9b8      	cbnz	r0, 8005404 <_Balloc+0x68>
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f605 	lsl.w	r6, r1, r5
 80053da:	1d72      	adds	r2, r6, #5
 80053dc:	4620      	mov	r0, r4
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	f000 fd3a 	bl	8005e58 <_calloc_r>
 80053e4:	b160      	cbz	r0, 8005400 <_Balloc+0x64>
 80053e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ea:	e00e      	b.n	800540a <_Balloc+0x6e>
 80053ec:	2221      	movs	r2, #33	@ 0x21
 80053ee:	2104      	movs	r1, #4
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fd31 	bl	8005e58 <_calloc_r>
 80053f6:	69e3      	ldr	r3, [r4, #28]
 80053f8:	60f0      	str	r0, [r6, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e4      	bne.n	80053ca <_Balloc+0x2e>
 8005400:	2000      	movs	r0, #0
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	6802      	ldr	r2, [r0, #0]
 8005406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800540a:	2300      	movs	r3, #0
 800540c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005410:	e7f7      	b.n	8005402 <_Balloc+0x66>
 8005412:	bf00      	nop
 8005414:	08007a29 	.word	0x08007a29
 8005418:	08007aba 	.word	0x08007aba

0800541c <_Bfree>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	69c6      	ldr	r6, [r0, #28]
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b976      	cbnz	r6, 8005444 <_Bfree+0x28>
 8005426:	2010      	movs	r0, #16
 8005428:	f7ff fe5a 	bl	80050e0 <malloc>
 800542c:	4602      	mov	r2, r0
 800542e:	61e8      	str	r0, [r5, #28]
 8005430:	b920      	cbnz	r0, 800543c <_Bfree+0x20>
 8005432:	218f      	movs	r1, #143	@ 0x8f
 8005434:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <_Bfree+0x3c>)
 8005436:	4809      	ldr	r0, [pc, #36]	@ (800545c <_Bfree+0x40>)
 8005438:	f000 fcf0 	bl	8005e1c <__assert_func>
 800543c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005440:	6006      	str	r6, [r0, #0]
 8005442:	60c6      	str	r6, [r0, #12]
 8005444:	b13c      	cbz	r4, 8005456 <_Bfree+0x3a>
 8005446:	69eb      	ldr	r3, [r5, #28]
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005450:	6021      	str	r1, [r4, #0]
 8005452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	08007a29 	.word	0x08007a29
 800545c:	08007aba 	.word	0x08007aba

08005460 <__multadd>:
 8005460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005464:	4607      	mov	r7, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461e      	mov	r6, r3
 800546a:	2000      	movs	r0, #0
 800546c:	690d      	ldr	r5, [r1, #16]
 800546e:	f101 0c14 	add.w	ip, r1, #20
 8005472:	f8dc 3000 	ldr.w	r3, [ip]
 8005476:	3001      	adds	r0, #1
 8005478:	b299      	uxth	r1, r3
 800547a:	fb02 6101 	mla	r1, r2, r1, r6
 800547e:	0c1e      	lsrs	r6, r3, #16
 8005480:	0c0b      	lsrs	r3, r1, #16
 8005482:	fb02 3306 	mla	r3, r2, r6, r3
 8005486:	b289      	uxth	r1, r1
 8005488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800548c:	4285      	cmp	r5, r0
 800548e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005492:	f84c 1b04 	str.w	r1, [ip], #4
 8005496:	dcec      	bgt.n	8005472 <__multadd+0x12>
 8005498:	b30e      	cbz	r6, 80054de <__multadd+0x7e>
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	42ab      	cmp	r3, r5
 800549e:	dc19      	bgt.n	80054d4 <__multadd+0x74>
 80054a0:	6861      	ldr	r1, [r4, #4]
 80054a2:	4638      	mov	r0, r7
 80054a4:	3101      	adds	r1, #1
 80054a6:	f7ff ff79 	bl	800539c <_Balloc>
 80054aa:	4680      	mov	r8, r0
 80054ac:	b928      	cbnz	r0, 80054ba <__multadd+0x5a>
 80054ae:	4602      	mov	r2, r0
 80054b0:	21ba      	movs	r1, #186	@ 0xba
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <__multadd+0x84>)
 80054b4:	480c      	ldr	r0, [pc, #48]	@ (80054e8 <__multadd+0x88>)
 80054b6:	f000 fcb1 	bl	8005e1c <__assert_func>
 80054ba:	6922      	ldr	r2, [r4, #16]
 80054bc:	f104 010c 	add.w	r1, r4, #12
 80054c0:	3202      	adds	r2, #2
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	300c      	adds	r0, #12
 80054c6:	f000 fc9b 	bl	8005e00 <memcpy>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ffa5 	bl	800541c <_Bfree>
 80054d2:	4644      	mov	r4, r8
 80054d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054d8:	3501      	adds	r5, #1
 80054da:	615e      	str	r6, [r3, #20]
 80054dc:	6125      	str	r5, [r4, #16]
 80054de:	4620      	mov	r0, r4
 80054e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e4:	08007a98 	.word	0x08007a98
 80054e8:	08007aba 	.word	0x08007aba

080054ec <__hi0bits>:
 80054ec:	4603      	mov	r3, r0
 80054ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054f2:	bf3a      	itte	cc
 80054f4:	0403      	lslcc	r3, r0, #16
 80054f6:	2010      	movcc	r0, #16
 80054f8:	2000      	movcs	r0, #0
 80054fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054fe:	bf3c      	itt	cc
 8005500:	021b      	lslcc	r3, r3, #8
 8005502:	3008      	addcc	r0, #8
 8005504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005508:	bf3c      	itt	cc
 800550a:	011b      	lslcc	r3, r3, #4
 800550c:	3004      	addcc	r0, #4
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	bf3c      	itt	cc
 8005514:	009b      	lslcc	r3, r3, #2
 8005516:	3002      	addcc	r0, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	db05      	blt.n	8005528 <__hi0bits+0x3c>
 800551c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005520:	f100 0001 	add.w	r0, r0, #1
 8005524:	bf08      	it	eq
 8005526:	2020      	moveq	r0, #32
 8005528:	4770      	bx	lr

0800552a <__lo0bits>:
 800552a:	6803      	ldr	r3, [r0, #0]
 800552c:	4602      	mov	r2, r0
 800552e:	f013 0007 	ands.w	r0, r3, #7
 8005532:	d00b      	beq.n	800554c <__lo0bits+0x22>
 8005534:	07d9      	lsls	r1, r3, #31
 8005536:	d421      	bmi.n	800557c <__lo0bits+0x52>
 8005538:	0798      	lsls	r0, r3, #30
 800553a:	bf49      	itett	mi
 800553c:	085b      	lsrmi	r3, r3, #1
 800553e:	089b      	lsrpl	r3, r3, #2
 8005540:	2001      	movmi	r0, #1
 8005542:	6013      	strmi	r3, [r2, #0]
 8005544:	bf5c      	itt	pl
 8005546:	2002      	movpl	r0, #2
 8005548:	6013      	strpl	r3, [r2, #0]
 800554a:	4770      	bx	lr
 800554c:	b299      	uxth	r1, r3
 800554e:	b909      	cbnz	r1, 8005554 <__lo0bits+0x2a>
 8005550:	2010      	movs	r0, #16
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	b2d9      	uxtb	r1, r3
 8005556:	b909      	cbnz	r1, 800555c <__lo0bits+0x32>
 8005558:	3008      	adds	r0, #8
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	0719      	lsls	r1, r3, #28
 800555e:	bf04      	itt	eq
 8005560:	091b      	lsreq	r3, r3, #4
 8005562:	3004      	addeq	r0, #4
 8005564:	0799      	lsls	r1, r3, #30
 8005566:	bf04      	itt	eq
 8005568:	089b      	lsreq	r3, r3, #2
 800556a:	3002      	addeq	r0, #2
 800556c:	07d9      	lsls	r1, r3, #31
 800556e:	d403      	bmi.n	8005578 <__lo0bits+0x4e>
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	f100 0001 	add.w	r0, r0, #1
 8005576:	d003      	beq.n	8005580 <__lo0bits+0x56>
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4770      	bx	lr
 800557c:	2000      	movs	r0, #0
 800557e:	4770      	bx	lr
 8005580:	2020      	movs	r0, #32
 8005582:	4770      	bx	lr

08005584 <__i2b>:
 8005584:	b510      	push	{r4, lr}
 8005586:	460c      	mov	r4, r1
 8005588:	2101      	movs	r1, #1
 800558a:	f7ff ff07 	bl	800539c <_Balloc>
 800558e:	4602      	mov	r2, r0
 8005590:	b928      	cbnz	r0, 800559e <__i2b+0x1a>
 8005592:	f240 1145 	movw	r1, #325	@ 0x145
 8005596:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <__i2b+0x24>)
 8005598:	4804      	ldr	r0, [pc, #16]	@ (80055ac <__i2b+0x28>)
 800559a:	f000 fc3f 	bl	8005e1c <__assert_func>
 800559e:	2301      	movs	r3, #1
 80055a0:	6144      	str	r4, [r0, #20]
 80055a2:	6103      	str	r3, [r0, #16]
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	bf00      	nop
 80055a8:	08007a98 	.word	0x08007a98
 80055ac:	08007aba 	.word	0x08007aba

080055b0 <__multiply>:
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	4614      	mov	r4, r2
 80055b6:	690a      	ldr	r2, [r1, #16]
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	460f      	mov	r7, r1
 80055bc:	429a      	cmp	r2, r3
 80055be:	bfa2      	ittt	ge
 80055c0:	4623      	movge	r3, r4
 80055c2:	460c      	movge	r4, r1
 80055c4:	461f      	movge	r7, r3
 80055c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	6861      	ldr	r1, [r4, #4]
 80055d2:	eb0a 0609 	add.w	r6, sl, r9
 80055d6:	42b3      	cmp	r3, r6
 80055d8:	b085      	sub	sp, #20
 80055da:	bfb8      	it	lt
 80055dc:	3101      	addlt	r1, #1
 80055de:	f7ff fedd 	bl	800539c <_Balloc>
 80055e2:	b930      	cbnz	r0, 80055f2 <__multiply+0x42>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055ea:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <__multiply+0x148>)
 80055ec:	4843      	ldr	r0, [pc, #268]	@ (80056fc <__multiply+0x14c>)
 80055ee:	f000 fc15 	bl	8005e1c <__assert_func>
 80055f2:	f100 0514 	add.w	r5, r0, #20
 80055f6:	462b      	mov	r3, r5
 80055f8:	2200      	movs	r2, #0
 80055fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055fe:	4543      	cmp	r3, r8
 8005600:	d321      	bcc.n	8005646 <__multiply+0x96>
 8005602:	f107 0114 	add.w	r1, r7, #20
 8005606:	f104 0214 	add.w	r2, r4, #20
 800560a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800560e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005612:	9302      	str	r3, [sp, #8]
 8005614:	1b13      	subs	r3, r2, r4
 8005616:	3b15      	subs	r3, #21
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	3304      	adds	r3, #4
 800561e:	f104 0715 	add.w	r7, r4, #21
 8005622:	42ba      	cmp	r2, r7
 8005624:	bf38      	it	cc
 8005626:	2304      	movcc	r3, #4
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	9b02      	ldr	r3, [sp, #8]
 800562c:	9103      	str	r1, [sp, #12]
 800562e:	428b      	cmp	r3, r1
 8005630:	d80c      	bhi.n	800564c <__multiply+0x9c>
 8005632:	2e00      	cmp	r6, #0
 8005634:	dd03      	ble.n	800563e <__multiply+0x8e>
 8005636:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800563a:	2b00      	cmp	r3, #0
 800563c:	d05a      	beq.n	80056f4 <__multiply+0x144>
 800563e:	6106      	str	r6, [r0, #16]
 8005640:	b005      	add	sp, #20
 8005642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005646:	f843 2b04 	str.w	r2, [r3], #4
 800564a:	e7d8      	b.n	80055fe <__multiply+0x4e>
 800564c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005650:	f1ba 0f00 	cmp.w	sl, #0
 8005654:	d023      	beq.n	800569e <__multiply+0xee>
 8005656:	46a9      	mov	r9, r5
 8005658:	f04f 0c00 	mov.w	ip, #0
 800565c:	f104 0e14 	add.w	lr, r4, #20
 8005660:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005664:	f8d9 3000 	ldr.w	r3, [r9]
 8005668:	fa1f fb87 	uxth.w	fp, r7
 800566c:	b29b      	uxth	r3, r3
 800566e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005672:	4463      	add	r3, ip
 8005674:	f8d9 c000 	ldr.w	ip, [r9]
 8005678:	0c3f      	lsrs	r7, r7, #16
 800567a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800567e:	fb0a c707 	mla	r7, sl, r7, ip
 8005682:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005686:	b29b      	uxth	r3, r3
 8005688:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800568c:	4572      	cmp	r2, lr
 800568e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005692:	f849 3b04 	str.w	r3, [r9], #4
 8005696:	d8e3      	bhi.n	8005660 <__multiply+0xb0>
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	f845 c003 	str.w	ip, [r5, r3]
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	3104      	adds	r1, #4
 80056a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056a6:	f1b9 0f00 	cmp.w	r9, #0
 80056aa:	d021      	beq.n	80056f0 <__multiply+0x140>
 80056ac:	46ae      	mov	lr, r5
 80056ae:	f04f 0a00 	mov.w	sl, #0
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	f104 0c14 	add.w	ip, r4, #20
 80056b8:	f8bc b000 	ldrh.w	fp, [ip]
 80056bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	fb09 770b 	mla	r7, r9, fp, r7
 80056c6:	4457      	add	r7, sl
 80056c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056cc:	f84e 3b04 	str.w	r3, [lr], #4
 80056d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056d8:	f8be 3000 	ldrh.w	r3, [lr]
 80056dc:	4562      	cmp	r2, ip
 80056de:	fb09 330a 	mla	r3, r9, sl, r3
 80056e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80056e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056ea:	d8e5      	bhi.n	80056b8 <__multiply+0x108>
 80056ec:	9f01      	ldr	r7, [sp, #4]
 80056ee:	51eb      	str	r3, [r5, r7]
 80056f0:	3504      	adds	r5, #4
 80056f2:	e79a      	b.n	800562a <__multiply+0x7a>
 80056f4:	3e01      	subs	r6, #1
 80056f6:	e79c      	b.n	8005632 <__multiply+0x82>
 80056f8:	08007a98 	.word	0x08007a98
 80056fc:	08007aba 	.word	0x08007aba

08005700 <__pow5mult>:
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005704:	4615      	mov	r5, r2
 8005706:	f012 0203 	ands.w	r2, r2, #3
 800570a:	4607      	mov	r7, r0
 800570c:	460e      	mov	r6, r1
 800570e:	d007      	beq.n	8005720 <__pow5mult+0x20>
 8005710:	4c25      	ldr	r4, [pc, #148]	@ (80057a8 <__pow5mult+0xa8>)
 8005712:	3a01      	subs	r2, #1
 8005714:	2300      	movs	r3, #0
 8005716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800571a:	f7ff fea1 	bl	8005460 <__multadd>
 800571e:	4606      	mov	r6, r0
 8005720:	10ad      	asrs	r5, r5, #2
 8005722:	d03d      	beq.n	80057a0 <__pow5mult+0xa0>
 8005724:	69fc      	ldr	r4, [r7, #28]
 8005726:	b97c      	cbnz	r4, 8005748 <__pow5mult+0x48>
 8005728:	2010      	movs	r0, #16
 800572a:	f7ff fcd9 	bl	80050e0 <malloc>
 800572e:	4602      	mov	r2, r0
 8005730:	61f8      	str	r0, [r7, #28]
 8005732:	b928      	cbnz	r0, 8005740 <__pow5mult+0x40>
 8005734:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005738:	4b1c      	ldr	r3, [pc, #112]	@ (80057ac <__pow5mult+0xac>)
 800573a:	481d      	ldr	r0, [pc, #116]	@ (80057b0 <__pow5mult+0xb0>)
 800573c:	f000 fb6e 	bl	8005e1c <__assert_func>
 8005740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005744:	6004      	str	r4, [r0, #0]
 8005746:	60c4      	str	r4, [r0, #12]
 8005748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800574c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005750:	b94c      	cbnz	r4, 8005766 <__pow5mult+0x66>
 8005752:	f240 2171 	movw	r1, #625	@ 0x271
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ff14 	bl	8005584 <__i2b>
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	f8c8 0008 	str.w	r0, [r8, #8]
 8005764:	6003      	str	r3, [r0, #0]
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	07eb      	lsls	r3, r5, #31
 800576c:	d50a      	bpl.n	8005784 <__pow5mult+0x84>
 800576e:	4631      	mov	r1, r6
 8005770:	4622      	mov	r2, r4
 8005772:	4638      	mov	r0, r7
 8005774:	f7ff ff1c 	bl	80055b0 <__multiply>
 8005778:	4680      	mov	r8, r0
 800577a:	4631      	mov	r1, r6
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff fe4d 	bl	800541c <_Bfree>
 8005782:	4646      	mov	r6, r8
 8005784:	106d      	asrs	r5, r5, #1
 8005786:	d00b      	beq.n	80057a0 <__pow5mult+0xa0>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	b938      	cbnz	r0, 800579c <__pow5mult+0x9c>
 800578c:	4622      	mov	r2, r4
 800578e:	4621      	mov	r1, r4
 8005790:	4638      	mov	r0, r7
 8005792:	f7ff ff0d 	bl	80055b0 <__multiply>
 8005796:	6020      	str	r0, [r4, #0]
 8005798:	f8c0 9000 	str.w	r9, [r0]
 800579c:	4604      	mov	r4, r0
 800579e:	e7e4      	b.n	800576a <__pow5mult+0x6a>
 80057a0:	4630      	mov	r0, r6
 80057a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a6:	bf00      	nop
 80057a8:	08007b14 	.word	0x08007b14
 80057ac:	08007a29 	.word	0x08007a29
 80057b0:	08007aba 	.word	0x08007aba

080057b4 <__lshift>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	460c      	mov	r4, r1
 80057ba:	4607      	mov	r7, r0
 80057bc:	4691      	mov	r9, r2
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	6849      	ldr	r1, [r1, #4]
 80057c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057cc:	f108 0601 	add.w	r6, r8, #1
 80057d0:	42b3      	cmp	r3, r6
 80057d2:	db0b      	blt.n	80057ec <__lshift+0x38>
 80057d4:	4638      	mov	r0, r7
 80057d6:	f7ff fde1 	bl	800539c <_Balloc>
 80057da:	4605      	mov	r5, r0
 80057dc:	b948      	cbnz	r0, 80057f2 <__lshift+0x3e>
 80057de:	4602      	mov	r2, r0
 80057e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057e4:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <__lshift+0xd0>)
 80057e6:	4828      	ldr	r0, [pc, #160]	@ (8005888 <__lshift+0xd4>)
 80057e8:	f000 fb18 	bl	8005e1c <__assert_func>
 80057ec:	3101      	adds	r1, #1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	e7ee      	b.n	80057d0 <__lshift+0x1c>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f100 0114 	add.w	r1, r0, #20
 80057f8:	f100 0210 	add.w	r2, r0, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	4553      	cmp	r3, sl
 8005800:	db33      	blt.n	800586a <__lshift+0xb6>
 8005802:	6920      	ldr	r0, [r4, #16]
 8005804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005808:	f104 0314 	add.w	r3, r4, #20
 800580c:	f019 091f 	ands.w	r9, r9, #31
 8005810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005818:	d02b      	beq.n	8005872 <__lshift+0xbe>
 800581a:	468a      	mov	sl, r1
 800581c:	2200      	movs	r2, #0
 800581e:	f1c9 0e20 	rsb	lr, r9, #32
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	fa00 f009 	lsl.w	r0, r0, r9
 8005828:	4310      	orrs	r0, r2
 800582a:	f84a 0b04 	str.w	r0, [sl], #4
 800582e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005832:	459c      	cmp	ip, r3
 8005834:	fa22 f20e 	lsr.w	r2, r2, lr
 8005838:	d8f3      	bhi.n	8005822 <__lshift+0x6e>
 800583a:	ebac 0304 	sub.w	r3, ip, r4
 800583e:	3b15      	subs	r3, #21
 8005840:	f023 0303 	bic.w	r3, r3, #3
 8005844:	3304      	adds	r3, #4
 8005846:	f104 0015 	add.w	r0, r4, #21
 800584a:	4584      	cmp	ip, r0
 800584c:	bf38      	it	cc
 800584e:	2304      	movcc	r3, #4
 8005850:	50ca      	str	r2, [r1, r3]
 8005852:	b10a      	cbz	r2, 8005858 <__lshift+0xa4>
 8005854:	f108 0602 	add.w	r6, r8, #2
 8005858:	3e01      	subs	r6, #1
 800585a:	4638      	mov	r0, r7
 800585c:	4621      	mov	r1, r4
 800585e:	612e      	str	r6, [r5, #16]
 8005860:	f7ff fddc 	bl	800541c <_Bfree>
 8005864:	4628      	mov	r0, r5
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	f842 0f04 	str.w	r0, [r2, #4]!
 800586e:	3301      	adds	r3, #1
 8005870:	e7c5      	b.n	80057fe <__lshift+0x4a>
 8005872:	3904      	subs	r1, #4
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	459c      	cmp	ip, r3
 800587a:	f841 2f04 	str.w	r2, [r1, #4]!
 800587e:	d8f9      	bhi.n	8005874 <__lshift+0xc0>
 8005880:	e7ea      	b.n	8005858 <__lshift+0xa4>
 8005882:	bf00      	nop
 8005884:	08007a98 	.word	0x08007a98
 8005888:	08007aba 	.word	0x08007aba

0800588c <__mcmp>:
 800588c:	4603      	mov	r3, r0
 800588e:	690a      	ldr	r2, [r1, #16]
 8005890:	6900      	ldr	r0, [r0, #16]
 8005892:	b530      	push	{r4, r5, lr}
 8005894:	1a80      	subs	r0, r0, r2
 8005896:	d10e      	bne.n	80058b6 <__mcmp+0x2a>
 8005898:	3314      	adds	r3, #20
 800589a:	3114      	adds	r1, #20
 800589c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058ac:	4295      	cmp	r5, r2
 80058ae:	d003      	beq.n	80058b8 <__mcmp+0x2c>
 80058b0:	d205      	bcs.n	80058be <__mcmp+0x32>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058b6:	bd30      	pop	{r4, r5, pc}
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d3f3      	bcc.n	80058a4 <__mcmp+0x18>
 80058bc:	e7fb      	b.n	80058b6 <__mcmp+0x2a>
 80058be:	2001      	movs	r0, #1
 80058c0:	e7f9      	b.n	80058b6 <__mcmp+0x2a>
	...

080058c4 <__mdiff>:
 80058c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	4689      	mov	r9, r1
 80058ca:	4606      	mov	r6, r0
 80058cc:	4611      	mov	r1, r2
 80058ce:	4648      	mov	r0, r9
 80058d0:	4614      	mov	r4, r2
 80058d2:	f7ff ffdb 	bl	800588c <__mcmp>
 80058d6:	1e05      	subs	r5, r0, #0
 80058d8:	d112      	bne.n	8005900 <__mdiff+0x3c>
 80058da:	4629      	mov	r1, r5
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff fd5d 	bl	800539c <_Balloc>
 80058e2:	4602      	mov	r2, r0
 80058e4:	b928      	cbnz	r0, 80058f2 <__mdiff+0x2e>
 80058e6:	f240 2137 	movw	r1, #567	@ 0x237
 80058ea:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <__mdiff+0x120>)
 80058ec:	483e      	ldr	r0, [pc, #248]	@ (80059e8 <__mdiff+0x124>)
 80058ee:	f000 fa95 	bl	8005e1c <__assert_func>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058f8:	4610      	mov	r0, r2
 80058fa:	b003      	add	sp, #12
 80058fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005900:	bfbc      	itt	lt
 8005902:	464b      	movlt	r3, r9
 8005904:	46a1      	movlt	r9, r4
 8005906:	4630      	mov	r0, r6
 8005908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800590c:	bfba      	itte	lt
 800590e:	461c      	movlt	r4, r3
 8005910:	2501      	movlt	r5, #1
 8005912:	2500      	movge	r5, #0
 8005914:	f7ff fd42 	bl	800539c <_Balloc>
 8005918:	4602      	mov	r2, r0
 800591a:	b918      	cbnz	r0, 8005924 <__mdiff+0x60>
 800591c:	f240 2145 	movw	r1, #581	@ 0x245
 8005920:	4b30      	ldr	r3, [pc, #192]	@ (80059e4 <__mdiff+0x120>)
 8005922:	e7e3      	b.n	80058ec <__mdiff+0x28>
 8005924:	f100 0b14 	add.w	fp, r0, #20
 8005928:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800592c:	f109 0310 	add.w	r3, r9, #16
 8005930:	60c5      	str	r5, [r0, #12]
 8005932:	f04f 0c00 	mov.w	ip, #0
 8005936:	f109 0514 	add.w	r5, r9, #20
 800593a:	46d9      	mov	r9, fp
 800593c:	6926      	ldr	r6, [r4, #16]
 800593e:	f104 0e14 	add.w	lr, r4, #20
 8005942:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005946:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	9b01      	ldr	r3, [sp, #4]
 800594e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005952:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005956:	b281      	uxth	r1, r0
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	fa1f f38a 	uxth.w	r3, sl
 800595e:	1a5b      	subs	r3, r3, r1
 8005960:	0c00      	lsrs	r0, r0, #16
 8005962:	4463      	add	r3, ip
 8005964:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005968:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005972:	4576      	cmp	r6, lr
 8005974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005978:	f849 3b04 	str.w	r3, [r9], #4
 800597c:	d8e6      	bhi.n	800594c <__mdiff+0x88>
 800597e:	1b33      	subs	r3, r6, r4
 8005980:	3b15      	subs	r3, #21
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	3415      	adds	r4, #21
 8005988:	3304      	adds	r3, #4
 800598a:	42a6      	cmp	r6, r4
 800598c:	bf38      	it	cc
 800598e:	2304      	movcc	r3, #4
 8005990:	441d      	add	r5, r3
 8005992:	445b      	add	r3, fp
 8005994:	461e      	mov	r6, r3
 8005996:	462c      	mov	r4, r5
 8005998:	4544      	cmp	r4, r8
 800599a:	d30e      	bcc.n	80059ba <__mdiff+0xf6>
 800599c:	f108 0103 	add.w	r1, r8, #3
 80059a0:	1b49      	subs	r1, r1, r5
 80059a2:	f021 0103 	bic.w	r1, r1, #3
 80059a6:	3d03      	subs	r5, #3
 80059a8:	45a8      	cmp	r8, r5
 80059aa:	bf38      	it	cc
 80059ac:	2100      	movcc	r1, #0
 80059ae:	440b      	add	r3, r1
 80059b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059b4:	b199      	cbz	r1, 80059de <__mdiff+0x11a>
 80059b6:	6117      	str	r7, [r2, #16]
 80059b8:	e79e      	b.n	80058f8 <__mdiff+0x34>
 80059ba:	46e6      	mov	lr, ip
 80059bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80059c0:	fa1f fc81 	uxth.w	ip, r1
 80059c4:	44f4      	add	ip, lr
 80059c6:	0c08      	lsrs	r0, r1, #16
 80059c8:	4471      	add	r1, lr
 80059ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059ce:	b289      	uxth	r1, r1
 80059d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059d8:	f846 1b04 	str.w	r1, [r6], #4
 80059dc:	e7dc      	b.n	8005998 <__mdiff+0xd4>
 80059de:	3f01      	subs	r7, #1
 80059e0:	e7e6      	b.n	80059b0 <__mdiff+0xec>
 80059e2:	bf00      	nop
 80059e4:	08007a98 	.word	0x08007a98
 80059e8:	08007aba 	.word	0x08007aba

080059ec <__d2b>:
 80059ec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80059f0:	2101      	movs	r1, #1
 80059f2:	4690      	mov	r8, r2
 80059f4:	4699      	mov	r9, r3
 80059f6:	9e08      	ldr	r6, [sp, #32]
 80059f8:	f7ff fcd0 	bl	800539c <_Balloc>
 80059fc:	4604      	mov	r4, r0
 80059fe:	b930      	cbnz	r0, 8005a0e <__d2b+0x22>
 8005a00:	4602      	mov	r2, r0
 8005a02:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a06:	4b23      	ldr	r3, [pc, #140]	@ (8005a94 <__d2b+0xa8>)
 8005a08:	4823      	ldr	r0, [pc, #140]	@ (8005a98 <__d2b+0xac>)
 8005a0a:	f000 fa07 	bl	8005e1c <__assert_func>
 8005a0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a16:	b10d      	cbz	r5, 8005a1c <__d2b+0x30>
 8005a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	f1b8 0300 	subs.w	r3, r8, #0
 8005a22:	d024      	beq.n	8005a6e <__d2b+0x82>
 8005a24:	4668      	mov	r0, sp
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	f7ff fd7f 	bl	800552a <__lo0bits>
 8005a2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a30:	b1d8      	cbz	r0, 8005a6a <__d2b+0x7e>
 8005a32:	f1c0 0320 	rsb	r3, r0, #32
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	40c2      	lsrs	r2, r0
 8005a3e:	6163      	str	r3, [r4, #20]
 8005a40:	9201      	str	r2, [sp, #4]
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf0c      	ite	eq
 8005a48:	2201      	moveq	r2, #1
 8005a4a:	2202      	movne	r2, #2
 8005a4c:	61a3      	str	r3, [r4, #24]
 8005a4e:	6122      	str	r2, [r4, #16]
 8005a50:	b1ad      	cbz	r5, 8005a7e <__d2b+0x92>
 8005a52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a56:	4405      	add	r5, r0
 8005a58:	6035      	str	r5, [r6, #0]
 8005a5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	6018      	str	r0, [r3, #0]
 8005a62:	4620      	mov	r0, r4
 8005a64:	b002      	add	sp, #8
 8005a66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a6a:	6161      	str	r1, [r4, #20]
 8005a6c:	e7e9      	b.n	8005a42 <__d2b+0x56>
 8005a6e:	a801      	add	r0, sp, #4
 8005a70:	f7ff fd5b 	bl	800552a <__lo0bits>
 8005a74:	9b01      	ldr	r3, [sp, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	6163      	str	r3, [r4, #20]
 8005a7a:	3020      	adds	r0, #32
 8005a7c:	e7e7      	b.n	8005a4e <__d2b+0x62>
 8005a7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a86:	6030      	str	r0, [r6, #0]
 8005a88:	6918      	ldr	r0, [r3, #16]
 8005a8a:	f7ff fd2f 	bl	80054ec <__hi0bits>
 8005a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a92:	e7e4      	b.n	8005a5e <__d2b+0x72>
 8005a94:	08007a98 	.word	0x08007a98
 8005a98:	08007aba 	.word	0x08007aba

08005a9c <__sread>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	f000 f978 	bl	8005d98 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aae:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab0:	181b      	addge	r3, r3, r0
 8005ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ab6:	bfac      	ite	ge
 8005ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005aba:	81a3      	strhlt	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__swrite>:
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	05db      	lsls	r3, r3, #23
 8005aca:	460c      	mov	r4, r1
 8005acc:	4616      	mov	r6, r2
 8005ace:	d505      	bpl.n	8005adc <__swrite+0x1e>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad8:	f000 f94c 	bl	8005d74 <_lseek_r>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	4632      	mov	r2, r6
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	463b      	mov	r3, r7
 8005aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	f000 b973 	b.w	8005ddc <_write_r>

08005af6 <__sseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 f939 	bl	8005d74 <_lseek_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	bf15      	itete	ne
 8005b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b12:	81a3      	strheq	r3, [r4, #12]
 8005b14:	bf18      	it	ne
 8005b16:	81a3      	strhne	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__sclose>:
 8005b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1e:	f000 b8f7 	b.w	8005d10 <_close_r>

08005b22 <__swbuf_r>:
 8005b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b24:	460e      	mov	r6, r1
 8005b26:	4614      	mov	r4, r2
 8005b28:	4605      	mov	r5, r0
 8005b2a:	b118      	cbz	r0, 8005b34 <__swbuf_r+0x12>
 8005b2c:	6a03      	ldr	r3, [r0, #32]
 8005b2e:	b90b      	cbnz	r3, 8005b34 <__swbuf_r+0x12>
 8005b30:	f7fe fab4 	bl	800409c <__sinit>
 8005b34:	69a3      	ldr	r3, [r4, #24]
 8005b36:	60a3      	str	r3, [r4, #8]
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	071a      	lsls	r2, r3, #28
 8005b3c:	d501      	bpl.n	8005b42 <__swbuf_r+0x20>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	b943      	cbnz	r3, 8005b54 <__swbuf_r+0x32>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 f82b 	bl	8005ba0 <__swsetup_r>
 8005b4a:	b118      	cbz	r0, 8005b54 <__swbuf_r+0x32>
 8005b4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005b50:	4638      	mov	r0, r7
 8005b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	6922      	ldr	r2, [r4, #16]
 8005b58:	b2f6      	uxtb	r6, r6
 8005b5a:	1a98      	subs	r0, r3, r2
 8005b5c:	6963      	ldr	r3, [r4, #20]
 8005b5e:	4637      	mov	r7, r6
 8005b60:	4283      	cmp	r3, r0
 8005b62:	dc05      	bgt.n	8005b70 <__swbuf_r+0x4e>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f7ff fbe4 	bl	8005334 <_fflush_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d1ed      	bne.n	8005b4c <__swbuf_r+0x2a>
 8005b70:	68a3      	ldr	r3, [r4, #8]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	60a3      	str	r3, [r4, #8]
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	6022      	str	r2, [r4, #0]
 8005b7c:	701e      	strb	r6, [r3, #0]
 8005b7e:	6962      	ldr	r2, [r4, #20]
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d004      	beq.n	8005b90 <__swbuf_r+0x6e>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	07db      	lsls	r3, r3, #31
 8005b8a:	d5e1      	bpl.n	8005b50 <__swbuf_r+0x2e>
 8005b8c:	2e0a      	cmp	r6, #10
 8005b8e:	d1df      	bne.n	8005b50 <__swbuf_r+0x2e>
 8005b90:	4621      	mov	r1, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7ff fbce 	bl	8005334 <_fflush_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d0d9      	beq.n	8005b50 <__swbuf_r+0x2e>
 8005b9c:	e7d6      	b.n	8005b4c <__swbuf_r+0x2a>
	...

08005ba0 <__swsetup_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4b29      	ldr	r3, [pc, #164]	@ (8005c48 <__swsetup_r+0xa8>)
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	460c      	mov	r4, r1
 8005baa:	b118      	cbz	r0, 8005bb4 <__swsetup_r+0x14>
 8005bac:	6a03      	ldr	r3, [r0, #32]
 8005bae:	b90b      	cbnz	r3, 8005bb4 <__swsetup_r+0x14>
 8005bb0:	f7fe fa74 	bl	800409c <__sinit>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	0719      	lsls	r1, r3, #28
 8005bba:	d422      	bmi.n	8005c02 <__swsetup_r+0x62>
 8005bbc:	06da      	lsls	r2, r3, #27
 8005bbe:	d407      	bmi.n	8005bd0 <__swsetup_r+0x30>
 8005bc0:	2209      	movs	r2, #9
 8005bc2:	602a      	str	r2, [r5, #0]
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e033      	b.n	8005c38 <__swsetup_r+0x98>
 8005bd0:	0758      	lsls	r0, r3, #29
 8005bd2:	d512      	bpl.n	8005bfa <__swsetup_r+0x5a>
 8005bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bd6:	b141      	cbz	r1, 8005bea <__swsetup_r+0x4a>
 8005bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d002      	beq.n	8005be6 <__swsetup_r+0x46>
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 f94d 	bl	8005e80 <_free_r>
 8005be6:	2300      	movs	r3, #0
 8005be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f043 0308 	orr.w	r3, r3, #8
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	b94b      	cbnz	r3, 8005c1a <__swsetup_r+0x7a>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c10:	d003      	beq.n	8005c1a <__swsetup_r+0x7a>
 8005c12:	4621      	mov	r1, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f83e 	bl	8005c96 <__smakebuf_r>
 8005c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1e:	f013 0201 	ands.w	r2, r3, #1
 8005c22:	d00a      	beq.n	8005c3a <__swsetup_r+0x9a>
 8005c24:	2200      	movs	r2, #0
 8005c26:	60a2      	str	r2, [r4, #8]
 8005c28:	6962      	ldr	r2, [r4, #20]
 8005c2a:	4252      	negs	r2, r2
 8005c2c:	61a2      	str	r2, [r4, #24]
 8005c2e:	6922      	ldr	r2, [r4, #16]
 8005c30:	b942      	cbnz	r2, 8005c44 <__swsetup_r+0xa4>
 8005c32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c36:	d1c5      	bne.n	8005bc4 <__swsetup_r+0x24>
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	0799      	lsls	r1, r3, #30
 8005c3c:	bf58      	it	pl
 8005c3e:	6962      	ldrpl	r2, [r4, #20]
 8005c40:	60a2      	str	r2, [r4, #8]
 8005c42:	e7f4      	b.n	8005c2e <__swsetup_r+0x8e>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7f7      	b.n	8005c38 <__swsetup_r+0x98>
 8005c48:	20000010 	.word	0x20000010

08005c4c <__swhatbuf_r>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	460c      	mov	r4, r1
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	4615      	mov	r5, r2
 8005c56:	2900      	cmp	r1, #0
 8005c58:	461e      	mov	r6, r3
 8005c5a:	b096      	sub	sp, #88	@ 0x58
 8005c5c:	da0c      	bge.n	8005c78 <__swhatbuf_r+0x2c>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	2100      	movs	r1, #0
 8005c62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c66:	bf14      	ite	ne
 8005c68:	2340      	movne	r3, #64	@ 0x40
 8005c6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c6e:	2000      	movs	r0, #0
 8005c70:	6031      	str	r1, [r6, #0]
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	b016      	add	sp, #88	@ 0x58
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	466a      	mov	r2, sp
 8005c7a:	f000 f859 	bl	8005d30 <_fstat_r>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	dbed      	blt.n	8005c5e <__swhatbuf_r+0x12>
 8005c82:	9901      	ldr	r1, [sp, #4]
 8005c84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c8c:	4259      	negs	r1, r3
 8005c8e:	4159      	adcs	r1, r3
 8005c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c94:	e7eb      	b.n	8005c6e <__swhatbuf_r+0x22>

08005c96 <__smakebuf_r>:
 8005c96:	898b      	ldrh	r3, [r1, #12]
 8005c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c9a:	079d      	lsls	r5, r3, #30
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	d507      	bpl.n	8005cb2 <__smakebuf_r+0x1c>
 8005ca2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	2301      	movs	r3, #1
 8005cac:	6163      	str	r3, [r4, #20]
 8005cae:	b003      	add	sp, #12
 8005cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	ab01      	add	r3, sp, #4
 8005cb6:	f7ff ffc9 	bl	8005c4c <__swhatbuf_r>
 8005cba:	9f00      	ldr	r7, [sp, #0]
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff fa37 	bl	8005134 <_malloc_r>
 8005cc6:	b948      	cbnz	r0, 8005cdc <__smakebuf_r+0x46>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d4ee      	bmi.n	8005cae <__smakebuf_r+0x18>
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7e2      	b.n	8005ca2 <__smakebuf_r+0xc>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	9b01      	ldr	r3, [sp, #4]
 8005cea:	6020      	str	r0, [r4, #0]
 8005cec:	b15b      	cbz	r3, 8005d06 <__smakebuf_r+0x70>
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf4:	f000 f82e 	bl	8005d54 <_isatty_r>
 8005cf8:	b128      	cbz	r0, 8005d06 <__smakebuf_r+0x70>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	f023 0303 	bic.w	r3, r3, #3
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	431d      	orrs	r5, r3
 8005d0a:	81a5      	strh	r5, [r4, #12]
 8005d0c:	e7cf      	b.n	8005cae <__smakebuf_r+0x18>
	...

08005d10 <_close_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	2300      	movs	r3, #0
 8005d14:	4d05      	ldr	r5, [pc, #20]	@ (8005d2c <_close_r+0x1c>)
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fd fb49 	bl	80033b2 <_close>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_close_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_close_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20000408 	.word	0x20000408

08005d30 <_fstat_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	2300      	movs	r3, #0
 8005d34:	4d06      	ldr	r5, [pc, #24]	@ (8005d50 <_fstat_r+0x20>)
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	f7fd fb43 	bl	80033c8 <_fstat>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_fstat_r+0x1c>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_fstat_r+0x1c>
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000408 	.word	0x20000408

08005d54 <_isatty_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	2300      	movs	r3, #0
 8005d58:	4d05      	ldr	r5, [pc, #20]	@ (8005d70 <_isatty_r+0x1c>)
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fd fb41 	bl	80033e6 <_isatty>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_isatty_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_isatty_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20000408 	.word	0x20000408

08005d74 <_lseek_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4d05      	ldr	r5, [pc, #20]	@ (8005d94 <_lseek_r+0x20>)
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f7fd fb39 	bl	80033fa <_lseek>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_lseek_r+0x1e>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_lseek_r+0x1e>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000408 	.word	0x20000408

08005d98 <_read_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	2200      	movs	r2, #0
 8005da2:	4d05      	ldr	r5, [pc, #20]	@ (8005db8 <_read_r+0x20>)
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fd fae6 	bl	8003378 <_read>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_read_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_read_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000408 	.word	0x20000408

08005dbc <_sbrk_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4d05      	ldr	r5, [pc, #20]	@ (8005dd8 <_sbrk_r+0x1c>)
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fd fb24 	bl	8003414 <_sbrk>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_sbrk_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_sbrk_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20000408 	.word	0x20000408

08005ddc <_write_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	2200      	movs	r2, #0
 8005de6:	4d05      	ldr	r5, [pc, #20]	@ (8005dfc <_write_r+0x20>)
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fd fbf4 	bl	80035d8 <_write>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_write_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_write_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000408 	.word	0x20000408

08005e00 <memcpy>:
 8005e00:	440a      	add	r2, r1
 8005e02:	4291      	cmp	r1, r2
 8005e04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005e08:	d100      	bne.n	8005e0c <memcpy+0xc>
 8005e0a:	4770      	bx	lr
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e12:	4291      	cmp	r1, r2
 8005e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e18:	d1f9      	bne.n	8005e0e <memcpy+0xe>
 8005e1a:	bd10      	pop	{r4, pc}

08005e1c <__assert_func>:
 8005e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e1e:	4614      	mov	r4, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <__assert_func+0x2c>)
 8005e24:	4605      	mov	r5, r0
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68d8      	ldr	r0, [r3, #12]
 8005e2a:	b954      	cbnz	r4, 8005e42 <__assert_func+0x26>
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <__assert_func+0x30>)
 8005e2e:	461c      	mov	r4, r3
 8005e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e34:	9100      	str	r1, [sp, #0]
 8005e36:	462b      	mov	r3, r5
 8005e38:	4905      	ldr	r1, [pc, #20]	@ (8005e50 <__assert_func+0x34>)
 8005e3a:	f000 f87b 	bl	8005f34 <fiprintf>
 8005e3e:	f000 f898 	bl	8005f72 <abort>
 8005e42:	4b04      	ldr	r3, [pc, #16]	@ (8005e54 <__assert_func+0x38>)
 8005e44:	e7f4      	b.n	8005e30 <__assert_func+0x14>
 8005e46:	bf00      	nop
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	08007d56 	.word	0x08007d56
 8005e50:	08007d28 	.word	0x08007d28
 8005e54:	08007d1b 	.word	0x08007d1b

08005e58 <_calloc_r>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	fba1 5402 	umull	r5, r4, r1, r2
 8005e5e:	b93c      	cbnz	r4, 8005e70 <_calloc_r+0x18>
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7ff f967 	bl	8005134 <_malloc_r>
 8005e66:	4606      	mov	r6, r0
 8005e68:	b928      	cbnz	r0, 8005e76 <_calloc_r+0x1e>
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	220c      	movs	r2, #12
 8005e72:	6002      	str	r2, [r0, #0]
 8005e74:	e7f9      	b.n	8005e6a <_calloc_r+0x12>
 8005e76:	462a      	mov	r2, r5
 8005e78:	4621      	mov	r1, r4
 8005e7a:	f7fe f957 	bl	800412c <memset>
 8005e7e:	e7f5      	b.n	8005e6c <_calloc_r+0x14>

08005e80 <_free_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4605      	mov	r5, r0
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d040      	beq.n	8005f0a <_free_r+0x8a>
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	18e4      	addlt	r4, r4, r3
 8005e94:	f7ff fa76 	bl	8005384 <__malloc_lock>
 8005e98:	4a1c      	ldr	r2, [pc, #112]	@ (8005f0c <_free_r+0x8c>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b933      	cbnz	r3, 8005eac <_free_r+0x2c>
 8005e9e:	6063      	str	r3, [r4, #4]
 8005ea0:	6014      	str	r4, [r2, #0]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea8:	f7ff ba72 	b.w	8005390 <__malloc_unlock>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d908      	bls.n	8005ec2 <_free_r+0x42>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	1821      	adds	r1, r4, r0
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	bf01      	itttt	eq
 8005eb8:	6819      	ldreq	r1, [r3, #0]
 8005eba:	685b      	ldreq	r3, [r3, #4]
 8005ebc:	1809      	addeq	r1, r1, r0
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	e7ed      	b.n	8005e9e <_free_r+0x1e>
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	b10b      	cbz	r3, 8005ecc <_free_r+0x4c>
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x42>
 8005ecc:	6811      	ldr	r1, [r2, #0]
 8005ece:	1850      	adds	r0, r2, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x6c>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1850      	adds	r0, r2, r1
 8005eda:	4283      	cmp	r3, r0
 8005edc:	6011      	str	r1, [r2, #0]
 8005ede:	d1e0      	bne.n	8005ea2 <_free_r+0x22>
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4408      	add	r0, r1
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	e7da      	b.n	8005ea2 <_free_r+0x22>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x74>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d6      	b.n	8005ea2 <_free_r+0x22>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6054      	str	r4, [r2, #4]
 8005f08:	e7cb      	b.n	8005ea2 <_free_r+0x22>
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000404 	.word	0x20000404

08005f10 <__ascii_mbtowc>:
 8005f10:	b082      	sub	sp, #8
 8005f12:	b901      	cbnz	r1, 8005f16 <__ascii_mbtowc+0x6>
 8005f14:	a901      	add	r1, sp, #4
 8005f16:	b142      	cbz	r2, 8005f2a <__ascii_mbtowc+0x1a>
 8005f18:	b14b      	cbz	r3, 8005f2e <__ascii_mbtowc+0x1e>
 8005f1a:	7813      	ldrb	r3, [r2, #0]
 8005f1c:	600b      	str	r3, [r1, #0]
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	1e10      	subs	r0, r2, #0
 8005f22:	bf18      	it	ne
 8005f24:	2001      	movne	r0, #1
 8005f26:	b002      	add	sp, #8
 8005f28:	4770      	bx	lr
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	e7fb      	b.n	8005f26 <__ascii_mbtowc+0x16>
 8005f2e:	f06f 0001 	mvn.w	r0, #1
 8005f32:	e7f8      	b.n	8005f26 <__ascii_mbtowc+0x16>

08005f34 <fiprintf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b503      	push	{r0, r1, lr}
 8005f38:	4601      	mov	r1, r0
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	4805      	ldr	r0, [pc, #20]	@ (8005f54 <fiprintf+0x20>)
 8005f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	f7fe ffb3 	bl	8004eb0 <_vfiprintf_r>
 8005f4a:	b002      	add	sp, #8
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
 8005f54:	20000010 	.word	0x20000010

08005f58 <__ascii_wctomb>:
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4608      	mov	r0, r1
 8005f5c:	b141      	cbz	r1, 8005f70 <__ascii_wctomb+0x18>
 8005f5e:	2aff      	cmp	r2, #255	@ 0xff
 8005f60:	d904      	bls.n	8005f6c <__ascii_wctomb+0x14>
 8005f62:	228a      	movs	r2, #138	@ 0x8a
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	4770      	bx	lr
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	700a      	strb	r2, [r1, #0]
 8005f70:	4770      	bx	lr

08005f72 <abort>:
 8005f72:	2006      	movs	r0, #6
 8005f74:	b508      	push	{r3, lr}
 8005f76:	f000 f82b 	bl	8005fd0 <raise>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fd f9f1 	bl	8003362 <_exit>

08005f80 <_raise_r>:
 8005f80:	291f      	cmp	r1, #31
 8005f82:	b538      	push	{r3, r4, r5, lr}
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	d904      	bls.n	8005f94 <_raise_r+0x14>
 8005f8a:	2316      	movs	r3, #22
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f96:	b112      	cbz	r2, 8005f9e <_raise_r+0x1e>
 8005f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f9c:	b94b      	cbnz	r3, 8005fb2 <_raise_r+0x32>
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 f830 	bl	8006004 <_getpid_r>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	4628      	mov	r0, r5
 8005faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fae:	f000 b817 	b.w	8005fe0 <_kill_r>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d00a      	beq.n	8005fcc <_raise_r+0x4c>
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	d103      	bne.n	8005fc2 <_raise_r+0x42>
 8005fba:	2316      	movs	r3, #22
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e7e7      	b.n	8005f92 <_raise_r+0x12>
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005fca:	4798      	blx	r3
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e7e0      	b.n	8005f92 <_raise_r+0x12>

08005fd0 <raise>:
 8005fd0:	4b02      	ldr	r3, [pc, #8]	@ (8005fdc <raise+0xc>)
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f7ff bfd3 	b.w	8005f80 <_raise_r>
 8005fda:	bf00      	nop
 8005fdc:	20000010 	.word	0x20000010

08005fe0 <_kill_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4d06      	ldr	r5, [pc, #24]	@ (8006000 <_kill_r+0x20>)
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	f7fd f9a8 	bl	8003342 <_kill>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d102      	bne.n	8005ffc <_kill_r+0x1c>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	b103      	cbz	r3, 8005ffc <_kill_r+0x1c>
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	20000408 	.word	0x20000408

08006004 <_getpid_r>:
 8006004:	f7fd b996 	b.w	8003334 <_getpid>

08006008 <pow>:
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4680      	mov	r8, r0
 8006012:	4689      	mov	r9, r1
 8006014:	f000 faa4 	bl	8006560 <__ieee754_pow>
 8006018:	4622      	mov	r2, r4
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	462b      	mov	r3, r5
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	f7fa fd02 	bl	8000a2c <__aeabi_dcmpun>
 8006028:	bbc8      	cbnz	r0, 800609e <pow+0x96>
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	4640      	mov	r0, r8
 8006030:	4649      	mov	r1, r9
 8006032:	f7fa fcc9 	bl	80009c8 <__aeabi_dcmpeq>
 8006036:	b1b8      	cbz	r0, 8006068 <pow+0x60>
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa fcc2 	bl	80009c8 <__aeabi_dcmpeq>
 8006044:	2800      	cmp	r0, #0
 8006046:	d141      	bne.n	80060cc <pow+0xc4>
 8006048:	4620      	mov	r0, r4
 800604a:	4629      	mov	r1, r5
 800604c:	f000 f868 	bl	8006120 <finite>
 8006050:	b328      	cbz	r0, 800609e <pow+0x96>
 8006052:	2200      	movs	r2, #0
 8006054:	2300      	movs	r3, #0
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f7fa fcbf 	bl	80009dc <__aeabi_dcmplt>
 800605e:	b1f0      	cbz	r0, 800609e <pow+0x96>
 8006060:	f7fe f870 	bl	8004144 <__errno>
 8006064:	2322      	movs	r3, #34	@ 0x22
 8006066:	e019      	b.n	800609c <pow+0x94>
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f000 f858 	bl	8006120 <finite>
 8006070:	b9c8      	cbnz	r0, 80060a6 <pow+0x9e>
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f000 f853 	bl	8006120 <finite>
 800607a:	b1a0      	cbz	r0, 80060a6 <pow+0x9e>
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f000 f84e 	bl	8006120 <finite>
 8006084:	b178      	cbz	r0, 80060a6 <pow+0x9e>
 8006086:	4632      	mov	r2, r6
 8006088:	463b      	mov	r3, r7
 800608a:	4630      	mov	r0, r6
 800608c:	4639      	mov	r1, r7
 800608e:	f7fa fccd 	bl	8000a2c <__aeabi_dcmpun>
 8006092:	2800      	cmp	r0, #0
 8006094:	d0e4      	beq.n	8006060 <pow+0x58>
 8006096:	f7fe f855 	bl	8004144 <__errno>
 800609a:	2321      	movs	r3, #33	@ 0x21
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	4630      	mov	r0, r6
 80060ac:	4639      	mov	r1, r7
 80060ae:	f7fa fc8b 	bl	80009c8 <__aeabi_dcmpeq>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0f3      	beq.n	800609e <pow+0x96>
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f000 f831 	bl	8006120 <finite>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0ed      	beq.n	800609e <pow+0x96>
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f000 f82b 	bl	8006120 <finite>
 80060ca:	e7c8      	b.n	800605e <pow+0x56>
 80060cc:	2600      	movs	r6, #0
 80060ce:	4f01      	ldr	r7, [pc, #4]	@ (80060d4 <pow+0xcc>)
 80060d0:	e7e5      	b.n	800609e <pow+0x96>
 80060d2:	bf00      	nop
 80060d4:	3ff00000 	.word	0x3ff00000

080060d8 <sqrt>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	4606      	mov	r6, r0
 80060dc:	460f      	mov	r7, r1
 80060de:	f000 f825 	bl	800612c <__ieee754_sqrt>
 80060e2:	4632      	mov	r2, r6
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	463b      	mov	r3, r7
 80060ea:	4630      	mov	r0, r6
 80060ec:	4639      	mov	r1, r7
 80060ee:	f7fa fc9d 	bl	8000a2c <__aeabi_dcmpun>
 80060f2:	b990      	cbnz	r0, 800611a <sqrt+0x42>
 80060f4:	2200      	movs	r2, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa fc6e 	bl	80009dc <__aeabi_dcmplt>
 8006100:	b158      	cbz	r0, 800611a <sqrt+0x42>
 8006102:	f7fe f81f 	bl	8004144 <__errno>
 8006106:	2321      	movs	r3, #33	@ 0x21
 8006108:	2200      	movs	r2, #0
 800610a:	6003      	str	r3, [r0, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	f7fa fb1b 	bl	800074c <__aeabi_ddiv>
 8006116:	4604      	mov	r4, r0
 8006118:	460d      	mov	r5, r1
 800611a:	4620      	mov	r0, r4
 800611c:	4629      	mov	r1, r5
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006120 <finite>:
 8006120:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006124:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006128:	0fc0      	lsrs	r0, r0, #31
 800612a:	4770      	bx	lr

0800612c <__ieee754_sqrt>:
 800612c:	4a67      	ldr	r2, [pc, #412]	@ (80062cc <__ieee754_sqrt+0x1a0>)
 800612e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006132:	438a      	bics	r2, r1
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	460b      	mov	r3, r1
 800613a:	4604      	mov	r4, r0
 800613c:	d10e      	bne.n	800615c <__ieee754_sqrt+0x30>
 800613e:	4602      	mov	r2, r0
 8006140:	f7fa f9da 	bl	80004f8 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa f81e 	bl	800018c <__adddf3>
 8006150:	4606      	mov	r6, r0
 8006152:	460f      	mov	r7, r1
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	2900      	cmp	r1, #0
 800615e:	dc0c      	bgt.n	800617a <__ieee754_sqrt+0x4e>
 8006160:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006164:	4302      	orrs	r2, r0
 8006166:	d0f5      	beq.n	8006154 <__ieee754_sqrt+0x28>
 8006168:	b189      	cbz	r1, 800618e <__ieee754_sqrt+0x62>
 800616a:	4602      	mov	r2, r0
 800616c:	f7fa f80c 	bl	8000188 <__aeabi_dsub>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	f7fa faea 	bl	800074c <__aeabi_ddiv>
 8006178:	e7ea      	b.n	8006150 <__ieee754_sqrt+0x24>
 800617a:	150a      	asrs	r2, r1, #20
 800617c:	d115      	bne.n	80061aa <__ieee754_sqrt+0x7e>
 800617e:	2100      	movs	r1, #0
 8006180:	e009      	b.n	8006196 <__ieee754_sqrt+0x6a>
 8006182:	0ae3      	lsrs	r3, r4, #11
 8006184:	3a15      	subs	r2, #21
 8006186:	0564      	lsls	r4, r4, #21
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0fa      	beq.n	8006182 <__ieee754_sqrt+0x56>
 800618c:	e7f7      	b.n	800617e <__ieee754_sqrt+0x52>
 800618e:	460a      	mov	r2, r1
 8006190:	e7fa      	b.n	8006188 <__ieee754_sqrt+0x5c>
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	3101      	adds	r1, #1
 8006196:	02d8      	lsls	r0, r3, #11
 8006198:	d5fb      	bpl.n	8006192 <__ieee754_sqrt+0x66>
 800619a:	1e48      	subs	r0, r1, #1
 800619c:	1a12      	subs	r2, r2, r0
 800619e:	f1c1 0020 	rsb	r0, r1, #32
 80061a2:	fa24 f000 	lsr.w	r0, r4, r0
 80061a6:	4303      	orrs	r3, r0
 80061a8:	408c      	lsls	r4, r1
 80061aa:	2600      	movs	r6, #0
 80061ac:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80061b0:	2116      	movs	r1, #22
 80061b2:	07d2      	lsls	r2, r2, #31
 80061b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80061b8:	4632      	mov	r2, r6
 80061ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c2:	bf5c      	itt	pl
 80061c4:	005b      	lslpl	r3, r3, #1
 80061c6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80061ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061ce:	bf58      	it	pl
 80061d0:	0064      	lslpl	r4, r4, #1
 80061d2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80061d6:	107f      	asrs	r7, r7, #1
 80061d8:	0064      	lsls	r4, r4, #1
 80061da:	1815      	adds	r5, r2, r0
 80061dc:	429d      	cmp	r5, r3
 80061de:	bfde      	ittt	le
 80061e0:	182a      	addle	r2, r5, r0
 80061e2:	1b5b      	suble	r3, r3, r5
 80061e4:	1836      	addle	r6, r6, r0
 80061e6:	0fe5      	lsrs	r5, r4, #31
 80061e8:	3901      	subs	r1, #1
 80061ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80061ee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061f2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061f6:	d1f0      	bne.n	80061da <__ieee754_sqrt+0xae>
 80061f8:	460d      	mov	r5, r1
 80061fa:	f04f 0a20 	mov.w	sl, #32
 80061fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006202:	429a      	cmp	r2, r3
 8006204:	eb01 0c00 	add.w	ip, r1, r0
 8006208:	db02      	blt.n	8006210 <__ieee754_sqrt+0xe4>
 800620a:	d113      	bne.n	8006234 <__ieee754_sqrt+0x108>
 800620c:	45a4      	cmp	ip, r4
 800620e:	d811      	bhi.n	8006234 <__ieee754_sqrt+0x108>
 8006210:	f1bc 0f00 	cmp.w	ip, #0
 8006214:	eb0c 0100 	add.w	r1, ip, r0
 8006218:	da42      	bge.n	80062a0 <__ieee754_sqrt+0x174>
 800621a:	2900      	cmp	r1, #0
 800621c:	db40      	blt.n	80062a0 <__ieee754_sqrt+0x174>
 800621e:	f102 0e01 	add.w	lr, r2, #1
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	4672      	mov	r2, lr
 8006226:	45a4      	cmp	ip, r4
 8006228:	bf88      	it	hi
 800622a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800622e:	eba4 040c 	sub.w	r4, r4, ip
 8006232:	4405      	add	r5, r0
 8006234:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006238:	f1ba 0a01 	subs.w	sl, sl, #1
 800623c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006240:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006244:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006248:	d1db      	bne.n	8006202 <__ieee754_sqrt+0xd6>
 800624a:	431c      	orrs	r4, r3
 800624c:	d01a      	beq.n	8006284 <__ieee754_sqrt+0x158>
 800624e:	4c20      	ldr	r4, [pc, #128]	@ (80062d0 <__ieee754_sqrt+0x1a4>)
 8006250:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80062d4 <__ieee754_sqrt+0x1a8>
 8006254:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006258:	e9db 2300 	ldrd	r2, r3, [fp]
 800625c:	f7f9 ff94 	bl	8000188 <__aeabi_dsub>
 8006260:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fbc0 	bl	80009f0 <__aeabi_dcmple>
 8006270:	b140      	cbz	r0, 8006284 <__ieee754_sqrt+0x158>
 8006272:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006276:	e9db 2300 	ldrd	r2, r3, [fp]
 800627a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800627e:	d111      	bne.n	80062a4 <__ieee754_sqrt+0x178>
 8006280:	4655      	mov	r5, sl
 8006282:	3601      	adds	r6, #1
 8006284:	1072      	asrs	r2, r6, #1
 8006286:	086b      	lsrs	r3, r5, #1
 8006288:	07f1      	lsls	r1, r6, #31
 800628a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800628e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006292:	bf48      	it	mi
 8006294:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006298:	4618      	mov	r0, r3
 800629a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800629e:	e757      	b.n	8006150 <__ieee754_sqrt+0x24>
 80062a0:	4696      	mov	lr, r2
 80062a2:	e7be      	b.n	8006222 <__ieee754_sqrt+0xf6>
 80062a4:	f7f9 ff72 	bl	800018c <__adddf3>
 80062a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4640      	mov	r0, r8
 80062b2:	4649      	mov	r1, r9
 80062b4:	f7fa fb92 	bl	80009dc <__aeabi_dcmplt>
 80062b8:	b120      	cbz	r0, 80062c4 <__ieee754_sqrt+0x198>
 80062ba:	1ca8      	adds	r0, r5, #2
 80062bc:	bf08      	it	eq
 80062be:	3601      	addeq	r6, #1
 80062c0:	3502      	adds	r5, #2
 80062c2:	e7df      	b.n	8006284 <__ieee754_sqrt+0x158>
 80062c4:	1c6b      	adds	r3, r5, #1
 80062c6:	f023 0501 	bic.w	r5, r3, #1
 80062ca:	e7db      	b.n	8006284 <__ieee754_sqrt+0x158>
 80062cc:	7ff00000 	.word	0x7ff00000
 80062d0:	200001d8 	.word	0x200001d8
 80062d4:	200001d0 	.word	0x200001d0

080062d8 <ceil>:
 80062d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80062e0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80062e4:	2e13      	cmp	r6, #19
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	460c      	mov	r4, r1
 80062ec:	4605      	mov	r5, r0
 80062ee:	4680      	mov	r8, r0
 80062f0:	dc2f      	bgt.n	8006352 <ceil+0x7a>
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	da11      	bge.n	800631a <ceil+0x42>
 80062f6:	a332      	add	r3, pc, #200	@ (adr r3, 80063c0 <ceil+0xe8>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff46 	bl	800018c <__adddf3>
 8006300:	2200      	movs	r2, #0
 8006302:	2300      	movs	r3, #0
 8006304:	f7fa fb88 	bl	8000a18 <__aeabi_dcmpgt>
 8006308:	b120      	cbz	r0, 8006314 <ceil+0x3c>
 800630a:	2c00      	cmp	r4, #0
 800630c:	db51      	blt.n	80063b2 <ceil+0xda>
 800630e:	4325      	orrs	r5, r4
 8006310:	d153      	bne.n	80063ba <ceil+0xe2>
 8006312:	462c      	mov	r4, r5
 8006314:	4623      	mov	r3, r4
 8006316:	462a      	mov	r2, r5
 8006318:	e024      	b.n	8006364 <ceil+0x8c>
 800631a:	4f2b      	ldr	r7, [pc, #172]	@ (80063c8 <ceil+0xf0>)
 800631c:	4137      	asrs	r7, r6
 800631e:	ea01 0c07 	and.w	ip, r1, r7
 8006322:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006326:	d01d      	beq.n	8006364 <ceil+0x8c>
 8006328:	a325      	add	r3, pc, #148	@ (adr r3, 80063c0 <ceil+0xe8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7f9 ff2d 	bl	800018c <__adddf3>
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	f7fa fb6f 	bl	8000a18 <__aeabi_dcmpgt>
 800633a:	2800      	cmp	r0, #0
 800633c:	d0ea      	beq.n	8006314 <ceil+0x3c>
 800633e:	2c00      	cmp	r4, #0
 8006340:	bfc2      	ittt	gt
 8006342:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8006346:	4133      	asrgt	r3, r6
 8006348:	18e4      	addgt	r4, r4, r3
 800634a:	2500      	movs	r5, #0
 800634c:	ea24 0407 	bic.w	r4, r4, r7
 8006350:	e7e0      	b.n	8006314 <ceil+0x3c>
 8006352:	2e33      	cmp	r6, #51	@ 0x33
 8006354:	dd0a      	ble.n	800636c <ceil+0x94>
 8006356:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800635a:	d103      	bne.n	8006364 <ceil+0x8c>
 800635c:	f7f9 ff16 	bl	800018c <__adddf3>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8006370:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006374:	fa2c f707 	lsr.w	r7, ip, r7
 8006378:	4238      	tst	r0, r7
 800637a:	d0f3      	beq.n	8006364 <ceil+0x8c>
 800637c:	a310      	add	r3, pc, #64	@ (adr r3, 80063c0 <ceil+0xe8>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7f9 ff03 	bl	800018c <__adddf3>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	f7fa fb45 	bl	8000a18 <__aeabi_dcmpgt>
 800638e:	2800      	cmp	r0, #0
 8006390:	d0c0      	beq.n	8006314 <ceil+0x3c>
 8006392:	2c00      	cmp	r4, #0
 8006394:	dd0a      	ble.n	80063ac <ceil+0xd4>
 8006396:	2e14      	cmp	r6, #20
 8006398:	d101      	bne.n	800639e <ceil+0xc6>
 800639a:	3401      	adds	r4, #1
 800639c:	e006      	b.n	80063ac <ceil+0xd4>
 800639e:	2301      	movs	r3, #1
 80063a0:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80063a4:	40b3      	lsls	r3, r6
 80063a6:	441d      	add	r5, r3
 80063a8:	45a8      	cmp	r8, r5
 80063aa:	d8f6      	bhi.n	800639a <ceil+0xc2>
 80063ac:	ea25 0507 	bic.w	r5, r5, r7
 80063b0:	e7b0      	b.n	8006314 <ceil+0x3c>
 80063b2:	2500      	movs	r5, #0
 80063b4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80063b8:	e7ac      	b.n	8006314 <ceil+0x3c>
 80063ba:	2500      	movs	r5, #0
 80063bc:	4c03      	ldr	r4, [pc, #12]	@ (80063cc <ceil+0xf4>)
 80063be:	e7a9      	b.n	8006314 <ceil+0x3c>
 80063c0:	8800759c 	.word	0x8800759c
 80063c4:	7e37e43c 	.word	0x7e37e43c
 80063c8:	000fffff 	.word	0x000fffff
 80063cc:	3ff00000 	.word	0x3ff00000

080063d0 <floor>:
 80063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063d8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80063dc:	2e13      	cmp	r6, #19
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	460c      	mov	r4, r1
 80063e4:	4605      	mov	r5, r0
 80063e6:	4680      	mov	r8, r0
 80063e8:	dc35      	bgt.n	8006456 <floor+0x86>
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	da17      	bge.n	800641e <floor+0x4e>
 80063ee:	a334      	add	r3, pc, #208	@ (adr r3, 80064c0 <floor+0xf0>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7f9 feca 	bl	800018c <__adddf3>
 80063f8:	2200      	movs	r2, #0
 80063fa:	2300      	movs	r3, #0
 80063fc:	f7fa fb0c 	bl	8000a18 <__aeabi_dcmpgt>
 8006400:	b150      	cbz	r0, 8006418 <floor+0x48>
 8006402:	2c00      	cmp	r4, #0
 8006404:	da57      	bge.n	80064b6 <floor+0xe6>
 8006406:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800640a:	432c      	orrs	r4, r5
 800640c:	2500      	movs	r5, #0
 800640e:	42ac      	cmp	r4, r5
 8006410:	4c2d      	ldr	r4, [pc, #180]	@ (80064c8 <floor+0xf8>)
 8006412:	bf08      	it	eq
 8006414:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006418:	4623      	mov	r3, r4
 800641a:	462a      	mov	r2, r5
 800641c:	e024      	b.n	8006468 <floor+0x98>
 800641e:	4f2b      	ldr	r7, [pc, #172]	@ (80064cc <floor+0xfc>)
 8006420:	4137      	asrs	r7, r6
 8006422:	ea01 0c07 	and.w	ip, r1, r7
 8006426:	ea5c 0c00 	orrs.w	ip, ip, r0
 800642a:	d01d      	beq.n	8006468 <floor+0x98>
 800642c:	a324      	add	r3, pc, #144	@ (adr r3, 80064c0 <floor+0xf0>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7f9 feab 	bl	800018c <__adddf3>
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	f7fa faed 	bl	8000a18 <__aeabi_dcmpgt>
 800643e:	2800      	cmp	r0, #0
 8006440:	d0ea      	beq.n	8006418 <floor+0x48>
 8006442:	2c00      	cmp	r4, #0
 8006444:	bfbe      	ittt	lt
 8006446:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800644a:	4133      	asrlt	r3, r6
 800644c:	18e4      	addlt	r4, r4, r3
 800644e:	2500      	movs	r5, #0
 8006450:	ea24 0407 	bic.w	r4, r4, r7
 8006454:	e7e0      	b.n	8006418 <floor+0x48>
 8006456:	2e33      	cmp	r6, #51	@ 0x33
 8006458:	dd0a      	ble.n	8006470 <floor+0xa0>
 800645a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800645e:	d103      	bne.n	8006468 <floor+0x98>
 8006460:	f7f9 fe94 	bl	800018c <__adddf3>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8006474:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006478:	fa2c f707 	lsr.w	r7, ip, r7
 800647c:	4207      	tst	r7, r0
 800647e:	d0f3      	beq.n	8006468 <floor+0x98>
 8006480:	a30f      	add	r3, pc, #60	@ (adr r3, 80064c0 <floor+0xf0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7f9 fe81 	bl	800018c <__adddf3>
 800648a:	2200      	movs	r2, #0
 800648c:	2300      	movs	r3, #0
 800648e:	f7fa fac3 	bl	8000a18 <__aeabi_dcmpgt>
 8006492:	2800      	cmp	r0, #0
 8006494:	d0c0      	beq.n	8006418 <floor+0x48>
 8006496:	2c00      	cmp	r4, #0
 8006498:	da0a      	bge.n	80064b0 <floor+0xe0>
 800649a:	2e14      	cmp	r6, #20
 800649c:	d101      	bne.n	80064a2 <floor+0xd2>
 800649e:	3401      	adds	r4, #1
 80064a0:	e006      	b.n	80064b0 <floor+0xe0>
 80064a2:	2301      	movs	r3, #1
 80064a4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80064a8:	40b3      	lsls	r3, r6
 80064aa:	441d      	add	r5, r3
 80064ac:	4545      	cmp	r5, r8
 80064ae:	d3f6      	bcc.n	800649e <floor+0xce>
 80064b0:	ea25 0507 	bic.w	r5, r5, r7
 80064b4:	e7b0      	b.n	8006418 <floor+0x48>
 80064b6:	2500      	movs	r5, #0
 80064b8:	462c      	mov	r4, r5
 80064ba:	e7ad      	b.n	8006418 <floor+0x48>
 80064bc:	f3af 8000 	nop.w
 80064c0:	8800759c 	.word	0x8800759c
 80064c4:	7e37e43c 	.word	0x7e37e43c
 80064c8:	bff00000 	.word	0xbff00000
 80064cc:	000fffff 	.word	0x000fffff

080064d0 <round>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80064d6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80064da:	2a13      	cmp	r2, #19
 80064dc:	4604      	mov	r4, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	460b      	mov	r3, r1
 80064e2:	dc1a      	bgt.n	800651a <round+0x4a>
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	da0b      	bge.n	8006500 <round+0x30>
 80064e8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80064ec:	3201      	adds	r2, #1
 80064ee:	bf04      	itt	eq
 80064f0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80064f4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80064f8:	2200      	movs	r2, #0
 80064fa:	461d      	mov	r5, r3
 80064fc:	4614      	mov	r4, r2
 80064fe:	e016      	b.n	800652e <round+0x5e>
 8006500:	4815      	ldr	r0, [pc, #84]	@ (8006558 <round+0x88>)
 8006502:	4110      	asrs	r0, r2
 8006504:	4001      	ands	r1, r0
 8006506:	4321      	orrs	r1, r4
 8006508:	d011      	beq.n	800652e <round+0x5e>
 800650a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800650e:	fa41 f202 	asr.w	r2, r1, r2
 8006512:	4413      	add	r3, r2
 8006514:	ea23 0300 	bic.w	r3, r3, r0
 8006518:	e7ee      	b.n	80064f8 <round+0x28>
 800651a:	2a33      	cmp	r2, #51	@ 0x33
 800651c:	dd0a      	ble.n	8006534 <round+0x64>
 800651e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006522:	d104      	bne.n	800652e <round+0x5e>
 8006524:	4602      	mov	r2, r0
 8006526:	f7f9 fe31 	bl	800018c <__adddf3>
 800652a:	4604      	mov	r4, r0
 800652c:	460d      	mov	r5, r1
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006538:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800653c:	40f8      	lsrs	r0, r7
 800653e:	4220      	tst	r0, r4
 8006540:	d0f5      	beq.n	800652e <round+0x5e>
 8006542:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006546:	2201      	movs	r2, #1
 8006548:	408a      	lsls	r2, r1
 800654a:	1912      	adds	r2, r2, r4
 800654c:	bf28      	it	cs
 800654e:	3301      	addcs	r3, #1
 8006550:	ea22 0200 	bic.w	r2, r2, r0
 8006554:	e7d1      	b.n	80064fa <round+0x2a>
 8006556:	bf00      	nop
 8006558:	000fffff 	.word	0x000fffff
 800655c:	00000000 	.word	0x00000000

08006560 <__ieee754_pow>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b091      	sub	sp, #68	@ 0x44
 8006566:	e9cd 2300 	strd	r2, r3, [sp]
 800656a:	468b      	mov	fp, r1
 800656c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006570:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8006574:	4682      	mov	sl, r0
 8006576:	ea57 0001 	orrs.w	r0, r7, r1
 800657a:	d112      	bne.n	80065a2 <__ieee754_pow+0x42>
 800657c:	4653      	mov	r3, sl
 800657e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8006582:	18db      	adds	r3, r3, r3
 8006584:	4152      	adcs	r2, r2
 8006586:	4298      	cmp	r0, r3
 8006588:	4b91      	ldr	r3, [pc, #580]	@ (80067d0 <__ieee754_pow+0x270>)
 800658a:	4193      	sbcs	r3, r2
 800658c:	f080 84ce 	bcs.w	8006f2c <__ieee754_pow+0x9cc>
 8006590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006594:	4650      	mov	r0, sl
 8006596:	4659      	mov	r1, fp
 8006598:	f7f9 fdf8 	bl	800018c <__adddf3>
 800659c:	b011      	add	sp, #68	@ 0x44
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	4b8c      	ldr	r3, [pc, #560]	@ (80067d4 <__ieee754_pow+0x274>)
 80065a4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80065a8:	429e      	cmp	r6, r3
 80065aa:	465d      	mov	r5, fp
 80065ac:	46d1      	mov	r9, sl
 80065ae:	d807      	bhi.n	80065c0 <__ieee754_pow+0x60>
 80065b0:	d102      	bne.n	80065b8 <__ieee754_pow+0x58>
 80065b2:	f1ba 0f00 	cmp.w	sl, #0
 80065b6:	d1eb      	bne.n	8006590 <__ieee754_pow+0x30>
 80065b8:	429f      	cmp	r7, r3
 80065ba:	d801      	bhi.n	80065c0 <__ieee754_pow+0x60>
 80065bc:	d10f      	bne.n	80065de <__ieee754_pow+0x7e>
 80065be:	b171      	cbz	r1, 80065de <__ieee754_pow+0x7e>
 80065c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80065c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80065c8:	ea55 0509 	orrs.w	r5, r5, r9
 80065cc:	d1e0      	bne.n	8006590 <__ieee754_pow+0x30>
 80065ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80065d2:	18db      	adds	r3, r3, r3
 80065d4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80065d8:	4152      	adcs	r2, r2
 80065da:	429d      	cmp	r5, r3
 80065dc:	e7d4      	b.n	8006588 <__ieee754_pow+0x28>
 80065de:	2d00      	cmp	r5, #0
 80065e0:	4633      	mov	r3, r6
 80065e2:	da39      	bge.n	8006658 <__ieee754_pow+0xf8>
 80065e4:	4a7c      	ldr	r2, [pc, #496]	@ (80067d8 <__ieee754_pow+0x278>)
 80065e6:	4297      	cmp	r7, r2
 80065e8:	d84e      	bhi.n	8006688 <__ieee754_pow+0x128>
 80065ea:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80065ee:	4297      	cmp	r7, r2
 80065f0:	f240 84ab 	bls.w	8006f4a <__ieee754_pow+0x9ea>
 80065f4:	153a      	asrs	r2, r7, #20
 80065f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80065fa:	2a14      	cmp	r2, #20
 80065fc:	dd0f      	ble.n	800661e <__ieee754_pow+0xbe>
 80065fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006602:	fa21 f402 	lsr.w	r4, r1, r2
 8006606:	fa04 f202 	lsl.w	r2, r4, r2
 800660a:	428a      	cmp	r2, r1
 800660c:	f040 849d 	bne.w	8006f4a <__ieee754_pow+0x9ea>
 8006610:	f004 0401 	and.w	r4, r4, #1
 8006614:	f1c4 0402 	rsb	r4, r4, #2
 8006618:	2900      	cmp	r1, #0
 800661a:	d15a      	bne.n	80066d2 <__ieee754_pow+0x172>
 800661c:	e00e      	b.n	800663c <__ieee754_pow+0xdc>
 800661e:	2900      	cmp	r1, #0
 8006620:	d156      	bne.n	80066d0 <__ieee754_pow+0x170>
 8006622:	f1c2 0214 	rsb	r2, r2, #20
 8006626:	fa47 f402 	asr.w	r4, r7, r2
 800662a:	fa04 f202 	lsl.w	r2, r4, r2
 800662e:	42ba      	cmp	r2, r7
 8006630:	f040 8488 	bne.w	8006f44 <__ieee754_pow+0x9e4>
 8006634:	f004 0401 	and.w	r4, r4, #1
 8006638:	f1c4 0402 	rsb	r4, r4, #2
 800663c:	4a67      	ldr	r2, [pc, #412]	@ (80067dc <__ieee754_pow+0x27c>)
 800663e:	4297      	cmp	r7, r2
 8006640:	d130      	bne.n	80066a4 <__ieee754_pow+0x144>
 8006642:	f1b8 0f00 	cmp.w	r8, #0
 8006646:	f280 8479 	bge.w	8006f3c <__ieee754_pow+0x9dc>
 800664a:	4652      	mov	r2, sl
 800664c:	465b      	mov	r3, fp
 800664e:	2000      	movs	r0, #0
 8006650:	4962      	ldr	r1, [pc, #392]	@ (80067dc <__ieee754_pow+0x27c>)
 8006652:	f7fa f87b 	bl	800074c <__aeabi_ddiv>
 8006656:	e7a1      	b.n	800659c <__ieee754_pow+0x3c>
 8006658:	2400      	movs	r4, #0
 800665a:	2900      	cmp	r1, #0
 800665c:	d139      	bne.n	80066d2 <__ieee754_pow+0x172>
 800665e:	4a5d      	ldr	r2, [pc, #372]	@ (80067d4 <__ieee754_pow+0x274>)
 8006660:	4297      	cmp	r7, r2
 8006662:	d1eb      	bne.n	800663c <__ieee754_pow+0xdc>
 8006664:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006668:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800666c:	ea53 0309 	orrs.w	r3, r3, r9
 8006670:	f000 845c 	beq.w	8006f2c <__ieee754_pow+0x9cc>
 8006674:	4b5a      	ldr	r3, [pc, #360]	@ (80067e0 <__ieee754_pow+0x280>)
 8006676:	429e      	cmp	r6, r3
 8006678:	d908      	bls.n	800668c <__ieee754_pow+0x12c>
 800667a:	f1b8 0f00 	cmp.w	r8, #0
 800667e:	f2c0 8459 	blt.w	8006f34 <__ieee754_pow+0x9d4>
 8006682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006686:	e789      	b.n	800659c <__ieee754_pow+0x3c>
 8006688:	2402      	movs	r4, #2
 800668a:	e7e6      	b.n	800665a <__ieee754_pow+0xfa>
 800668c:	f1b8 0f00 	cmp.w	r8, #0
 8006690:	f04f 0000 	mov.w	r0, #0
 8006694:	f04f 0100 	mov.w	r1, #0
 8006698:	da80      	bge.n	800659c <__ieee754_pow+0x3c>
 800669a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800669e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80066a2:	e77b      	b.n	800659c <__ieee754_pow+0x3c>
 80066a4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80066a8:	d106      	bne.n	80066b8 <__ieee754_pow+0x158>
 80066aa:	4652      	mov	r2, sl
 80066ac:	465b      	mov	r3, fp
 80066ae:	4650      	mov	r0, sl
 80066b0:	4659      	mov	r1, fp
 80066b2:	f7f9 ff21 	bl	80004f8 <__aeabi_dmul>
 80066b6:	e771      	b.n	800659c <__ieee754_pow+0x3c>
 80066b8:	4a4a      	ldr	r2, [pc, #296]	@ (80067e4 <__ieee754_pow+0x284>)
 80066ba:	4590      	cmp	r8, r2
 80066bc:	d109      	bne.n	80066d2 <__ieee754_pow+0x172>
 80066be:	2d00      	cmp	r5, #0
 80066c0:	db07      	blt.n	80066d2 <__ieee754_pow+0x172>
 80066c2:	4650      	mov	r0, sl
 80066c4:	4659      	mov	r1, fp
 80066c6:	b011      	add	sp, #68	@ 0x44
 80066c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	f7ff bd2e 	b.w	800612c <__ieee754_sqrt>
 80066d0:	2400      	movs	r4, #0
 80066d2:	4650      	mov	r0, sl
 80066d4:	4659      	mov	r1, fp
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	f000 fc91 	bl	8006ffe <fabs>
 80066dc:	9b02      	ldr	r3, [sp, #8]
 80066de:	f1b9 0f00 	cmp.w	r9, #0
 80066e2:	d127      	bne.n	8006734 <__ieee754_pow+0x1d4>
 80066e4:	4a3d      	ldr	r2, [pc, #244]	@ (80067dc <__ieee754_pow+0x27c>)
 80066e6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80066ea:	4594      	cmp	ip, r2
 80066ec:	d000      	beq.n	80066f0 <__ieee754_pow+0x190>
 80066ee:	bb0e      	cbnz	r6, 8006734 <__ieee754_pow+0x1d4>
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	da05      	bge.n	8006702 <__ieee754_pow+0x1a2>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	2000      	movs	r0, #0
 80066fc:	4937      	ldr	r1, [pc, #220]	@ (80067dc <__ieee754_pow+0x27c>)
 80066fe:	f7fa f825 	bl	800074c <__aeabi_ddiv>
 8006702:	2d00      	cmp	r5, #0
 8006704:	f6bf af4a 	bge.w	800659c <__ieee754_pow+0x3c>
 8006708:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800670c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006710:	4326      	orrs	r6, r4
 8006712:	d108      	bne.n	8006726 <__ieee754_pow+0x1c6>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f7f9 fd34 	bl	8000188 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	e795      	b.n	8006652 <__ieee754_pow+0xf2>
 8006726:	2c01      	cmp	r4, #1
 8006728:	f47f af38 	bne.w	800659c <__ieee754_pow+0x3c>
 800672c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006730:	4619      	mov	r1, r3
 8006732:	e733      	b.n	800659c <__ieee754_pow+0x3c>
 8006734:	0fea      	lsrs	r2, r5, #31
 8006736:	3a01      	subs	r2, #1
 8006738:	ea52 0c04 	orrs.w	ip, r2, r4
 800673c:	d102      	bne.n	8006744 <__ieee754_pow+0x1e4>
 800673e:	4652      	mov	r2, sl
 8006740:	465b      	mov	r3, fp
 8006742:	e7e9      	b.n	8006718 <__ieee754_pow+0x1b8>
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	3c01      	subs	r4, #1
 800674a:	4314      	orrs	r4, r2
 800674c:	bf14      	ite	ne
 800674e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80067dc <__ieee754_pow+0x27c>
 8006752:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80067e8 <__ieee754_pow+0x288>
 8006756:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800675a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800675e:	f240 8107 	bls.w	8006970 <__ieee754_pow+0x410>
 8006762:	4b22      	ldr	r3, [pc, #136]	@ (80067ec <__ieee754_pow+0x28c>)
 8006764:	429f      	cmp	r7, r3
 8006766:	4b1e      	ldr	r3, [pc, #120]	@ (80067e0 <__ieee754_pow+0x280>)
 8006768:	d913      	bls.n	8006792 <__ieee754_pow+0x232>
 800676a:	429e      	cmp	r6, r3
 800676c:	d808      	bhi.n	8006780 <__ieee754_pow+0x220>
 800676e:	f1b8 0f00 	cmp.w	r8, #0
 8006772:	da08      	bge.n	8006786 <__ieee754_pow+0x226>
 8006774:	2000      	movs	r0, #0
 8006776:	b011      	add	sp, #68	@ 0x44
 8006778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	f000 bc3a 	b.w	8006ff4 <__math_oflow>
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	dcf6      	bgt.n	8006774 <__ieee754_pow+0x214>
 8006786:	2000      	movs	r0, #0
 8006788:	b011      	add	sp, #68	@ 0x44
 800678a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678e:	f000 bc2c 	b.w	8006fea <__math_uflow>
 8006792:	429e      	cmp	r6, r3
 8006794:	d20c      	bcs.n	80067b0 <__ieee754_pow+0x250>
 8006796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	f7fa f91d 	bl	80009dc <__aeabi_dcmplt>
 80067a2:	3800      	subs	r0, #0
 80067a4:	bf18      	it	ne
 80067a6:	2001      	movne	r0, #1
 80067a8:	f1b8 0f00 	cmp.w	r8, #0
 80067ac:	daec      	bge.n	8006788 <__ieee754_pow+0x228>
 80067ae:	e7e2      	b.n	8006776 <__ieee754_pow+0x216>
 80067b0:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <__ieee754_pow+0x27c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	429e      	cmp	r6, r3
 80067b6:	d91b      	bls.n	80067f0 <__ieee754_pow+0x290>
 80067b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067bc:	2300      	movs	r3, #0
 80067be:	f7fa f90d 	bl	80009dc <__aeabi_dcmplt>
 80067c2:	3800      	subs	r0, #0
 80067c4:	bf18      	it	ne
 80067c6:	2001      	movne	r0, #1
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	dcd3      	bgt.n	8006776 <__ieee754_pow+0x216>
 80067ce:	e7db      	b.n	8006788 <__ieee754_pow+0x228>
 80067d0:	fff00000 	.word	0xfff00000
 80067d4:	7ff00000 	.word	0x7ff00000
 80067d8:	433fffff 	.word	0x433fffff
 80067dc:	3ff00000 	.word	0x3ff00000
 80067e0:	3fefffff 	.word	0x3fefffff
 80067e4:	3fe00000 	.word	0x3fe00000
 80067e8:	bff00000 	.word	0xbff00000
 80067ec:	43f00000 	.word	0x43f00000
 80067f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <__ieee754_pow+0x400>)
 80067f2:	f7f9 fcc9 	bl	8000188 <__aeabi_dsub>
 80067f6:	a352      	add	r3, pc, #328	@ (adr r3, 8006940 <__ieee754_pow+0x3e0>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	f7f9 fe7a 	bl	80004f8 <__aeabi_dmul>
 8006804:	a350      	add	r3, pc, #320	@ (adr r3, 8006948 <__ieee754_pow+0x3e8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7f9 fe71 	bl	80004f8 <__aeabi_dmul>
 8006816:	2200      	movs	r2, #0
 8006818:	4682      	mov	sl, r0
 800681a:	468b      	mov	fp, r1
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	4b50      	ldr	r3, [pc, #320]	@ (8006964 <__ieee754_pow+0x404>)
 8006822:	f7f9 fe69 	bl	80004f8 <__aeabi_dmul>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	a149      	add	r1, pc, #292	@ (adr r1, 8006950 <__ieee754_pow+0x3f0>)
 800682c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006830:	f7f9 fcaa 	bl	8000188 <__aeabi_dsub>
 8006834:	4622      	mov	r2, r4
 8006836:	462b      	mov	r3, r5
 8006838:	f7f9 fe5e 	bl	80004f8 <__aeabi_dmul>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	2000      	movs	r0, #0
 8006842:	4949      	ldr	r1, [pc, #292]	@ (8006968 <__ieee754_pow+0x408>)
 8006844:	f7f9 fca0 	bl	8000188 <__aeabi_dsub>
 8006848:	4622      	mov	r2, r4
 800684a:	4680      	mov	r8, r0
 800684c:	4689      	mov	r9, r1
 800684e:	462b      	mov	r3, r5
 8006850:	4620      	mov	r0, r4
 8006852:	4629      	mov	r1, r5
 8006854:	f7f9 fe50 	bl	80004f8 <__aeabi_dmul>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4640      	mov	r0, r8
 800685e:	4649      	mov	r1, r9
 8006860:	f7f9 fe4a 	bl	80004f8 <__aeabi_dmul>
 8006864:	a33c      	add	r3, pc, #240	@ (adr r3, 8006958 <__ieee754_pow+0x3f8>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7f9 fe45 	bl	80004f8 <__aeabi_dmul>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4650      	mov	r0, sl
 8006874:	4659      	mov	r1, fp
 8006876:	f7f9 fc87 	bl	8000188 <__aeabi_dsub>
 800687a:	2400      	movs	r4, #0
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4680      	mov	r8, r0
 8006882:	4689      	mov	r9, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7f9 fc80 	bl	800018c <__adddf3>
 800688c:	4632      	mov	r2, r6
 800688e:	463b      	mov	r3, r7
 8006890:	4620      	mov	r0, r4
 8006892:	460d      	mov	r5, r1
 8006894:	f7f9 fc78 	bl	8000188 <__aeabi_dsub>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7f9 fc72 	bl	8000188 <__aeabi_dsub>
 80068a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ac:	2300      	movs	r3, #0
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	f7f9 fc62 	bl	8000188 <__aeabi_dsub>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7f9 fe16 	bl	80004f8 <__aeabi_dmul>
 80068cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068d0:	4680      	mov	r8, r0
 80068d2:	4689      	mov	r9, r1
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f7f9 fe0e 	bl	80004f8 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7f9 fc52 	bl	800018c <__adddf3>
 80068e8:	4652      	mov	r2, sl
 80068ea:	465b      	mov	r3, fp
 80068ec:	4606      	mov	r6, r0
 80068ee:	460f      	mov	r7, r1
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7f9 fe00 	bl	80004f8 <__aeabi_dmul>
 80068f8:	460b      	mov	r3, r1
 80068fa:	4602      	mov	r2, r0
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7f9 fc42 	bl	800018c <__adddf3>
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <__ieee754_pow+0x40c>)
 800690a:	4604      	mov	r4, r0
 800690c:	4299      	cmp	r1, r3
 800690e:	460d      	mov	r5, r1
 8006910:	468a      	mov	sl, r1
 8006912:	468b      	mov	fp, r1
 8006914:	f340 82e0 	ble.w	8006ed8 <__ieee754_pow+0x978>
 8006918:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800691c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006920:	4303      	orrs	r3, r0
 8006922:	f000 81df 	beq.w	8006ce4 <__ieee754_pow+0x784>
 8006926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	2300      	movs	r3, #0
 800692e:	f7fa f855 	bl	80009dc <__aeabi_dcmplt>
 8006932:	3800      	subs	r0, #0
 8006934:	bf18      	it	ne
 8006936:	2001      	movne	r0, #1
 8006938:	e71d      	b.n	8006776 <__ieee754_pow+0x216>
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
 8006940:	60000000 	.word	0x60000000
 8006944:	3ff71547 	.word	0x3ff71547
 8006948:	f85ddf44 	.word	0xf85ddf44
 800694c:	3e54ae0b 	.word	0x3e54ae0b
 8006950:	55555555 	.word	0x55555555
 8006954:	3fd55555 	.word	0x3fd55555
 8006958:	652b82fe 	.word	0x652b82fe
 800695c:	3ff71547 	.word	0x3ff71547
 8006960:	3ff00000 	.word	0x3ff00000
 8006964:	3fd00000 	.word	0x3fd00000
 8006968:	3fe00000 	.word	0x3fe00000
 800696c:	408fffff 	.word	0x408fffff
 8006970:	4ad3      	ldr	r2, [pc, #844]	@ (8006cc0 <__ieee754_pow+0x760>)
 8006972:	402a      	ands	r2, r5
 8006974:	2a00      	cmp	r2, #0
 8006976:	f040 817a 	bne.w	8006c6e <__ieee754_pow+0x70e>
 800697a:	4bd2      	ldr	r3, [pc, #840]	@ (8006cc4 <__ieee754_pow+0x764>)
 800697c:	2200      	movs	r2, #0
 800697e:	f7f9 fdbb 	bl	80004f8 <__aeabi_dmul>
 8006982:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006986:	460b      	mov	r3, r1
 8006988:	151a      	asrs	r2, r3, #20
 800698a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800698e:	4422      	add	r2, r4
 8006990:	920a      	str	r2, [sp, #40]	@ 0x28
 8006992:	4acd      	ldr	r2, [pc, #820]	@ (8006cc8 <__ieee754_pow+0x768>)
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800699c:	4293      	cmp	r3, r2
 800699e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80069a2:	dd08      	ble.n	80069b6 <__ieee754_pow+0x456>
 80069a4:	4ac9      	ldr	r2, [pc, #804]	@ (8006ccc <__ieee754_pow+0x76c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f340 8163 	ble.w	8006c72 <__ieee754_pow+0x712>
 80069ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80069b2:	3301      	adds	r3, #1
 80069b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b6:	2600      	movs	r6, #0
 80069b8:	00f3      	lsls	r3, r6, #3
 80069ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069bc:	4bc4      	ldr	r3, [pc, #784]	@ (8006cd0 <__ieee754_pow+0x770>)
 80069be:	4629      	mov	r1, r5
 80069c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069c8:	461a      	mov	r2, r3
 80069ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80069ce:	4623      	mov	r3, r4
 80069d0:	4682      	mov	sl, r0
 80069d2:	f7f9 fbd9 	bl	8000188 <__aeabi_dsub>
 80069d6:	4652      	mov	r2, sl
 80069d8:	462b      	mov	r3, r5
 80069da:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80069de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069e2:	f7f9 fbd3 	bl	800018c <__adddf3>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	2000      	movs	r0, #0
 80069ec:	49b9      	ldr	r1, [pc, #740]	@ (8006cd4 <__ieee754_pow+0x774>)
 80069ee:	f7f9 fead 	bl	800074c <__aeabi_ddiv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069fe:	f7f9 fd7b 	bl	80004f8 <__aeabi_dmul>
 8006a02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a06:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006a0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2200      	movs	r2, #0
 8006a12:	46ab      	mov	fp, r5
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006a20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006a24:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	461d      	mov	r5, r3
 8006a30:	f7f9 fd62 	bl	80004f8 <__aeabi_dmul>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a3c:	f7f9 fba4 	bl	8000188 <__aeabi_dsub>
 8006a40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a44:	4606      	mov	r6, r0
 8006a46:	460f      	mov	r7, r1
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7f9 fb9c 	bl	8000188 <__aeabi_dsub>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4650      	mov	r0, sl
 8006a56:	4659      	mov	r1, fp
 8006a58:	f7f9 fb96 	bl	8000188 <__aeabi_dsub>
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	f7f9 fd4a 	bl	80004f8 <__aeabi_dmul>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7f9 fb8c 	bl	8000188 <__aeabi_dsub>
 8006a70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a74:	f7f9 fd40 	bl	80004f8 <__aeabi_dmul>
 8006a78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a80:	4610      	mov	r0, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	f7f9 fd38 	bl	80004f8 <__aeabi_dmul>
 8006a88:	a37b      	add	r3, pc, #492	@ (adr r3, 8006c78 <__ieee754_pow+0x718>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	f7f9 fd31 	bl	80004f8 <__aeabi_dmul>
 8006a96:	a37a      	add	r3, pc, #488	@ (adr r3, 8006c80 <__ieee754_pow+0x720>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fb76 	bl	800018c <__adddf3>
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	462b      	mov	r3, r5
 8006aa4:	f7f9 fd28 	bl	80004f8 <__aeabi_dmul>
 8006aa8:	a377      	add	r3, pc, #476	@ (adr r3, 8006c88 <__ieee754_pow+0x728>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fb6d 	bl	800018c <__adddf3>
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f7f9 fd1f 	bl	80004f8 <__aeabi_dmul>
 8006aba:	a375      	add	r3, pc, #468	@ (adr r3, 8006c90 <__ieee754_pow+0x730>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fb64 	bl	800018c <__adddf3>
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	f7f9 fd16 	bl	80004f8 <__aeabi_dmul>
 8006acc:	a372      	add	r3, pc, #456	@ (adr r3, 8006c98 <__ieee754_pow+0x738>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fb5b 	bl	800018c <__adddf3>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	f7f9 fd0d 	bl	80004f8 <__aeabi_dmul>
 8006ade:	a370      	add	r3, pc, #448	@ (adr r3, 8006ca0 <__ieee754_pow+0x740>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fb52 	bl	800018c <__adddf3>
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	462b      	mov	r3, r5
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 fd00 	bl	80004f8 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	f7f9 fcfa 	bl	80004f8 <__aeabi_dmul>
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f7f9 fb3c 	bl	800018c <__adddf3>
 8006b14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b18:	f7f9 fcee 	bl	80004f8 <__aeabi_dmul>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	462b      	mov	r3, r5
 8006b20:	f7f9 fb34 	bl	800018c <__adddf3>
 8006b24:	4642      	mov	r2, r8
 8006b26:	4682      	mov	sl, r0
 8006b28:	468b      	mov	fp, r1
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4649      	mov	r1, r9
 8006b30:	f7f9 fce2 	bl	80004f8 <__aeabi_dmul>
 8006b34:	2200      	movs	r2, #0
 8006b36:	4b68      	ldr	r3, [pc, #416]	@ (8006cd8 <__ieee754_pow+0x778>)
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	f7f9 fb26 	bl	800018c <__adddf3>
 8006b40:	4652      	mov	r2, sl
 8006b42:	465b      	mov	r3, fp
 8006b44:	f7f9 fb22 	bl	800018c <__adddf3>
 8006b48:	2400      	movs	r4, #0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 fcd0 	bl	80004f8 <__aeabi_dmul>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd8 <__ieee754_pow+0x778>)
 8006b64:	f7f9 fb10 	bl	8000188 <__aeabi_dsub>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7f9 fb0c 	bl	8000188 <__aeabi_dsub>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4650      	mov	r0, sl
 8006b76:	4659      	mov	r1, fp
 8006b78:	f7f9 fb06 	bl	8000188 <__aeabi_dsub>
 8006b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b80:	f7f9 fcba 	bl	80004f8 <__aeabi_dmul>
 8006b84:	4622      	mov	r2, r4
 8006b86:	4606      	mov	r6, r0
 8006b88:	460f      	mov	r7, r1
 8006b8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 fcb2 	bl	80004f8 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 faf6 	bl	800018c <__adddf3>
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 faed 	bl	800018c <__adddf3>
 8006bb2:	a33d      	add	r3, pc, #244	@ (adr r3, 8006ca8 <__ieee754_pow+0x748>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f7f9 fc9c 	bl	80004f8 <__aeabi_dmul>
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bc8:	4620      	mov	r0, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f7f9 fadc 	bl	8000188 <__aeabi_dsub>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fad6 	bl	8000188 <__aeabi_dsub>
 8006bdc:	a334      	add	r3, pc, #208	@ (adr r3, 8006cb0 <__ieee754_pow+0x750>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fc89 	bl	80004f8 <__aeabi_dmul>
 8006be6:	a334      	add	r3, pc, #208	@ (adr r3, 8006cb8 <__ieee754_pow+0x758>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fc80 	bl	80004f8 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f7f9 fac4 	bl	800018c <__adddf3>
 8006c04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c06:	4b35      	ldr	r3, [pc, #212]	@ (8006cdc <__ieee754_pow+0x77c>)
 8006c08:	2400      	movs	r4, #0
 8006c0a:	4413      	add	r3, r2
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fabc 	bl	800018c <__adddf3>
 8006c14:	4682      	mov	sl, r0
 8006c16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c18:	468b      	mov	fp, r1
 8006c1a:	f7f9 fc03 	bl	8000424 <__aeabi_i2d>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c24:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce0 <__ieee754_pow+0x780>)
 8006c26:	4413      	add	r3, r2
 8006c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c32:	465b      	mov	r3, fp
 8006c34:	f7f9 faaa 	bl	800018c <__adddf3>
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	f7f9 faa6 	bl	800018c <__adddf3>
 8006c40:	4632      	mov	r2, r6
 8006c42:	463b      	mov	r3, r7
 8006c44:	f7f9 faa2 	bl	800018c <__adddf3>
 8006c48:	4632      	mov	r2, r6
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	460d      	mov	r5, r1
 8006c50:	f7f9 fa9a 	bl	8000188 <__aeabi_dsub>
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	f7f9 fa96 	bl	8000188 <__aeabi_dsub>
 8006c5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c60:	f7f9 fa92 	bl	8000188 <__aeabi_dsub>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	e618      	b.n	80068a0 <__ieee754_pow+0x340>
 8006c6e:	2400      	movs	r4, #0
 8006c70:	e68a      	b.n	8006988 <__ieee754_pow+0x428>
 8006c72:	2601      	movs	r6, #1
 8006c74:	e6a0      	b.n	80069b8 <__ieee754_pow+0x458>
 8006c76:	bf00      	nop
 8006c78:	4a454eef 	.word	0x4a454eef
 8006c7c:	3fca7e28 	.word	0x3fca7e28
 8006c80:	93c9db65 	.word	0x93c9db65
 8006c84:	3fcd864a 	.word	0x3fcd864a
 8006c88:	a91d4101 	.word	0xa91d4101
 8006c8c:	3fd17460 	.word	0x3fd17460
 8006c90:	518f264d 	.word	0x518f264d
 8006c94:	3fd55555 	.word	0x3fd55555
 8006c98:	db6fabff 	.word	0xdb6fabff
 8006c9c:	3fdb6db6 	.word	0x3fdb6db6
 8006ca0:	33333303 	.word	0x33333303
 8006ca4:	3fe33333 	.word	0x3fe33333
 8006ca8:	e0000000 	.word	0xe0000000
 8006cac:	3feec709 	.word	0x3feec709
 8006cb0:	dc3a03fd 	.word	0xdc3a03fd
 8006cb4:	3feec709 	.word	0x3feec709
 8006cb8:	145b01f5 	.word	0x145b01f5
 8006cbc:	be3e2fe0 	.word	0xbe3e2fe0
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	43400000 	.word	0x43400000
 8006cc8:	0003988e 	.word	0x0003988e
 8006ccc:	000bb679 	.word	0x000bb679
 8006cd0:	08007d78 	.word	0x08007d78
 8006cd4:	3ff00000 	.word	0x3ff00000
 8006cd8:	40080000 	.word	0x40080000
 8006cdc:	08007d58 	.word	0x08007d58
 8006ce0:	08007d68 	.word	0x08007d68
 8006ce4:	a39a      	add	r3, pc, #616	@ (adr r3, 8006f50 <__ieee754_pow+0x9f0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	4630      	mov	r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	f7f9 fa4d 	bl	800018c <__adddf3>
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	f7f9 fa43 	bl	8000188 <__aeabi_dsub>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d0a:	f7f9 fe85 	bl	8000a18 <__aeabi_dcmpgt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f47f ae09 	bne.w	8006926 <__ieee754_pow+0x3c6>
 8006d14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006d18:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006d1c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006d20:	fa43 fa0a 	asr.w	sl, r3, sl
 8006d24:	44da      	add	sl, fp
 8006d26:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006d2a:	489b      	ldr	r0, [pc, #620]	@ (8006f98 <__ieee754_pow+0xa38>)
 8006d2c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006d30:	4108      	asrs	r0, r1
 8006d32:	ea00 030a 	and.w	r3, r0, sl
 8006d36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006d3a:	f1c1 0114 	rsb	r1, r1, #20
 8006d3e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006d42:	4640      	mov	r0, r8
 8006d44:	fa4a fa01 	asr.w	sl, sl, r1
 8006d48:	f1bb 0f00 	cmp.w	fp, #0
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	bfb8      	it	lt
 8006d54:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d58:	f7f9 fa16 	bl	8000188 <__aeabi_dsub>
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	4689      	mov	r9, r1
 8006d60:	2400      	movs	r4, #0
 8006d62:	4632      	mov	r2, r6
 8006d64:	463b      	mov	r3, r7
 8006d66:	4640      	mov	r0, r8
 8006d68:	4649      	mov	r1, r9
 8006d6a:	f7f9 fa0f 	bl	800018c <__adddf3>
 8006d6e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006f58 <__ieee754_pow+0x9f8>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	4620      	mov	r0, r4
 8006d76:	460d      	mov	r5, r1
 8006d78:	f7f9 fbbe 	bl	80004f8 <__aeabi_dmul>
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	e9cd 0100 	strd	r0, r1, [sp]
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 f9fe 	bl	8000188 <__aeabi_dsub>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 f9f8 	bl	8000188 <__aeabi_dsub>
 8006d98:	a371      	add	r3, pc, #452	@ (adr r3, 8006f60 <__ieee754_pow+0xa00>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 fbab 	bl	80004f8 <__aeabi_dmul>
 8006da2:	a371      	add	r3, pc, #452	@ (adr r3, 8006f68 <__ieee754_pow+0xa08>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fba2 	bl	80004f8 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 f9e6 	bl	800018c <__adddf3>
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dcc:	f7f9 f9de 	bl	800018c <__adddf3>
 8006dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	4689      	mov	r9, r1
 8006dd8:	f7f9 f9d6 	bl	8000188 <__aeabi_dsub>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4620      	mov	r0, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	f7f9 f9d0 	bl	8000188 <__aeabi_dsub>
 8006de8:	4642      	mov	r2, r8
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	464b      	mov	r3, r9
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fb80 	bl	80004f8 <__aeabi_dmul>
 8006df8:	a35d      	add	r3, pc, #372	@ (adr r3, 8006f70 <__ieee754_pow+0xa10>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	4604      	mov	r4, r0
 8006e00:	460d      	mov	r5, r1
 8006e02:	f7f9 fb79 	bl	80004f8 <__aeabi_dmul>
 8006e06:	a35c      	add	r3, pc, #368	@ (adr r3, 8006f78 <__ieee754_pow+0xa18>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 f9bc 	bl	8000188 <__aeabi_dsub>
 8006e10:	4622      	mov	r2, r4
 8006e12:	462b      	mov	r3, r5
 8006e14:	f7f9 fb70 	bl	80004f8 <__aeabi_dmul>
 8006e18:	a359      	add	r3, pc, #356	@ (adr r3, 8006f80 <__ieee754_pow+0xa20>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 f9b5 	bl	800018c <__adddf3>
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	f7f9 fb67 	bl	80004f8 <__aeabi_dmul>
 8006e2a:	a357      	add	r3, pc, #348	@ (adr r3, 8006f88 <__ieee754_pow+0xa28>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f7f9 f9aa 	bl	8000188 <__aeabi_dsub>
 8006e34:	4622      	mov	r2, r4
 8006e36:	462b      	mov	r3, r5
 8006e38:	f7f9 fb5e 	bl	80004f8 <__aeabi_dmul>
 8006e3c:	a354      	add	r3, pc, #336	@ (adr r3, 8006f90 <__ieee754_pow+0xa30>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 f9a3 	bl	800018c <__adddf3>
 8006e46:	4622      	mov	r2, r4
 8006e48:	462b      	mov	r3, r5
 8006e4a:	f7f9 fb55 	bl	80004f8 <__aeabi_dmul>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 f997 	bl	8000188 <__aeabi_dsub>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fb47 	bl	80004f8 <__aeabi_dmul>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	e9cd 0100 	strd	r0, r1, [sp]
 8006e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 f986 	bl	8000188 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e84:	f7f9 fc62 	bl	800074c <__aeabi_ddiv>
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	463b      	mov	r3, r7
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fb30 	bl	80004f8 <__aeabi_dmul>
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 f976 	bl	800018c <__adddf3>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 f96e 	bl	8000188 <__aeabi_dsub>
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	f7f9 f96a 	bl	8000188 <__aeabi_dsub>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4938      	ldr	r1, [pc, #224]	@ (8006f9c <__ieee754_pow+0xa3c>)
 8006ebc:	f7f9 f964 	bl	8000188 <__aeabi_dsub>
 8006ec0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006ec4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006ec8:	da2e      	bge.n	8006f28 <__ieee754_pow+0x9c8>
 8006eca:	4652      	mov	r2, sl
 8006ecc:	f000 f89c 	bl	8007008 <scalbn>
 8006ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ed4:	f7ff bbed 	b.w	80066b2 <__ieee754_pow+0x152>
 8006ed8:	4c31      	ldr	r4, [pc, #196]	@ (8006fa0 <__ieee754_pow+0xa40>)
 8006eda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	d91a      	bls.n	8006f18 <__ieee754_pow+0x9b8>
 8006ee2:	4b30      	ldr	r3, [pc, #192]	@ (8006fa4 <__ieee754_pow+0xa44>)
 8006ee4:	440b      	add	r3, r1
 8006ee6:	4303      	orrs	r3, r0
 8006ee8:	d009      	beq.n	8006efe <__ieee754_pow+0x99e>
 8006eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f7f9 fd73 	bl	80009dc <__aeabi_dcmplt>
 8006ef6:	3800      	subs	r0, #0
 8006ef8:	bf18      	it	ne
 8006efa:	2001      	movne	r0, #1
 8006efc:	e444      	b.n	8006788 <__ieee754_pow+0x228>
 8006efe:	4642      	mov	r2, r8
 8006f00:	464b      	mov	r3, r9
 8006f02:	f7f9 f941 	bl	8000188 <__aeabi_dsub>
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	f7f9 fd7b 	bl	8000a04 <__aeabi_dcmpge>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d1eb      	bne.n	8006eea <__ieee754_pow+0x98a>
 8006f12:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006fa8 <__ieee754_pow+0xa48>
 8006f16:	e6fd      	b.n	8006d14 <__ieee754_pow+0x7b4>
 8006f18:	469a      	mov	sl, r3
 8006f1a:	4b24      	ldr	r3, [pc, #144]	@ (8006fac <__ieee754_pow+0xa4c>)
 8006f1c:	459a      	cmp	sl, r3
 8006f1e:	f63f aef9 	bhi.w	8006d14 <__ieee754_pow+0x7b4>
 8006f22:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006f26:	e71b      	b.n	8006d60 <__ieee754_pow+0x800>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	e7d1      	b.n	8006ed0 <__ieee754_pow+0x970>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	491b      	ldr	r1, [pc, #108]	@ (8006f9c <__ieee754_pow+0xa3c>)
 8006f30:	f7ff bb34 	b.w	800659c <__ieee754_pow+0x3c>
 8006f34:	2000      	movs	r0, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	f7ff bb30 	b.w	800659c <__ieee754_pow+0x3c>
 8006f3c:	4650      	mov	r0, sl
 8006f3e:	4659      	mov	r1, fp
 8006f40:	f7ff bb2c 	b.w	800659c <__ieee754_pow+0x3c>
 8006f44:	460c      	mov	r4, r1
 8006f46:	f7ff bb79 	b.w	800663c <__ieee754_pow+0xdc>
 8006f4a:	2400      	movs	r4, #0
 8006f4c:	f7ff bb64 	b.w	8006618 <__ieee754_pow+0xb8>
 8006f50:	652b82fe 	.word	0x652b82fe
 8006f54:	3c971547 	.word	0x3c971547
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	3fe62e43 	.word	0x3fe62e43
 8006f60:	fefa39ef 	.word	0xfefa39ef
 8006f64:	3fe62e42 	.word	0x3fe62e42
 8006f68:	0ca86c39 	.word	0x0ca86c39
 8006f6c:	be205c61 	.word	0xbe205c61
 8006f70:	72bea4d0 	.word	0x72bea4d0
 8006f74:	3e663769 	.word	0x3e663769
 8006f78:	c5d26bf1 	.word	0xc5d26bf1
 8006f7c:	3ebbbd41 	.word	0x3ebbbd41
 8006f80:	af25de2c 	.word	0xaf25de2c
 8006f84:	3f11566a 	.word	0x3f11566a
 8006f88:	16bebd93 	.word	0x16bebd93
 8006f8c:	3f66c16c 	.word	0x3f66c16c
 8006f90:	5555553e 	.word	0x5555553e
 8006f94:	3fc55555 	.word	0x3fc55555
 8006f98:	fff00000 	.word	0xfff00000
 8006f9c:	3ff00000 	.word	0x3ff00000
 8006fa0:	4090cbff 	.word	0x4090cbff
 8006fa4:	3f6f3400 	.word	0x3f6f3400
 8006fa8:	4090cc00 	.word	0x4090cc00
 8006fac:	3fe00000 	.word	0x3fe00000

08006fb0 <with_errno>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	4616      	mov	r6, r2
 8006fb8:	f7fd f8c4 	bl	8004144 <__errno>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	6006      	str	r6, [r0, #0]
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <xflow>:
 8006fc4:	b513      	push	{r0, r1, r4, lr}
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	b10c      	cbz	r4, 8006fd2 <xflow+0xe>
 8006fce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8006fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fda:	f7f9 fa8d 	bl	80004f8 <__aeabi_dmul>
 8006fde:	2222      	movs	r2, #34	@ 0x22
 8006fe0:	b002      	add	sp, #8
 8006fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe6:	f7ff bfe3 	b.w	8006fb0 <with_errno>

08006fea <__math_uflow>:
 8006fea:	2200      	movs	r2, #0
 8006fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ff0:	f7ff bfe8 	b.w	8006fc4 <xflow>

08006ff4 <__math_oflow>:
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006ffa:	f7ff bfe3 	b.w	8006fc4 <xflow>

08006ffe <fabs>:
 8006ffe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007002:	4619      	mov	r1, r3
 8007004:	4770      	bx	lr
	...

08007008 <scalbn>:
 8007008:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800700c:	4616      	mov	r6, r2
 800700e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007012:	4683      	mov	fp, r0
 8007014:	468c      	mov	ip, r1
 8007016:	460b      	mov	r3, r1
 8007018:	b982      	cbnz	r2, 800703c <scalbn+0x34>
 800701a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800701e:	4303      	orrs	r3, r0
 8007020:	d039      	beq.n	8007096 <scalbn+0x8e>
 8007022:	4b2f      	ldr	r3, [pc, #188]	@ (80070e0 <scalbn+0xd8>)
 8007024:	2200      	movs	r2, #0
 8007026:	f7f9 fa67 	bl	80004f8 <__aeabi_dmul>
 800702a:	4b2e      	ldr	r3, [pc, #184]	@ (80070e4 <scalbn+0xdc>)
 800702c:	4683      	mov	fp, r0
 800702e:	429e      	cmp	r6, r3
 8007030:	468c      	mov	ip, r1
 8007032:	da0d      	bge.n	8007050 <scalbn+0x48>
 8007034:	a326      	add	r3, pc, #152	@ (adr r3, 80070d0 <scalbn+0xc8>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e01b      	b.n	8007074 <scalbn+0x6c>
 800703c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007040:	42ba      	cmp	r2, r7
 8007042:	d109      	bne.n	8007058 <scalbn+0x50>
 8007044:	4602      	mov	r2, r0
 8007046:	f7f9 f8a1 	bl	800018c <__adddf3>
 800704a:	4683      	mov	fp, r0
 800704c:	468c      	mov	ip, r1
 800704e:	e022      	b.n	8007096 <scalbn+0x8e>
 8007050:	460b      	mov	r3, r1
 8007052:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007056:	3a36      	subs	r2, #54	@ 0x36
 8007058:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800705c:	428e      	cmp	r6, r1
 800705e:	dd0c      	ble.n	800707a <scalbn+0x72>
 8007060:	a31d      	add	r3, pc, #116	@ (adr r3, 80070d8 <scalbn+0xd0>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	461c      	mov	r4, r3
 8007068:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800706c:	f361 74df 	bfi	r4, r1, #31, #1
 8007070:	4621      	mov	r1, r4
 8007072:	481d      	ldr	r0, [pc, #116]	@ (80070e8 <scalbn+0xe0>)
 8007074:	f7f9 fa40 	bl	80004f8 <__aeabi_dmul>
 8007078:	e7e7      	b.n	800704a <scalbn+0x42>
 800707a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800707e:	4432      	add	r2, r6
 8007080:	428a      	cmp	r2, r1
 8007082:	dced      	bgt.n	8007060 <scalbn+0x58>
 8007084:	2a00      	cmp	r2, #0
 8007086:	dd0a      	ble.n	800709e <scalbn+0x96>
 8007088:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800708c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007090:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007094:	46ac      	mov	ip, r5
 8007096:	4658      	mov	r0, fp
 8007098:	4661      	mov	r1, ip
 800709a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800709e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80070a2:	da09      	bge.n	80070b8 <scalbn+0xb0>
 80070a4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80070a8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80070ac:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80070b0:	480e      	ldr	r0, [pc, #56]	@ (80070ec <scalbn+0xe4>)
 80070b2:	f041 011f 	orr.w	r1, r1, #31
 80070b6:	e7bd      	b.n	8007034 <scalbn+0x2c>
 80070b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80070bc:	3236      	adds	r2, #54	@ 0x36
 80070be:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80070c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070c6:	4658      	mov	r0, fp
 80070c8:	4629      	mov	r1, r5
 80070ca:	2200      	movs	r2, #0
 80070cc:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <scalbn+0xe8>)
 80070ce:	e7d1      	b.n	8007074 <scalbn+0x6c>
 80070d0:	c2f8f359 	.word	0xc2f8f359
 80070d4:	01a56e1f 	.word	0x01a56e1f
 80070d8:	8800759c 	.word	0x8800759c
 80070dc:	7e37e43c 	.word	0x7e37e43c
 80070e0:	43500000 	.word	0x43500000
 80070e4:	ffff3cb0 	.word	0xffff3cb0
 80070e8:	8800759c 	.word	0x8800759c
 80070ec:	c2f8f359 	.word	0xc2f8f359
 80070f0:	3c900000 	.word	0x3c900000

080070f4 <_init>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr

08007100 <_fini>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr
