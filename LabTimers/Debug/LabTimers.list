
LabTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000320  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000320  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002d5  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000d3  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000016f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003e  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fa7  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000504  00000000  00000000  0000273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d86  00000000  00000000  00002c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000069c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  00006a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000300 	.word	0x08000300

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000300 	.word	0x08000300

08000170 <main>:
void USER_RCC_ClockEnable(void);
void USER_GPIO_Init(void);
void delay(void);

/* Superloop structure */
int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    /* Declarations and Initializations */
    USER_RCC_ClockEnable();
 8000174:	f000 f812 	bl	800019c <USER_RCC_ClockEnable>
    USER_GPIO_Init();
 8000178:	f000 f81e 	bl	80001b8 <USER_GPIO_Init>

    for (;;) {
        GPIOA->BSRR = (0x1UL << 5U); // Value to reset pin 5 of port A (Turn-ON LD2)
 800017c:	4b06      	ldr	r3, [pc, #24]	@ (8000198 <main+0x28>)
 800017e:	2220      	movs	r2, #32
 8000180:	611a      	str	r2, [r3, #16]
        delay();
 8000182:	f000 f831 	bl	80001e8 <delay>
        GPIOA->BSRR = (0x1UL << 21U); // Value to set pin 5 of port A (Turn-OFF LD2)
 8000186:	4b04      	ldr	r3, [pc, #16]	@ (8000198 <main+0x28>)
 8000188:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800018c:	611a      	str	r2, [r3, #16]
        delay();
 800018e:	f000 f82b 	bl	80001e8 <delay>
        GPIOA->BSRR = (0x1UL << 5U); // Value to reset pin 5 of port A (Turn-ON LD2)
 8000192:	bf00      	nop
 8000194:	e7f2      	b.n	800017c <main+0xc>
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <USER_RCC_ClockEnable>:
    }
}

void USER_RCC_ClockEnable(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
    // RCC_APB2ENR modified to IO port A clock enable
    RCC->APB2ENR = RCC->APB2ENR | (0x1UL << 2U); // RCC_APB2ENR actual value | (mask) IOPAEN bit
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <USER_RCC_ClockEnable+0x18>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a03      	ldr	r2, [pc, #12]	@ (80001b4 <USER_RCC_ClockEnable+0x18>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021000 	.word	0x40021000

080001b8 <USER_GPIO_Init>:

void USER_GPIO_Init(void) {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
    // GPIOx_BSRR modified to reset pin 5 of port A (LD2 is connected to PA5)
    GPIOA->BSRR = (0x1UL << 21U); // Immediate value
 80001bc:	4b09      	ldr	r3, [pc, #36]	@ (80001e4 <USER_GPIO_Init+0x2c>)
 80001be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80001c2:	611a      	str	r2, [r3, #16]

    // GPIOx_CRL modified to configure pin 5 as output
    GPIOA->CRL = GPIOA->CRL & ~(0x3UL << 22U) & ~(0x2UL << 20U); // GPIOx_CRL actual value & (to clear) (mask) CNF5[1:0] bits & (to clear) (mask) MODE5_1 bit
 80001c4:	4b07      	ldr	r3, [pc, #28]	@ (80001e4 <USER_GPIO_Init+0x2c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a06      	ldr	r2, [pc, #24]	@ (80001e4 <USER_GPIO_Init+0x2c>)
 80001ca:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80001ce:	6013      	str	r3, [r2, #0]

    // GPIOx_CRL modified to select pin 5 max speed of 10MHz
    GPIOA->CRL = GPIOA->CRL | (0x1UL << 20U); // GPIOx_CRL actual value | (to set) (mask) MODE5_0 bit
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <USER_GPIO_Init+0x2c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a03      	ldr	r2, [pc, #12]	@ (80001e4 <USER_GPIO_Init+0x2c>)
 80001d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001da:	6013      	str	r3, [r2, #0]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40010800 	.word	0x40010800

080001e8 <delay>:

void delay(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock
    RCC->APB1ENR |= (0x1 << 0U);
 80001ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000260 <delay+0x78>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000260 <delay+0x78>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	61d3      	str	r3, [r2, #28]

    // Clear control register 1 of Timer 2 to reset configuration
    TIM2->CR1 &= ~(0x72);
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000202:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8000206:	6013      	str	r3, [r2, #0]

    // Clear status register of Timer 2 to reset any pending flags
    TIM2->SR &= ~(0x1UL << 0U);
 8000208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000212:	f023 0301 	bic.w	r3, r3, #1
 8000216:	6113      	str	r3, [r2, #16]

    // Set auto-reload register of Timer 2 to maximum value for longest delay
    TIM2->ARR = 65535;
 8000218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800021c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000220:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set counter register of Timer 2 to initial value for desired delay
    TIM2->CNT = 495;
 8000222:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000226:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800022a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Set prescaler register of Timer 2 for desired time base
    TIM2->PSC = 122;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000230:	227a      	movs	r2, #122	@ 0x7a
 8000232:	629a      	str	r2, [r3, #40]	@ 0x28

    // Start Timer 2 by setting control register 1
    TIM2->CR1 |= (0x1 << 0U);
 8000234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]

    // Wait until Timer 2 update event occurs
    while ((TIM2->SR & (0x1UL << 0U)) == 0);
 8000244:	bf00      	nop
 8000246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <delay+0x5e>
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	@ (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	@ (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff6b 	bl	8000170 <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	2600      	movs	r6, #0
 80002bc:	4d0c      	ldr	r5, [pc, #48]	@ (80002f0 <__libc_init_array+0x38>)
 80002be:	4c0d      	ldr	r4, [pc, #52]	@ (80002f4 <__libc_init_array+0x3c>)
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	f000 f81a 	bl	8000300 <_init>
 80002cc:	2600      	movs	r6, #0
 80002ce:	4d0a      	ldr	r5, [pc, #40]	@ (80002f8 <__libc_init_array+0x40>)
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <__libc_init_array+0x44>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
