
LabInterrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e98  08000e98  00001e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eac  08000eac  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000eac  08000eac  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eac  08000eac  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eac  08000eac  00001eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb0  08000eb0  00001eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000eb4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f10  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f10  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eb9  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000508  00000000  00000000  00002f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00003448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000102  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ec6  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a5f  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b9d  00000000  00000000  00007fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b0c  00000000  00000000  00011bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000126d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e80 	.word	0x08000e80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000e80 	.word	0x08000e80

08000170 <TIM2_IRQHandler>:
void delay(void);
void USER_Delay( void );

uint8_t msg[] = "Hello World!\r\n";

void TIM2_IRQHandler(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    // Handle Timer 2 interrupt
    if( TIM2->SR  & TIM_SR_UIF ){
 8000174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000178:	691b      	ldr	r3, [r3, #16]
 800017a:	f003 0301 	and.w	r3, r3, #1
 800017e:	2b00      	cmp	r3, #0
 8000180:	d011      	beq.n	80001a6 <TIM2_IRQHandler+0x36>
        // Toggle LD2 LED
        GPIOA-> ODR = TOGGLE_LD2;
 8000182:	4b0b      	ldr	r3, [pc, #44]	@ (80001b0 <TIM2_IRQHandler+0x40>)
 8000184:	68db      	ldr	r3, [r3, #12]
 8000186:	4a0a      	ldr	r2, [pc, #40]	@ (80001b0 <TIM2_IRQHandler+0x40>)
 8000188:	f083 0320 	eor.w	r3, r3, #32
 800018c:	60d3      	str	r3, [r2, #12]
        // Clear UIF flag
        TIM2-> SR &= ~TIM_SR_UIF;
 800018e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000192:	691b      	ldr	r3, [r3, #16]
 8000194:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000198:	f023 0301 	bic.w	r3, r3, #1
 800019c:	6113      	str	r3, [r2, #16]
        // Reset Timer 2 count
        TIM2-> CNT = (uint16_t)TIM2_INIT_COUNT;
 800019e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001a2:	22e6      	movs	r2, #230	@ 0xe6
 80001a4:	625a      	str	r2, [r3, #36]	@ 0x24
    }
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	40010800 	.word	0x40010800

080001b4 <main>:

/* Superloop structure */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0

	/* Declarations and Initializations */
    USER_RCC_ClockEnable( );
 80001b8:	f000 f826 	bl	8000208 <USER_RCC_ClockEnable>
    USER_GPIO_Init( );
 80001bc:	f000 f83a 	bl	8000234 <USER_GPIO_Init>
    USER_USART1_Init( );
 80001c0:	f000 f964 	bl	800048c <USER_USART1_Init>

    // Initialize Timer 2 delay
    delay();
 80001c4:	f000 f868 	bl	8000298 <delay>
    /* Repetitive block */

    for(;;){
        // Check button state
        if( !BUTTON ){
 80001c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000200 <main+0x4c>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d1f9      	bne.n	80001c8 <main+0x14>
            // Delay for debouncing
            USER_Delay();       // Dejar pasar 10ms
 80001d4:	f000 f8a4 	bl	8000320 <USER_Delay>
            // Check button state again
            if( !BUTTON ){
 80001d8:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <main+0x4c>)
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d1f1      	bne.n	80001c8 <main+0x14>
                // Transmit message via USART1
                //USER_USART1_Transmit( msg, sizeof( msg ));
                printf("Vehicle Speed: \r\n");
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <main+0x50>)
 80001e6:	f000 fabd 	bl	8000764 <puts>
                // Toggle LD2 LED while button pressed
                // GPIOA-> ODR = TOGGLE_LD2;
                // Wait until button is released
                while( !BUTTON );
 80001ea:	bf00      	nop
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <main+0x4c>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d0f9      	beq.n	80001ec <main+0x38>
                // Delay for debouncing
                USER_Delay();   // Dejar pasar 10ms
 80001f8:	f000 f892 	bl	8000320 <USER_Delay>
        if( !BUTTON ){
 80001fc:	e7e4      	b.n	80001c8 <main+0x14>
 80001fe:	bf00      	nop
 8000200:	40011000 	.word	0x40011000
 8000204:	08000e98 	.word	0x08000e98

08000208 <USER_RCC_ClockEnable>:
            }
        }
    }
}

void USER_RCC_ClockEnable( void ){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    // Enable clock for required peripherals
    RCC->APB2ENR    |=  ( 0x1UL <<  2U )   // IO port A clock enable
 800020c:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <USER_RCC_ClockEnable+0x28>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <USER_RCC_ClockEnable+0x28>)
 8000212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
                    |   ( 0x1UL << 14U ); // USART 1 clock enable
    RCC->APB2ENR    |=  ( 0x1UL <<  4U );  // IO port C clock enable
 800021c:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <USER_RCC_ClockEnable+0x28>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <USER_RCC_ClockEnable+0x28>)
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6193      	str	r3, [r2, #24]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40021000 	.word	0x40021000

08000234 <USER_GPIO_Init>:

void USER_GPIO_Init( void ){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    // Configure USART1_TX pin (PA9) as alternate function output push-pull, max speed 10MHz
    GPIOA->CRH  &=  ~( 0x1UL <<  6U )
 8000238:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <USER_GPIO_Init+0x5c>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <USER_GPIO_Init+0x5c>)
 800023e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000242:	6053      	str	r3, [r2, #4]
                &   ~( 0x2UL <<  4U );
    GPIOA->CRH  |=  ( 0x2UL <<  6U )
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <USER_GPIO_Init+0x5c>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <USER_GPIO_Init+0x5c>)
 800024a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800024e:	6053      	str	r3, [r2, #4]
                |   ( 0x1UL <<  4U );

    // Reset pin5 of port A (LD2 is connected to PA5)
    GPIOA->BSRR =   ( 0x1UL << 21U ); // Immediate value
 8000250:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <USER_GPIO_Init+0x5c>)
 8000252:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000256:	611a      	str	r2, [r3, #16]

    // Configure pin5 as output
    GPIOA->CRL  =   GPIOA->CRL          // Actual value
 8000258:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <USER_GPIO_Init+0x5c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0c      	ldr	r2, [pc, #48]	@ (8000290 <USER_GPIO_Init+0x5c>)
                &   ~( 0x3UL << 22U )   // Clear CNF5[1:0] bits
                &   ~( 0x2UL << 20U );  // Clear MODE5_1 bit
 800025e:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
    GPIOA->CRL  =   GPIOA->CRL          // Actual value
 8000262:	6013      	str	r3, [r2, #0]

    // Select pin5 max speed of 10MHz
    GPIOA->CRL  =   GPIOA->CRL          // Actual value
 8000264:	4b0a      	ldr	r3, [pc, #40]	@ (8000290 <USER_GPIO_Init+0x5c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a09      	ldr	r2, [pc, #36]	@ (8000290 <USER_GPIO_Init+0x5c>)
                |   ( 0x1UL << 20U );  // Set MODE5_0 bit
 800026a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    GPIOA->CRL  =   GPIOA->CRL          // Actual value
 800026e:	6013      	str	r3, [r2, #0]

    // Configure PC13 pin as input with pull-up
    GPIOC-> CRH &=  ~( 0x3UL << 22U )
 8000270:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <USER_GPIO_Init+0x60>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a07      	ldr	r2, [pc, #28]	@ (8000294 <USER_GPIO_Init+0x60>)
 8000276:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800027a:	6053      	str	r3, [r2, #4]
                 &  ~( 0x3UL << 20U );
    GPIOC-> CRH |=  ( 0x1UL << 22U );
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <USER_GPIO_Init+0x60>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a04      	ldr	r2, [pc, #16]	@ (8000294 <USER_GPIO_Init+0x60>)
 8000282:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000286:	6053      	str	r3, [r2, #4]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40010800 	.word	0x40010800
 8000294:	40011000 	.word	0x40011000

08000298 <delay>:

void delay(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock
    RCC->APB1ENR |= (0x1 << 0U);
 800029c:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <delay+0x80>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000318 <delay+0x80>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	61d3      	str	r3, [r2, #28]

    // Reset Timer 2 configuration
    TIM2->CR1 &= ~(0x72);
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b2:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80002b6:	6013      	str	r3, [r2, #0]
    TIM2->SR &= ~(0x1UL << 0U);
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c2:	f023 0301 	bic.w	r3, r3, #1
 80002c6:	6113      	str	r3, [r2, #16]

    // Set Timer 2 parameters for delay
    TIM2->ARR = 65535;
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 230;
 80002d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d6:	22e6      	movs	r2, #230	@ 0xe6
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->PSC = 244;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	22f4      	movs	r2, #244	@ 0xf4
 80002e0:	629a      	str	r2, [r3, #40]	@ 0x28

    // Start Timer 2
    TIM2->CR1 |= (0x1 << 0U);
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]

    // Enable Timer 2 update interrupt
    TIM2->DIER |=  1 << 0UL;
 80002f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	60d3      	str	r3, [r2, #12]
    // Enable Timer 2 interrupt in NVIC
    NVIC->ISER[0] |=  1 << 28UL;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <delay+0x84>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a05      	ldr	r2, [pc, #20]	@ (800031c <delay+0x84>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800030c:	6013      	str	r3, [r2, #0]
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	e000e100 	.word	0xe000e100

08000320 <USER_Delay>:

void USER_Delay( void ){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    // Simple delay function
    __asm("            ldr r0, =20000   ");
 8000324:	f644 6020 	movw	r0, #20000	@ 0x4e20

08000328 <again>:
    __asm("    again:  sub r0, r0, #1   ");
 8000328:	f1a0 0001 	sub.w	r0, r0, #1
    __asm("            cmp r0, #0       ");
 800032c:	2800      	cmp	r0, #0
    __asm("            bne again        ");
 800032e:	d1fb      	bne.n	8000328 <again>
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	e00a      	b.n	8000360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800034a:	f3af 8000 	nop.w
 800034e:	4601      	mov	r1, r0
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	1c5a      	adds	r2, r3, #1
 8000354:	60ba      	str	r2, [r7, #8]
 8000356:	b2ca      	uxtb	r2, r1
 8000358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	3301      	adds	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	697a      	ldr	r2, [r7, #20]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	dbf0      	blt.n	800034a <_read+0x12>
  }

  return len;
 8000368:	687b      	ldr	r3, [r7, #4]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800037a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000398:	605a      	str	r2, [r3, #4]
  return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <_isatty>:

int _isatty(int file)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003ae:	2301      	movs	r3, #1
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	60b9      	str	r1, [r7, #8]
 80003c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003dc:	4a14      	ldr	r2, [pc, #80]	@ (8000430 <_sbrk+0x5c>)
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <_sbrk+0x60>)
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <_sbrk+0x64>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	@ (800043c <_sbrk+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f6:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	429a      	cmp	r2, r3
 8000402:	d207      	bcs.n	8000414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000404:	f000 f9be 	bl	8000784 <__errno>
 8000408:	4603      	mov	r3, r0
 800040a:	220c      	movs	r2, #12
 800040c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000412:	e009      	b.n	8000428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000414:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041a:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <_sbrk+0x64>)
 8000424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20005000 	.word	0x20005000
 8000434:	00000400 	.word	0x00000400
 8000438:	20000078 	.word	0x20000078
 800043c:	200001c8 	.word	0x200001c8

08000440 <_write>:
#include "main.h"
#include "uart.h"

static void USER_USART1_Send_8bit( uint8_t Data );

int _write(int  file, char *ptr, int len){
 8000440:	b480      	push	{r7}
 8000442:	b087      	sub	sp, #28
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e00f      	b.n	8000472 <_write+0x32>
		while(!( USART1 -> SR & USART_SR_TXE ));
 8000452:	bf00      	nop
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <_write+0x48>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f9      	beq.n	8000454 <_write+0x14>
		USART1 -> DR = *ptr++;
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	60ba      	str	r2, [r7, #8]
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <_write+0x48>)
 800046a:	605a      	str	r2, [r3, #4]
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	3301      	adds	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	dbeb      	blt.n	8000452 <_write+0x12>
	}
	return len;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	371c      	adds	r7, #28
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40013800 	.word	0x40013800

0800048c <USER_USART1_Init>:

void USER_USART1_Init( void ){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <USER_USART1_Init+0x50>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a11      	ldr	r2, [pc, #68]	@ (80004dc <USER_USART1_Init+0x50>)
 8000496:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800049a:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <USER_USART1_Init+0x50>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <USER_USART1_Init+0x50>)
 80004a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004a6:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <USER_USART1_Init+0x50>)
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <USER_USART1_Init+0x50>)
 80004ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004b2:	6113      	str	r3, [r2, #16]
	USART1->BRR	 =	 USARTDIV;//		Step 5 Desired baud rate
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <USER_USART1_Init+0x50>)
 80004b6:	2245      	movs	r2, #69	@ 0x45
 80004b8:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <USER_USART1_Init+0x50>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <USER_USART1_Init+0x50>)
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 80004c6:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <USER_USART1_Init+0x50>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <USER_USART1_Init+0x50>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	60d3      	str	r3, [r2, #12]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40013800 	.word	0x40013800

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f93f 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe4f 	bl	80001b4 <main>

08000516 <LoopForever>:

LoopForever:
  b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000524:	08000eb4 	.word	0x08000eb4
  ldr r2, =_sbss
 8000528:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800052c:	200001c8 	.word	0x200001c8

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <std>:
 8000534:	2300      	movs	r3, #0
 8000536:	b510      	push	{r4, lr}
 8000538:	4604      	mov	r4, r0
 800053a:	e9c0 3300 	strd	r3, r3, [r0]
 800053e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000542:	6083      	str	r3, [r0, #8]
 8000544:	8181      	strh	r1, [r0, #12]
 8000546:	6643      	str	r3, [r0, #100]	@ 0x64
 8000548:	81c2      	strh	r2, [r0, #14]
 800054a:	6183      	str	r3, [r0, #24]
 800054c:	4619      	mov	r1, r3
 800054e:	2208      	movs	r2, #8
 8000550:	305c      	adds	r0, #92	@ 0x5c
 8000552:	f000 f90f 	bl	8000774 <memset>
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <std+0x58>)
 8000558:	6224      	str	r4, [r4, #32]
 800055a:	6263      	str	r3, [r4, #36]	@ 0x24
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <std+0x5c>)
 800055e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <std+0x60>)
 8000562:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <std+0x64>)
 8000566:	6323      	str	r3, [r4, #48]	@ 0x30
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <std+0x68>)
 800056a:	429c      	cmp	r4, r3
 800056c:	d006      	beq.n	800057c <std+0x48>
 800056e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000572:	4294      	cmp	r4, r2
 8000574:	d002      	beq.n	800057c <std+0x48>
 8000576:	33d0      	adds	r3, #208	@ 0xd0
 8000578:	429c      	cmp	r4, r3
 800057a:	d105      	bne.n	8000588 <std+0x54>
 800057c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000584:	f000 b928 	b.w	80007d8 <__retarget_lock_init_recursive>
 8000588:	bd10      	pop	{r4, pc}
 800058a:	bf00      	nop
 800058c:	08000a8d 	.word	0x08000a8d
 8000590:	08000aaf 	.word	0x08000aaf
 8000594:	08000ae7 	.word	0x08000ae7
 8000598:	08000b0b 	.word	0x08000b0b
 800059c:	2000007c 	.word	0x2000007c

080005a0 <stdio_exit_handler>:
 80005a0:	4a02      	ldr	r2, [pc, #8]	@ (80005ac <stdio_exit_handler+0xc>)
 80005a2:	4903      	ldr	r1, [pc, #12]	@ (80005b0 <stdio_exit_handler+0x10>)
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <stdio_exit_handler+0x14>)
 80005a6:	f000 b869 	b.w	800067c <_fwalk_sglue>
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000
 80005b0:	08000a25 	.word	0x08000a25
 80005b4:	20000010 	.word	0x20000010

080005b8 <cleanup_stdio>:
 80005b8:	6841      	ldr	r1, [r0, #4]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <cleanup_stdio+0x34>)
 80005bc:	b510      	push	{r4, lr}
 80005be:	4299      	cmp	r1, r3
 80005c0:	4604      	mov	r4, r0
 80005c2:	d001      	beq.n	80005c8 <cleanup_stdio+0x10>
 80005c4:	f000 fa2e 	bl	8000a24 <_fflush_r>
 80005c8:	68a1      	ldr	r1, [r4, #8]
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <cleanup_stdio+0x38>)
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d002      	beq.n	80005d6 <cleanup_stdio+0x1e>
 80005d0:	4620      	mov	r0, r4
 80005d2:	f000 fa27 	bl	8000a24 <_fflush_r>
 80005d6:	68e1      	ldr	r1, [r4, #12]
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <cleanup_stdio+0x3c>)
 80005da:	4299      	cmp	r1, r3
 80005dc:	d004      	beq.n	80005e8 <cleanup_stdio+0x30>
 80005de:	4620      	mov	r0, r4
 80005e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005e4:	f000 ba1e 	b.w	8000a24 <_fflush_r>
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	bf00      	nop
 80005ec:	2000007c 	.word	0x2000007c
 80005f0:	200000e4 	.word	0x200000e4
 80005f4:	2000014c 	.word	0x2000014c

080005f8 <global_stdio_init.part.0>:
 80005f8:	b510      	push	{r4, lr}
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <global_stdio_init.part.0+0x30>)
 80005fc:	4c0b      	ldr	r4, [pc, #44]	@ (800062c <global_stdio_init.part.0+0x34>)
 80005fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <global_stdio_init.part.0+0x38>)
 8000600:	4620      	mov	r0, r4
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	2104      	movs	r1, #4
 8000606:	2200      	movs	r2, #0
 8000608:	f7ff ff94 	bl	8000534 <std>
 800060c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000610:	2201      	movs	r2, #1
 8000612:	2109      	movs	r1, #9
 8000614:	f7ff ff8e 	bl	8000534 <std>
 8000618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800061c:	2202      	movs	r2, #2
 800061e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000622:	2112      	movs	r1, #18
 8000624:	f7ff bf86 	b.w	8000534 <std>
 8000628:	200001b4 	.word	0x200001b4
 800062c:	2000007c 	.word	0x2000007c
 8000630:	080005a1 	.word	0x080005a1

08000634 <__sfp_lock_acquire>:
 8000634:	4801      	ldr	r0, [pc, #4]	@ (800063c <__sfp_lock_acquire+0x8>)
 8000636:	f000 b8d0 	b.w	80007da <__retarget_lock_acquire_recursive>
 800063a:	bf00      	nop
 800063c:	200001b9 	.word	0x200001b9

08000640 <__sfp_lock_release>:
 8000640:	4801      	ldr	r0, [pc, #4]	@ (8000648 <__sfp_lock_release+0x8>)
 8000642:	f000 b8cb 	b.w	80007dc <__retarget_lock_release_recursive>
 8000646:	bf00      	nop
 8000648:	200001b9 	.word	0x200001b9

0800064c <__sinit>:
 800064c:	b510      	push	{r4, lr}
 800064e:	4604      	mov	r4, r0
 8000650:	f7ff fff0 	bl	8000634 <__sfp_lock_acquire>
 8000654:	6a23      	ldr	r3, [r4, #32]
 8000656:	b11b      	cbz	r3, 8000660 <__sinit+0x14>
 8000658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800065c:	f7ff bff0 	b.w	8000640 <__sfp_lock_release>
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <__sinit+0x28>)
 8000662:	6223      	str	r3, [r4, #32]
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <__sinit+0x2c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f5      	bne.n	8000658 <__sinit+0xc>
 800066c:	f7ff ffc4 	bl	80005f8 <global_stdio_init.part.0>
 8000670:	e7f2      	b.n	8000658 <__sinit+0xc>
 8000672:	bf00      	nop
 8000674:	080005b9 	.word	0x080005b9
 8000678:	200001b4 	.word	0x200001b4

0800067c <_fwalk_sglue>:
 800067c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000680:	4607      	mov	r7, r0
 8000682:	4688      	mov	r8, r1
 8000684:	4614      	mov	r4, r2
 8000686:	2600      	movs	r6, #0
 8000688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800068c:	f1b9 0901 	subs.w	r9, r9, #1
 8000690:	d505      	bpl.n	800069e <_fwalk_sglue+0x22>
 8000692:	6824      	ldr	r4, [r4, #0]
 8000694:	2c00      	cmp	r4, #0
 8000696:	d1f7      	bne.n	8000688 <_fwalk_sglue+0xc>
 8000698:	4630      	mov	r0, r6
 800069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800069e:	89ab      	ldrh	r3, [r5, #12]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d907      	bls.n	80006b4 <_fwalk_sglue+0x38>
 80006a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006a8:	3301      	adds	r3, #1
 80006aa:	d003      	beq.n	80006b4 <_fwalk_sglue+0x38>
 80006ac:	4629      	mov	r1, r5
 80006ae:	4638      	mov	r0, r7
 80006b0:	47c0      	blx	r8
 80006b2:	4306      	orrs	r6, r0
 80006b4:	3568      	adds	r5, #104	@ 0x68
 80006b6:	e7e9      	b.n	800068c <_fwalk_sglue+0x10>

080006b8 <_puts_r>:
 80006b8:	6a03      	ldr	r3, [r0, #32]
 80006ba:	b570      	push	{r4, r5, r6, lr}
 80006bc:	4605      	mov	r5, r0
 80006be:	460e      	mov	r6, r1
 80006c0:	6884      	ldr	r4, [r0, #8]
 80006c2:	b90b      	cbnz	r3, 80006c8 <_puts_r+0x10>
 80006c4:	f7ff ffc2 	bl	800064c <__sinit>
 80006c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006ca:	07db      	lsls	r3, r3, #31
 80006cc:	d405      	bmi.n	80006da <_puts_r+0x22>
 80006ce:	89a3      	ldrh	r3, [r4, #12]
 80006d0:	0598      	lsls	r0, r3, #22
 80006d2:	d402      	bmi.n	80006da <_puts_r+0x22>
 80006d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006d6:	f000 f880 	bl	80007da <__retarget_lock_acquire_recursive>
 80006da:	89a3      	ldrh	r3, [r4, #12]
 80006dc:	0719      	lsls	r1, r3, #28
 80006de:	d502      	bpl.n	80006e6 <_puts_r+0x2e>
 80006e0:	6923      	ldr	r3, [r4, #16]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d135      	bne.n	8000752 <_puts_r+0x9a>
 80006e6:	4621      	mov	r1, r4
 80006e8:	4628      	mov	r0, r5
 80006ea:	f000 fa51 	bl	8000b90 <__swsetup_r>
 80006ee:	b380      	cbz	r0, 8000752 <_puts_r+0x9a>
 80006f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80006f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006f6:	07da      	lsls	r2, r3, #31
 80006f8:	d405      	bmi.n	8000706 <_puts_r+0x4e>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	059b      	lsls	r3, r3, #22
 80006fe:	d402      	bmi.n	8000706 <_puts_r+0x4e>
 8000700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000702:	f000 f86b 	bl	80007dc <__retarget_lock_release_recursive>
 8000706:	4628      	mov	r0, r5
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	2b00      	cmp	r3, #0
 800070c:	da04      	bge.n	8000718 <_puts_r+0x60>
 800070e:	69a2      	ldr	r2, [r4, #24]
 8000710:	429a      	cmp	r2, r3
 8000712:	dc17      	bgt.n	8000744 <_puts_r+0x8c>
 8000714:	290a      	cmp	r1, #10
 8000716:	d015      	beq.n	8000744 <_puts_r+0x8c>
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	6022      	str	r2, [r4, #0]
 800071e:	7019      	strb	r1, [r3, #0]
 8000720:	68a3      	ldr	r3, [r4, #8]
 8000722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000726:	3b01      	subs	r3, #1
 8000728:	60a3      	str	r3, [r4, #8]
 800072a:	2900      	cmp	r1, #0
 800072c:	d1ed      	bne.n	800070a <_puts_r+0x52>
 800072e:	2b00      	cmp	r3, #0
 8000730:	da11      	bge.n	8000756 <_puts_r+0x9e>
 8000732:	4622      	mov	r2, r4
 8000734:	210a      	movs	r1, #10
 8000736:	4628      	mov	r0, r5
 8000738:	f000 f9eb 	bl	8000b12 <__swbuf_r>
 800073c:	3001      	adds	r0, #1
 800073e:	d0d7      	beq.n	80006f0 <_puts_r+0x38>
 8000740:	250a      	movs	r5, #10
 8000742:	e7d7      	b.n	80006f4 <_puts_r+0x3c>
 8000744:	4622      	mov	r2, r4
 8000746:	4628      	mov	r0, r5
 8000748:	f000 f9e3 	bl	8000b12 <__swbuf_r>
 800074c:	3001      	adds	r0, #1
 800074e:	d1e7      	bne.n	8000720 <_puts_r+0x68>
 8000750:	e7ce      	b.n	80006f0 <_puts_r+0x38>
 8000752:	3e01      	subs	r6, #1
 8000754:	e7e4      	b.n	8000720 <_puts_r+0x68>
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	6022      	str	r2, [r4, #0]
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	e7ee      	b.n	8000740 <_puts_r+0x88>
	...

08000764 <puts>:
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <puts+0xc>)
 8000766:	4601      	mov	r1, r0
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f7ff bfa5 	b.w	80006b8 <_puts_r>
 800076e:	bf00      	nop
 8000770:	2000000c 	.word	0x2000000c

08000774 <memset>:
 8000774:	4603      	mov	r3, r0
 8000776:	4402      	add	r2, r0
 8000778:	4293      	cmp	r3, r2
 800077a:	d100      	bne.n	800077e <memset+0xa>
 800077c:	4770      	bx	lr
 800077e:	f803 1b01 	strb.w	r1, [r3], #1
 8000782:	e7f9      	b.n	8000778 <memset+0x4>

08000784 <__errno>:
 8000784:	4b01      	ldr	r3, [pc, #4]	@ (800078c <__errno+0x8>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2000000c 	.word	0x2000000c

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	2600      	movs	r6, #0
 8000794:	4d0c      	ldr	r5, [pc, #48]	@ (80007c8 <__libc_init_array+0x38>)
 8000796:	4c0d      	ldr	r4, [pc, #52]	@ (80007cc <__libc_init_array+0x3c>)
 8000798:	1b64      	subs	r4, r4, r5
 800079a:	10a4      	asrs	r4, r4, #2
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	f000 fb6e 	bl	8000e80 <_init>
 80007a4:	2600      	movs	r6, #0
 80007a6:	4d0a      	ldr	r5, [pc, #40]	@ (80007d0 <__libc_init_array+0x40>)
 80007a8:	4c0a      	ldr	r4, [pc, #40]	@ (80007d4 <__libc_init_array+0x44>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	08000eac 	.word	0x08000eac
 80007cc:	08000eac 	.word	0x08000eac
 80007d0:	08000eac 	.word	0x08000eac
 80007d4:	08000eb0 	.word	0x08000eb0

080007d8 <__retarget_lock_init_recursive>:
 80007d8:	4770      	bx	lr

080007da <__retarget_lock_acquire_recursive>:
 80007da:	4770      	bx	lr

080007dc <__retarget_lock_release_recursive>:
 80007dc:	4770      	bx	lr
	...

080007e0 <sbrk_aligned>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4e0f      	ldr	r6, [pc, #60]	@ (8000820 <sbrk_aligned+0x40>)
 80007e4:	460c      	mov	r4, r1
 80007e6:	6831      	ldr	r1, [r6, #0]
 80007e8:	4605      	mov	r5, r0
 80007ea:	b911      	cbnz	r1, 80007f2 <sbrk_aligned+0x12>
 80007ec:	f000 fade 	bl	8000dac <_sbrk_r>
 80007f0:	6030      	str	r0, [r6, #0]
 80007f2:	4621      	mov	r1, r4
 80007f4:	4628      	mov	r0, r5
 80007f6:	f000 fad9 	bl	8000dac <_sbrk_r>
 80007fa:	1c43      	adds	r3, r0, #1
 80007fc:	d103      	bne.n	8000806 <sbrk_aligned+0x26>
 80007fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000802:	4620      	mov	r0, r4
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	1cc4      	adds	r4, r0, #3
 8000808:	f024 0403 	bic.w	r4, r4, #3
 800080c:	42a0      	cmp	r0, r4
 800080e:	d0f8      	beq.n	8000802 <sbrk_aligned+0x22>
 8000810:	1a21      	subs	r1, r4, r0
 8000812:	4628      	mov	r0, r5
 8000814:	f000 faca 	bl	8000dac <_sbrk_r>
 8000818:	3001      	adds	r0, #1
 800081a:	d1f2      	bne.n	8000802 <sbrk_aligned+0x22>
 800081c:	e7ef      	b.n	80007fe <sbrk_aligned+0x1e>
 800081e:	bf00      	nop
 8000820:	200001bc 	.word	0x200001bc

08000824 <_malloc_r>:
 8000824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000828:	1ccd      	adds	r5, r1, #3
 800082a:	f025 0503 	bic.w	r5, r5, #3
 800082e:	3508      	adds	r5, #8
 8000830:	2d0c      	cmp	r5, #12
 8000832:	bf38      	it	cc
 8000834:	250c      	movcc	r5, #12
 8000836:	2d00      	cmp	r5, #0
 8000838:	4606      	mov	r6, r0
 800083a:	db01      	blt.n	8000840 <_malloc_r+0x1c>
 800083c:	42a9      	cmp	r1, r5
 800083e:	d904      	bls.n	800084a <_malloc_r+0x26>
 8000840:	230c      	movs	r3, #12
 8000842:	6033      	str	r3, [r6, #0]
 8000844:	2000      	movs	r0, #0
 8000846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800084a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000920 <_malloc_r+0xfc>
 800084e:	f000 f911 	bl	8000a74 <__malloc_lock>
 8000852:	f8d8 3000 	ldr.w	r3, [r8]
 8000856:	461c      	mov	r4, r3
 8000858:	bb44      	cbnz	r4, 80008ac <_malloc_r+0x88>
 800085a:	4629      	mov	r1, r5
 800085c:	4630      	mov	r0, r6
 800085e:	f7ff ffbf 	bl	80007e0 <sbrk_aligned>
 8000862:	1c43      	adds	r3, r0, #1
 8000864:	4604      	mov	r4, r0
 8000866:	d158      	bne.n	800091a <_malloc_r+0xf6>
 8000868:	f8d8 4000 	ldr.w	r4, [r8]
 800086c:	4627      	mov	r7, r4
 800086e:	2f00      	cmp	r7, #0
 8000870:	d143      	bne.n	80008fa <_malloc_r+0xd6>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d04b      	beq.n	800090e <_malloc_r+0xea>
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	4639      	mov	r1, r7
 800087a:	4630      	mov	r0, r6
 800087c:	eb04 0903 	add.w	r9, r4, r3
 8000880:	f000 fa94 	bl	8000dac <_sbrk_r>
 8000884:	4581      	cmp	r9, r0
 8000886:	d142      	bne.n	800090e <_malloc_r+0xea>
 8000888:	6821      	ldr	r1, [r4, #0]
 800088a:	4630      	mov	r0, r6
 800088c:	1a6d      	subs	r5, r5, r1
 800088e:	4629      	mov	r1, r5
 8000890:	f7ff ffa6 	bl	80007e0 <sbrk_aligned>
 8000894:	3001      	adds	r0, #1
 8000896:	d03a      	beq.n	800090e <_malloc_r+0xea>
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	442b      	add	r3, r5
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	f8d8 3000 	ldr.w	r3, [r8]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	bb62      	cbnz	r2, 8000900 <_malloc_r+0xdc>
 80008a6:	f8c8 7000 	str.w	r7, [r8]
 80008aa:	e00f      	b.n	80008cc <_malloc_r+0xa8>
 80008ac:	6822      	ldr	r2, [r4, #0]
 80008ae:	1b52      	subs	r2, r2, r5
 80008b0:	d420      	bmi.n	80008f4 <_malloc_r+0xd0>
 80008b2:	2a0b      	cmp	r2, #11
 80008b4:	d917      	bls.n	80008e6 <_malloc_r+0xc2>
 80008b6:	1961      	adds	r1, r4, r5
 80008b8:	42a3      	cmp	r3, r4
 80008ba:	6025      	str	r5, [r4, #0]
 80008bc:	bf18      	it	ne
 80008be:	6059      	strne	r1, [r3, #4]
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	bf08      	it	eq
 80008c4:	f8c8 1000 	streq.w	r1, [r8]
 80008c8:	5162      	str	r2, [r4, r5]
 80008ca:	604b      	str	r3, [r1, #4]
 80008cc:	4630      	mov	r0, r6
 80008ce:	f000 f8d7 	bl	8000a80 <__malloc_unlock>
 80008d2:	f104 000b 	add.w	r0, r4, #11
 80008d6:	1d23      	adds	r3, r4, #4
 80008d8:	f020 0007 	bic.w	r0, r0, #7
 80008dc:	1ac2      	subs	r2, r0, r3
 80008de:	bf1c      	itt	ne
 80008e0:	1a1b      	subne	r3, r3, r0
 80008e2:	50a3      	strne	r3, [r4, r2]
 80008e4:	e7af      	b.n	8000846 <_malloc_r+0x22>
 80008e6:	6862      	ldr	r2, [r4, #4]
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	bf0c      	ite	eq
 80008ec:	f8c8 2000 	streq.w	r2, [r8]
 80008f0:	605a      	strne	r2, [r3, #4]
 80008f2:	e7eb      	b.n	80008cc <_malloc_r+0xa8>
 80008f4:	4623      	mov	r3, r4
 80008f6:	6864      	ldr	r4, [r4, #4]
 80008f8:	e7ae      	b.n	8000858 <_malloc_r+0x34>
 80008fa:	463c      	mov	r4, r7
 80008fc:	687f      	ldr	r7, [r7, #4]
 80008fe:	e7b6      	b.n	800086e <_malloc_r+0x4a>
 8000900:	461a      	mov	r2, r3
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	42a3      	cmp	r3, r4
 8000906:	d1fb      	bne.n	8000900 <_malloc_r+0xdc>
 8000908:	2300      	movs	r3, #0
 800090a:	6053      	str	r3, [r2, #4]
 800090c:	e7de      	b.n	80008cc <_malloc_r+0xa8>
 800090e:	230c      	movs	r3, #12
 8000910:	4630      	mov	r0, r6
 8000912:	6033      	str	r3, [r6, #0]
 8000914:	f000 f8b4 	bl	8000a80 <__malloc_unlock>
 8000918:	e794      	b.n	8000844 <_malloc_r+0x20>
 800091a:	6005      	str	r5, [r0, #0]
 800091c:	e7d6      	b.n	80008cc <_malloc_r+0xa8>
 800091e:	bf00      	nop
 8000920:	200001c0 	.word	0x200001c0

08000924 <__sflush_r>:
 8000924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	0716      	lsls	r6, r2, #28
 800092c:	4605      	mov	r5, r0
 800092e:	460c      	mov	r4, r1
 8000930:	d454      	bmi.n	80009dc <__sflush_r+0xb8>
 8000932:	684b      	ldr	r3, [r1, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	dc02      	bgt.n	800093e <__sflush_r+0x1a>
 8000938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800093a:	2b00      	cmp	r3, #0
 800093c:	dd48      	ble.n	80009d0 <__sflush_r+0xac>
 800093e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000940:	2e00      	cmp	r6, #0
 8000942:	d045      	beq.n	80009d0 <__sflush_r+0xac>
 8000944:	2300      	movs	r3, #0
 8000946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800094a:	682f      	ldr	r7, [r5, #0]
 800094c:	6a21      	ldr	r1, [r4, #32]
 800094e:	602b      	str	r3, [r5, #0]
 8000950:	d030      	beq.n	80009b4 <__sflush_r+0x90>
 8000952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000954:	89a3      	ldrh	r3, [r4, #12]
 8000956:	0759      	lsls	r1, r3, #29
 8000958:	d505      	bpl.n	8000966 <__sflush_r+0x42>
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000960:	b10b      	cbz	r3, 8000966 <__sflush_r+0x42>
 8000962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000964:	1ad2      	subs	r2, r2, r3
 8000966:	2300      	movs	r3, #0
 8000968:	4628      	mov	r0, r5
 800096a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800096c:	6a21      	ldr	r1, [r4, #32]
 800096e:	47b0      	blx	r6
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	d106      	bne.n	8000984 <__sflush_r+0x60>
 8000976:	6829      	ldr	r1, [r5, #0]
 8000978:	291d      	cmp	r1, #29
 800097a:	d82b      	bhi.n	80009d4 <__sflush_r+0xb0>
 800097c:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <__sflush_r+0xfc>)
 800097e:	410a      	asrs	r2, r1
 8000980:	07d6      	lsls	r6, r2, #31
 8000982:	d427      	bmi.n	80009d4 <__sflush_r+0xb0>
 8000984:	2200      	movs	r2, #0
 8000986:	6062      	str	r2, [r4, #4]
 8000988:	6922      	ldr	r2, [r4, #16]
 800098a:	04d9      	lsls	r1, r3, #19
 800098c:	6022      	str	r2, [r4, #0]
 800098e:	d504      	bpl.n	800099a <__sflush_r+0x76>
 8000990:	1c42      	adds	r2, r0, #1
 8000992:	d101      	bne.n	8000998 <__sflush_r+0x74>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b903      	cbnz	r3, 800099a <__sflush_r+0x76>
 8000998:	6560      	str	r0, [r4, #84]	@ 0x54
 800099a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800099c:	602f      	str	r7, [r5, #0]
 800099e:	b1b9      	cbz	r1, 80009d0 <__sflush_r+0xac>
 80009a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009a4:	4299      	cmp	r1, r3
 80009a6:	d002      	beq.n	80009ae <__sflush_r+0x8a>
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 fa21 	bl	8000df0 <_free_r>
 80009ae:	2300      	movs	r3, #0
 80009b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80009b2:	e00d      	b.n	80009d0 <__sflush_r+0xac>
 80009b4:	2301      	movs	r3, #1
 80009b6:	4628      	mov	r0, r5
 80009b8:	47b0      	blx	r6
 80009ba:	4602      	mov	r2, r0
 80009bc:	1c50      	adds	r0, r2, #1
 80009be:	d1c9      	bne.n	8000954 <__sflush_r+0x30>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0c6      	beq.n	8000954 <__sflush_r+0x30>
 80009c6:	2b1d      	cmp	r3, #29
 80009c8:	d001      	beq.n	80009ce <__sflush_r+0xaa>
 80009ca:	2b16      	cmp	r3, #22
 80009cc:	d11d      	bne.n	8000a0a <__sflush_r+0xe6>
 80009ce:	602f      	str	r7, [r5, #0]
 80009d0:	2000      	movs	r0, #0
 80009d2:	e021      	b.n	8000a18 <__sflush_r+0xf4>
 80009d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d8:	b21b      	sxth	r3, r3
 80009da:	e01a      	b.n	8000a12 <__sflush_r+0xee>
 80009dc:	690f      	ldr	r7, [r1, #16]
 80009de:	2f00      	cmp	r7, #0
 80009e0:	d0f6      	beq.n	80009d0 <__sflush_r+0xac>
 80009e2:	0793      	lsls	r3, r2, #30
 80009e4:	bf18      	it	ne
 80009e6:	2300      	movne	r3, #0
 80009e8:	680e      	ldr	r6, [r1, #0]
 80009ea:	bf08      	it	eq
 80009ec:	694b      	ldreq	r3, [r1, #20]
 80009ee:	1bf6      	subs	r6, r6, r7
 80009f0:	600f      	str	r7, [r1, #0]
 80009f2:	608b      	str	r3, [r1, #8]
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	ddeb      	ble.n	80009d0 <__sflush_r+0xac>
 80009f8:	4633      	mov	r3, r6
 80009fa:	463a      	mov	r2, r7
 80009fc:	4628      	mov	r0, r5
 80009fe:	6a21      	ldr	r1, [r4, #32]
 8000a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000a04:	47e0      	blx	ip
 8000a06:	2800      	cmp	r0, #0
 8000a08:	dc07      	bgt.n	8000a1a <__sflush_r+0xf6>
 8000a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a16:	81a3      	strh	r3, [r4, #12]
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1a:	4407      	add	r7, r0
 8000a1c:	1a36      	subs	r6, r6, r0
 8000a1e:	e7e9      	b.n	80009f4 <__sflush_r+0xd0>
 8000a20:	dfbffffe 	.word	0xdfbffffe

08000a24 <_fflush_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	690b      	ldr	r3, [r1, #16]
 8000a28:	4605      	mov	r5, r0
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	b913      	cbnz	r3, 8000a34 <_fflush_r+0x10>
 8000a2e:	2500      	movs	r5, #0
 8000a30:	4628      	mov	r0, r5
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	b118      	cbz	r0, 8000a3e <_fflush_r+0x1a>
 8000a36:	6a03      	ldr	r3, [r0, #32]
 8000a38:	b90b      	cbnz	r3, 8000a3e <_fflush_r+0x1a>
 8000a3a:	f7ff fe07 	bl	800064c <__sinit>
 8000a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f3      	beq.n	8000a2e <_fflush_r+0xa>
 8000a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000a48:	07d0      	lsls	r0, r2, #31
 8000a4a:	d404      	bmi.n	8000a56 <_fflush_r+0x32>
 8000a4c:	0599      	lsls	r1, r3, #22
 8000a4e:	d402      	bmi.n	8000a56 <_fflush_r+0x32>
 8000a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a52:	f7ff fec2 	bl	80007da <__retarget_lock_acquire_recursive>
 8000a56:	4628      	mov	r0, r5
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f7ff ff63 	bl	8000924 <__sflush_r>
 8000a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a60:	4605      	mov	r5, r0
 8000a62:	07da      	lsls	r2, r3, #31
 8000a64:	d4e4      	bmi.n	8000a30 <_fflush_r+0xc>
 8000a66:	89a3      	ldrh	r3, [r4, #12]
 8000a68:	059b      	lsls	r3, r3, #22
 8000a6a:	d4e1      	bmi.n	8000a30 <_fflush_r+0xc>
 8000a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a6e:	f7ff feb5 	bl	80007dc <__retarget_lock_release_recursive>
 8000a72:	e7dd      	b.n	8000a30 <_fflush_r+0xc>

08000a74 <__malloc_lock>:
 8000a74:	4801      	ldr	r0, [pc, #4]	@ (8000a7c <__malloc_lock+0x8>)
 8000a76:	f7ff beb0 	b.w	80007da <__retarget_lock_acquire_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	200001b8 	.word	0x200001b8

08000a80 <__malloc_unlock>:
 8000a80:	4801      	ldr	r0, [pc, #4]	@ (8000a88 <__malloc_unlock+0x8>)
 8000a82:	f7ff beab 	b.w	80007dc <__retarget_lock_release_recursive>
 8000a86:	bf00      	nop
 8000a88:	200001b8 	.word	0x200001b8

08000a8c <__sread>:
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	460c      	mov	r4, r1
 8000a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a94:	f000 f978 	bl	8000d88 <_read_r>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	bfab      	itete	ge
 8000a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8000aa0:	181b      	addge	r3, r3, r0
 8000aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000aa6:	bfac      	ite	ge
 8000aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000aaa:	81a3      	strhlt	r3, [r4, #12]
 8000aac:	bd10      	pop	{r4, pc}

08000aae <__swrite>:
 8000aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab2:	461f      	mov	r7, r3
 8000ab4:	898b      	ldrh	r3, [r1, #12]
 8000ab6:	4605      	mov	r5, r0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	460c      	mov	r4, r1
 8000abc:	4616      	mov	r6, r2
 8000abe:	d505      	bpl.n	8000acc <__swrite+0x1e>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac8:	f000 f94c 	bl	8000d64 <_lseek_r>
 8000acc:	89a3      	ldrh	r3, [r4, #12]
 8000ace:	4632      	mov	r2, r6
 8000ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ad4:	81a3      	strh	r3, [r4, #12]
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	463b      	mov	r3, r7
 8000ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae2:	f000 b973 	b.w	8000dcc <_write_r>

08000ae6 <__sseek>:
 8000ae6:	b510      	push	{r4, lr}
 8000ae8:	460c      	mov	r4, r1
 8000aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aee:	f000 f939 	bl	8000d64 <_lseek_r>
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	89a3      	ldrh	r3, [r4, #12]
 8000af6:	bf15      	itete	ne
 8000af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b02:	81a3      	strheq	r3, [r4, #12]
 8000b04:	bf18      	it	ne
 8000b06:	81a3      	strhne	r3, [r4, #12]
 8000b08:	bd10      	pop	{r4, pc}

08000b0a <__sclose>:
 8000b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b0e:	f000 b8f7 	b.w	8000d00 <_close_r>

08000b12 <__swbuf_r>:
 8000b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b14:	460e      	mov	r6, r1
 8000b16:	4614      	mov	r4, r2
 8000b18:	4605      	mov	r5, r0
 8000b1a:	b118      	cbz	r0, 8000b24 <__swbuf_r+0x12>
 8000b1c:	6a03      	ldr	r3, [r0, #32]
 8000b1e:	b90b      	cbnz	r3, 8000b24 <__swbuf_r+0x12>
 8000b20:	f7ff fd94 	bl	800064c <__sinit>
 8000b24:	69a3      	ldr	r3, [r4, #24]
 8000b26:	60a3      	str	r3, [r4, #8]
 8000b28:	89a3      	ldrh	r3, [r4, #12]
 8000b2a:	071a      	lsls	r2, r3, #28
 8000b2c:	d501      	bpl.n	8000b32 <__swbuf_r+0x20>
 8000b2e:	6923      	ldr	r3, [r4, #16]
 8000b30:	b943      	cbnz	r3, 8000b44 <__swbuf_r+0x32>
 8000b32:	4621      	mov	r1, r4
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f82b 	bl	8000b90 <__swsetup_r>
 8000b3a:	b118      	cbz	r0, 8000b44 <__swbuf_r+0x32>
 8000b3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000b40:	4638      	mov	r0, r7
 8000b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	6922      	ldr	r2, [r4, #16]
 8000b48:	b2f6      	uxtb	r6, r6
 8000b4a:	1a98      	subs	r0, r3, r2
 8000b4c:	6963      	ldr	r3, [r4, #20]
 8000b4e:	4637      	mov	r7, r6
 8000b50:	4283      	cmp	r3, r0
 8000b52:	dc05      	bgt.n	8000b60 <__swbuf_r+0x4e>
 8000b54:	4621      	mov	r1, r4
 8000b56:	4628      	mov	r0, r5
 8000b58:	f7ff ff64 	bl	8000a24 <_fflush_r>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d1ed      	bne.n	8000b3c <__swbuf_r+0x2a>
 8000b60:	68a3      	ldr	r3, [r4, #8]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	60a3      	str	r3, [r4, #8]
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	6022      	str	r2, [r4, #0]
 8000b6c:	701e      	strb	r6, [r3, #0]
 8000b6e:	6962      	ldr	r2, [r4, #20]
 8000b70:	1c43      	adds	r3, r0, #1
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__swbuf_r+0x6e>
 8000b76:	89a3      	ldrh	r3, [r4, #12]
 8000b78:	07db      	lsls	r3, r3, #31
 8000b7a:	d5e1      	bpl.n	8000b40 <__swbuf_r+0x2e>
 8000b7c:	2e0a      	cmp	r6, #10
 8000b7e:	d1df      	bne.n	8000b40 <__swbuf_r+0x2e>
 8000b80:	4621      	mov	r1, r4
 8000b82:	4628      	mov	r0, r5
 8000b84:	f7ff ff4e 	bl	8000a24 <_fflush_r>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d0d9      	beq.n	8000b40 <__swbuf_r+0x2e>
 8000b8c:	e7d6      	b.n	8000b3c <__swbuf_r+0x2a>
	...

08000b90 <__swsetup_r>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <__swsetup_r+0xa8>)
 8000b94:	4605      	mov	r5, r0
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	460c      	mov	r4, r1
 8000b9a:	b118      	cbz	r0, 8000ba4 <__swsetup_r+0x14>
 8000b9c:	6a03      	ldr	r3, [r0, #32]
 8000b9e:	b90b      	cbnz	r3, 8000ba4 <__swsetup_r+0x14>
 8000ba0:	f7ff fd54 	bl	800064c <__sinit>
 8000ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ba8:	0719      	lsls	r1, r3, #28
 8000baa:	d422      	bmi.n	8000bf2 <__swsetup_r+0x62>
 8000bac:	06da      	lsls	r2, r3, #27
 8000bae:	d407      	bmi.n	8000bc0 <__swsetup_r+0x30>
 8000bb0:	2209      	movs	r2, #9
 8000bb2:	602a      	str	r2, [r5, #0]
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	e033      	b.n	8000c28 <__swsetup_r+0x98>
 8000bc0:	0758      	lsls	r0, r3, #29
 8000bc2:	d512      	bpl.n	8000bea <__swsetup_r+0x5a>
 8000bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bc6:	b141      	cbz	r1, 8000bda <__swsetup_r+0x4a>
 8000bc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d002      	beq.n	8000bd6 <__swsetup_r+0x46>
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f000 f90d 	bl	8000df0 <_free_r>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000be0:	81a3      	strh	r3, [r4, #12]
 8000be2:	2300      	movs	r3, #0
 8000be4:	6063      	str	r3, [r4, #4]
 8000be6:	6923      	ldr	r3, [r4, #16]
 8000be8:	6023      	str	r3, [r4, #0]
 8000bea:	89a3      	ldrh	r3, [r4, #12]
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	81a3      	strh	r3, [r4, #12]
 8000bf2:	6923      	ldr	r3, [r4, #16]
 8000bf4:	b94b      	cbnz	r3, 8000c0a <__swsetup_r+0x7a>
 8000bf6:	89a3      	ldrh	r3, [r4, #12]
 8000bf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c00:	d003      	beq.n	8000c0a <__swsetup_r+0x7a>
 8000c02:	4621      	mov	r1, r4
 8000c04:	4628      	mov	r0, r5
 8000c06:	f000 f83e 	bl	8000c86 <__smakebuf_r>
 8000c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c0e:	f013 0201 	ands.w	r2, r3, #1
 8000c12:	d00a      	beq.n	8000c2a <__swsetup_r+0x9a>
 8000c14:	2200      	movs	r2, #0
 8000c16:	60a2      	str	r2, [r4, #8]
 8000c18:	6962      	ldr	r2, [r4, #20]
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	61a2      	str	r2, [r4, #24]
 8000c1e:	6922      	ldr	r2, [r4, #16]
 8000c20:	b942      	cbnz	r2, 8000c34 <__swsetup_r+0xa4>
 8000c22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c26:	d1c5      	bne.n	8000bb4 <__swsetup_r+0x24>
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	0799      	lsls	r1, r3, #30
 8000c2c:	bf58      	it	pl
 8000c2e:	6962      	ldrpl	r2, [r4, #20]
 8000c30:	60a2      	str	r2, [r4, #8]
 8000c32:	e7f4      	b.n	8000c1e <__swsetup_r+0x8e>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7f7      	b.n	8000c28 <__swsetup_r+0x98>
 8000c38:	2000000c 	.word	0x2000000c

08000c3c <__swhatbuf_r>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	460c      	mov	r4, r1
 8000c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c44:	4615      	mov	r5, r2
 8000c46:	2900      	cmp	r1, #0
 8000c48:	461e      	mov	r6, r3
 8000c4a:	b096      	sub	sp, #88	@ 0x58
 8000c4c:	da0c      	bge.n	8000c68 <__swhatbuf_r+0x2c>
 8000c4e:	89a3      	ldrh	r3, [r4, #12]
 8000c50:	2100      	movs	r1, #0
 8000c52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c56:	bf14      	ite	ne
 8000c58:	2340      	movne	r3, #64	@ 0x40
 8000c5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000c5e:	2000      	movs	r0, #0
 8000c60:	6031      	str	r1, [r6, #0]
 8000c62:	602b      	str	r3, [r5, #0]
 8000c64:	b016      	add	sp, #88	@ 0x58
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	466a      	mov	r2, sp
 8000c6a:	f000 f859 	bl	8000d20 <_fstat_r>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	dbed      	blt.n	8000c4e <__swhatbuf_r+0x12>
 8000c72:	9901      	ldr	r1, [sp, #4]
 8000c74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000c78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000c7c:	4259      	negs	r1, r3
 8000c7e:	4159      	adcs	r1, r3
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	e7eb      	b.n	8000c5e <__swhatbuf_r+0x22>

08000c86 <__smakebuf_r>:
 8000c86:	898b      	ldrh	r3, [r1, #12]
 8000c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c8a:	079d      	lsls	r5, r3, #30
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	460c      	mov	r4, r1
 8000c90:	d507      	bpl.n	8000ca2 <__smakebuf_r+0x1c>
 8000c92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c96:	6023      	str	r3, [r4, #0]
 8000c98:	6123      	str	r3, [r4, #16]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	6163      	str	r3, [r4, #20]
 8000c9e:	b003      	add	sp, #12
 8000ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca2:	466a      	mov	r2, sp
 8000ca4:	ab01      	add	r3, sp, #4
 8000ca6:	f7ff ffc9 	bl	8000c3c <__swhatbuf_r>
 8000caa:	9f00      	ldr	r7, [sp, #0]
 8000cac:	4605      	mov	r5, r0
 8000cae:	4639      	mov	r1, r7
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	f7ff fdb7 	bl	8000824 <_malloc_r>
 8000cb6:	b948      	cbnz	r0, 8000ccc <__smakebuf_r+0x46>
 8000cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cbc:	059a      	lsls	r2, r3, #22
 8000cbe:	d4ee      	bmi.n	8000c9e <__smakebuf_r+0x18>
 8000cc0:	f023 0303 	bic.w	r3, r3, #3
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	81a3      	strh	r3, [r4, #12]
 8000cca:	e7e2      	b.n	8000c92 <__smakebuf_r+0xc>
 8000ccc:	89a3      	ldrh	r3, [r4, #12]
 8000cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd6:	81a3      	strh	r3, [r4, #12]
 8000cd8:	9b01      	ldr	r3, [sp, #4]
 8000cda:	6020      	str	r0, [r4, #0]
 8000cdc:	b15b      	cbz	r3, 8000cf6 <__smakebuf_r+0x70>
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ce4:	f000 f82e 	bl	8000d44 <_isatty_r>
 8000ce8:	b128      	cbz	r0, 8000cf6 <__smakebuf_r+0x70>
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	81a3      	strh	r3, [r4, #12]
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	431d      	orrs	r5, r3
 8000cfa:	81a5      	strh	r5, [r4, #12]
 8000cfc:	e7cf      	b.n	8000c9e <__smakebuf_r+0x18>
	...

08000d00 <_close_r>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	2300      	movs	r3, #0
 8000d04:	4d05      	ldr	r5, [pc, #20]	@ (8000d1c <_close_r+0x1c>)
 8000d06:	4604      	mov	r4, r0
 8000d08:	4608      	mov	r0, r1
 8000d0a:	602b      	str	r3, [r5, #0]
 8000d0c:	f7ff fb31 	bl	8000372 <_close>
 8000d10:	1c43      	adds	r3, r0, #1
 8000d12:	d102      	bne.n	8000d1a <_close_r+0x1a>
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	b103      	cbz	r3, 8000d1a <_close_r+0x1a>
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
 8000d1c:	200001c4 	.word	0x200001c4

08000d20 <_fstat_r>:
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	2300      	movs	r3, #0
 8000d24:	4d06      	ldr	r5, [pc, #24]	@ (8000d40 <_fstat_r+0x20>)
 8000d26:	4604      	mov	r4, r0
 8000d28:	4608      	mov	r0, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	602b      	str	r3, [r5, #0]
 8000d2e:	f7ff fb2b 	bl	8000388 <_fstat>
 8000d32:	1c43      	adds	r3, r0, #1
 8000d34:	d102      	bne.n	8000d3c <_fstat_r+0x1c>
 8000d36:	682b      	ldr	r3, [r5, #0]
 8000d38:	b103      	cbz	r3, 8000d3c <_fstat_r+0x1c>
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001c4 	.word	0x200001c4

08000d44 <_isatty_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	2300      	movs	r3, #0
 8000d48:	4d05      	ldr	r5, [pc, #20]	@ (8000d60 <_isatty_r+0x1c>)
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	602b      	str	r3, [r5, #0]
 8000d50:	f7ff fb29 	bl	80003a6 <_isatty>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	d102      	bne.n	8000d5e <_isatty_r+0x1a>
 8000d58:	682b      	ldr	r3, [r5, #0]
 8000d5a:	b103      	cbz	r3, 8000d5e <_isatty_r+0x1a>
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	bd38      	pop	{r3, r4, r5, pc}
 8000d60:	200001c4 	.word	0x200001c4

08000d64 <_lseek_r>:
 8000d64:	b538      	push	{r3, r4, r5, lr}
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4d05      	ldr	r5, [pc, #20]	@ (8000d84 <_lseek_r+0x20>)
 8000d70:	602a      	str	r2, [r5, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	f7ff fb21 	bl	80003ba <_lseek>
 8000d78:	1c43      	adds	r3, r0, #1
 8000d7a:	d102      	bne.n	8000d82 <_lseek_r+0x1e>
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	b103      	cbz	r3, 8000d82 <_lseek_r+0x1e>
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	bd38      	pop	{r3, r4, r5, pc}
 8000d84:	200001c4 	.word	0x200001c4

08000d88 <_read_r>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	4d05      	ldr	r5, [pc, #20]	@ (8000da8 <_read_r+0x20>)
 8000d94:	602a      	str	r2, [r5, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	f7ff face 	bl	8000338 <_read>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d102      	bne.n	8000da6 <_read_r+0x1e>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	b103      	cbz	r3, 8000da6 <_read_r+0x1e>
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	200001c4 	.word	0x200001c4

08000dac <_sbrk_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	2300      	movs	r3, #0
 8000db0:	4d05      	ldr	r5, [pc, #20]	@ (8000dc8 <_sbrk_r+0x1c>)
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	602b      	str	r3, [r5, #0]
 8000db8:	f7ff fb0c 	bl	80003d4 <_sbrk>
 8000dbc:	1c43      	adds	r3, r0, #1
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk_r+0x1a>
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	b103      	cbz	r3, 8000dc6 <_sbrk_r+0x1a>
 8000dc4:	6023      	str	r3, [r4, #0]
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
 8000dc8:	200001c4 	.word	0x200001c4

08000dcc <_write_r>:
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4d05      	ldr	r5, [pc, #20]	@ (8000dec <_write_r+0x20>)
 8000dd8:	602a      	str	r2, [r5, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f7ff fb30 	bl	8000440 <_write>
 8000de0:	1c43      	adds	r3, r0, #1
 8000de2:	d102      	bne.n	8000dea <_write_r+0x1e>
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	b103      	cbz	r3, 8000dea <_write_r+0x1e>
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	bd38      	pop	{r3, r4, r5, pc}
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <_free_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4605      	mov	r5, r0
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d040      	beq.n	8000e7a <_free_r+0x8a>
 8000df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dfc:	1f0c      	subs	r4, r1, #4
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfb8      	it	lt
 8000e02:	18e4      	addlt	r4, r4, r3
 8000e04:	f7ff fe36 	bl	8000a74 <__malloc_lock>
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <_free_r+0x8c>)
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	b933      	cbnz	r3, 8000e1c <_free_r+0x2c>
 8000e0e:	6063      	str	r3, [r4, #4]
 8000e10:	6014      	str	r4, [r2, #0]
 8000e12:	4628      	mov	r0, r5
 8000e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e18:	f7ff be32 	b.w	8000a80 <__malloc_unlock>
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <_free_r+0x42>
 8000e20:	6820      	ldr	r0, [r4, #0]
 8000e22:	1821      	adds	r1, r4, r0
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf01      	itttt	eq
 8000e28:	6819      	ldreq	r1, [r3, #0]
 8000e2a:	685b      	ldreq	r3, [r3, #4]
 8000e2c:	1809      	addeq	r1, r1, r0
 8000e2e:	6021      	streq	r1, [r4, #0]
 8000e30:	e7ed      	b.n	8000e0e <_free_r+0x1e>
 8000e32:	461a      	mov	r2, r3
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	b10b      	cbz	r3, 8000e3c <_free_r+0x4c>
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d9fa      	bls.n	8000e32 <_free_r+0x42>
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	1850      	adds	r0, r2, r1
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d10b      	bne.n	8000e5c <_free_r+0x6c>
 8000e44:	6820      	ldr	r0, [r4, #0]
 8000e46:	4401      	add	r1, r0
 8000e48:	1850      	adds	r0, r2, r1
 8000e4a:	4283      	cmp	r3, r0
 8000e4c:	6011      	str	r1, [r2, #0]
 8000e4e:	d1e0      	bne.n	8000e12 <_free_r+0x22>
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4408      	add	r0, r1
 8000e56:	6010      	str	r0, [r2, #0]
 8000e58:	6053      	str	r3, [r2, #4]
 8000e5a:	e7da      	b.n	8000e12 <_free_r+0x22>
 8000e5c:	d902      	bls.n	8000e64 <_free_r+0x74>
 8000e5e:	230c      	movs	r3, #12
 8000e60:	602b      	str	r3, [r5, #0]
 8000e62:	e7d6      	b.n	8000e12 <_free_r+0x22>
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	1821      	adds	r1, r4, r0
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf01      	itttt	eq
 8000e6c:	6819      	ldreq	r1, [r3, #0]
 8000e6e:	685b      	ldreq	r3, [r3, #4]
 8000e70:	1809      	addeq	r1, r1, r0
 8000e72:	6021      	streq	r1, [r4, #0]
 8000e74:	6063      	str	r3, [r4, #4]
 8000e76:	6054      	str	r4, [r2, #4]
 8000e78:	e7cb      	b.n	8000e12 <_free_r+0x22>
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	200001c0 	.word	0x200001c0

08000e80 <_init>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr

08000e8c <_fini>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr
