#include <stdint.h>
#include <math.h>
#include <stddef.h>
#include <stdio.h>              /* This ert_main.c example uses printf/fflush */
#include "EngTrModel.h"         /* Model's header file */
#include "rtwtypes.h"
#include "main.h"
#include "uart.h"

#define T_HCLK              (1.0f / 64000000.0f)

#define TIM2_TIME_1S        1.00000f
#define TIM2_TIME_200MS     0.20000f
#define TIM2_TIME_10MS      0.01000f

#define TIM2_PRESC_1S       ((uint16_t)( ceil((TIM2_TIME_1S / (T_HCLK * ((65535 + 1) - 0))) - 1)))
#define TIM2_PRESC_200MS    ((uint16_t)( ceil((TIM2_TIME_200MS / (T_HCLK * ((65535 + 1) - 0))) - 1)))
#define TIM2_PRESC_10MS     ((uint16_t)( ceil((TIM2_TIME_10MS / (T_HCLK * ((65535 + 1) - 0))) - 1)))

#define TIM2_INIT_COUNT_1S  	((uint16_t)( (65535 + 1) - (round(TIM2_TIME_1S / (T_HCLK * (TIM2_PRESC_1S + 1))))))
#define TIM2_INIT_COUNT_200MS	((uint16_t)( (65535 + 1) - (round(TIM2_TIME_200MS / (T_HCLK * (TIM2_PRESC_200MS + 1))))))
#define TIM2_INIT_COUNT_10MS	((uint16_t)( (65535 + 1) - (round(TIM2_TIME_10MS / (T_HCLK * (TIM2_PRESC_10MS + 1))))))

#define USER_B1		( GPIOC->IDR & ( 0x1UL << 13U ))
#define Matrix_11	( GPIOC)
#define Matrix_12
#define Matrix_13
#define Matrix_14

void USER_RCC_Init(void);
void USER_GPIO_Init(void);
void USER_TIM2_Delay(uint16_t , uint16_t);
uint16_t USE_ADC1_MODULE(void);

int main(void)
{
	USER_RCC_Init();
	USER_GPIO_Init();
  	USER_USART1_Init();
	EngTrModel_initialize();

	USER_TIM2_Delay(TIM2_PRESC_10MS, TIM2_INIT_COUNT_10MS);//  10ms

	uint16_t readValue = 0;
	int ThrottleValue = 0;

	for(;;)
	{
//	  if(!USER_B1){
//		  USER_TIM2_Delay(TIM2_PRESC_10MS, TIM2_INIT_COUNT_10MS);//  10ms
//		  if(!USER_B1){
//			  printf("Vehicle Speed: \r\n");
//		  }
//	  } else {
//		  GPIOA->BSRR = (0x1UL << 21U); // Value to reset pin 5 of port A (Turn-ON LD2)
//	  }

//		GPIOA->BSRR = (0x1UL << 5U); // Value to reset pin 5 of port A (Turn-ON LD2)
//		USER_TIM2_Delay(TIM2_PRESC_1S, TIM2_INIT_COUNT_1S);
//		GPIOA->BSRR = (0x1UL << 21U); // Value to set pin 5 of port A (Turn-OFF LD2)
//		USER_TIM2_Delay(TIM2_PRESC_1S, TIM2_INIT_COUNT_1S);
//
//		GPIOA->ODR ^= (0x1UL << 5U);
//		USER_TIM2_Delay(TIM2_PRESC_1S, TIM2_INIT_COUNT_1S);

		// PRINT THE DIGITAL VALUE OF ADC1
		readValue = USE_ADC1_MODULE();
//		printf("ReadValue: %i\r\n",readValue);
		ThrottleValue = ((readValue*100)/4095);
		printf("ThrottleValue: %i\r\n",ThrottleValue);
//		USER_TIM2_Delay(TIM2_PRESC_200MS, TIM2_INIT_COUNT_200MS);

//		digitalOutput = ((readValue * 4095) / (3.3));
//		printf("Digital Output %f\r\n", digitalOutput);

//		EngTrModel_U.Throttle = ThrottleValue;
//		if(!USER_B1){
//			USER_TIM2_Delay(TIM2_PRESC_10MS, TIM2_INIT_COUNT_10MS);//  10ms
//			if(!USER_B1){
//				EngTrModel_U.BrakeTorque = 100.0;
//
//			}
//		}
//		else{
//			EngTrModel_U.BrakeTorque = 0.0;
//		}
//		EngTrModel_step();
//		printf("Vehicle Speed: %f\r\n", EngTrModel_Y.VehicleSpeed);
//		printf("Engine Speed: %f\r\n", EngTrModel_Y.EngineSpeed);
//		printf("Gear: %f\r\n", EngTrModel_Y.Gear);
//		USER_TIM2_Delay(TIM2_PRESC_200MS, TIM2_INIT_COUNT_200MS);//  200ms
	}
}

void USER_RCC_Init(void){
	/*System Clock (SYSCLK) Configuration or */
	FLASH->ACR		&=	~( 0X5UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
	FLASH->ACR		|=	 ( 0X2UL <<  0U); // two wait states latency, if SYSCLK > 48MHz
	RCC->CFGR		&=	~( 0x1UL << 16U)  // PLL HSI Clock /2 selected as PLL input clock
					&	~( 0x7UL << 11U)  // APB2 prescaler /1
					&	~( 0x3UL <<  8U)  // APB1 prescaler /2 (APB1 must not exceeed 36Mhz)
					&	~( 0xFUL <<  4U); // AHB perscaler /1
	RCC->CFGR		|=	 ( 0xFUL << 18U)  // PLL input clock x 16 (PLLMUL bits)
					|	 ( 0x4UL <<  8U); // APB1 Prescaler /2
	RCC->CR			|= 	 ( 0x1UL << 24U); // PLL2 ON
	while( !(RCC->CR & ~(0x1UL << 25U )));// Wait until PLL is locked
	RCC->CFGR 		&=  ~( 0x1UL <<  0U); // PLL used as system clock (SW bits)
	RCC->CFGR		|=	 ( 0x2UL <<  0U); // PLL used as system clock (SW bits)
	while( 0x8UL != (RCC->CFGR & 0xCUL)); // wait until PLL is switched

	// Enable clock for required peripherals
	RCC->APB2ENR    |=  ( 0x1UL <<  2U )    // IO port A clock enable
	                |   ( 0x1UL << 14U ); 	// USART 1 clock enable
	RCC->APB2ENR    |=  ( 0x1UL <<  4U );   // IO port C clock enable
	RCC->APB2ENR    |=  ( 0x1UL <<  9U );   // ADC1 clock enable


	// Configure ADC1 clock peripheral
	RCC->CFGR		|= 	( 0x3  <<  14);	// PCLK2 divided by 8
	// INITIALIZE AND ENABLE THE ADC1 PERIPHERAL
	ADC1->CR1		&=	~(0xF << 16UL);
	// DETERMINE THE RESULT FORMAT
	ADC1->CR2		&= ~(0x1  << 11UL)  // Right Alignment
					|	(0x1  <<  1UL); // Continuos conversion mode
	// DETERMINE THE SAMPLE TIME
	// ¿Cómo se determina el Sample time adecuado?
	ADC1->SMPR2		&= ~(0x7  <<  0UL); // 1.5 Cycles
	// THE SECUENCES AND/OR THE NUMBER OF CONVERSACIONS FOR THE ADC REGULAR CHANNELS
	ADC1->SQR1		&= ~(0xF  <<  20UL);// 1 Conversion for regular channels
	// SELECT THE CHANNEL FOR THE FIRST ADC CONVERSATION
	ADC1->SQR3		&= ~(0x1F  << 0UL);// first conversion in channel 0

	// ENABLE THE ADC MODULE
	ADC1->CR2		|=  (0x1  <<  0UL); // ADC Enable and start conversion
	// ADC Calibration
	ADC1->CR2		|=  (0x1  <<  2UL); // Start the calibration
    // Wait until after calibration is complete
    while ((ADC1->CR2 & (0x1UL << 2U)) == 0);
}

uint16_t USE_ADC1_MODULE(void){
	ADC1->CR2	|=  (0x1  <<  0UL); // ADC Enable and start conversion

	// Wait until conversation is done (SR reg EOC bit)
    while ((ADC1->SR & (0x1UL << 1U)) == 0);

    // Read the value in DR(15:0) of ADC1
    uint16_t readValue = ADC1->DR & 0xFFFF;

    return readValue;
}


void USER_GPIO_Init(void) {
	// Configure USART1_TX pin (PA9) as alternate function output push-pull, max speed 10MHz
    GPIOA->CRH  &=  ~( 0x1UL <<  6U )
                &   ~( 0x2UL <<  4U );
    GPIOA->CRH  |=  ( 0x2UL <<  6U )
                |   ( 0x1UL <<  4U );


	// GPIOx_BSRR modified to reset pin 5 of port A (LD2 is connected to PA5)
    GPIOA->BSRR &= (0x1UL << 21U); // Immediate value
    // GPIOx_CRL modified to configure pin 5 as output
    GPIOA->CRL = GPIOA->CRL & ~(0x3UL << 22U) & ~(0x2UL << 20U); // GPIOx_CRL actual value & (to clear) (mask) CNF5[1:0] bits & (to clear) (mask) MODE5_1 bit
    // GPIOx_CRL modified to select pin 5 max speed of 10MHz
    GPIOA->CRL = GPIOA->CRL | (0x1UL << 20U); // GPIOx_CRL actual value | (to set) (mask) MODE5_0 bit

    // CONFIGURE THE ADC1 PIN3 TO INPUT THE VOLTAGE
    // GPIOx_BSRR modified to reset pin 0 of port A
	GPIOA->BSRR |= (0x1UL << 16U); // Immediate value
	// GPIOx_CRL modified to configure pin 0 as input analog
	GPIOA->CRL  &=  ~(0x3UL << 2U) & ~(0x3UL << 0U);


	// GPIOx_BSRR modified to reset pin 2 of port A
	GPIOA->BSRR &= (0x1UL << 18U); // Immediate value
	// GPIOx_CRL modified to configure pin 2 as output
	GPIOA->CRL = GPIOA->CRL & ~(0x3UL << 10U) & ~(0x2UL << 8U);
	// GPIOx_CRL modified to select pin 2 max speed of 10MHz
	GPIOA->CRL = GPIOA->CRL | (0x1UL << 8U);

	// GPIOx_BSRR modified to reset pin 6 of port A
	GPIOA->BSRR &= (0x1UL << 22U); // Immediate value
	// GPIOx_CRL modified to configure pin 6 as output
	GPIOA->CRL = GPIOA->CRL & ~(0x3UL << 26U) & ~(0x2UL << 24U);
	// GPIOx_CRL modified to select pin 6 max speed of 10MHz
	GPIOA->CRL = GPIOA->CRL | (0x1UL << 24U);

	// GPIOx_BSRR modified to reset pin 7 of port A
	GPIOA->BSRR &= (0x1UL << 23U); // Immediate value
	// GPIOx_CRL modified to configure pin 7 as output
	GPIOA->CRL = GPIOA->CRL & ~(0x3UL << 26U) & ~(0x2UL << 24U);
	// GPIOx_CRL modified to select pin 7 max speed of 10MHz
	GPIOA->CRL = GPIOA->CRL | (0x1UL << 24U);
}


void USER_TIM2_Delay(uint16_t presc, uint16_t count){
    // Enable Timer 2 clock
    RCC->APB1ENR |= (0x1 << 0U);

    RCC->APB2ENR    |=  ( 0x1UL <<  4U );

    // Clear control register 1 of Timer 2 to reset configuration
    TIM2->CR1 &= ~(0x72);

    // Clear status register of Timer 2 to reset any pending flags
    TIM2->SR &= ~(0x1UL << 0U);

    // Set auto-reload register of Timer 2 to maximum value for longest delay
    TIM2->ARR = 65535;

    // Set counter register of Timer 2 to initial value for desired delay
    TIM2->CNT = count;

    // Set prescaler register of Timer 2 for desired time base
    TIM2->PSC = presc;

    // Start Timer 2 by setting control register 1
    TIM2->CR1 |= (0x1 << 0U);

    // Wait until Timer 2 update event occurs
    while ((TIM2->SR & (0x1UL << 0U)) == 0);
}
