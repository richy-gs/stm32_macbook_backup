
Lab04_RTOSV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f68  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  0800536c  0800536c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800536c  0800536c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005374  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001610  2000006c  080053e0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000167c  080053e0  0000767c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fdd  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a5  00000000  00000000  0001b072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0001e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e08  00000000  00000000  0001f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a470  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a33  00000000  00000000  0003a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e7d  00000000  00000000  0004dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005120  00000000  00000000  000e2e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e7fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005060 	.word	0x08005060

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005060 	.word	0x08005060

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000088 	.word	0x20000088
 800017c:	20000128 	.word	0x20000128

08000180 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int  file, char *ptr, int len){
 8000180:	b480      	push	{r7}
 8000182:	b087      	sub	sp, #28
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	// Redirect stdout to UART
//	freopen(NULL, "w", stdout);

	int DataIdx;
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 800018c:	2300      	movs	r3, #0
 800018e:	617b      	str	r3, [r7, #20]
 8000190:	e00f      	b.n	80001b2 <_write+0x32>
		while(!( USART1->SR & USART_SR_TXE ));
 8000192:	bf00      	nop
 8000194:	4b0c      	ldr	r3, [pc, #48]	@ (80001c8 <_write+0x48>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800019c:	2b00      	cmp	r3, #0
 800019e:	d0f9      	beq.n	8000194 <_write+0x14>
		USART1->DR = *ptr++;
 80001a0:	68bb      	ldr	r3, [r7, #8]
 80001a2:	1c5a      	adds	r2, r3, #1
 80001a4:	60ba      	str	r2, [r7, #8]
 80001a6:	781a      	ldrb	r2, [r3, #0]
 80001a8:	4b07      	ldr	r3, [pc, #28]	@ (80001c8 <_write+0x48>)
 80001aa:	605a      	str	r2, [r3, #4]
	for(DataIdx = 0; DataIdx < len ; DataIdx++){
 80001ac:	697b      	ldr	r3, [r7, #20]
 80001ae:	3301      	adds	r3, #1
 80001b0:	617b      	str	r3, [r7, #20]
 80001b2:	697a      	ldr	r2, [r7, #20]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	dbeb      	blt.n	8000192 <_write+0x12>
	}
	return len;
 80001ba:	687b      	ldr	r3, [r7, #4]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	371c      	adds	r7, #28
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40013800 	.word	0x40013800

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b09e      	sub	sp, #120	@ 0x78
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fbfb 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f885 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8ef 	bl	80003bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f8c3 	bl	8000368 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  osMutexDef(myMutex01);
 80001e2:	2300      	movs	r3, #0
 80001e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80001e6:	2300      	movs	r3, #0
 80001e8:	677b      	str	r3, [r7, #116]	@ 0x74
  myMutex01Handle =  osMutexCreate(osMutex(myMutex01));
 80001ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 feb3 	bl	8001f5a <osMutexCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a31      	ldr	r2, [pc, #196]	@ (80002bc <main+0xf0>)
 80001f8:	6013      	str	r3, [r2, #0]

  osMutexDef(myMutex02);
 80001fa:	2300      	movs	r3, #0
 80001fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80001fe:	2300      	movs	r3, #0
 8000200:	66fb      	str	r3, [r7, #108]	@ 0x6c
  myMutex02Handle =  osMutexCreate(osMutex(myMutex02));
 8000202:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fea7 	bl	8001f5a <osMutexCreate>
 800020c:	4603      	mov	r3, r0
 800020e:	4a2c      	ldr	r2, [pc, #176]	@ (80002c0 <main+0xf4>)
 8000210:	6013      	str	r3, [r2, #0]
//  MutexYHandle =  osMutexCreate(osMutex(MutexY));
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreDef(BinarySem1);
 8000212:	2300      	movs	r3, #0
 8000214:	663b      	str	r3, [r7, #96]	@ 0x60
 8000216:	2300      	movs	r3, #0
 8000218:	667b      	str	r3, [r7, #100]	@ 0x64
  BinarySem1Handle = osSemaphoreCreate(osSemaphore(BinarySem1), 1);
 800021a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800021e:	2101      	movs	r1, #1
 8000220:	4618      	mov	r0, r3
 8000222:	f001 ff37 	bl	8002094 <osSemaphoreCreate>
 8000226:	4603      	mov	r3, r0
 8000228:	4a26      	ldr	r2, [pc, #152]	@ (80002c4 <main+0xf8>)
 800022a:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(BinarySem2);
 800022c:	2300      	movs	r3, #0
 800022e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000230:	2300      	movs	r3, #0
 8000232:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BinarySem2Handle = osSemaphoreCreate(osSemaphore(BinarySem2), 1);
 8000234:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000238:	2101      	movs	r1, #1
 800023a:	4618      	mov	r0, r3
 800023c:	f001 ff2a 	bl	8002094 <osSemaphoreCreate>
 8000240:	4603      	mov	r3, r0
 8000242:	4a21      	ldr	r2, [pc, #132]	@ (80002c8 <main+0xfc>)
 8000244:	6013      	str	r3, [r2, #0]
//  Queue1Handle = osMessageCreate(osMessageQ(Queue1), NULL);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000246:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <main+0x100>)
 8000248:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800024c:	461d      	mov	r5, r3
 800024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800025a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fe1a 	bl	8001e9a <osThreadCreate>
 8000266:	4603      	mov	r3, r0
 8000268:	4a19      	ldr	r2, [pc, #100]	@ (80002d0 <main+0x104>)
 800026a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

//  printf("Inicializando Scheduler\r\n");

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <main+0x108>)
 800026e:	f107 0420 	add.w	r4, r7, #32
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000280:	f107 0320 	add.w	r3, r7, #32
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fe07 	bl	8001e9a <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a12      	ldr	r2, [pc, #72]	@ (80002d8 <main+0x10c>)
 8000290:	6013      	str	r3, [r2, #0]
//  /* definition and creation of Task2 */
//  osThreadDef(Task3, StartTask3, osPriorityAboveNormal, 0, 128);
//  Task3Handle = osThreadCreate(osThread(Task3), NULL);

  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityBelowNormal, 0, 128);
 8000292:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <main+0x110>)
 8000294:	1d3c      	adds	r4, r7, #4
 8000296:	461d      	mov	r5, r3
 8000298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fdf6 	bl	8001e9a <osThreadCreate>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <main+0x114>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */


  /* Start scheduler */
  osKernelStart();
 80002b4:	f001 fdea 	bl	8001e8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <main+0xec>
 80002bc:	2000037c 	.word	0x2000037c
 80002c0:	20000380 	.word	0x20000380
 80002c4:	2000038c 	.word	0x2000038c
 80002c8:	20000390 	.word	0x20000390
 80002cc:	08005084 	.word	0x08005084
 80002d0:	20000370 	.word	0x20000370
 80002d4:	080050a8 	.word	0x080050a8
 80002d8:	20000378 	.word	0x20000378
 80002dc:	080050cc 	.word	0x080050cc
 80002e0:	20000374 	.word	0x20000374

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	@ 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	@ 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f004 faca 	bl	800488c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000316:	2300      	movs	r3, #0
 8000318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fe21 	bl	8000f6c <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000330:	f000 f968 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f88e 	bl	8001470 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800035a:	f000 f953 	bl	8000604 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	@ 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <MX_USART1_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f001 fc6e 	bl	8001c80 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f92b 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000328 	.word	0x20000328
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1a      	ldr	r2, [pc, #104]	@ (8000488 <MX_GPIO_Init+0xcc>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2120      	movs	r1, #32
 8000434:	4815      	ldr	r0, [pc, #84]	@ (800048c <MX_GPIO_Init+0xd0>)
 8000436:	f000 fd5f 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_GPIO_Init+0xd4>)
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	@ (8000494 <MX_GPIO_Init+0xd8>)
 8000450:	f000 fbce 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000454:	2320      	movs	r3, #32
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2302      	movs	r3, #2
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4808      	ldr	r0, [pc, #32]	@ (800048c <MX_GPIO_Init+0xd0>)
 800046c:	f000 fbc0 	bl	8000bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	2105      	movs	r1, #5
 8000474:	2028      	movs	r0, #40	@ 0x28
 8000476:	f000 fb90 	bl	8000b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800047a:	2028      	movs	r0, #40	@ 0x28
 800047c:	f000 fba9 	bl	8000bd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	10110000 	.word	0x10110000
 8000494:	40011000 	.word	0x40011000

08000498 <StartTask1>:
//		osDelay(1000 - (osKernelSysTick() - (1000 * counter++)));
//	}
}

void StartTask1(void const * argument)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		printf("Task 1\r\n");
 80004a0:	481d      	ldr	r0, [pc, #116]	@ (8000518 <StartTask1+0x80>)
 80004a2:	f004 f9eb 	bl	800487c <puts>
		printf("Taking X by Task 1\r\n");
 80004a6:	481d      	ldr	r0, [pc, #116]	@ (800051c <StartTask1+0x84>)
 80004a8:	f004 f9e8 	bl	800487c <puts>
		osMutexWait(MutexXHandle, osWaitForever);
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <StartTask1+0x88>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 fd69 	bl	8001f8c <osMutexWait>
		printf("Task 1 using X\r\n");
 80004ba:	481a      	ldr	r0, [pc, #104]	@ (8000524 <StartTask1+0x8c>)
 80004bc:	f004 f9de 	bl	800487c <puts>
		osDelay(1000);
 80004c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c4:	f001 fd35 	bl	8001f32 <osDelay>
		printf("Taking Y by Task 1\r\n");
 80004c8:	4817      	ldr	r0, [pc, #92]	@ (8000528 <StartTask1+0x90>)
 80004ca:	f004 f9d7 	bl	800487c <puts>
		osMutexWait(MutexYHandle, osWaitForever);
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <StartTask1+0x94>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fd58 	bl	8001f8c <osMutexWait>
		printf("Task 1 using Y\r\n");
 80004dc:	4814      	ldr	r0, [pc, #80]	@ (8000530 <StartTask1+0x98>)
 80004de:	f004 f9cd 	bl	800487c <puts>
		osDelay(1000);
 80004e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e6:	f001 fd24 	bl	8001f32 <osDelay>
		printf("Releasing Y by Task 1\r\n");
 80004ea:	4812      	ldr	r0, [pc, #72]	@ (8000534 <StartTask1+0x9c>)
 80004ec:	f004 f9c6 	bl	800487c <puts>
		osMutexRelease(MutexYHandle);
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <StartTask1+0x94>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fd97 	bl	8002028 <osMutexRelease>
		printf("Releasing X by Task 1\r\n");
 80004fa:	480f      	ldr	r0, [pc, #60]	@ (8000538 <StartTask1+0xa0>)
 80004fc:	f004 f9be 	bl	800487c <puts>
		osMutexRelease(MutexXHandle);
 8000500:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <StartTask1+0x88>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fd8f 	bl	8002028 <osMutexRelease>
		osDelay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050e:	f001 fd10 	bl	8001f32 <osDelay>
		printf("Task 1\r\n");
 8000512:	bf00      	nop
 8000514:	e7c4      	b.n	80004a0 <StartTask1+0x8>
 8000516:	bf00      	nop
 8000518:	08005144 	.word	0x08005144
 800051c:	0800514c 	.word	0x0800514c
 8000520:	20000384 	.word	0x20000384
 8000524:	08005160 	.word	0x08005160
 8000528:	08005170 	.word	0x08005170
 800052c:	20000388 	.word	0x20000388
 8000530:	08005184 	.word	0x08005184
 8000534:	08005194 	.word	0x08005194
 8000538:	080051ac 	.word	0x080051ac

0800053c <StartTask2>:
//		printf("Task 1 finished in: %ld s\r\n", osKernelSysTick());
//		osThreadTerminate(Task1Handle);
//	}
}

void StartTask2(void const * argument){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
//		printf("Task 2\r\n");
		printf("Taking X by Task 2\r\n");
 8000544:	481b      	ldr	r0, [pc, #108]	@ (80005b4 <StartTask2+0x78>)
 8000546:	f004 f999 	bl	800487c <puts>
		osMutexWait(MutexXHandle, osWaitForever);
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <StartTask2+0x7c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fd1a 	bl	8001f8c <osMutexWait>
		printf("Task 2 using X\r\n");
 8000558:	4818      	ldr	r0, [pc, #96]	@ (80005bc <StartTask2+0x80>)
 800055a:	f004 f98f 	bl	800487c <puts>
		osDelay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000562:	f001 fce6 	bl	8001f32 <osDelay>
		printf("Taking Y by Task 2\r\n");
 8000566:	4816      	ldr	r0, [pc, #88]	@ (80005c0 <StartTask2+0x84>)
 8000568:	f004 f988 	bl	800487c <puts>
		osMutexWait(MutexYHandle, osWaitForever);
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <StartTask2+0x88>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fd09 	bl	8001f8c <osMutexWait>
		printf("Task 2 using Y\r\n");
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <StartTask2+0x8c>)
 800057c:	f004 f97e 	bl	800487c <puts>
		osDelay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000584:	f001 fcd5 	bl	8001f32 <osDelay>
		printf("Releasing Y by Task 2\r\n");
 8000588:	4810      	ldr	r0, [pc, #64]	@ (80005cc <StartTask2+0x90>)
 800058a:	f004 f977 	bl	800487c <puts>
		osMutexRelease(MutexYHandle);
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <StartTask2+0x88>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fd48 	bl	8002028 <osMutexRelease>
		printf("Releasing X by Task 2\r\n");
 8000598:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <StartTask2+0x94>)
 800059a:	f004 f96f 	bl	800487c <puts>
		osMutexRelease(MutexXHandle);
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <StartTask2+0x7c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fd40 	bl	8002028 <osMutexRelease>
		osDelay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f001 fcc1 	bl	8001f32 <osDelay>
		printf("Taking X by Task 2\r\n");
 80005b0:	bf00      	nop
 80005b2:	e7c7      	b.n	8000544 <StartTask2+0x8>
 80005b4:	080051c4 	.word	0x080051c4
 80005b8:	20000384 	.word	0x20000384
 80005bc:	080051d8 	.word	0x080051d8
 80005c0:	080051e8 	.word	0x080051e8
 80005c4:	20000388 	.word	0x20000388
 80005c8:	080051fc 	.word	0x080051fc
 80005cc:	0800520c 	.word	0x0800520c
 80005d0:	08005224 	.word	0x08005224

080005d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <StartDefaultTask+0x8>

080005e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f2:	f000 fa01 	bl	80009f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40000800 	.word	0x40000800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <Error_Handler+0x8>

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <HAL_MspInit+0x68>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <HAL_MspInit+0x68>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <HAL_MspInit+0x68>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_MspInit+0x68>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <HAL_MspInit+0x68>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <HAL_MspInit+0x68>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	210f      	movs	r1, #15
 800064a:	f06f 0001 	mvn.w	r0, #1
 800064e:	f000 faa4 	bl	8000b9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <HAL_MspInit+0x6c>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <HAL_MspInit+0x6c>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000
 800067c:	40010000 	.word	0x40010000

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <HAL_UART_MspInit+0x8c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d131      	bne.n	8000704 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_UART_MspInit+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	@ (8000714 <HAL_UART_MspInit+0x94>)
 80006e6:	f000 fa83 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <HAL_UART_MspInit+0x94>)
 8000700:	f000 fa76 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	@ 0x38
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800072e:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_InitTick+0xe8>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a33      	ldr	r2, [pc, #204]	@ (8000800 <HAL_InitTick+0xe8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <HAL_InitTick+0xe8>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000746:	f107 0210 	add.w	r2, r7, #16
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fffd 	bl	8001750 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800075a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d103      	bne.n	8000768 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000760:	f000 ffce 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8000764:	6378      	str	r0, [r7, #52]	@ 0x34
 8000766:	e004      	b.n	8000772 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000768:	f000 ffca 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 800076c:	4603      	mov	r3, r0
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000774:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <HAL_InitTick+0xec>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9b      	lsrs	r3, r3, #18
 800077c:	3b01      	subs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <HAL_InitTick+0xf0>)
 8000782:	4a22      	ldr	r2, [pc, #136]	@ (800080c <HAL_InitTick+0xf4>)
 8000784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <HAL_InitTick+0xf0>)
 8000788:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800078c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800078e:	4a1e      	ldr	r2, [pc, #120]	@ (8000808 <HAL_InitTick+0xf0>)
 8000790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000792:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <HAL_InitTick+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <HAL_InitTick+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_InitTick+0xf0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80007a6:	4818      	ldr	r0, [pc, #96]	@ (8000808 <HAL_InitTick+0xf0>)
 80007a8:	f001 f820 	bl	80017ec <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d11b      	bne.n	80007f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007ba:	4813      	ldr	r0, [pc, #76]	@ (8000808 <HAL_InitTick+0xf0>)
 80007bc:	f001 f86e 	bl	800189c <HAL_TIM_Base_Start_IT>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d111      	bne.n	80007f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007ce:	201e      	movs	r0, #30
 80007d0:	f000 f9ff 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	d808      	bhi.n	80007ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007da:	2200      	movs	r2, #0
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	201e      	movs	r0, #30
 80007e0:	f000 f9db 	bl	8000b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_InitTick+0xf8>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e002      	b.n	80007f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3738      	adds	r7, #56	@ 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	431bde83 	.word	0x431bde83
 8000808:	20000394 	.word	0x20000394
 800080c:	40000800 	.word	0x40000800
 8000810:	20000004 	.word	0x20000004

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <TIM4_IRQHandler+0x10>)
 800084e:	f001 f877 	bl	8001940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000394 	.word	0x20000394

0800085c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000860:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000864:	f000 fb60 	bl	8000f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e00a      	b.n	8000894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800087e:	f3af 8000 	nop.w
 8000882:	4601      	mov	r1, r0
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	b2ca      	uxtb	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf0      	blt.n	800087e <_read+0x12>
  }

  return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008cc:	605a      	str	r2, [r3, #4]
  return 0;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <_isatty>:

int _isatty(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
	...

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f004 f806 	bl	8004948 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20005000 	.word	0x20005000
 8000968:	00000400 	.word	0x00000400
 800096c:	200003dc 	.word	0x200003dc
 8000970:	20001680 	.word	0x20001680

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff fff8 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000986:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000988:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a09      	ldr	r2, [pc, #36]	@ (80009c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800099c:	4c09      	ldr	r4, [pc, #36]	@ (80009c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 ffd3 	bl	8004954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fc0d 	bl	80001cc <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009bc:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 80009c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009c4:	2000167c 	.word	0x2000167c

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f8d1 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f7ff fe98 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fe12 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	200003e0 	.word	0x200003e0

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	@ (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	200003e0 	.word	0x200003e0

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4906      	ldr	r1, [pc, #24]	@ (8000ac8 <__NVIC_EnableIRQ+0x34>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff4f 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff64 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ffb2 	bl	8000b20 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff81 	bl	8000acc <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff57 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	@ 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	@ (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	@ (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	@ (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	@ (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	@ (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	@ (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	@ (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	@ (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	@ (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	@ (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	@ (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	@ 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	@ (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	@ (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	@ (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	492c      	ldr	r1, [pc, #176]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4922      	ldr	r1, [pc, #136]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4918      	ldr	r1, [pc, #96]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	490e      	ldr	r1, [pc, #56]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	@ 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	611a      	str	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f806 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e272      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4b8f      	ldr	r3, [pc, #572]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d112      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb0:	d10b      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	4b89      	ldr	r3, [pc, #548]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d06c      	beq.n	8001098 <HAL_RCC_OscConfig+0x12c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d168      	bne.n	8001098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e24c      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
 8000fd4:	4b80      	ldr	r3, [pc, #512]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a7f      	ldr	r2, [pc, #508]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b7b      	ldr	r3, [pc, #492]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7a      	ldr	r2, [pc, #488]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b78      	ldr	r3, [pc, #480]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a77      	ldr	r2, [pc, #476]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0xbc>
 800100e:	4b72      	ldr	r3, [pc, #456]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a71      	ldr	r2, [pc, #452]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b6f      	ldr	r3, [pc, #444]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6e      	ldr	r2, [pc, #440]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001028:	4b6b      	ldr	r3, [pc, #428]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6a      	ldr	r2, [pc, #424]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b68      	ldr	r3, [pc, #416]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a67      	ldr	r2, [pc, #412]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fce8 	bl	8000a1c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fce4 	bl	8000a1c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	@ 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e200      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b5d      	ldr	r3, [pc, #372]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xe4>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fcd4 	bl	8000a1c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fcd0 	bl	8000a1c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	@ 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1ec      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x10c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a6:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b2:	4b49      	ldr	r3, [pc, #292]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
 80010be:	4b46      	ldr	r3, [pc, #280]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b43      	ldr	r3, [pc, #268]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1c0      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4939      	ldr	r1, [pc, #228]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_RCC_OscConfig+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc89 	bl	8000a1c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc85 	bl	8000a1c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1a1      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4927      	ldr	r1, [pc, #156]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_RCC_OscConfig+0x270>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc68 	bl	8000a1c <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc64 	bl	8000a1c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e180      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d03a      	beq.n	80011f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d019      	beq.n	80011b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_RCC_OscConfig+0x274>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fc48 	bl	8000a1c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fc44 	bl	8000a1c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e160      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fafe 	bl	80017b0 <RCC_Delay>
 80011b4:	e01c      	b.n	80011f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc2e 	bl	8000a1c <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	e00f      	b.n	80011e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc2a 	bl	8000a1c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d908      	bls.n	80011e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e146      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42420000 	.word	0x42420000
 80011e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b92      	ldr	r3, [pc, #584]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a6 	beq.w	800134a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b8b      	ldr	r3, [pc, #556]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a87      	ldr	r2, [pc, #540]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b82      	ldr	r3, [pc, #520]	@ (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b7f      	ldr	r3, [pc, #508]	@ (8001434 <HAL_RCC_OscConfig+0x4c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7e      	ldr	r2, [pc, #504]	@ (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fbeb 	bl	8000a1c <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fbe7 	bl	8000a1c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	@ 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e103      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x312>
 8001270:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a6e      	ldr	r2, [pc, #440]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e02d      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x334>
 8001286:	4b6a      	ldr	r3, [pc, #424]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a69      	ldr	r2, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b67      	ldr	r3, [pc, #412]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a66      	ldr	r2, [pc, #408]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x356>
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a60      	ldr	r2, [pc, #384]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b58      	ldr	r3, [pc, #352]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a57      	ldr	r2, [pc, #348]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fb9b 	bl	8000a1c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fb97 	bl	8000a1c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0b1      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	4b4b      	ldr	r3, [pc, #300]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ee      	beq.n	80012ea <HAL_RCC_OscConfig+0x37e>
 800130c:	e014      	b.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb85 	bl	8000a1c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb81 	bl	8000a1c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e09b      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ee      	bne.n	8001316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133e:	4b3c      	ldr	r3, [pc, #240]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a3b      	ldr	r2, [pc, #236]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d061      	beq.n	8001424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d146      	bne.n	80013f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <HAL_RCC_OscConfig+0x4cc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb55 	bl	8000a1c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb51 	bl	8000a1c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e06d      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4921      	ldr	r1, [pc, #132]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a19      	ldr	r1, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	430b      	orrs	r3, r1
 80013c2:	491b      	ldr	r1, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_RCC_OscConfig+0x4cc>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb25 	bl	8000a1c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fb21 	bl	8000a1c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e03d      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x46a>
 80013f4:	e035      	b.n	8001462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_RCC_OscConfig+0x4cc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb0e 	bl	8000a1c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fb0a 	bl	8000a1c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e026      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x498>
 8001422:	e01e      	b.n	8001462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e019      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
 8001430:	40021000 	.word	0x40021000
 8001434:	40007000 	.word	0x40007000
 8001438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_RCC_OscConfig+0x500>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0d0      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001484:	4b6a      	ldr	r3, [pc, #424]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d910      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b67      	ldr	r3, [pc, #412]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0207 	bic.w	r2, r3, #7
 800149a:	4965      	ldr	r1, [pc, #404]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a52      	ldr	r2, [pc, #328]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d040      	beq.n	8001590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d115      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e073      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06b      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154e:	4b39      	ldr	r3, [pc, #228]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f023 0203 	bic.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4936      	ldr	r1, [pc, #216]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff fa5c 	bl	8000a1c <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	e00a      	b.n	800157e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001568:	f7ff fa58 	bl	8000a1c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e053      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 020c 	and.w	r2, r3, #12
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d1eb      	bne.n	8001568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d210      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 0207 	bic.w	r2, r3, #7
 80015a6:	4922      	ldr	r1, [pc, #136]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f821 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	@ (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x1cc>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f87a 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	08005340 	.word	0x08005340
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d002      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x30>
 800166e:	2b08      	cmp	r3, #8
 8001670:	d003      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0x36>
 8001672:	e027      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001676:	613b      	str	r3, [r7, #16]
      break;
 8001678:	e027      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d010      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0c5b      	lsrs	r3, r3, #17
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x98>)
 80016a6:	fb03 f202 	mul.w	r2, r3, r2
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e004      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	613b      	str	r3, [r7, #16]
      break;
 80016c2:	e002      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x98>)
 80016c6:	613b      	str	r3, [r7, #16]
      break;
 80016c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ca:	693b      	ldr	r3, [r7, #16]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	007a1200 	.word	0x007a1200
 80016e0:	08005358 	.word	0x08005358
 80016e4:	08005368 	.word	0x08005368
 80016e8:	003d0900 	.word	0x003d0900

080016ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f0:	4b02      	ldr	r3, [pc, #8]	@ (80016fc <HAL_RCC_GetHCLKFreq+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001704:	f7ff fff2 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4903      	ldr	r1, [pc, #12]	@ (8001724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	08005350 	.word	0x08005350

08001728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800172c:	f7ff ffde 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 8001730:	4602      	mov	r2, r0
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0adb      	lsrs	r3, r3, #11
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	4903      	ldr	r1, [pc, #12]	@ (800174c <HAL_RCC_GetPCLK2Freq+0x24>)
 800173e:	5ccb      	ldrb	r3, [r1, r3]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	08005350 	.word	0x08005350

08001750 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	220f      	movs	r2, #15
 800175e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_GetClockConfig+0x58>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_RCC_GetClockConfig+0x58>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_GetClockConfig+0x58>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_RCC_GetClockConfig+0x58>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_RCC_GetClockConfig+0x5c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0207 	and.w	r2, r3, #7
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40022000 	.word	0x40022000

080017b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <RCC_Delay+0x34>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <RCC_Delay+0x38>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	0a5b      	lsrs	r3, r3, #9
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017cc:	bf00      	nop
  }
  while (Delay --);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	60fa      	str	r2, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f9      	bne.n	80017cc <RCC_Delay+0x1c>
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000000 	.word	0x20000000
 80017e8:	10624dd3 	.word	0x10624dd3

080017ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e041      	b.n	8001882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f839 	bl	800188a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f000 f9b4 	bl	8001b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d001      	beq.n	80018b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e03a      	b.n	800192a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_TIM_Base_Start_IT+0x98>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00e      	beq.n	80018f4 <HAL_TIM_Base_Start_IT+0x58>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018de:	d009      	beq.n	80018f4 <HAL_TIM_Base_Start_IT+0x58>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a14      	ldr	r2, [pc, #80]	@ (8001938 <HAL_TIM_Base_Start_IT+0x9c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d004      	beq.n	80018f4 <HAL_TIM_Base_Start_IT+0x58>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a13      	ldr	r2, [pc, #76]	@ (800193c <HAL_TIM_Base_Start_IT+0xa0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b06      	cmp	r3, #6
 8001904:	d010      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001916:	e007      	b.n	8001928 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40012c00 	.word	0x40012c00
 8001938:	40000400 	.word	0x40000400
 800193c:	40000800 	.word	0x40000800

08001940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d122      	bne.n	800199c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	d11b      	bne.n	800199c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0202 	mvn.w	r2, #2
 800196c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f8ed 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001988:	e005      	b.n	8001996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f8e0 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8ef 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d122      	bne.n	80019f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d11b      	bne.n	80019f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0204 	mvn.w	r2, #4
 80019c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8c3 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 80019dc:	e005      	b.n	80019ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8b6 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f8c5 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d122      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d11b      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 0208 	mvn.w	r2, #8
 8001a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f899 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001a30:	e005      	b.n	8001a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f88c 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f89b 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d122      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d11b      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0210 	mvn.w	r2, #16
 8001a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f86f 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001a84:	e005      	b.n	8001a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f862 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f871 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0201 	mvn.w	r2, #1
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fd8e 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	2b80      	cmp	r3, #128	@ 0x80
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001adc:	2b80      	cmp	r3, #128	@ 0x80
 8001ade:	d107      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8bf 	bl	8001c6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afa:	2b40      	cmp	r3, #64	@ 0x40
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b08:	2b40      	cmp	r3, #64	@ 0x40
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f835 	bl	8001b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d107      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0220 	mvn.w	r2, #32
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f88a 	bl	8001c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a29      	ldr	r2, [pc, #164]	@ (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00b      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb6:	d007      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <TIM_Base_SetConfig+0xbc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <TIM_Base_SetConfig+0xc0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00b      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be8:	d007      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <TIM_Base_SetConfig+0xbc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <TIM_Base_SetConfig+0xc0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d108      	bne.n	8001c0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d103      	bne.n	8001c40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	615a      	str	r2, [r3, #20]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800

08001c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e042      	b.n	8001d18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fcea 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	@ 0x24
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f82b 	bl	8001d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d5a:	f023 030c 	bic.w	r3, r3, #12
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2c      	ldr	r2, [pc, #176]	@ (8001e34 <UART_SetConfig+0x114>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d103      	bne.n	8001d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d88:	f7ff fcce 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	e002      	b.n	8001d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d90:	f7ff fcb6 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8001d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009a      	lsls	r2, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <UART_SetConfig+0x118>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	0119      	lsls	r1, r3, #4
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	441a      	add	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <UART_SetConfig+0x118>)
 8001dce:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2064      	movs	r0, #100	@ 0x64
 8001dd6:	fb00 f303 	mul.w	r3, r0, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	3332      	adds	r3, #50	@ 0x32
 8001de0:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <UART_SetConfig+0x118>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dec:	4419      	add	r1, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009a      	lsls	r2, r3, #2
 8001df8:	441a      	add	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <UART_SetConfig+0x118>)
 8001e06:	fba3 0302 	umull	r0, r3, r3, r2
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2064      	movs	r0, #100	@ 0x64
 8001e0e:	fb00 f303 	mul.w	r3, r0, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	3332      	adds	r3, #50	@ 0x32
 8001e18:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <UART_SetConfig+0x118>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	440a      	add	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40013800 	.word	0x40013800
 8001e38:	51eb851f 	.word	0x51eb851f

08001e3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	2b84      	cmp	r3, #132	@ 0x84
 8001e50:	d005      	beq.n	8001e5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e70:	f3ef 8305 	mrs	r3, IPSR
 8001e74:	607b      	str	r3, [r7, #4]
  return(result);
 8001e76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf14      	ite	ne
 8001e7c:	2301      	movne	r3, #1
 8001e7e:	2300      	moveq	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e90:	f001 f99c 	bl	80031cc <vTaskStartScheduler>
  
  return osOK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9c:	b089      	sub	sp, #36	@ 0x24
 8001e9e:	af04      	add	r7, sp, #16
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <osThreadCreate+0x54>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01c      	beq.n	8001eee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685c      	ldr	r4, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691e      	ldr	r6, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffb8 	bl	8001e3c <makeFreeRtosPriority>
 8001ecc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ed6:	9202      	str	r2, [sp, #8]
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	9100      	str	r1, [sp, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4632      	mov	r2, r6
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 ff95 	bl	8002e12 <xTaskCreateStatic>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e01c      	b.n	8001f28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685c      	ldr	r4, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001efa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff9a 	bl	8001e3c <makeFreeRtosPriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9200      	str	r2, [sp, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4632      	mov	r2, r6
 8001f16:	4629      	mov	r1, r5
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f000 ffd9 	bl	8002ed0 <xTaskCreate>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f28:	68fb      	ldr	r3, [r7, #12]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <osDelay+0x16>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	e000      	b.n	8001f4a <osDelay+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f908 	bl	8003160 <vTaskDelay>
  
  return osOK;
 8001f50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2001      	movs	r0, #1
 8001f72:	f000 fae7 	bl	8002544 <xQueueCreateMutexStatic>
 8001f76:	4603      	mov	r3, r0
 8001f78:	e003      	b.n	8001f82 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 faca 	bl	8002514 <xQueueCreateMutex>
 8001f80:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <osMutexWait+0x18>
    return osErrorParameter;
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	e03a      	b.n	800201a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fae:	d103      	bne.n	8001fb8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e009      	b.n	8001fcc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <osMutexWait+0x40>
      ticks = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001fcc:	f7ff ff4d 	bl	8001e6a <inHandlerMode>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d017      	beq.n	8002006 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2100      	movs	r1, #0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fd6e 	bl	8002ac0 <xQueueReceiveFromISR>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <osMutexWait+0x62>
      return osErrorOS;
 8001fea:	23ff      	movs	r3, #255	@ 0xff
 8001fec:	e015      	b.n	800201a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d011      	beq.n	8002018 <osMutexWait+0x8c>
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <osMutexWait+0x98>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	e008      	b.n	8002018 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fc49 	bl	80028a0 <xQueueSemaphoreTake>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <osMutexWait+0x8c>
    return osErrorOS;
 8002014:	23ff      	movs	r3, #255	@ 0xff
 8002016:	e000      	b.n	800201a <osMutexWait+0x8e>
  }
  
  return osOK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002038:	f7ff ff17 	bl	8001e6a <inHandlerMode>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fb99 	bl	8002780 <xQueueGiveFromISR>
 800204e:	4603      	mov	r3, r0
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <osMutexRelease+0x30>
      return osErrorOS;
 8002054:	23ff      	movs	r3, #255	@ 0xff
 8002056:	e017      	b.n	8002088 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d013      	beq.n	8002086 <osMutexRelease+0x5e>
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <osMutexRelease+0x68>)
 8002060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	e00a      	b.n	8002086 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002070:	2300      	movs	r3, #0
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa80 	bl	800257c <xQueueGenericSend>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d001      	beq.n	8002086 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002082:	23ff      	movs	r3, #255	@ 0xff
 8002084:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00f      	beq.n	80020c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10a      	bne.n	80020c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 f937 	bl	800232c <xQueueGenericCreateStatic>
 80020be:	4603      	mov	r3, r0
 80020c0:	e016      	b.n	80020f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e014      	b.n	80020f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d110      	bne.n	80020ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80020cc:	2203      	movs	r2, #3
 80020ce:	2100      	movs	r1, #0
 80020d0:	2001      	movs	r0, #1
 80020d2:	f000 f9a7 	bl	8002424 <xQueueGenericCreate>
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <osSemaphoreCreate+0x56>
 80020de:	2300      	movs	r3, #0
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fa49 	bl	800257c <xQueueGenericSend>
      return sema;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	e000      	b.n	80020f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80020ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0208 	add.w	r2, r3, #8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021aa:	d103      	bne.n	80021b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e00c      	b.n	80021ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3308      	adds	r3, #8
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <vListInsert+0x2e>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d2f6      	bcs.n	80021bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6892      	ldr	r2, [r2, #8]
 800221a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d103      	bne.n	8002238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002284:	f001 ff02 	bl	800408c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	441a      	add	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	3b01      	subs	r3, #1
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	22ff      	movs	r2, #255	@ 0xff
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22ff      	movs	r2, #255	@ 0xff
 80022d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d114      	bne.n	8002304 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01a      	beq.n	8002318 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3310      	adds	r3, #16
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f9cc 	bl	8003684 <xTaskRemoveFromEventList>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <xQueueGenericReset+0xd0>)
 80022f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	e009      	b.n	8002318 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3310      	adds	r3, #16
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fef5 	bl	80020f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3324      	adds	r3, #36	@ 0x24
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fef0 	bl	80020f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002318:	f001 fee8 	bl	80040ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	@ 0x38
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800235e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <xQueueGenericCreateStatic+0x56>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <xQueueGenericCreateStatic+0x5a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <xQueueGenericCreateStatic+0x5c>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	623b      	str	r3, [r7, #32]
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <xQueueGenericCreateStatic+0x84>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <xQueueGenericCreateStatic+0x88>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <xQueueGenericCreateStatic+0x8a>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	61fb      	str	r3, [r7, #28]
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023d2:	2348      	movs	r3, #72	@ 0x48
 80023d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b48      	cmp	r3, #72	@ 0x48
 80023da:	d00b      	beq.n	80023f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002406:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f844 	bl	80024a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800241c:	4618      	mov	r0, r3
 800241e:	3730      	adds	r7, #48	@ 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	613b      	str	r3, [r7, #16]
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e004      	b.n	8002466 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3348      	adds	r3, #72	@ 0x48
 800246a:	4618      	mov	r0, r3
 800246c:	f001 ff10 	bl	8004290 <pvPortMalloc>
 8002470:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00f      	beq.n	8002498 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3348      	adds	r3, #72	@ 0x48
 800247c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f805 	bl	80024a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002498:	69bb      	ldr	r3, [r7, #24]
	}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e002      	b.n	80024c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024d0:	2101      	movs	r1, #1
 80024d2:	69b8      	ldr	r0, [r7, #24]
 80024d4:	f7ff fec0 	bl	8002258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002500:	2300      	movs	r3, #0
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f838 	bl	800257c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800251e:	2301      	movs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	461a      	mov	r2, r3
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff ff79 	bl	8002424 <xQueueGenericCreate>
 8002532:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff ffd3 	bl	80024e0 <prvInitialiseMutex>

		return pxNewQueue;
 800253a:	68fb      	ldr	r3, [r7, #12]
	}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af02      	add	r7, sp, #8
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff fee2 	bl	800232c <xQueueGenericCreateStatic>
 8002568:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff ffb8 	bl	80024e0 <prvInitialiseMutex>

		return pxNewQueue;
 8002570:	68fb      	ldr	r3, [r7, #12]
	}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08e      	sub	sp, #56	@ 0x38
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <xQueueGenericSend+0x34>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <xQueueGenericSend+0x42>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <xQueueGenericSend+0x46>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <xQueueGenericSend+0x48>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <xQueueGenericSend+0x64>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d103      	bne.n	80025ee <xQueueGenericSend+0x72>
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <xQueueGenericSend+0x76>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xQueueGenericSend+0x78>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <xQueueGenericSend+0x94>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	623b      	str	r3, [r7, #32]
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002610:	f001 fa02 	bl	8003a18 <xTaskGetSchedulerState>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <xQueueGenericSend+0xa4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <xQueueGenericSend+0xa8>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <xQueueGenericSend+0xaa>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <xQueueGenericSend+0xc6>
	__asm volatile
 800262a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	61fb      	str	r3, [r7, #28]
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	e7fd      	b.n	800263e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002642:	f001 fd23 	bl	800408c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <xQueueGenericSend+0xdc>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d129      	bne.n	80026ac <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800265e:	f000 fac8 	bl	8002bf2 <prvCopyDataToQueue>
 8002662:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	3324      	adds	r3, #36	@ 0x24
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f807 	bl	8003684 <xTaskRemoveFromEventList>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800267c:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <xQueueGenericSend+0x200>)
 800267e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	e00a      	b.n	80026a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002694:	4b39      	ldr	r3, [pc, #228]	@ (800277c <xQueueGenericSend+0x200>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026a4:	f001 fd22 	bl	80040ec <vPortExitCritical>
				return pdPASS;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e063      	b.n	8002774 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026b2:	f001 fd1b 	bl	80040ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e05c      	b.n	8002774 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 f841 	bl	800374c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026ce:	f001 fd0d 	bl	80040ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026d2:	f000 fde5 	bl	80032a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026d6:	f001 fcd9 	bl	800408c <vPortEnterCritical>
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026e6:	d103      	bne.n	80026f0 <xQueueGenericSend+0x174>
 80026e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026fc:	d103      	bne.n	8002706 <xQueueGenericSend+0x18a>
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002706:	f001 fcf1 	bl	80040ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800270a:	1d3a      	adds	r2, r7, #4
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f830 	bl	8003778 <xTaskCheckForTimeOut>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d124      	bne.n	8002768 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800271e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002720:	f000 fb5f 	bl	8002de2 <prvIsQueueFull>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d018      	beq.n	800275c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	3310      	adds	r3, #16
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 ff80 	bl	8003638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800273a:	f000 faea 	bl	8002d12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800273e:	f000 fdbd 	bl	80032bc <xTaskResumeAll>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f af7c 	bne.w	8002642 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <xQueueGenericSend+0x200>)
 800274c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	e772      	b.n	8002642 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800275c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800275e:	f000 fad8 	bl	8002d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002762:	f000 fdab 	bl	80032bc <xTaskResumeAll>
 8002766:	e76c      	b.n	8002642 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276a:	f000 fad2 	bl	8002d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800276e:	f000 fda5 	bl	80032bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002772:	2300      	movs	r3, #0
		}
	}
}
 8002774:	4618      	mov	r0, r3
 8002776:	3738      	adds	r7, #56	@ 0x38
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08e      	sub	sp, #56	@ 0x38
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	623b      	str	r3, [r7, #32]
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	61fb      	str	r3, [r7, #28]
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <xQueueGiveFromISR+0x5c>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <xQueueGiveFromISR+0x60>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <xQueueGiveFromISR+0x62>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <xQueueGiveFromISR+0x7e>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	61bb      	str	r3, [r7, #24]
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	e7fd      	b.n	80027fa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027fe:	f001 fd07 	bl	8004210 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002802:	f3ef 8211 	mrs	r2, BASEPRI
 8002806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	617a      	str	r2, [r7, #20]
 8002818:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800281a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282a:	429a      	cmp	r2, r3
 800282c:	d22b      	bcs.n	8002886 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002840:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002848:	d112      	bne.n	8002870 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	3324      	adds	r3, #36	@ 0x24
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ff14 	bl	8003684 <xTaskRemoveFromEventList>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00e      	beq.n	8002880 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e007      	b.n	8002880 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002874:	3301      	adds	r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	b25a      	sxtb	r2, r3
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002880:	2301      	movs	r3, #1
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
 8002884:	e001      	b.n	800288a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002894:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002898:	4618      	mov	r0, r3
 800289a:	3738      	adds	r7, #56	@ 0x38
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08e      	sub	sp, #56	@ 0x38
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	623b      	str	r3, [r7, #32]
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	61fb      	str	r3, [r7, #28]
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f4:	f001 f890 	bl	8003a18 <xTaskGetSchedulerState>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <xQueueSemaphoreTake+0x64>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <xQueueSemaphoreTake+0x68>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <xQueueSemaphoreTake+0x6a>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10b      	bne.n	8002926 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	61bb      	str	r3, [r7, #24]
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	e7fd      	b.n	8002922 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002926:	f001 fbb1 	bl	800408c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800292a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002946:	f001 fa35 	bl	8003db4 <pvTaskIncrementMutexHeldCount>
 800294a:	4602      	mov	r2, r0
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00f      	beq.n	8002978 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295a:	3310      	adds	r3, #16
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fe91 	bl	8003684 <xTaskRemoveFromEventList>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002968:	4b54      	ldr	r3, [pc, #336]	@ (8002abc <xQueueSemaphoreTake+0x21c>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002978:	f001 fbb8 	bl	80040ec <vPortExitCritical>
				return pdPASS;
 800297c:	2301      	movs	r3, #1
 800297e:	e098      	b.n	8002ab2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	617b      	str	r3, [r7, #20]
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80029a4:	f001 fba2 	bl	80040ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e082      	b.n	8002ab2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fec8 	bl	800374c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029bc:	2301      	movs	r3, #1
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029c0:	f001 fb94 	bl	80040ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c4:	f000 fc6c 	bl	80032a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029c8:	f001 fb60 	bl	800408c <vPortEnterCritical>
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029d8:	d103      	bne.n	80029e2 <xQueueSemaphoreTake+0x142>
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ee:	d103      	bne.n	80029f8 <xQueueSemaphoreTake+0x158>
 80029f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f8:	f001 fb78 	bl	80040ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029fc:	463a      	mov	r2, r7
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 feb7 	bl	8003778 <xTaskCheckForTimeOut>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d132      	bne.n	8002a76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a12:	f000 f9d0 	bl	8002db6 <prvIsQueueEmpty>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d026      	beq.n	8002a6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002a24:	f001 fb32 	bl	800408c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f811 	bl	8003a54 <xTaskPriorityInherit>
 8002a32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002a34:	f001 fb5a 	bl	80040ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	3324      	adds	r3, #36	@ 0x24
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fdf9 	bl	8003638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a48:	f000 f963 	bl	8002d12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a4c:	f000 fc36 	bl	80032bc <xTaskResumeAll>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f47f af67 	bne.w	8002926 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002a58:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <xQueueSemaphoreTake+0x21c>)
 8002a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	e75d      	b.n	8002926 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a6c:	f000 f951 	bl	8002d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a70:	f000 fc24 	bl	80032bc <xTaskResumeAll>
 8002a74:	e757      	b.n	8002926 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a78:	f000 f94b 	bl	8002d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a7c:	f000 fc1e 	bl	80032bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a82:	f000 f998 	bl	8002db6 <prvIsQueueEmpty>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f43f af4c 	beq.w	8002926 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002a94:	f001 fafa 	bl	800408c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002a98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a9a:	f000 f893 	bl	8002bc4 <prvGetDisinheritPriorityAfterTimeout>
 8002a9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f8e2 	bl	8003c70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002aac:	f001 fb1e 	bl	80040ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3738      	adds	r7, #56	@ 0x38
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	@ 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	623b      	str	r3, [r7, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	e7fd      	b.n	8002aea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <xQueueReceiveFromISR+0x3c>
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueReceiveFromISR+0x40>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <xQueueReceiveFromISR+0x42>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	61fb      	str	r3, [r7, #28]
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b1e:	f001 fb77 	bl	8004210 <vPortValidateInterruptPriority>
	__asm volatile
 8002b22:	f3ef 8211 	mrs	r2, BASEPRI
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	61ba      	str	r2, [r7, #24]
 8002b38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002b3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02f      	beq.n	8002baa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b58:	f000 f8b5 	bl	8002cc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b6c:	d112      	bne.n	8002b94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	3310      	adds	r3, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd82 	bl	8003684 <xTaskRemoveFromEventList>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba8:	e001      	b.n	8002bae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f383 8811 	msr	BASEPRI, r3
}
 8002bb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3738      	adds	r7, #56	@ 0x38
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e001      	b.n	8002be6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002be6:	68fb      	ldr	r3, [r7, #12]
	}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d14d      	bne.n	8002cb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 ff9f 	bl	8003b60 <xTaskPriorityDisinherit>
 8002c22:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e043      	b.n	8002cb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d119      	bne.n	8002c66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6898      	ldr	r0, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	f001 feb0 	bl	80049a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	441a      	add	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d32b      	bcc.n	8002cb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e026      	b.n	8002cb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68d8      	ldr	r0, [r3, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	f001 fe96 	bl	80049a2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	425b      	negs	r3, r3
 8002c80:	441a      	add	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d207      	bcs.n	8002ca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	425b      	negs	r3, r3
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d105      	bne.n	8002cb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002cbc:	697b      	ldr	r3, [r7, #20]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d018      	beq.n	8002d0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d303      	bcc.n	8002cfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	461a      	mov	r2, r3
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f001 fe4c 	bl	80049a2 <memcpy>
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d1a:	f001 f9b7 	bl	800408c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d26:	e011      	b.n	8002d4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3324      	adds	r3, #36	@ 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fca5 	bl	8003684 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d40:	f000 fd7e 	bl	8003840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dce9      	bgt.n	8002d28 <prvUnlockQueue+0x16>
 8002d54:	e000      	b.n	8002d58 <prvUnlockQueue+0x46>
					break;
 8002d56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	22ff      	movs	r2, #255	@ 0xff
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002d60:	f001 f9c4 	bl	80040ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d64:	f001 f992 	bl	800408c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d70:	e011      	b.n	8002d96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d012      	beq.n	8002da0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3310      	adds	r3, #16
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fc80 	bl	8003684 <xTaskRemoveFromEventList>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d8a:	f000 fd59 	bl	8003840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	dce9      	bgt.n	8002d72 <prvUnlockQueue+0x60>
 8002d9e:	e000      	b.n	8002da2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002da0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	22ff      	movs	r2, #255	@ 0xff
 8002da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002daa:	f001 f99f 	bl	80040ec <vPortExitCritical>
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dbe:	f001 f965 	bl	800408c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e001      	b.n	8002dd4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dd4:	f001 f98a 	bl	80040ec <vPortExitCritical>

	return xReturn;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dea:	f001 f94f 	bl	800408c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d102      	bne.n	8002e00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e001      	b.n	8002e04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e04:	f001 f972 	bl	80040ec <vPortExitCritical>

	return xReturn;
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08e      	sub	sp, #56	@ 0x38
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <xTaskCreateStatic+0x2c>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	623b      	str	r3, [r7, #32]
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61fb      	str	r3, [r7, #28]
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e5c:	23a0      	movs	r3, #160	@ 0xa0
 8002e5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e64:	d00b      	beq.n	8002e7e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	61bb      	str	r3, [r7, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	e7fd      	b.n	8002e7a <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01e      	beq.n	8002ec2 <xTaskCreateStatic+0xb0>
 8002e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01b      	beq.n	8002ec2 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f851 	bl	8002f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ebc:	f000 f8e6 	bl	800308c <prvAddNewTaskToReadyList>
 8002ec0:	e001      	b.n	8002ec6 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ec6:	697b      	ldr	r3, [r7, #20]
	}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3728      	adds	r7, #40	@ 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f9d3 	bl	8004290 <pvPortMalloc>
 8002eea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ef2:	20a0      	movs	r0, #160	@ 0xa0
 8002ef4:	f001 f9cc 	bl	8004290 <pvPortMalloc>
 8002ef8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f06:	e005      	b.n	8002f14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f08:	6978      	ldr	r0, [r7, #20]
 8002f0a:	f001 fa89 	bl	8004420 <vPortFree>
 8002f0e:	e001      	b.n	8002f14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f80f 	bl	8002f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f3e:	69f8      	ldr	r0, [r7, #28]
 8002f40:	f000 f8a4 	bl	800308c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e002      	b.n	8002f50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f50:	69bb      	ldr	r3, [r7, #24]
	}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f74:	3b01      	subs	r3, #1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	617b      	str	r3, [r7, #20]
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	e7fd      	b.n	8002fa2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e012      	b.n	8002fd2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	7819      	ldrb	r1, [r3, #0]
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3334      	adds	r3, #52	@ 0x34
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d9e9      	bls.n	8002fac <prvInitialiseNewTask+0x50>
 8002fd8:	e000      	b.n	8002fdc <prvInitialiseNewTask+0x80>
		{
			break;
 8002fda:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d901      	bls.n	8002fee <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fea:	2306      	movs	r3, #6
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f896 	bl	8002136 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	3318      	adds	r3, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f891 	bl	8002136 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003018:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	f1c3 0207 	rsb	r2, r3, #7
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	2200      	movs	r2, #0
 800302e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303c:	334c      	adds	r3, #76	@ 0x4c
 800303e:	224c      	movs	r2, #76	@ 0x4c
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f001 fc22 	bl	800488c <memset>
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <prvInitialiseNewTask+0x124>)
 800304c:	651a      	str	r2, [r3, #80]	@ 0x50
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	4a0c      	ldr	r2, [pc, #48]	@ (8003084 <prvInitialiseNewTask+0x128>)
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	4a0c      	ldr	r2, [pc, #48]	@ (8003088 <prvInitialiseNewTask+0x12c>)
 8003058:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	69b8      	ldr	r0, [r7, #24]
 8003060:	f000 ff22 	bl	8003ea8 <pxPortInitialiseStack>
 8003064:	4602      	mov	r2, r0
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20001530 	.word	0x20001530
 8003084:	20001598 	.word	0x20001598
 8003088:	20001600 	.word	0x20001600

0800308c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003094:	f000 fffa 	bl	800408c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003098:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a29      	ldr	r2, [pc, #164]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 80030a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030aa:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d110      	bne.n	80030da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030b8:	f000 fbe6 	bl	8003888 <prvInitialiseTaskLists>
 80030bc:	e00d      	b.n	80030da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030be:	4b23      	ldr	r3, [pc, #140]	@ (800314c <prvAddNewTaskToReadyList+0xc0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d802      	bhi.n	80030da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <prvAddNewTaskToReadyList+0xc4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <prvAddNewTaskToReadyList+0xc4>)
 80030e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <prvAddNewTaskToReadyList+0xc8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <prvAddNewTaskToReadyList+0xc8>)
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <prvAddNewTaskToReadyList+0xcc>)
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7ff f81e 	bl	800214e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003112:	f000 ffeb 	bl	80040ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <prvAddNewTaskToReadyList+0xc0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	429a      	cmp	r2, r3
 800312a:	d207      	bcs.n	800313c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <prvAddNewTaskToReadyList+0xd0>)
 800312e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200004e4 	.word	0x200004e4
 8003148:	200003e4 	.word	0x200003e4
 800314c:	200004f0 	.word	0x200004f0
 8003150:	20000500 	.word	0x20000500
 8003154:	200004ec 	.word	0x200004ec
 8003158:	200003e8 	.word	0x200003e8
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d018      	beq.n	80031a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <vTaskDelay+0x64>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <vTaskDelay+0x32>
	__asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	60bb      	str	r3, [r7, #8]
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	e7fd      	b.n	800318e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003192:	f000 f885 	bl	80032a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003196:	2100      	movs	r1, #0
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fe1f 	bl	8003ddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800319e:	f000 f88d 	bl	80032bc <xTaskResumeAll>
 80031a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80031aa:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <vTaskDelay+0x68>)
 80031ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000050c 	.word	0x2000050c
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	@ 0x28
 80031d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031da:	463a      	mov	r2, r7
 80031dc:	1d39      	adds	r1, r7, #4
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fc ffb4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	9202      	str	r2, [sp, #8]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	460a      	mov	r2, r1
 80031fa:	4921      	ldr	r1, [pc, #132]	@ (8003280 <vTaskStartScheduler+0xb4>)
 80031fc:	4821      	ldr	r0, [pc, #132]	@ (8003284 <vTaskStartScheduler+0xb8>)
 80031fe:	f7ff fe08 	bl	8002e12 <xTaskCreateStatic>
 8003202:	4603      	mov	r3, r0
 8003204:	4a20      	ldr	r2, [pc, #128]	@ (8003288 <vTaskStartScheduler+0xbc>)
 8003206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <vTaskStartScheduler+0xbc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003210:	2301      	movs	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e001      	b.n	800321a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d11b      	bne.n	8003258 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
}
 8003232:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003234:	4b15      	ldr	r3, [pc, #84]	@ (800328c <vTaskStartScheduler+0xc0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <vTaskStartScheduler+0xc4>)
 800323c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <vTaskStartScheduler+0xc8>)
 8003240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003244:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <vTaskStartScheduler+0xcc>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <vTaskStartScheduler+0xd0>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003252:	f000 fea9 	bl	8003fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003256:	e00f      	b.n	8003278 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800325e:	d10b      	bne.n	8003278 <vTaskStartScheduler+0xac>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <vTaskStartScheduler+0xa8>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	08005338 	.word	0x08005338
 8003284:	08003859 	.word	0x08003859
 8003288:	20000508 	.word	0x20000508
 800328c:	200003e4 	.word	0x200003e4
 8003290:	2000001c 	.word	0x2000001c
 8003294:	20000504 	.word	0x20000504
 8003298:	200004f0 	.word	0x200004f0
 800329c:	200004e8 	.word	0x200004e8

080032a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <vTaskSuspendAll+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a03      	ldr	r2, [pc, #12]	@ (80032b8 <vTaskSuspendAll+0x18>)
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000050c 	.word	0x2000050c

080032bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ca:	4b42      	ldr	r3, [pc, #264]	@ (80033d4 <xTaskResumeAll+0x118>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <xTaskResumeAll+0x2e>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	603b      	str	r3, [r7, #0]
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	e7fd      	b.n	80032e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032ea:	f000 fecf 	bl	800408c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032ee:	4b39      	ldr	r3, [pc, #228]	@ (80033d4 <xTaskResumeAll+0x118>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	4a37      	ldr	r2, [pc, #220]	@ (80033d4 <xTaskResumeAll+0x118>)
 80032f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f8:	4b36      	ldr	r3, [pc, #216]	@ (80033d4 <xTaskResumeAll+0x118>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d161      	bne.n	80033c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003300:	4b35      	ldr	r3, [pc, #212]	@ (80033d8 <xTaskResumeAll+0x11c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05d      	beq.n	80033c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003308:	e02e      	b.n	8003368 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800330a:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <xTaskResumeAll+0x120>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3318      	adds	r3, #24
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ff74 	bl	8002204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3304      	adds	r3, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ff6f 	bl	8002204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <xTaskResumeAll+0x124>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	4a2a      	ldr	r2, [pc, #168]	@ (80033e0 <xTaskResumeAll+0x124>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <xTaskResumeAll+0x128>)
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fefd 	bl	800214e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003358:	4b23      	ldr	r3, [pc, #140]	@ (80033e8 <xTaskResumeAll+0x12c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003362:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <xTaskResumeAll+0x130>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <xTaskResumeAll+0x120>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1cc      	bne.n	800330a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003376:	f000 fb2b 	bl	80039d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800337a:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <xTaskResumeAll+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003386:	f000 f837 	bl	80033f8 <xTaskIncrementTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003390:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <xTaskResumeAll+0x130>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3b01      	subs	r3, #1
 800339a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f1      	bne.n	8003386 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80033a2:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <xTaskResumeAll+0x134>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033a8:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <xTaskResumeAll+0x130>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033b4:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <xTaskResumeAll+0x138>)
 80033b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033c4:	f000 fe92 	bl	80040ec <vPortExitCritical>

	return xAlreadyYielded;
 80033c8:	68bb      	ldr	r3, [r7, #8]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000050c 	.word	0x2000050c
 80033d8:	200004e4 	.word	0x200004e4
 80033dc:	200004a4 	.word	0x200004a4
 80033e0:	200004ec 	.word	0x200004ec
 80033e4:	200003e8 	.word	0x200003e8
 80033e8:	200003e4 	.word	0x200003e4
 80033ec:	200004f8 	.word	0x200004f8
 80033f0:	200004f4 	.word	0x200004f4
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003402:	4b51      	ldr	r3, [pc, #324]	@ (8003548 <xTaskIncrementTick+0x150>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 808e 	bne.w	8003528 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800340c:	4b4f      	ldr	r3, [pc, #316]	@ (800354c <xTaskIncrementTick+0x154>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003414:	4a4d      	ldr	r2, [pc, #308]	@ (800354c <xTaskIncrementTick+0x154>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d121      	bne.n	8003464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003420:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <xTaskIncrementTick+0x158>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	603b      	str	r3, [r7, #0]
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <xTaskIncrementTick+0x46>
 8003442:	4b43      	ldr	r3, [pc, #268]	@ (8003550 <xTaskIncrementTick+0x158>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b42      	ldr	r3, [pc, #264]	@ (8003554 <xTaskIncrementTick+0x15c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a40      	ldr	r2, [pc, #256]	@ (8003550 <xTaskIncrementTick+0x158>)
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <xTaskIncrementTick+0x15c>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b40      	ldr	r3, [pc, #256]	@ (8003558 <xTaskIncrementTick+0x160>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3301      	adds	r3, #1
 800345c:	4a3e      	ldr	r2, [pc, #248]	@ (8003558 <xTaskIncrementTick+0x160>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	f000 fab6 	bl	80039d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <xTaskIncrementTick+0x164>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	429a      	cmp	r2, r3
 800346c:	d34d      	bcc.n	800350a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346e:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <xTaskIncrementTick+0x158>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <xTaskIncrementTick+0x84>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <xTaskIncrementTick+0x86>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <xTaskIncrementTick+0x164>)
 8003484:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003488:	601a      	str	r2, [r3, #0]
					break;
 800348a:	e03e      	b.n	800350a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <xTaskIncrementTick+0x158>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d203      	bcs.n	80034ac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034a4:	4a2d      	ldr	r2, [pc, #180]	@ (800355c <xTaskIncrementTick+0x164>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
						break;
 80034aa:	e02e      	b.n	800350a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fea7 	bl	8002204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3318      	adds	r3, #24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fe9e 	bl	8002204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	4b23      	ldr	r3, [pc, #140]	@ (8003560 <xTaskIncrementTick+0x168>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	4a22      	ldr	r2, [pc, #136]	@ (8003560 <xTaskIncrementTick+0x168>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003564 <xTaskIncrementTick+0x16c>)
 80034e8:	441a      	add	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe fe2c 	bl	800214e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <xTaskIncrementTick+0x170>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d3b4      	bcc.n	800346e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003508:	e7b1      	b.n	800346e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800350a:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <xTaskIncrementTick+0x170>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003510:	4914      	ldr	r1, [pc, #80]	@ (8003564 <xTaskIncrementTick+0x16c>)
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d907      	bls.n	8003532 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e004      	b.n	8003532 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <xTaskIncrementTick+0x174>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	4a0f      	ldr	r2, [pc, #60]	@ (800356c <xTaskIncrementTick+0x174>)
 8003530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <xTaskIncrementTick+0x178>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800353a:	2301      	movs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800353e:	697b      	ldr	r3, [r7, #20]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000050c 	.word	0x2000050c
 800354c:	200004e8 	.word	0x200004e8
 8003550:	2000049c 	.word	0x2000049c
 8003554:	200004a0 	.word	0x200004a0
 8003558:	200004fc 	.word	0x200004fc
 800355c:	20000504 	.word	0x20000504
 8003560:	200004ec 	.word	0x200004ec
 8003564:	200003e8 	.word	0x200003e8
 8003568:	200003e4 	.word	0x200003e4
 800356c:	200004f4 	.word	0x200004f4
 8003570:	200004f8 	.word	0x200004f8

08003574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800357a:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <vTaskSwitchContext+0xac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003582:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <vTaskSwitchContext+0xb0>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003588:	e045      	b.n	8003616 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <vTaskSwitchContext+0xb0>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003590:	4b25      	ldr	r3, [pc, #148]	@ (8003628 <vTaskSwitchContext+0xb4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	f1c3 031f 	rsb	r3, r3, #31
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	4921      	ldr	r1, [pc, #132]	@ (800362c <vTaskSwitchContext+0xb8>)
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10b      	bne.n	80035d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	607b      	str	r3, [r7, #4]
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	e7fd      	b.n	80035ce <vTaskSwitchContext+0x5a>
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <vTaskSwitchContext+0xb8>)
 80035de:	4413      	add	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3308      	adds	r3, #8
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d104      	bne.n	8003602 <vTaskSwitchContext+0x8e>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <vTaskSwitchContext+0xbc>)
 800360a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <vTaskSwitchContext+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	334c      	adds	r3, #76	@ 0x4c
 8003612:	4a08      	ldr	r2, [pc, #32]	@ (8003634 <vTaskSwitchContext+0xc0>)
 8003614:	6013      	str	r3, [r2, #0]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	2000050c 	.word	0x2000050c
 8003624:	200004f8 	.word	0x200004f8
 8003628:	200004ec 	.word	0x200004ec
 800362c:	200003e8 	.word	0x200003e8
 8003630:	200003e4 	.word	0x200003e4
 8003634:	2000001c 	.word	0x2000001c

08003638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	60fb      	str	r3, [r7, #12]
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003660:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <vTaskPlaceOnEventList+0x48>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3318      	adds	r3, #24
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fe fd93 	bl	8002194 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800366e:	2101      	movs	r1, #1
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f000 fbb3 	bl	8003ddc <prvAddCurrentTaskToDelayedList>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200003e4 	.word	0x200003e4

08003684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	60fb      	str	r3, [r7, #12]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3318      	adds	r3, #24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fda4 	bl	8002204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <xTaskRemoveFromEventList+0xb0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11c      	bne.n	80036fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fd9b 	bl	8002204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	4b18      	ldr	r3, [pc, #96]	@ (8003738 <xTaskRemoveFromEventList+0xb4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <xTaskRemoveFromEventList+0xb4>)
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4a13      	ldr	r2, [pc, #76]	@ (800373c <xTaskRemoveFromEventList+0xb8>)
 80036ee:	441a      	add	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7fe fd29 	bl	800214e <vListInsertEnd>
 80036fc:	e005      	b.n	800370a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3318      	adds	r3, #24
 8003702:	4619      	mov	r1, r3
 8003704:	480e      	ldr	r0, [pc, #56]	@ (8003740 <xTaskRemoveFromEventList+0xbc>)
 8003706:	f7fe fd22 	bl	800214e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <xTaskRemoveFromEventList+0xc0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	429a      	cmp	r2, r3
 8003716:	d905      	bls.n	8003724 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <xTaskRemoveFromEventList+0xc4>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e001      	b.n	8003728 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003728:	697b      	ldr	r3, [r7, #20]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000050c 	.word	0x2000050c
 8003738:	200004ec 	.word	0x200004ec
 800373c:	200003e8 	.word	0x200003e8
 8003740:	200004a4 	.word	0x200004a4
 8003744:	200003e4 	.word	0x200003e4
 8003748:	200004f8 	.word	0x200004f8

0800374c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <vTaskInternalSetTimeOutState+0x24>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <vTaskInternalSetTimeOutState+0x28>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	605a      	str	r2, [r3, #4]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200004fc 	.word	0x200004fc
 8003774:	200004e8 	.word	0x200004e8

08003778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	613b      	str	r3, [r7, #16]
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80037be:	f000 fc65 	bl	800408c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <xTaskCheckForTimeOut+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037da:	d102      	bne.n	80037e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e023      	b.n	800382a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b15      	ldr	r3, [pc, #84]	@ (800383c <xTaskCheckForTimeOut+0xc4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d007      	beq.n	80037fe <xTaskCheckForTimeOut+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e015      	b.n	800382a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	d20b      	bcs.n	8003820 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff99 	bl	800374c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e004      	b.n	800382a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800382a:	f000 fc5f 	bl	80040ec <vPortExitCritical>

	return xReturn;
 800382e:	69fb      	ldr	r3, [r7, #28]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200004e8 	.word	0x200004e8
 800383c:	200004fc 	.word	0x200004fc

08003840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <vTaskMissedYield+0x14>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200004f8 	.word	0x200004f8

08003858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003860:	f000 f852 	bl	8003908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <prvIdleTask+0x28>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d9f9      	bls.n	8003860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <prvIdleTask+0x2c>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800387c:	e7f0      	b.n	8003860 <prvIdleTask+0x8>
 800387e:	bf00      	nop
 8003880:	200003e8 	.word	0x200003e8
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e00c      	b.n	80038ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a12      	ldr	r2, [pc, #72]	@ (80038e8 <prvInitialiseTaskLists+0x60>)
 80038a0:	4413      	add	r3, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fc28 	bl	80020f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d9ef      	bls.n	8003894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038b4:	480d      	ldr	r0, [pc, #52]	@ (80038ec <prvInitialiseTaskLists+0x64>)
 80038b6:	f7fe fc1f 	bl	80020f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ba:	480d      	ldr	r0, [pc, #52]	@ (80038f0 <prvInitialiseTaskLists+0x68>)
 80038bc:	f7fe fc1c 	bl	80020f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038c0:	480c      	ldr	r0, [pc, #48]	@ (80038f4 <prvInitialiseTaskLists+0x6c>)
 80038c2:	f7fe fc19 	bl	80020f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038c6:	480c      	ldr	r0, [pc, #48]	@ (80038f8 <prvInitialiseTaskLists+0x70>)
 80038c8:	f7fe fc16 	bl	80020f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038cc:	480b      	ldr	r0, [pc, #44]	@ (80038fc <prvInitialiseTaskLists+0x74>)
 80038ce:	f7fe fc13 	bl	80020f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <prvInitialiseTaskLists+0x78>)
 80038d4:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <prvInitialiseTaskLists+0x64>)
 80038d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <prvInitialiseTaskLists+0x7c>)
 80038da:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <prvInitialiseTaskLists+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200003e8 	.word	0x200003e8
 80038ec:	20000474 	.word	0x20000474
 80038f0:	20000488 	.word	0x20000488
 80038f4:	200004a4 	.word	0x200004a4
 80038f8:	200004b8 	.word	0x200004b8
 80038fc:	200004d0 	.word	0x200004d0
 8003900:	2000049c 	.word	0x2000049c
 8003904:	200004a0 	.word	0x200004a0

08003908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800390e:	e019      	b.n	8003944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003910:	f000 fbbc 	bl	800408c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003914:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <prvCheckTasksWaitingTermination+0x50>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fc6f 	bl	8002204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <prvCheckTasksWaitingTermination+0x54>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	4a0b      	ldr	r2, [pc, #44]	@ (800395c <prvCheckTasksWaitingTermination+0x54>)
 800392e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800393a:	f000 fbd7 	bl	80040ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f810 	bl	8003964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e1      	bne.n	8003910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200004b8 	.word	0x200004b8
 800395c:	200004e4 	.word	0x200004e4
 8003960:	200004cc 	.word	0x200004cc

08003964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	334c      	adds	r3, #76	@ 0x4c
 8003970:	4618      	mov	r0, r3
 8003972:	f000 ff93 	bl	800489c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd4b 	bl	8004420 <vPortFree>
				vPortFree( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fd48 	bl	8004420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003990:	e019      	b.n	80039c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003998:	2b01      	cmp	r3, #1
 800399a:	d103      	bne.n	80039a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fd3f 	bl	8004420 <vPortFree>
	}
 80039a2:	e010      	b.n	80039c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d00b      	beq.n	80039c6 <prvDeleteTCB+0x62>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60fb      	str	r3, [r7, #12]
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <prvDeleteTCB+0x5e>
	}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <prvResetNextTaskUnblockTime+0x40>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <prvResetNextTaskUnblockTime+0x14>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <prvResetNextTaskUnblockTime+0x16>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <prvResetNextTaskUnblockTime+0x44>)
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039f2:	e008      	b.n	8003a06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f4:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <prvResetNextTaskUnblockTime+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <prvResetNextTaskUnblockTime+0x44>)
 8003a04:	6013      	str	r3, [r2, #0]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	2000049c 	.word	0x2000049c
 8003a14:	20000504 	.word	0x20000504

08003a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <xTaskGetSchedulerState+0x34>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a26:	2301      	movs	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e008      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <xTaskGetSchedulerState+0x38>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a34:	2302      	movs	r3, #2
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e001      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a3e:	687b      	ldr	r3, [r7, #4]
	}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	200004f0 	.word	0x200004f0
 8003a50:	2000050c 	.word	0x2000050c

08003a54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d06e      	beq.n	8003b48 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6e:	4b39      	ldr	r3, [pc, #228]	@ (8003b54 <xTaskPriorityInherit+0x100>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d25e      	bcs.n	8003b36 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db06      	blt.n	8003a8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <xTaskPriorityInherit+0x100>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f1c3 0207 	rsb	r2, r3, #7
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6959      	ldr	r1, [r3, #20]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b58 <xTaskPriorityInherit+0x104>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	d101      	bne.n	8003aaa <xTaskPriorityInherit+0x56>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xTaskPriorityInherit+0x58>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d03a      	beq.n	8003b26 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fba5 	bl	8002204 <uxListRemove>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d115      	bne.n	8003aec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	4924      	ldr	r1, [pc, #144]	@ (8003b58 <xTaskPriorityInherit+0x104>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <xTaskPriorityInherit+0x98>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	2201      	movs	r2, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <xTaskPriorityInherit+0x108>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <xTaskPriorityInherit+0x108>)
 8003aea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <xTaskPriorityInherit+0x100>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <xTaskPriorityInherit+0x108>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <xTaskPriorityInherit+0x108>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <xTaskPriorityInherit+0x104>)
 8003b16:	441a      	add	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7fe fb15 	bl	800214e <vListInsertEnd>
 8003b24:	e004      	b.n	8003b30 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <xTaskPriorityInherit+0x100>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e008      	b.n	8003b48 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <xTaskPriorityInherit+0x100>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d201      	bcs.n	8003b48 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b48:	68fb      	ldr	r3, [r7, #12]
	}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200003e4 	.word	0x200003e4
 8003b58:	200003e8 	.word	0x200003e8
 8003b5c:	200004ec 	.word	0x200004ec

08003b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d070      	beq.n	8003c58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b76:	4b3b      	ldr	r3, [pc, #236]	@ (8003c64 <xTaskPriorityDisinherit+0x104>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d00b      	beq.n	8003b98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60fb      	str	r3, [r7, #12]
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60bb      	str	r3, [r7, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d044      	beq.n	8003c58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d140      	bne.n	8003c58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fb12 	bl	8002204 <uxListRemove>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d115      	bne.n	8003c12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bea:	491f      	ldr	r1, [pc, #124]	@ (8003c68 <xTaskPriorityDisinherit+0x108>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xTaskPriorityDisinherit+0xb2>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	2201      	movs	r2, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <xTaskPriorityDisinherit+0x10c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	4a17      	ldr	r2, [pc, #92]	@ (8003c6c <xTaskPriorityDisinherit+0x10c>)
 8003c10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	f1c3 0207 	rsb	r2, r3, #7
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c6c <xTaskPriorityDisinherit+0x10c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <xTaskPriorityDisinherit+0x10c>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <xTaskPriorityDisinherit+0x108>)
 8003c46:	441a      	add	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7fe fa7d 	bl	800214e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c58:	697b      	ldr	r3, [r7, #20]
	}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200003e4 	.word	0x200003e4
 8003c68:	200003e8 	.word	0x200003e8
 8003c6c:	200004ec 	.word	0x200004ec

08003c70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 808a 	beq.w	8003d9e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60fb      	str	r3, [r7, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d902      	bls.n	8003cba <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e002      	b.n	8003cc0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d069      	beq.n	8003d9e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d164      	bne.n	8003d9e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003cd4:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10b      	bne.n	8003cf6 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	60bb      	str	r3, [r7, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	e7fd      	b.n	8003cf2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db04      	blt.n	8003d14 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f1c3 0207 	rsb	r2, r3, #7
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6959      	ldr	r1, [r3, #20]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a22      	ldr	r2, [pc, #136]	@ (8003dac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003d24:	4413      	add	r3, r2
 8003d26:	4299      	cmp	r1, r3
 8003d28:	d101      	bne.n	8003d2e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d034      	beq.n	8003d9e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fa63 	bl	8002204 <uxListRemove>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d115      	bne.n	8003d70 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d48:	4918      	ldr	r1, [pc, #96]	@ (8003dac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43da      	mvns	r2, r3
 8003d66:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	4a10      	ldr	r2, [pc, #64]	@ (8003db0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003d6e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003db0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4a07      	ldr	r2, [pc, #28]	@ (8003dac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003d90:	441a      	add	r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fe f9d8 	bl	800214e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d9e:	bf00      	nop
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200003e4 	.word	0x200003e4
 8003dac:	200003e8 	.word	0x200003e8
 8003db0:	200004ec 	.word	0x200004ec

08003db4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003db8:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dc6:	3201      	adds	r2, #1
 8003dc8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003dca:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
	}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	200003e4 	.word	0x200003e4

08003ddc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003de6:	4b29      	ldr	r3, [pc, #164]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dec:	4b28      	ldr	r3, [pc, #160]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fa06 	bl	8002204 <uxListRemove>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	4b21      	ldr	r3, [pc, #132]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4013      	ands	r3, r2
 8003e12:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1c:	d10a      	bne.n	8003e34 <prvAddCurrentTaskToDelayedList+0x58>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e24:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	481a      	ldr	r0, [pc, #104]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e2e:	f7fe f98e 	bl	800214e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e32:	e026      	b.n	8003e82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e3c:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d209      	bcs.n	8003e60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e4c:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7fe f99b 	bl	8002194 <vListInsert>
}
 8003e5e:	e010      	b.n	8003e82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe f991 	bl	8002194 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d202      	bcs.n	8003e82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6013      	str	r3, [r2, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200004e8 	.word	0x200004e8
 8003e90:	200003e4 	.word	0x200003e4
 8003e94:	200004ec 	.word	0x200004ec
 8003e98:	200004d0 	.word	0x200004d0
 8003e9c:	200004a0 	.word	0x200004a0
 8003ea0:	2000049c 	.word	0x2000049c
 8003ea4:	20000504 	.word	0x20000504

08003ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b04      	subs	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b04      	subs	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b04      	subs	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ed8:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <pxPortInitialiseStack+0x54>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b14      	subs	r3, #20
 8003ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b20      	subs	r3, #32
 8003eee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	08003f01 	.word	0x08003f01

08003f00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <prvTaskExitError+0x54>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f12:	d00b      	beq.n	8003f2c <prvTaskExitError+0x2c>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	60fb      	str	r3, [r7, #12]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <prvTaskExitError+0x28>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60bb      	str	r3, [r7, #8]
}
 8003f3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f40:	bf00      	nop
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0fc      	beq.n	8003f42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	2000000c 	.word	0x2000000c
	...

08003f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <pxCurrentTCBConst2>)
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f6a:	f380 8809 	msr	PSP, r0
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8811 	msr	BASEPRI, r0
 8003f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f7e:	4770      	bx	lr

08003f80 <pxCurrentTCBConst2>:
 8003f80:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f88:	4806      	ldr	r0, [pc, #24]	@ (8003fa4 <prvPortStartFirstTask+0x1c>)
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f380 8808 	msr	MSP, r0
 8003f92:	b662      	cpsie	i
 8003f94:	b661      	cpsie	f
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	df00      	svc	0
 8003fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed08 	.word	0xe000ed08

08003fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fae:	4b32      	ldr	r3, [pc, #200]	@ (8004078 <xPortStartScheduler+0xd0>)
 8003fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	@ 0xff
 8003fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800407c <xPortStartScheduler+0xd4>)
 8003fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004080 <xPortStartScheduler+0xd8>)
 8003fd8:	2207      	movs	r2, #7
 8003fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fdc:	e009      	b.n	8003ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003fde:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <xPortStartScheduler+0xd8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <xPortStartScheduler+0xd8>)
 8003fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b80      	cmp	r3, #128	@ 0x80
 8003ffc:	d0ef      	beq.n	8003fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <xPortStartScheduler+0xd8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1c3 0307 	rsb	r3, r3, #7
 8004006:	2b04      	cmp	r3, #4
 8004008:	d00b      	beq.n	8004022 <xPortStartScheduler+0x7a>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60bb      	str	r3, [r7, #8]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004022:	4b17      	ldr	r3, [pc, #92]	@ (8004080 <xPortStartScheduler+0xd8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <xPortStartScheduler+0xd8>)
 800402a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800402c:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <xPortStartScheduler+0xd8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004034:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <xPortStartScheduler+0xd8>)
 8004036:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <xPortStartScheduler+0xdc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <xPortStartScheduler+0xdc>)
 8004046:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800404a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <xPortStartScheduler+0xdc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0c      	ldr	r2, [pc, #48]	@ (8004084 <xPortStartScheduler+0xdc>)
 8004052:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004056:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004058:	f000 f8b8 	bl	80041cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <xPortStartScheduler+0xe0>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004062:	f7ff ff91 	bl	8003f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004066:	f7ff fa85 	bl	8003574 <vTaskSwitchContext>
	prvTaskExitError();
 800406a:	f7ff ff49 	bl	8003f00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000e400 	.word	0xe000e400
 800407c:	20000510 	.word	0x20000510
 8004080:	20000514 	.word	0x20000514
 8004084:	e000ed20 	.word	0xe000ed20
 8004088:	2000000c 	.word	0x2000000c

0800408c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	607b      	str	r3, [r7, #4]
}
 80040a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040a6:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <vPortEnterCritical+0x58>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a0d      	ldr	r2, [pc, #52]	@ (80040e4 <vPortEnterCritical+0x58>)
 80040ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <vPortEnterCritical+0x58>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d110      	bne.n	80040da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <vPortEnterCritical+0x5c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <vPortEnterCritical+0x4e>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	603b      	str	r3, [r7, #0]
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <vPortEnterCritical+0x4a>
	}
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040f2:	4b12      	ldr	r3, [pc, #72]	@ (800413c <vPortExitCritical+0x50>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <vPortExitCritical+0x26>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	607b      	str	r3, [r7, #4]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <vPortExitCritical+0x50>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3b01      	subs	r3, #1
 8004118:	4a08      	ldr	r2, [pc, #32]	@ (800413c <vPortExitCritical+0x50>)
 800411a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800411c:	4b07      	ldr	r3, [pc, #28]	@ (800413c <vPortExitCritical+0x50>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <vPortExitCritical+0x44>
 8004124:	2300      	movs	r3, #0
 8004126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f383 8811 	msr	BASEPRI, r3
}
 800412e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c

08004140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004140:	f3ef 8009 	mrs	r0, PSP
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <pxCurrentTCBConst>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004150:	6010      	str	r0, [r2, #0]
 8004152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004156:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800415a:	f380 8811 	msr	BASEPRI, r0
 800415e:	f7ff fa09 	bl	8003574 <vTaskSwitchContext>
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004176:	f380 8809 	msr	PSP, r0
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	4770      	bx	lr

08004180 <pxCurrentTCBConst>:
 8004180:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
}
 80041a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041a2:	f7ff f929 	bl	80033f8 <xTaskIncrementTick>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <SysTick_Handler+0x40>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <vPortSetupTimerInterrupt+0x30>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <vPortSetupTimerInterrupt+0x34>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <vPortSetupTimerInterrupt+0x38>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <vPortSetupTimerInterrupt+0x3c>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	4a08      	ldr	r2, [pc, #32]	@ (800420c <vPortSetupTimerInterrupt+0x40>)
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ee:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <vPortSetupTimerInterrupt+0x30>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	e000e010 	.word	0xe000e010
 8004200:	e000e018 	.word	0xe000e018
 8004204:	20000000 	.word	0x20000000
 8004208:	10624dd3 	.word	0x10624dd3
 800420c:	e000e014 	.word	0xe000e014

08004210 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004216:	f3ef 8305 	mrs	r3, IPSR
 800421a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	d915      	bls.n	800424e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <vPortValidateInterruptPriority+0x70>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <vPortValidateInterruptPriority+0x74>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	7afa      	ldrb	r2, [r7, #11]
 8004232:	429a      	cmp	r2, r3
 8004234:	d20b      	bcs.n	800424e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	607b      	str	r3, [r7, #4]
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	e7fd      	b.n	800424a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800424e:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <vPortValidateInterruptPriority+0x78>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <vPortValidateInterruptPriority+0x7c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d90b      	bls.n	8004276 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	603b      	str	r3, [r7, #0]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <vPortValidateInterruptPriority+0x62>
	}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	e000e3f0 	.word	0xe000e3f0
 8004284:	20000510 	.word	0x20000510
 8004288:	e000ed0c 	.word	0xe000ed0c
 800428c:	20000514 	.word	0x20000514

08004290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	@ 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800429c:	f7ff f800 	bl	80032a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042a0:	4b5a      	ldr	r3, [pc, #360]	@ (800440c <pvPortMalloc+0x17c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042a8:	f000 f916 	bl	80044d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042ac:	4b58      	ldr	r3, [pc, #352]	@ (8004410 <pvPortMalloc+0x180>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8090 	bne.w	80043da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d015      	beq.n	80042fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f023 0307 	bic.w	r3, r3, #7
 80042d8:	3308      	adds	r3, #8
 80042da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <pvPortMalloc+0x6e>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	617b      	str	r3, [r7, #20]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d06a      	beq.n	80043da <pvPortMalloc+0x14a>
 8004304:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <pvPortMalloc+0x184>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d865      	bhi.n	80043da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800430e:	4b42      	ldr	r3, [pc, #264]	@ (8004418 <pvPortMalloc+0x188>)
 8004310:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004312:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <pvPortMalloc+0x188>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004318:	e004      	b.n	8004324 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d903      	bls.n	8004336 <pvPortMalloc+0xa6>
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f1      	bne.n	800431a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004336:	4b35      	ldr	r3, [pc, #212]	@ (800440c <pvPortMalloc+0x17c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	429a      	cmp	r2, r3
 800433e:	d04c      	beq.n	80043da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	4413      	add	r3, r2
 8004348:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	2308      	movs	r3, #8
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	429a      	cmp	r2, r3
 8004360:	d920      	bls.n	80043a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <pvPortMalloc+0xfc>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	613b      	str	r3, [r7, #16]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f000 f8fc 	bl	800459c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <pvPortMalloc+0x184>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <pvPortMalloc+0x184>)
 80043b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043b2:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <pvPortMalloc+0x184>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b19      	ldr	r3, [pc, #100]	@ (800441c <pvPortMalloc+0x18c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d203      	bcs.n	80043c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <pvPortMalloc+0x184>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	@ (800441c <pvPortMalloc+0x18c>)
 80043c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <pvPortMalloc+0x180>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043da:	f7fe ff6f 	bl	80032bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <pvPortMalloc+0x170>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	e7fd      	b.n	80043fc <pvPortMalloc+0x16c>
	return pvReturn;
 8004400:	69fb      	ldr	r3, [r7, #28]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3728      	adds	r7, #40	@ 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20001520 	.word	0x20001520
 8004410:	2000152c 	.word	0x2000152c
 8004414:	20001524 	.word	0x20001524
 8004418:	20001518 	.word	0x20001518
 800441c:	20001528 	.word	0x20001528

08004420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d04a      	beq.n	80044c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004432:	2308      	movs	r3, #8
 8004434:	425b      	negs	r3, r3
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4413      	add	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b22      	ldr	r3, [pc, #136]	@ (80044d0 <vPortFree+0xb0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <vPortFree+0x46>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <vPortFree+0x66>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60bb      	str	r3, [r7, #8]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <vPortFree+0xb0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d019      	beq.n	80044c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d115      	bne.n	80044c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <vPortFree+0xb0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	401a      	ands	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044ac:	f7fe fef8 	bl	80032a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <vPortFree+0xb4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4413      	add	r3, r2
 80044ba:	4a06      	ldr	r2, [pc, #24]	@ (80044d4 <vPortFree+0xb4>)
 80044bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044be:	6938      	ldr	r0, [r7, #16]
 80044c0:	f000 f86c 	bl	800459c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80044c4:	f7fe fefa 	bl	80032bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	2000152c 	.word	0x2000152c
 80044d4:	20001524 	.word	0x20001524

080044d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044e4:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <prvHeapInit+0xac>)
 80044e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <prvHeapInit+0xac>)
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <prvHeapInit+0xb0>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004516:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <prvHeapInit+0xb0>)
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004524:	2208      	movs	r2, #8
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a15      	ldr	r2, [pc, #84]	@ (800458c <prvHeapInit+0xb4>)
 8004538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <prvHeapInit+0xb4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <prvHeapInit+0xb4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	1ad2      	subs	r2, r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <prvHeapInit+0xb4>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <prvHeapInit+0xb8>)
 8004566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <prvHeapInit+0xbc>)
 800456e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <prvHeapInit+0xc0>)
 8004572:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000518 	.word	0x20000518
 8004588:	20001518 	.word	0x20001518
 800458c:	20001520 	.word	0x20001520
 8004590:	20001528 	.word	0x20001528
 8004594:	20001524 	.word	0x20001524
 8004598:	2000152c 	.word	0x2000152c

0800459c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045a4:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <prvInsertBlockIntoFreeList+0xa8>)
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e002      	b.n	80045b0 <prvInsertBlockIntoFreeList+0x14>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d8f7      	bhi.n	80045aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d108      	bne.n	80045de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d118      	bne.n	8004624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <prvInsertBlockIntoFreeList+0xac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d00d      	beq.n	800461a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e008      	b.n	800462c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <prvInsertBlockIntoFreeList+0xac>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e003      	b.n	800462c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d002      	beq.n	800463a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	20001518 	.word	0x20001518
 8004648:	20001520 	.word	0x20001520

0800464c <std>:
 800464c:	2300      	movs	r3, #0
 800464e:	b510      	push	{r4, lr}
 8004650:	4604      	mov	r4, r0
 8004652:	e9c0 3300 	strd	r3, r3, [r0]
 8004656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800465a:	6083      	str	r3, [r0, #8]
 800465c:	8181      	strh	r1, [r0, #12]
 800465e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004660:	81c2      	strh	r2, [r0, #14]
 8004662:	6183      	str	r3, [r0, #24]
 8004664:	4619      	mov	r1, r3
 8004666:	2208      	movs	r2, #8
 8004668:	305c      	adds	r0, #92	@ 0x5c
 800466a:	f000 f90f 	bl	800488c <memset>
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <std+0x58>)
 8004670:	6224      	str	r4, [r4, #32]
 8004672:	6263      	str	r3, [r4, #36]	@ 0x24
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <std+0x5c>)
 8004676:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <std+0x60>)
 800467a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <std+0x64>)
 800467e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <std+0x68>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d006      	beq.n	8004694 <std+0x48>
 8004686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800468a:	4294      	cmp	r4, r2
 800468c:	d002      	beq.n	8004694 <std+0x48>
 800468e:	33d0      	adds	r3, #208	@ 0xd0
 8004690:	429c      	cmp	r4, r3
 8004692:	d105      	bne.n	80046a0 <std+0x54>
 8004694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469c:	f000 b97e 	b.w	800499c <__retarget_lock_init_recursive>
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	bf00      	nop
 80046a4:	08004cfd 	.word	0x08004cfd
 80046a8:	08004d1f 	.word	0x08004d1f
 80046ac:	08004d57 	.word	0x08004d57
 80046b0:	08004d7b 	.word	0x08004d7b
 80046b4:	20001530 	.word	0x20001530

080046b8 <stdio_exit_handler>:
 80046b8:	4a02      	ldr	r2, [pc, #8]	@ (80046c4 <stdio_exit_handler+0xc>)
 80046ba:	4903      	ldr	r1, [pc, #12]	@ (80046c8 <stdio_exit_handler+0x10>)
 80046bc:	4803      	ldr	r0, [pc, #12]	@ (80046cc <stdio_exit_handler+0x14>)
 80046be:	f000 b869 	b.w	8004794 <_fwalk_sglue>
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010
 80046c8:	08004c95 	.word	0x08004c95
 80046cc:	20000020 	.word	0x20000020

080046d0 <cleanup_stdio>:
 80046d0:	6841      	ldr	r1, [r0, #4]
 80046d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <cleanup_stdio+0x34>)
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4299      	cmp	r1, r3
 80046d8:	4604      	mov	r4, r0
 80046da:	d001      	beq.n	80046e0 <cleanup_stdio+0x10>
 80046dc:	f000 fada 	bl	8004c94 <_fflush_r>
 80046e0:	68a1      	ldr	r1, [r4, #8]
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <cleanup_stdio+0x38>)
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <cleanup_stdio+0x1e>
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 fad3 	bl	8004c94 <_fflush_r>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <cleanup_stdio+0x3c>)
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d004      	beq.n	8004700 <cleanup_stdio+0x30>
 80046f6:	4620      	mov	r0, r4
 80046f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fc:	f000 baca 	b.w	8004c94 <_fflush_r>
 8004700:	bd10      	pop	{r4, pc}
 8004702:	bf00      	nop
 8004704:	20001530 	.word	0x20001530
 8004708:	20001598 	.word	0x20001598
 800470c:	20001600 	.word	0x20001600

08004710 <global_stdio_init.part.0>:
 8004710:	b510      	push	{r4, lr}
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <global_stdio_init.part.0+0x30>)
 8004714:	4c0b      	ldr	r4, [pc, #44]	@ (8004744 <global_stdio_init.part.0+0x34>)
 8004716:	4a0c      	ldr	r2, [pc, #48]	@ (8004748 <global_stdio_init.part.0+0x38>)
 8004718:	4620      	mov	r0, r4
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	2104      	movs	r1, #4
 800471e:	2200      	movs	r2, #0
 8004720:	f7ff ff94 	bl	800464c <std>
 8004724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004728:	2201      	movs	r2, #1
 800472a:	2109      	movs	r1, #9
 800472c:	f7ff ff8e 	bl	800464c <std>
 8004730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004734:	2202      	movs	r2, #2
 8004736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800473a:	2112      	movs	r1, #18
 800473c:	f7ff bf86 	b.w	800464c <std>
 8004740:	20001668 	.word	0x20001668
 8004744:	20001530 	.word	0x20001530
 8004748:	080046b9 	.word	0x080046b9

0800474c <__sfp_lock_acquire>:
 800474c:	4801      	ldr	r0, [pc, #4]	@ (8004754 <__sfp_lock_acquire+0x8>)
 800474e:	f000 b926 	b.w	800499e <__retarget_lock_acquire_recursive>
 8004752:	bf00      	nop
 8004754:	20001671 	.word	0x20001671

08004758 <__sfp_lock_release>:
 8004758:	4801      	ldr	r0, [pc, #4]	@ (8004760 <__sfp_lock_release+0x8>)
 800475a:	f000 b921 	b.w	80049a0 <__retarget_lock_release_recursive>
 800475e:	bf00      	nop
 8004760:	20001671 	.word	0x20001671

08004764 <__sinit>:
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
 8004768:	f7ff fff0 	bl	800474c <__sfp_lock_acquire>
 800476c:	6a23      	ldr	r3, [r4, #32]
 800476e:	b11b      	cbz	r3, 8004778 <__sinit+0x14>
 8004770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004774:	f7ff bff0 	b.w	8004758 <__sfp_lock_release>
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <__sinit+0x28>)
 800477a:	6223      	str	r3, [r4, #32]
 800477c:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <__sinit+0x2c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f5      	bne.n	8004770 <__sinit+0xc>
 8004784:	f7ff ffc4 	bl	8004710 <global_stdio_init.part.0>
 8004788:	e7f2      	b.n	8004770 <__sinit+0xc>
 800478a:	bf00      	nop
 800478c:	080046d1 	.word	0x080046d1
 8004790:	20001668 	.word	0x20001668

08004794 <_fwalk_sglue>:
 8004794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004798:	4607      	mov	r7, r0
 800479a:	4688      	mov	r8, r1
 800479c:	4614      	mov	r4, r2
 800479e:	2600      	movs	r6, #0
 80047a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a4:	f1b9 0901 	subs.w	r9, r9, #1
 80047a8:	d505      	bpl.n	80047b6 <_fwalk_sglue+0x22>
 80047aa:	6824      	ldr	r4, [r4, #0]
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	d1f7      	bne.n	80047a0 <_fwalk_sglue+0xc>
 80047b0:	4630      	mov	r0, r6
 80047b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b6:	89ab      	ldrh	r3, [r5, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d907      	bls.n	80047cc <_fwalk_sglue+0x38>
 80047bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047c0:	3301      	adds	r3, #1
 80047c2:	d003      	beq.n	80047cc <_fwalk_sglue+0x38>
 80047c4:	4629      	mov	r1, r5
 80047c6:	4638      	mov	r0, r7
 80047c8:	47c0      	blx	r8
 80047ca:	4306      	orrs	r6, r0
 80047cc:	3568      	adds	r5, #104	@ 0x68
 80047ce:	e7e9      	b.n	80047a4 <_fwalk_sglue+0x10>

080047d0 <_puts_r>:
 80047d0:	6a03      	ldr	r3, [r0, #32]
 80047d2:	b570      	push	{r4, r5, r6, lr}
 80047d4:	4605      	mov	r5, r0
 80047d6:	460e      	mov	r6, r1
 80047d8:	6884      	ldr	r4, [r0, #8]
 80047da:	b90b      	cbnz	r3, 80047e0 <_puts_r+0x10>
 80047dc:	f7ff ffc2 	bl	8004764 <__sinit>
 80047e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d405      	bmi.n	80047f2 <_puts_r+0x22>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	0598      	lsls	r0, r3, #22
 80047ea:	d402      	bmi.n	80047f2 <_puts_r+0x22>
 80047ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ee:	f000 f8d6 	bl	800499e <__retarget_lock_acquire_recursive>
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	0719      	lsls	r1, r3, #28
 80047f6:	d502      	bpl.n	80047fe <_puts_r+0x2e>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d135      	bne.n	800486a <_puts_r+0x9a>
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 fafd 	bl	8004e00 <__swsetup_r>
 8004806:	b380      	cbz	r0, 800486a <_puts_r+0x9a>
 8004808:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800480c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	d405      	bmi.n	800481e <_puts_r+0x4e>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	059b      	lsls	r3, r3, #22
 8004816:	d402      	bmi.n	800481e <_puts_r+0x4e>
 8004818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800481a:	f000 f8c1 	bl	80049a0 <__retarget_lock_release_recursive>
 800481e:	4628      	mov	r0, r5
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	2b00      	cmp	r3, #0
 8004824:	da04      	bge.n	8004830 <_puts_r+0x60>
 8004826:	69a2      	ldr	r2, [r4, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	dc17      	bgt.n	800485c <_puts_r+0x8c>
 800482c:	290a      	cmp	r1, #10
 800482e:	d015      	beq.n	800485c <_puts_r+0x8c>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	7019      	strb	r1, [r3, #0]
 8004838:	68a3      	ldr	r3, [r4, #8]
 800483a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800483e:	3b01      	subs	r3, #1
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	2900      	cmp	r1, #0
 8004844:	d1ed      	bne.n	8004822 <_puts_r+0x52>
 8004846:	2b00      	cmp	r3, #0
 8004848:	da11      	bge.n	800486e <_puts_r+0x9e>
 800484a:	4622      	mov	r2, r4
 800484c:	210a      	movs	r1, #10
 800484e:	4628      	mov	r0, r5
 8004850:	f000 fa97 	bl	8004d82 <__swbuf_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d0d7      	beq.n	8004808 <_puts_r+0x38>
 8004858:	250a      	movs	r5, #10
 800485a:	e7d7      	b.n	800480c <_puts_r+0x3c>
 800485c:	4622      	mov	r2, r4
 800485e:	4628      	mov	r0, r5
 8004860:	f000 fa8f 	bl	8004d82 <__swbuf_r>
 8004864:	3001      	adds	r0, #1
 8004866:	d1e7      	bne.n	8004838 <_puts_r+0x68>
 8004868:	e7ce      	b.n	8004808 <_puts_r+0x38>
 800486a:	3e01      	subs	r6, #1
 800486c:	e7e4      	b.n	8004838 <_puts_r+0x68>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	6022      	str	r2, [r4, #0]
 8004874:	220a      	movs	r2, #10
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e7ee      	b.n	8004858 <_puts_r+0x88>
	...

0800487c <puts>:
 800487c:	4b02      	ldr	r3, [pc, #8]	@ (8004888 <puts+0xc>)
 800487e:	4601      	mov	r1, r0
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f7ff bfa5 	b.w	80047d0 <_puts_r>
 8004886:	bf00      	nop
 8004888:	2000001c 	.word	0x2000001c

0800488c <memset>:
 800488c:	4603      	mov	r3, r0
 800488e:	4402      	add	r2, r0
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	f803 1b01 	strb.w	r1, [r3], #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <_reclaim_reent>:
 800489c:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <_reclaim_reent+0xa8>)
 800489e:	b570      	push	{r4, r5, r6, lr}
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4604      	mov	r4, r0
 80048a4:	4283      	cmp	r3, r0
 80048a6:	d04b      	beq.n	8004940 <_reclaim_reent+0xa4>
 80048a8:	69c3      	ldr	r3, [r0, #28]
 80048aa:	b1ab      	cbz	r3, 80048d8 <_reclaim_reent+0x3c>
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	b16b      	cbz	r3, 80048cc <_reclaim_reent+0x30>
 80048b0:	2500      	movs	r5, #0
 80048b2:	69e3      	ldr	r3, [r4, #28]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	5959      	ldr	r1, [r3, r5]
 80048b8:	2900      	cmp	r1, #0
 80048ba:	d13b      	bne.n	8004934 <_reclaim_reent+0x98>
 80048bc:	3504      	adds	r5, #4
 80048be:	2d80      	cmp	r5, #128	@ 0x80
 80048c0:	d1f7      	bne.n	80048b2 <_reclaim_reent+0x16>
 80048c2:	69e3      	ldr	r3, [r4, #28]
 80048c4:	4620      	mov	r0, r4
 80048c6:	68d9      	ldr	r1, [r3, #12]
 80048c8:	f000 f87a 	bl	80049c0 <_free_r>
 80048cc:	69e3      	ldr	r3, [r4, #28]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	b111      	cbz	r1, 80048d8 <_reclaim_reent+0x3c>
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 f874 	bl	80049c0 <_free_r>
 80048d8:	6961      	ldr	r1, [r4, #20]
 80048da:	b111      	cbz	r1, 80048e2 <_reclaim_reent+0x46>
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 f86f 	bl	80049c0 <_free_r>
 80048e2:	69e1      	ldr	r1, [r4, #28]
 80048e4:	b111      	cbz	r1, 80048ec <_reclaim_reent+0x50>
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f86a 	bl	80049c0 <_free_r>
 80048ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80048ee:	b111      	cbz	r1, 80048f6 <_reclaim_reent+0x5a>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f865 	bl	80049c0 <_free_r>
 80048f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048f8:	b111      	cbz	r1, 8004900 <_reclaim_reent+0x64>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f860 	bl	80049c0 <_free_r>
 8004900:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004902:	b111      	cbz	r1, 800490a <_reclaim_reent+0x6e>
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f85b 	bl	80049c0 <_free_r>
 800490a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800490c:	b111      	cbz	r1, 8004914 <_reclaim_reent+0x78>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f856 	bl	80049c0 <_free_r>
 8004914:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004916:	b111      	cbz	r1, 800491e <_reclaim_reent+0x82>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 f851 	bl	80049c0 <_free_r>
 800491e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004920:	b111      	cbz	r1, 8004928 <_reclaim_reent+0x8c>
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f84c 	bl	80049c0 <_free_r>
 8004928:	6a23      	ldr	r3, [r4, #32]
 800492a:	b14b      	cbz	r3, 8004940 <_reclaim_reent+0xa4>
 800492c:	4620      	mov	r0, r4
 800492e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004932:	4718      	bx	r3
 8004934:	680e      	ldr	r6, [r1, #0]
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f842 	bl	80049c0 <_free_r>
 800493c:	4631      	mov	r1, r6
 800493e:	e7bb      	b.n	80048b8 <_reclaim_reent+0x1c>
 8004940:	bd70      	pop	{r4, r5, r6, pc}
 8004942:	bf00      	nop
 8004944:	2000001c 	.word	0x2000001c

08004948 <__errno>:
 8004948:	4b01      	ldr	r3, [pc, #4]	@ (8004950 <__errno+0x8>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	2000001c 	.word	0x2000001c

08004954 <__libc_init_array>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	2600      	movs	r6, #0
 8004958:	4d0c      	ldr	r5, [pc, #48]	@ (800498c <__libc_init_array+0x38>)
 800495a:	4c0d      	ldr	r4, [pc, #52]	@ (8004990 <__libc_init_array+0x3c>)
 800495c:	1b64      	subs	r4, r4, r5
 800495e:	10a4      	asrs	r4, r4, #2
 8004960:	42a6      	cmp	r6, r4
 8004962:	d109      	bne.n	8004978 <__libc_init_array+0x24>
 8004964:	f000 fb7c 	bl	8005060 <_init>
 8004968:	2600      	movs	r6, #0
 800496a:	4d0a      	ldr	r5, [pc, #40]	@ (8004994 <__libc_init_array+0x40>)
 800496c:	4c0a      	ldr	r4, [pc, #40]	@ (8004998 <__libc_init_array+0x44>)
 800496e:	1b64      	subs	r4, r4, r5
 8004970:	10a4      	asrs	r4, r4, #2
 8004972:	42a6      	cmp	r6, r4
 8004974:	d105      	bne.n	8004982 <__libc_init_array+0x2e>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	f855 3b04 	ldr.w	r3, [r5], #4
 800497c:	4798      	blx	r3
 800497e:	3601      	adds	r6, #1
 8004980:	e7ee      	b.n	8004960 <__libc_init_array+0xc>
 8004982:	f855 3b04 	ldr.w	r3, [r5], #4
 8004986:	4798      	blx	r3
 8004988:	3601      	adds	r6, #1
 800498a:	e7f2      	b.n	8004972 <__libc_init_array+0x1e>
 800498c:	0800536c 	.word	0x0800536c
 8004990:	0800536c 	.word	0x0800536c
 8004994:	0800536c 	.word	0x0800536c
 8004998:	08005370 	.word	0x08005370

0800499c <__retarget_lock_init_recursive>:
 800499c:	4770      	bx	lr

0800499e <__retarget_lock_acquire_recursive>:
 800499e:	4770      	bx	lr

080049a0 <__retarget_lock_release_recursive>:
 80049a0:	4770      	bx	lr

080049a2 <memcpy>:
 80049a2:	440a      	add	r2, r1
 80049a4:	4291      	cmp	r1, r2
 80049a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80049aa:	d100      	bne.n	80049ae <memcpy+0xc>
 80049ac:	4770      	bx	lr
 80049ae:	b510      	push	{r4, lr}
 80049b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b4:	4291      	cmp	r1, r2
 80049b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ba:	d1f9      	bne.n	80049b0 <memcpy+0xe>
 80049bc:	bd10      	pop	{r4, pc}
	...

080049c0 <_free_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4605      	mov	r5, r0
 80049c4:	2900      	cmp	r1, #0
 80049c6:	d040      	beq.n	8004a4a <_free_r+0x8a>
 80049c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049cc:	1f0c      	subs	r4, r1, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfb8      	it	lt
 80049d2:	18e4      	addlt	r4, r4, r3
 80049d4:	f000 f986 	bl	8004ce4 <__malloc_lock>
 80049d8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a4c <_free_r+0x8c>)
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	b933      	cbnz	r3, 80049ec <_free_r+0x2c>
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	6014      	str	r4, [r2, #0]
 80049e2:	4628      	mov	r0, r5
 80049e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e8:	f000 b982 	b.w	8004cf0 <__malloc_unlock>
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d908      	bls.n	8004a02 <_free_r+0x42>
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	1821      	adds	r1, r4, r0
 80049f4:	428b      	cmp	r3, r1
 80049f6:	bf01      	itttt	eq
 80049f8:	6819      	ldreq	r1, [r3, #0]
 80049fa:	685b      	ldreq	r3, [r3, #4]
 80049fc:	1809      	addeq	r1, r1, r0
 80049fe:	6021      	streq	r1, [r4, #0]
 8004a00:	e7ed      	b.n	80049de <_free_r+0x1e>
 8004a02:	461a      	mov	r2, r3
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	b10b      	cbz	r3, 8004a0c <_free_r+0x4c>
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	d9fa      	bls.n	8004a02 <_free_r+0x42>
 8004a0c:	6811      	ldr	r1, [r2, #0]
 8004a0e:	1850      	adds	r0, r2, r1
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d10b      	bne.n	8004a2c <_free_r+0x6c>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	4401      	add	r1, r0
 8004a18:	1850      	adds	r0, r2, r1
 8004a1a:	4283      	cmp	r3, r0
 8004a1c:	6011      	str	r1, [r2, #0]
 8004a1e:	d1e0      	bne.n	80049e2 <_free_r+0x22>
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4408      	add	r0, r1
 8004a26:	6010      	str	r0, [r2, #0]
 8004a28:	6053      	str	r3, [r2, #4]
 8004a2a:	e7da      	b.n	80049e2 <_free_r+0x22>
 8004a2c:	d902      	bls.n	8004a34 <_free_r+0x74>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	e7d6      	b.n	80049e2 <_free_r+0x22>
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	1821      	adds	r1, r4, r0
 8004a38:	428b      	cmp	r3, r1
 8004a3a:	bf01      	itttt	eq
 8004a3c:	6819      	ldreq	r1, [r3, #0]
 8004a3e:	685b      	ldreq	r3, [r3, #4]
 8004a40:	1809      	addeq	r1, r1, r0
 8004a42:	6021      	streq	r1, [r4, #0]
 8004a44:	6063      	str	r3, [r4, #4]
 8004a46:	6054      	str	r4, [r2, #4]
 8004a48:	e7cb      	b.n	80049e2 <_free_r+0x22>
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20001678 	.word	0x20001678

08004a50 <sbrk_aligned>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	4e0f      	ldr	r6, [pc, #60]	@ (8004a90 <sbrk_aligned+0x40>)
 8004a54:	460c      	mov	r4, r1
 8004a56:	6831      	ldr	r1, [r6, #0]
 8004a58:	4605      	mov	r5, r0
 8004a5a:	b911      	cbnz	r1, 8004a62 <sbrk_aligned+0x12>
 8004a5c:	f000 fade 	bl	800501c <_sbrk_r>
 8004a60:	6030      	str	r0, [r6, #0]
 8004a62:	4621      	mov	r1, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	f000 fad9 	bl	800501c <_sbrk_r>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	d103      	bne.n	8004a76 <sbrk_aligned+0x26>
 8004a6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a72:	4620      	mov	r0, r4
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
 8004a76:	1cc4      	adds	r4, r0, #3
 8004a78:	f024 0403 	bic.w	r4, r4, #3
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d0f8      	beq.n	8004a72 <sbrk_aligned+0x22>
 8004a80:	1a21      	subs	r1, r4, r0
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 faca 	bl	800501c <_sbrk_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1f2      	bne.n	8004a72 <sbrk_aligned+0x22>
 8004a8c:	e7ef      	b.n	8004a6e <sbrk_aligned+0x1e>
 8004a8e:	bf00      	nop
 8004a90:	20001674 	.word	0x20001674

08004a94 <_malloc_r>:
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	1ccd      	adds	r5, r1, #3
 8004a9a:	f025 0503 	bic.w	r5, r5, #3
 8004a9e:	3508      	adds	r5, #8
 8004aa0:	2d0c      	cmp	r5, #12
 8004aa2:	bf38      	it	cc
 8004aa4:	250c      	movcc	r5, #12
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	db01      	blt.n	8004ab0 <_malloc_r+0x1c>
 8004aac:	42a9      	cmp	r1, r5
 8004aae:	d904      	bls.n	8004aba <_malloc_r+0x26>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b90 <_malloc_r+0xfc>
 8004abe:	f000 f911 	bl	8004ce4 <__malloc_lock>
 8004ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	bb44      	cbnz	r4, 8004b1c <_malloc_r+0x88>
 8004aca:	4629      	mov	r1, r5
 8004acc:	4630      	mov	r0, r6
 8004ace:	f7ff ffbf 	bl	8004a50 <sbrk_aligned>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	d158      	bne.n	8004b8a <_malloc_r+0xf6>
 8004ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8004adc:	4627      	mov	r7, r4
 8004ade:	2f00      	cmp	r7, #0
 8004ae0:	d143      	bne.n	8004b6a <_malloc_r+0xd6>
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	d04b      	beq.n	8004b7e <_malloc_r+0xea>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	4639      	mov	r1, r7
 8004aea:	4630      	mov	r0, r6
 8004aec:	eb04 0903 	add.w	r9, r4, r3
 8004af0:	f000 fa94 	bl	800501c <_sbrk_r>
 8004af4:	4581      	cmp	r9, r0
 8004af6:	d142      	bne.n	8004b7e <_malloc_r+0xea>
 8004af8:	6821      	ldr	r1, [r4, #0]
 8004afa:	4630      	mov	r0, r6
 8004afc:	1a6d      	subs	r5, r5, r1
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7ff ffa6 	bl	8004a50 <sbrk_aligned>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d03a      	beq.n	8004b7e <_malloc_r+0xea>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	442b      	add	r3, r5
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	bb62      	cbnz	r2, 8004b70 <_malloc_r+0xdc>
 8004b16:	f8c8 7000 	str.w	r7, [r8]
 8004b1a:	e00f      	b.n	8004b3c <_malloc_r+0xa8>
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	1b52      	subs	r2, r2, r5
 8004b20:	d420      	bmi.n	8004b64 <_malloc_r+0xd0>
 8004b22:	2a0b      	cmp	r2, #11
 8004b24:	d917      	bls.n	8004b56 <_malloc_r+0xc2>
 8004b26:	1961      	adds	r1, r4, r5
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	6025      	str	r5, [r4, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	6059      	strne	r1, [r3, #4]
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	bf08      	it	eq
 8004b34:	f8c8 1000 	streq.w	r1, [r8]
 8004b38:	5162      	str	r2, [r4, r5]
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f8d7 	bl	8004cf0 <__malloc_unlock>
 8004b42:	f104 000b 	add.w	r0, r4, #11
 8004b46:	1d23      	adds	r3, r4, #4
 8004b48:	f020 0007 	bic.w	r0, r0, #7
 8004b4c:	1ac2      	subs	r2, r0, r3
 8004b4e:	bf1c      	itt	ne
 8004b50:	1a1b      	subne	r3, r3, r0
 8004b52:	50a3      	strne	r3, [r4, r2]
 8004b54:	e7af      	b.n	8004ab6 <_malloc_r+0x22>
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	bf0c      	ite	eq
 8004b5c:	f8c8 2000 	streq.w	r2, [r8]
 8004b60:	605a      	strne	r2, [r3, #4]
 8004b62:	e7eb      	b.n	8004b3c <_malloc_r+0xa8>
 8004b64:	4623      	mov	r3, r4
 8004b66:	6864      	ldr	r4, [r4, #4]
 8004b68:	e7ae      	b.n	8004ac8 <_malloc_r+0x34>
 8004b6a:	463c      	mov	r4, r7
 8004b6c:	687f      	ldr	r7, [r7, #4]
 8004b6e:	e7b6      	b.n	8004ade <_malloc_r+0x4a>
 8004b70:	461a      	mov	r2, r3
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d1fb      	bne.n	8004b70 <_malloc_r+0xdc>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	6053      	str	r3, [r2, #4]
 8004b7c:	e7de      	b.n	8004b3c <_malloc_r+0xa8>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	4630      	mov	r0, r6
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	f000 f8b4 	bl	8004cf0 <__malloc_unlock>
 8004b88:	e794      	b.n	8004ab4 <_malloc_r+0x20>
 8004b8a:	6005      	str	r5, [r0, #0]
 8004b8c:	e7d6      	b.n	8004b3c <_malloc_r+0xa8>
 8004b8e:	bf00      	nop
 8004b90:	20001678 	.word	0x20001678

08004b94 <__sflush_r>:
 8004b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	0716      	lsls	r6, r2, #28
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	d454      	bmi.n	8004c4c <__sflush_r+0xb8>
 8004ba2:	684b      	ldr	r3, [r1, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dc02      	bgt.n	8004bae <__sflush_r+0x1a>
 8004ba8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd48      	ble.n	8004c40 <__sflush_r+0xac>
 8004bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bb0:	2e00      	cmp	r6, #0
 8004bb2:	d045      	beq.n	8004c40 <__sflush_r+0xac>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bba:	682f      	ldr	r7, [r5, #0]
 8004bbc:	6a21      	ldr	r1, [r4, #32]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	d030      	beq.n	8004c24 <__sflush_r+0x90>
 8004bc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	0759      	lsls	r1, r3, #29
 8004bc8:	d505      	bpl.n	8004bd6 <__sflush_r+0x42>
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bd0:	b10b      	cbz	r3, 8004bd6 <__sflush_r+0x42>
 8004bd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4628      	mov	r0, r5
 8004bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bdc:	6a21      	ldr	r1, [r4, #32]
 8004bde:	47b0      	blx	r6
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	d106      	bne.n	8004bf4 <__sflush_r+0x60>
 8004be6:	6829      	ldr	r1, [r5, #0]
 8004be8:	291d      	cmp	r1, #29
 8004bea:	d82b      	bhi.n	8004c44 <__sflush_r+0xb0>
 8004bec:	4a28      	ldr	r2, [pc, #160]	@ (8004c90 <__sflush_r+0xfc>)
 8004bee:	410a      	asrs	r2, r1
 8004bf0:	07d6      	lsls	r6, r2, #31
 8004bf2:	d427      	bmi.n	8004c44 <__sflush_r+0xb0>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	6062      	str	r2, [r4, #4]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	04d9      	lsls	r1, r3, #19
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	d504      	bpl.n	8004c0a <__sflush_r+0x76>
 8004c00:	1c42      	adds	r2, r0, #1
 8004c02:	d101      	bne.n	8004c08 <__sflush_r+0x74>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b903      	cbnz	r3, 8004c0a <__sflush_r+0x76>
 8004c08:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c0c:	602f      	str	r7, [r5, #0]
 8004c0e:	b1b9      	cbz	r1, 8004c40 <__sflush_r+0xac>
 8004c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d002      	beq.n	8004c1e <__sflush_r+0x8a>
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7ff fed1 	bl	80049c0 <_free_r>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c22:	e00d      	b.n	8004c40 <__sflush_r+0xac>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	1c50      	adds	r0, r2, #1
 8004c2e:	d1c9      	bne.n	8004bc4 <__sflush_r+0x30>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0c6      	beq.n	8004bc4 <__sflush_r+0x30>
 8004c36:	2b1d      	cmp	r3, #29
 8004c38:	d001      	beq.n	8004c3e <__sflush_r+0xaa>
 8004c3a:	2b16      	cmp	r3, #22
 8004c3c:	d11d      	bne.n	8004c7a <__sflush_r+0xe6>
 8004c3e:	602f      	str	r7, [r5, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e021      	b.n	8004c88 <__sflush_r+0xf4>
 8004c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c48:	b21b      	sxth	r3, r3
 8004c4a:	e01a      	b.n	8004c82 <__sflush_r+0xee>
 8004c4c:	690f      	ldr	r7, [r1, #16]
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d0f6      	beq.n	8004c40 <__sflush_r+0xac>
 8004c52:	0793      	lsls	r3, r2, #30
 8004c54:	bf18      	it	ne
 8004c56:	2300      	movne	r3, #0
 8004c58:	680e      	ldr	r6, [r1, #0]
 8004c5a:	bf08      	it	eq
 8004c5c:	694b      	ldreq	r3, [r1, #20]
 8004c5e:	1bf6      	subs	r6, r6, r7
 8004c60:	600f      	str	r7, [r1, #0]
 8004c62:	608b      	str	r3, [r1, #8]
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	ddeb      	ble.n	8004c40 <__sflush_r+0xac>
 8004c68:	4633      	mov	r3, r6
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	6a21      	ldr	r1, [r4, #32]
 8004c70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c74:	47e0      	blx	ip
 8004c76:	2800      	cmp	r0, #0
 8004c78:	dc07      	bgt.n	8004c8a <__sflush_r+0xf6>
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8a:	4407      	add	r7, r0
 8004c8c:	1a36      	subs	r6, r6, r0
 8004c8e:	e7e9      	b.n	8004c64 <__sflush_r+0xd0>
 8004c90:	dfbffffe 	.word	0xdfbffffe

08004c94 <_fflush_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	4605      	mov	r5, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	b913      	cbnz	r3, 8004ca4 <_fflush_r+0x10>
 8004c9e:	2500      	movs	r5, #0
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	b118      	cbz	r0, 8004cae <_fflush_r+0x1a>
 8004ca6:	6a03      	ldr	r3, [r0, #32]
 8004ca8:	b90b      	cbnz	r3, 8004cae <_fflush_r+0x1a>
 8004caa:	f7ff fd5b 	bl	8004764 <__sinit>
 8004cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f3      	beq.n	8004c9e <_fflush_r+0xa>
 8004cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cb8:	07d0      	lsls	r0, r2, #31
 8004cba:	d404      	bmi.n	8004cc6 <_fflush_r+0x32>
 8004cbc:	0599      	lsls	r1, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_fflush_r+0x32>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cc2:	f7ff fe6c 	bl	800499e <__retarget_lock_acquire_recursive>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	4621      	mov	r1, r4
 8004cca:	f7ff ff63 	bl	8004b94 <__sflush_r>
 8004cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	07da      	lsls	r2, r3, #31
 8004cd4:	d4e4      	bmi.n	8004ca0 <_fflush_r+0xc>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	059b      	lsls	r3, r3, #22
 8004cda:	d4e1      	bmi.n	8004ca0 <_fflush_r+0xc>
 8004cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cde:	f7ff fe5f 	bl	80049a0 <__retarget_lock_release_recursive>
 8004ce2:	e7dd      	b.n	8004ca0 <_fflush_r+0xc>

08004ce4 <__malloc_lock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	@ (8004cec <__malloc_lock+0x8>)
 8004ce6:	f7ff be5a 	b.w	800499e <__retarget_lock_acquire_recursive>
 8004cea:	bf00      	nop
 8004cec:	20001670 	.word	0x20001670

08004cf0 <__malloc_unlock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	@ (8004cf8 <__malloc_unlock+0x8>)
 8004cf2:	f7ff be55 	b.w	80049a0 <__retarget_lock_release_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	20001670 	.word	0x20001670

08004cfc <__sread>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	460c      	mov	r4, r1
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	f000 f978 	bl	8004ff8 <_read_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	bfab      	itete	ge
 8004d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d10:	181b      	addge	r3, r3, r0
 8004d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d16:	bfac      	ite	ge
 8004d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d1a:	81a3      	strhlt	r3, [r4, #12]
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <__swrite>:
 8004d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d22:	461f      	mov	r7, r3
 8004d24:	898b      	ldrh	r3, [r1, #12]
 8004d26:	4605      	mov	r5, r0
 8004d28:	05db      	lsls	r3, r3, #23
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	d505      	bpl.n	8004d3c <__swrite+0x1e>
 8004d30:	2302      	movs	r3, #2
 8004d32:	2200      	movs	r2, #0
 8004d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d38:	f000 f94c 	bl	8004fd4 <_lseek_r>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	4632      	mov	r2, r6
 8004d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d44:	81a3      	strh	r3, [r4, #12]
 8004d46:	4628      	mov	r0, r5
 8004d48:	463b      	mov	r3, r7
 8004d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	f000 b973 	b.w	800503c <_write_r>

08004d56 <__sseek>:
 8004d56:	b510      	push	{r4, lr}
 8004d58:	460c      	mov	r4, r1
 8004d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5e:	f000 f939 	bl	8004fd4 <_lseek_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	bf15      	itete	ne
 8004d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d72:	81a3      	strheq	r3, [r4, #12]
 8004d74:	bf18      	it	ne
 8004d76:	81a3      	strhne	r3, [r4, #12]
 8004d78:	bd10      	pop	{r4, pc}

08004d7a <__sclose>:
 8004d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7e:	f000 b8f7 	b.w	8004f70 <_close_r>

08004d82 <__swbuf_r>:
 8004d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d84:	460e      	mov	r6, r1
 8004d86:	4614      	mov	r4, r2
 8004d88:	4605      	mov	r5, r0
 8004d8a:	b118      	cbz	r0, 8004d94 <__swbuf_r+0x12>
 8004d8c:	6a03      	ldr	r3, [r0, #32]
 8004d8e:	b90b      	cbnz	r3, 8004d94 <__swbuf_r+0x12>
 8004d90:	f7ff fce8 	bl	8004764 <__sinit>
 8004d94:	69a3      	ldr	r3, [r4, #24]
 8004d96:	60a3      	str	r3, [r4, #8]
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	071a      	lsls	r2, r3, #28
 8004d9c:	d501      	bpl.n	8004da2 <__swbuf_r+0x20>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	b943      	cbnz	r3, 8004db4 <__swbuf_r+0x32>
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f82b 	bl	8004e00 <__swsetup_r>
 8004daa:	b118      	cbz	r0, 8004db4 <__swbuf_r+0x32>
 8004dac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004db0:	4638      	mov	r0, r7
 8004db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	6922      	ldr	r2, [r4, #16]
 8004db8:	b2f6      	uxtb	r6, r6
 8004dba:	1a98      	subs	r0, r3, r2
 8004dbc:	6963      	ldr	r3, [r4, #20]
 8004dbe:	4637      	mov	r7, r6
 8004dc0:	4283      	cmp	r3, r0
 8004dc2:	dc05      	bgt.n	8004dd0 <__swbuf_r+0x4e>
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f7ff ff64 	bl	8004c94 <_fflush_r>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d1ed      	bne.n	8004dac <__swbuf_r+0x2a>
 8004dd0:	68a3      	ldr	r3, [r4, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60a3      	str	r3, [r4, #8]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	701e      	strb	r6, [r3, #0]
 8004dde:	6962      	ldr	r2, [r4, #20]
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d004      	beq.n	8004df0 <__swbuf_r+0x6e>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	07db      	lsls	r3, r3, #31
 8004dea:	d5e1      	bpl.n	8004db0 <__swbuf_r+0x2e>
 8004dec:	2e0a      	cmp	r6, #10
 8004dee:	d1df      	bne.n	8004db0 <__swbuf_r+0x2e>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f7ff ff4e 	bl	8004c94 <_fflush_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0d9      	beq.n	8004db0 <__swbuf_r+0x2e>
 8004dfc:	e7d6      	b.n	8004dac <__swbuf_r+0x2a>
	...

08004e00 <__swsetup_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4b29      	ldr	r3, [pc, #164]	@ (8004ea8 <__swsetup_r+0xa8>)
 8004e04:	4605      	mov	r5, r0
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	460c      	mov	r4, r1
 8004e0a:	b118      	cbz	r0, 8004e14 <__swsetup_r+0x14>
 8004e0c:	6a03      	ldr	r3, [r0, #32]
 8004e0e:	b90b      	cbnz	r3, 8004e14 <__swsetup_r+0x14>
 8004e10:	f7ff fca8 	bl	8004764 <__sinit>
 8004e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e18:	0719      	lsls	r1, r3, #28
 8004e1a:	d422      	bmi.n	8004e62 <__swsetup_r+0x62>
 8004e1c:	06da      	lsls	r2, r3, #27
 8004e1e:	d407      	bmi.n	8004e30 <__swsetup_r+0x30>
 8004e20:	2209      	movs	r2, #9
 8004e22:	602a      	str	r2, [r5, #0]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	e033      	b.n	8004e98 <__swsetup_r+0x98>
 8004e30:	0758      	lsls	r0, r3, #29
 8004e32:	d512      	bpl.n	8004e5a <__swsetup_r+0x5a>
 8004e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e36:	b141      	cbz	r1, 8004e4a <__swsetup_r+0x4a>
 8004e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d002      	beq.n	8004e46 <__swsetup_r+0x46>
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fdbd 	bl	80049c0 <_free_r>
 8004e46:	2300      	movs	r3, #0
 8004e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e50:	81a3      	strh	r3, [r4, #12]
 8004e52:	2300      	movs	r3, #0
 8004e54:	6063      	str	r3, [r4, #4]
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0308 	orr.w	r3, r3, #8
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	b94b      	cbnz	r3, 8004e7a <__swsetup_r+0x7a>
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e70:	d003      	beq.n	8004e7a <__swsetup_r+0x7a>
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 f83e 	bl	8004ef6 <__smakebuf_r>
 8004e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7e:	f013 0201 	ands.w	r2, r3, #1
 8004e82:	d00a      	beq.n	8004e9a <__swsetup_r+0x9a>
 8004e84:	2200      	movs	r2, #0
 8004e86:	60a2      	str	r2, [r4, #8]
 8004e88:	6962      	ldr	r2, [r4, #20]
 8004e8a:	4252      	negs	r2, r2
 8004e8c:	61a2      	str	r2, [r4, #24]
 8004e8e:	6922      	ldr	r2, [r4, #16]
 8004e90:	b942      	cbnz	r2, 8004ea4 <__swsetup_r+0xa4>
 8004e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e96:	d1c5      	bne.n	8004e24 <__swsetup_r+0x24>
 8004e98:	bd38      	pop	{r3, r4, r5, pc}
 8004e9a:	0799      	lsls	r1, r3, #30
 8004e9c:	bf58      	it	pl
 8004e9e:	6962      	ldrpl	r2, [r4, #20]
 8004ea0:	60a2      	str	r2, [r4, #8]
 8004ea2:	e7f4      	b.n	8004e8e <__swsetup_r+0x8e>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e7f7      	b.n	8004e98 <__swsetup_r+0x98>
 8004ea8:	2000001c 	.word	0x2000001c

08004eac <__swhatbuf_r>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	4615      	mov	r5, r2
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	461e      	mov	r6, r3
 8004eba:	b096      	sub	sp, #88	@ 0x58
 8004ebc:	da0c      	bge.n	8004ed8 <__swhatbuf_r+0x2c>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ec6:	bf14      	ite	ne
 8004ec8:	2340      	movne	r3, #64	@ 0x40
 8004eca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ece:	2000      	movs	r0, #0
 8004ed0:	6031      	str	r1, [r6, #0]
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	b016      	add	sp, #88	@ 0x58
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	466a      	mov	r2, sp
 8004eda:	f000 f859 	bl	8004f90 <_fstat_r>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	dbed      	blt.n	8004ebe <__swhatbuf_r+0x12>
 8004ee2:	9901      	ldr	r1, [sp, #4]
 8004ee4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ee8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004eec:	4259      	negs	r1, r3
 8004eee:	4159      	adcs	r1, r3
 8004ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef4:	e7eb      	b.n	8004ece <__swhatbuf_r+0x22>

08004ef6 <__smakebuf_r>:
 8004ef6:	898b      	ldrh	r3, [r1, #12]
 8004ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004efa:	079d      	lsls	r5, r3, #30
 8004efc:	4606      	mov	r6, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	d507      	bpl.n	8004f12 <__smakebuf_r+0x1c>
 8004f02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	6123      	str	r3, [r4, #16]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	6163      	str	r3, [r4, #20]
 8004f0e:	b003      	add	sp, #12
 8004f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f12:	466a      	mov	r2, sp
 8004f14:	ab01      	add	r3, sp, #4
 8004f16:	f7ff ffc9 	bl	8004eac <__swhatbuf_r>
 8004f1a:	9f00      	ldr	r7, [sp, #0]
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	4639      	mov	r1, r7
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff fdb7 	bl	8004a94 <_malloc_r>
 8004f26:	b948      	cbnz	r0, 8004f3c <__smakebuf_r+0x46>
 8004f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d4ee      	bmi.n	8004f0e <__smakebuf_r+0x18>
 8004f30:	f023 0303 	bic.w	r3, r3, #3
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	e7e2      	b.n	8004f02 <__smakebuf_r+0xc>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	9b01      	ldr	r3, [sp, #4]
 8004f4a:	6020      	str	r0, [r4, #0]
 8004f4c:	b15b      	cbz	r3, 8004f66 <__smakebuf_r+0x70>
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f54:	f000 f82e 	bl	8004fb4 <_isatty_r>
 8004f58:	b128      	cbz	r0, 8004f66 <__smakebuf_r+0x70>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	f023 0303 	bic.w	r3, r3, #3
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	431d      	orrs	r5, r3
 8004f6a:	81a5      	strh	r5, [r4, #12]
 8004f6c:	e7cf      	b.n	8004f0e <__smakebuf_r+0x18>
	...

08004f70 <_close_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d05      	ldr	r5, [pc, #20]	@ (8004f8c <_close_r+0x1c>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fb fc93 	bl	80008a6 <_close>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_close_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_close_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	2000166c 	.word	0x2000166c

08004f90 <_fstat_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	2300      	movs	r3, #0
 8004f94:	4d06      	ldr	r5, [pc, #24]	@ (8004fb0 <_fstat_r+0x20>)
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	f7fb fc8d 	bl	80008bc <_fstat>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d102      	bne.n	8004fac <_fstat_r+0x1c>
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	b103      	cbz	r3, 8004fac <_fstat_r+0x1c>
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	bd38      	pop	{r3, r4, r5, pc}
 8004fae:	bf00      	nop
 8004fb0:	2000166c 	.word	0x2000166c

08004fb4 <_isatty_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4d05      	ldr	r5, [pc, #20]	@ (8004fd0 <_isatty_r+0x1c>)
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	f7fb fc8b 	bl	80008da <_isatty>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_isatty_r+0x1a>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_isatty_r+0x1a>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	2000166c 	.word	0x2000166c

08004fd4 <_lseek_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4d05      	ldr	r5, [pc, #20]	@ (8004ff4 <_lseek_r+0x20>)
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fb fc83 	bl	80008ee <_lseek>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_lseek_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_lseek_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	2000166c 	.word	0x2000166c

08004ff8 <_read_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	2200      	movs	r2, #0
 8005002:	4d05      	ldr	r5, [pc, #20]	@ (8005018 <_read_r+0x20>)
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fb fc30 	bl	800086c <_read>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_read_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_read_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	2000166c 	.word	0x2000166c

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	@ (8005038 <_sbrk_r+0x1c>)
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fb fc6e 	bl	8000908 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	2000166c 	.word	0x2000166c

0800503c <_write_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	2200      	movs	r2, #0
 8005046:	4d05      	ldr	r5, [pc, #20]	@ (800505c <_write_r+0x20>)
 8005048:	602a      	str	r2, [r5, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f7fb f898 	bl	8000180 <_write>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_write_r+0x1e>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_write_r+0x1e>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	2000166c 	.word	0x2000166c

08005060 <_init>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr

0800506c <_fini>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr
