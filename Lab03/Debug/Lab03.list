
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003a8  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  00002030  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  00002030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003a8  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080003b0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000030  080003e0  00002030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080003e0  0000204c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004a5  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b4  00000000  00000000  000024fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  000027b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000063  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ccf  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c37  00000000  00000000  00004582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007868  00000000  00000000  000051b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ca21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000160  00000000  00000000  0000ca64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0000cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	08000390 	.word	0x08000390

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	08000390 	.word	0x08000390

08000170 <main>:
void USER_RCC_ClockEnable( void );
void USER_GPIO_Init( void );

/* Superloop structure */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	/* Declarations and Initializations */
	USER_RCC_ClockEnable( );
 8000176:	f000 f81b 	bl	80001b0 <USER_RCC_ClockEnable>
	USER_GPIO_Init( );
 800017a:	f000 f829 	bl	80001d0 <USER_GPIO_Init>
	USER_USART1_Init( );
 800017e:	f000 f84b 	bl	8000218 <USER_USART1_Init>

    	/* Repetitive block */
	for(;;){
		USER_USART1_Transmit( msg, sizeof( msg ));
 8000182:	2130      	movs	r1, #48	@ 0x30
 8000184:	4808      	ldr	r0, [pc, #32]	@ (80001a8 <main+0x38>)
 8000186:	f000 f871 	bl	800026c <USER_USART1_Transmit>
		uint8_t val = USER_USART1_Read_8bit();
 800018a:	f000 f8a1 	bl	80002d0 <USER_USART1_Read_8bit>
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
		if (val == 't'){
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2b74      	cmp	r3, #116	@ 0x74
 8000196:	d1f4      	bne.n	8000182 <main+0x12>
			GPIOA->ODR ^= (0x1UL << 5U);
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <main+0x3c>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a03      	ldr	r2, [pc, #12]	@ (80001ac <main+0x3c>)
 800019e:	f083 0320 	eor.w	r3, r3, #32
 80001a2:	60d3      	str	r3, [r2, #12]
	for(;;){
 80001a4:	e7ed      	b.n	8000182 <main+0x12>
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	40010800 	.word	0x40010800

080001b0 <USER_RCC_ClockEnable>:
		}
	}
}

void USER_RCC_ClockEnable( void ){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|=	 ( 0x1UL <<  2U )//	IO port A clock enable
 80001b4:	4b05      	ldr	r3, [pc, #20]	@ (80001cc <USER_RCC_ClockEnable+0x1c>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a04      	ldr	r2, [pc, #16]	@ (80001cc <USER_RCC_ClockEnable+0x1c>)
 80001ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6193      	str	r3, [r2, #24]
			|	 ( 0x1UL << 14U );//	USART 1 clock enable
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000

080001d0 <USER_GPIO_Init>:


void USER_GPIO_Init( void ){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRH	&=	~( 0x1UL <<  6U )
 80001d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001da:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80001de:	6053      	str	r3, [r2, #4]
			&	~( 0x2UL <<  4U );
	GPIOA->CRH	|=	 ( 0x2UL <<  6U )
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001e6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80001ea:	6053      	str	r3, [r2, #4]
			|	 ( 0x1UL <<  4U );

	// GPIOx_BSRR modified to reset pin5 of port A (LD2 is connected to PA5)
	GPIOA->BSRR	=	( 0x1UL << 21U );//	immediate value
 80001ec:	4b09      	ldr	r3, [pc, #36]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80001f2:	611a      	str	r2, [r3, #16]

	// GPIOx_CRL modified to configure pin5 as output
	GPIOA->CRL	=	GPIOA->CRL//		GPIOx_CRL actual value
 80001f4:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <USER_GPIO_Init+0x44>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <USER_GPIO_Init+0x44>)
				&//			to clear
				~( 0x3UL << 22U )//	(mask) CNF5[1:0] bits
				&//			to clear
 80001fa:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
	GPIOA->CRL	=	GPIOA->CRL//		GPIOx_CRL actual value
 80001fe:	6013      	str	r3, [r2, #0]
				~( 0x2UL << 20U );//	(mask) MODE5_1 bit

	// GPIOx_CRL modified to select pin5 max speed of 10MHz
	GPIOA->CRL	=	GPIOA->CRL//		GPIOx_CRL actual value
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <USER_GPIO_Init+0x44>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a03      	ldr	r2, [pc, #12]	@ (8000214 <USER_GPIO_Init+0x44>)
				|//			to set
 8000206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	GPIOA->CRL	=	GPIOA->CRL//		GPIOx_CRL actual value
 800020a:	6013      	str	r3, [r2, #0]
				( 0x1UL << 20U );//	(mask) MODE5_0 bit

}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40010800 	.word	0x40010800

08000218 <USER_USART1_Init>:
		USART1 -> DR = *ptr++;
	}
	return len;
}

void USER_USART1_Init( void ){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <USER_USART1_Init+0x50>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <USER_USART1_Init+0x50>)
 8000222:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000226:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 8000228:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <USER_USART1_Init+0x50>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <USER_USART1_Init+0x50>)
 800022e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000232:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <USER_USART1_Init+0x50>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <USER_USART1_Init+0x50>)
 800023a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800023e:	6113      	str	r3, [r2, #16]
	USART1->BRR	 =	 USARTDIV;//		Step 5 Desired baud rate
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <USER_USART1_Init+0x50>)
 8000242:	2245      	movs	r2, #69	@ 0x45
 8000244:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <USER_USART1_Init+0x50>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a07      	ldr	r2, [pc, #28]	@ (8000268 <USER_USART1_Init+0x50>)
 800024c:	f043 0308 	orr.w	r3, r3, #8
 8000250:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 8000252:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <USER_USART1_Init+0x50>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <USER_USART1_Init+0x50>)
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	60d3      	str	r3, [r2, #12]
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40013800 	.word	0x40013800

0800026c <USER_USART1_Transmit>:

void USER_USART1_Transmit( uint8_t *pData, uint16_t size ){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	for( int i = 0; i < size; i++ ){
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e009      	b.n	8000292 <USER_USART1_Transmit+0x26>
		USER_USART1_Send_8bit( *pData++ );
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	607a      	str	r2, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f80c 	bl	80002a4 <USER_USART1_Send_8bit>
	for( int i = 0; i < size; i++ ){
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	887b      	ldrh	r3, [r7, #2]
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	429a      	cmp	r2, r3
 8000298:	dbf1      	blt.n	800027e <USER_USART1_Transmit+0x12>
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <USER_USART1_Send_8bit>:
//	for( int i = 0; i < size; i++ ){
//		USER_USART1_Read_8bit( *pData++ );
//	}
//}

static void USER_USART1_Send_8bit( uint8_t Data ){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	while(!( USART1->SR & USART_SR_TXE ));//	wait until next data can be written
 80002ae:	bf00      	nop
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <USER_USART1_Send_8bit+0x28>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <USER_USART1_Send_8bit+0xc>
	USART1->DR = Data;//				Step 7 Data to send
 80002bc:	4a03      	ldr	r2, [pc, #12]	@ (80002cc <USER_USART1_Send_8bit+0x28>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	6053      	str	r3, [r2, #4]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40013800 	.word	0x40013800

080002d0 <USER_USART1_Read_8bit>:

uint8_t USER_USART1_Read_8bit(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	while( !(USART1->SR & USART_SR_RNXE) );
 80002d4:	bf00      	nop
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <USER_USART1_Read_8bit+0x20>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <USER_USART1_Read_8bit+0x6>
	return USART1->DR;
 80002e2:	4b03      	ldr	r3, [pc, #12]	@ (80002f0 <USER_USART1_Read_8bit+0x20>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40013800 	.word	0x40013800

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	@ (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	@ (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	@ (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	@ (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff23 	bl	8000170 <main>

0800032a <LoopForever>:

LoopForever:
  b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000340:	2000004c 	.word	0x2000004c

08000344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC1_2_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	2600      	movs	r6, #0
 800034c:	4d0c      	ldr	r5, [pc, #48]	@ (8000380 <__libc_init_array+0x38>)
 800034e:	4c0d      	ldr	r4, [pc, #52]	@ (8000384 <__libc_init_array+0x3c>)
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	f000 f81a 	bl	8000390 <_init>
 800035c:	2600      	movs	r6, #0
 800035e:	4d0a      	ldr	r5, [pc, #40]	@ (8000388 <__libc_init_array+0x40>)
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <__libc_init_array+0x44>)
 8000362:	1b64      	subs	r4, r4, r5
 8000364:	10a4      	asrs	r4, r4, #2
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	f855 3b04 	ldr.w	r3, [r5], #4
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
